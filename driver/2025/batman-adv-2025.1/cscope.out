cscope 15 $HOME/Github/avs-ns/driver/batman-adv-2025.1               0001023547
	@compat-autoconf.h

2 #unde‡
CONFIG_BATMAN_ADV_BATMAN_V


3 #unde‡
__íabÀd_CONFIG_BATMAN_ADV_BATMAN_V


4 #unde‡
__íabÀd_CONFIG_BATMAN_ADV_BATMAN_V_MODULE


5 
	#CONFIG_BATMAN_ADV_BATMAN_V
 1

	)

6 
	#__íabÀd_CONFIG_BATMAN_ADV_BATMAN_V
 1

	)

7 
	#__íabÀd_CONFIG_BATMAN_ADV_BATMAN_V_MODULE
 0

	)

8 #unde‡
CONFIG_BATMAN_ADV_BLA


9 #unde‡
__íabÀd_CONFIG_BATMAN_ADV_BLA


10 #unde‡
__íabÀd_CONFIG_BATMAN_ADV_BLA_MODULE


11 
	#CONFIG_BATMAN_ADV_BLA
 1

	)

12 
	#__íabÀd_CONFIG_BATMAN_ADV_BLA
 1

	)

13 
	#__íabÀd_CONFIG_BATMAN_ADV_BLA_MODULE
 0

	)

14 #unde‡
CONFIG_BATMAN_ADV_DAT


15 #unde‡
__íabÀd_CONFIG_BATMAN_ADV_DAT


16 #unde‡
__íabÀd_CONFIG_BATMAN_ADV_DAT_MODULE


17 
	#CONFIG_BATMAN_ADV_DAT
 1

	)

18 
	#__íabÀd_CONFIG_BATMAN_ADV_DAT
 1

	)

19 
	#__íabÀd_CONFIG_BATMAN_ADV_DAT_MODULE
 0

	)

20 #unde‡
CONFIG_BATMAN_ADV_DEBUG


21 #unde‡
__íabÀd_CONFIG_BATMAN_ADV_DEBUG


22 #unde‡
__íabÀd_CONFIG_BATMAN_ADV_DEBUG_MODULE


23 
	#CONFIG_BATMAN_ADV_DEBUG
 1

	)

24 
	#__íabÀd_CONFIG_BATMAN_ADV_DEBUG
 1

	)

25 
	#__íabÀd_CONFIG_BATMAN_ADV_DEBUG_MODULE
 0

	)

26 #unde‡
CONFIG_BATMAN_ADV_MCAST


27 #unde‡
__íabÀd_CONFIG_BATMAN_ADV_MCAST


28 #unde‡
__íabÀd_CONFIG_BATMAN_ADV_MCAST_MODULE


29 
	#CONFIG_BATMAN_ADV_MCAST
 1

	)

30 
	#__íabÀd_CONFIG_BATMAN_ADV_MCAST
 1

	)

31 
	#__íabÀd_CONFIG_BATMAN_ADV_MCAST_MODULE
 0

	)

32 #unde‡
CONFIG_BATMAN_ADV_NC


33 #unde‡
__íabÀd_CONFIG_BATMAN_ADV_NC


34 #unde‡
__íabÀd_CONFIG_BATMAN_ADV_NC_MODULE


35 
	#__íabÀd_CONFIG_BATMAN_ADV_NC
 0

	)

36 
	#__íabÀd_CONFIG_BATMAN_ADV_NC_MODULE
 0

	)

37 #unde‡
CONFIG_BATMAN_ADV_TRACING


38 #unde‡
__íabÀd_CONFIG_BATMAN_ADV_TRACING


39 #unde‡
__íabÀd_CONFIG_BATMAN_ADV_TRACING_MODULE


40 
	#__íabÀd_CONFIG_BATMAN_ADV_TRACING
 0

	)

41 
	#__íabÀd_CONFIG_BATMAN_ADV_TRACING_MODULE
 0

	)

	@compat-include/linux/array_size.h

10 #i‚de‡
_NET_BATMAN_ADV_COMPAT_LINUX_ARRAY_SIZE_H_


11 
	#_NET_BATMAN_ADV_COMPAT_LINUX_ARRAY_SIZE_H_


	)

13 
	~<löux/vîsi⁄.h
>

14 #i‡
LINUX_VERSION_IS_GEQ
(6, 7, 0)

15 #ö˛ude_√xà<
löux
/
¨øy_size
.
h
>

17 
	~<löux/kî√l.h
>

	@compat-include/linux/average.h

10 #i‚de‡
_NET_BATMAN_ADV_COMPAT_LINUX_AVERAGE_H


11 
	#_NET_BATMAN_ADV_COMPAT_LINUX_AVERAGE_H


	)

13 #ö˛ude_√xà<
löux
/
avîage
.
h
>

15 
	~<löux/bug.h
>

16 
	~<löux/compûî.h
>

17 
	~<löux/log2.h
>

19 #unde‡
DECLARE_EWMA


40 
	#DECLARE_EWMA
(
«me
, 
_¥ecisi⁄
, 
_weight_r˝
) \

41 
ewma_
##
«me
 { \

42 
öã∫Æ
; \

44 
ölöe
 
ewma_
##
«me
##
	`_öô
(ewma_##«mê*
e
) \

46 
	`BUILD_BUG_ON
(!
	`__buûtö_c⁄°™t_p
(
_¥ecisi⁄
)); \

47 
	`BUILD_BUG_ON
(!
	`__buûtö_c⁄°™t_p
(
_weight_r˝
)); \

52 
	`BUILD_BUG_ON
((
_¥ecisi⁄
) > 30); \

53 
	`BUILD_BUG_ON_NOT_POWER_OF_2
(
_weight_r˝
); \

54 
e
->
öã∫Æ
 = 0; \

56 
ölöe
 \

57 
ewma_
##
«me
##
	`_ªad
(ewma_##«mê*
e
) \

59 
	`BUILD_BUG_ON
(!
	`__buûtö_c⁄°™t_p
(
_¥ecisi⁄
)); \

60 
	`BUILD_BUG_ON
(!
	`__buûtö_c⁄°™t_p
(
_weight_r˝
)); \

61 
	`BUILD_BUG_ON
((
_¥ecisi⁄
) > 30); \

62 
	`BUILD_BUG_ON_NOT_POWER_OF_2
(
_weight_r˝
); \

63  
e
->
öã∫Æ
 >> (
_¥ecisi⁄
); \

65 
ölöe
 
ewma_
##
«me
##
	`_add
(ewma_##«mê*
e
, \

66 
vÆ
) \

68 
öã∫Æ
 = 
	`READ_ONCE
(
e
->internal); \

69 
weight_r˝
 = 
	`ûog2
(
_weight_r˝
); \

70 
¥ecisi⁄
 = 
_¥ecisi⁄
; \

72 
	`BUILD_BUG_ON
(!
	`__buûtö_c⁄°™t_p
(
_¥ecisi⁄
)); \

73 
	`BUILD_BUG_ON
(!
	`__buûtö_c⁄°™t_p
(
_weight_r˝
)); \

74 
	`BUILD_BUG_ON
((
_¥ecisi⁄
) > 30); \

75 
	`BUILD_BUG_ON_NOT_POWER_OF_2
(
_weight_r˝
); \

77 
	`WRITE_ONCE
(
e
->
öã∫Æ
, internal ? \

78 (((
öã∫Æ
 << 
weight_r˝
) - internal) + \

79 (
vÆ
 << 
¥ecisi⁄
)Ë>> 
weight_r˝
 : \

80 (
vÆ
 << 
¥ecisi⁄
)); \

81 }

	)

	@compat-include/linux/compiler_types.h

10 #i‚de‡
_NET_BATMAN_ADV_COMPAT_LINUX_COMPILER_TYPES_H_


11 
	#_NET_BATMAN_ADV_COMPAT_LINUX_COMPILER_TYPES_H_


	)

13 
	~<löux/vîsi⁄.h
>

14 #ö˛ude_√xà<
löux
/
compûî_ty≥s
.
h
>

16 #i‡
LINUX_VERSION_IS_LESS
(6, 10, 0)

18 
	#__cou¡ed_by_be
(
membî
)

	)

	@compat-include/linux/container_of.h

10 #i‚de‡
_NET_BATMAN_ADV_COMPAT_LINUX_CONTAINER_OF_H_


11 
	#_NET_BATMAN_ADV_COMPAT_LINUX_CONTAINER_OF_H_


	)

13 
	~<löux/vîsi⁄.h
>

14 #i‡
LINUX_VERSION_IS_GEQ
(5, 16, 0)

15 #ö˛ude_√xà<
löux
/
c⁄èöî_of
.
h
>

17 
	~<löux/kî√l.h
>

	@compat-include/linux/etherdevice.h

10 #i‚de‡
_NET_BATMAN_ADV_COMPAT_LINUX_ETHERDEVICE_H_


11 
	#_NET_BATMAN_ADV_COMPAT_LINUX_ETHERDEVICE_H_


	)

13 
	~<löux/vîsi⁄.h
>

14 #ö˛ude_√xà<
löux
/
ëhîdevi˚
.
h
>

16 #i‡
LINUX_VERSION_IS_LESS
(5, 15, 0)

18 
ölöe
 
	$b©adv_ëh_hw_addr_£t
(
√t_devi˚
 *
dev
,

19 c⁄° 
u8
 *
addr
)

21 
	`ëhî_addr_c›y
(
dev
->
dev_addr
, 
addr
);

22 
	}
}

23 
	#ëh_hw_addr_£t
 
b©adv_ëh_hw_addr_£t


	)

	@compat-include/linux/if_bridge.h

10 #i‚de‡
_NET_BATMAN_ADV_COMPAT_LINUX_IF_BRIDGE_H_


11 
	#_NET_BATMAN_ADV_COMPAT_LINUX_IF_BRIDGE_H_


	)

13 
	~<löux/vîsi⁄.h
>

14 #ö˛ude_√xà<
löux
/
if_bridge
.
h
>

16 #i‡
LINUX_VERSION_IS_LESS
(5, 10, 0)

18 
	sb©adv_br_ù
 {

20 
__be32
 
	mù4
;

21 #i‡
IS_ENABLED
(
CONFIG_IPV6
)

22 
ö6_addr
 
	mù6
;

24 } 
	md°
;

25 
__be16
 
	m¥Ÿo
;

26 
__u16
 
	mvid
;

29 
	sb©adv_br_ù_li°
 {

30 
li°_hód
 
	mli°
;

31 
b©adv_br_ù
 
	maddr
;

38 
ölöe
 
	$__b©adv_br_ù_li°_check
()

40 
	`BUILD_BUG_ON
((
b©adv_br_ù_li°
Ë!(
br_ù_li°
));

41 
	`BUILD_BUG_ON
(
	`off£tof
(
b©adv_br_ù_li°
, 
li°
Ë!off£tof(
br_ù_li°
,Üist));

42 
	`BUILD_BUG_ON
(
	`off£tof
(
b©adv_br_ù_li°
, 
addr
Ë!off£tof(
br_ù_li°
,áddr));

44 
	`BUILD_BUG_ON
((
b©adv_br_ù
Ë!(
br_ù
));

45 
	`BUILD_BUG_ON
(
	`off£tof
(
b©adv_br_ù
, 
d°
.
ù4
Ë!off£tof(
br_ù
, 
u
.ip4));

46 
	`BUILD_BUG_ON
(
	`off£tof
(
b©adv_br_ù
, 
d°
.
ù6
Ë!off£tof(
br_ù
, 
u
.ip6));

47 
	`BUILD_BUG_ON
(
	`off£tof
(
b©adv_br_ù
, 
¥Ÿo
Ë!off£tof(
br_ù
,Öroto));

48 
	`BUILD_BUG_ON
(
	`off£tof
(
b©adv_br_ù
, 
vid
Ë!off£tof(
br_ù
, vid));

49 
	}
}

51 
	#br_ù
 
b©adv_br_ù


	)

52 
	#br_ù_li°
 
b©adv_br_ù_li°


	)

56 #i‡
LINUX_VERSION_IS_LESS
(5, 14, 0)

58 
	~<√t/addrc⁄f.h
>

60 #i‡
IS_ENABLED
(
CONFIG_IPV6
)

61 
ölöe
 
boﬁ


62 
	$br_mu…iˇ°_has_rouãr_adja˚¡
(
√t_devi˚
 *
dev
, 
¥Ÿo
)

64 
li°_hód
 
bridge_mˇ°_li°
 = 
	`LIST_HEAD_INIT
(bridge_mcast_list);

65 
br_ù_li°
 *
br_ù_íåy
, *
tmp
;

66 
ªt
;

68 i‡(
¥Ÿo
 !
ETH_P_IPV6
)

69  
åue
;

71 
ªt
 = 
	`br_mu…iˇ°_li°_adja˚¡
(
dev
, &
bridge_mˇ°_li°
);

72 i‡(
ªt
 < 0)

73  
åue
;

75 
ªt
 = 
Ál£
;

77 
	`li°_f‹_óch_íåy_ß„
(
br_ù_íåy
, 
tmp
, &
bridge_mˇ°_li°
, 
li°
) {

78 i‡(
br_ù_íåy
->
addr
.
¥Ÿo
 =
	`ht⁄s
(
ETH_P_IPV6
) &&

79 
	`ùv6_addr_is_Œ_Æl_rouãrs
(&
br_ù_íåy
->
addr
.
d°
.
ù6
))

80 
ªt
 = 
åue
;

82 
	`li°_dñ
(&
br_ù_íåy
->
li°
);

83 
	`k‰ì
(
br_ù_íåy
);

86  
ªt
;

87 
	}
}

89 
ölöe
 
boﬁ


90 
	$br_mu…iˇ°_has_rouãr_adja˚¡
(
√t_devi˚
 *
dev
, 
¥Ÿo
)

92  
åue
;

93 
	}
}

	@compat-include/linux/if_vlan.h

10 #i‚de‡
_NET_BATMAN_ADV_COMPAT_LINUX_IF_VLAN_H_


11 
	#_NET_BATMAN_ADV_COMPAT_LINUX_IF_VLAN_H_


	)

13 
	~<löux/vîsi⁄.h
>

14 #ö˛ude_√xà<
löux
/
if_vœn
.
h
>

16 #i‡
LINUX_VERSION_IS_LESS
(6, 4, 0) && \

17 !(
LINUX_VERSION_IS_GEQ
(5, 10, 205Ë&& 
LINUX_VERSION_IS_LESS
(5, 11, 0)) && \

18 !(
LINUX_VERSION_IS_GEQ
(5, 15, 144Ë&& 
LINUX_VERSION_IS_LESS
(5, 16, 0)) && \

19 !(
LINUX_VERSION_IS_GEQ
(6, 1, 69Ë&& 
	$LINUX_VERSION_IS_LESS
(6, 2, 0))

24 
ölöe
 
vœn_ëhhdr
 *
	$skb_vœn_ëh_hdr
(c⁄° 
sk_buff
 *
skb
)

26  (
vœn_ëhhdr
 *)
skb
->
d©a
;

27 
	}
}

	@compat-include/linux/kstrtox.h

10 #i‚de‡
_NET_BATMAN_ADV_COMPAT_LINUX_KSTRTOX_H_


11 
	#_NET_BATMAN_ADV_COMPAT_LINUX_KSTRTOX_H_


	)

13 
	~<löux/vîsi⁄.h
>

14 #i‡(
LINUX_VERSION_IS_GEQ
(5, 10, 185Ë&& 
LINUX_VERSION_IS_LESS
(5, 11, 0)) || \

15 
	$LINUX_VERSION_IS_GEQ
(5, 14, 0)

16 #ö˛ude_√xà<
löux
/
k°πox
.
h
>

18 
	~<löux/kî√l.h
>

	@compat-include/linux/minmax.h

10 #i‚de‡
_NET_BATMAN_ADV_COMPAT_LINUX_MINMAX_H_


11 
	#_NET_BATMAN_ADV_COMPAT_LINUX_MINMAX_H_


	)

13 
	~<löux/vîsi⁄.h
>

14 #i‡
LINUX_VERSION_IS_GEQ
(5, 10, 0)

15 #ö˛ude_√xà<
löux
/
mömax
.
h
>

17 
	~<löux/kî√l.h
>

	@compat-include/linux/netdevice.h

10 #i‚de‡
_NET_BATMAN_ADV_COMPAT_LINUX_NETDEVICE_H_


11 
	#_NET_BATMAN_ADV_COMPAT_LINUX_NETDEVICE_H_


	)

13 
	~<löux/vîsi⁄.h
>

14 #ö˛ude_√xà<
löux
/
√tdevi˚
.
h
>

16 #i‡
LINUX_VERSION_IS_LESS
(5, 15, 0)

18 
ölöe
 
	$b©adv_dev_put
(
√t_devi˚
 *
dev
)

20 i‡(!
dev
)

23 
	`dev_put
(
dev
);

24 
	}
}

25 
	#dev_put
 
b©adv_dev_put


	)

27 
ölöe
 
	$b©adv_dev_hﬁd
(
√t_devi˚
 *
dev
)

29 i‡(!
dev
)

32 
	`dev_hﬁd
(
dev
);

33 
	}
}

34 
	#dev_hﬁd
 
b©adv_dev_hﬁd


	)

38 #i‡
LINUX_VERSION_IS_LESS
(5, 17, 0)

40 °ru˘ {} 
	g√tdevi˚_åackî
;

42 
	#√tdev_hﬁd
(
__dev
, 
__åackî
, 
__gÂ
) \

43 
	`dev_hﬁd
(
__dev
)

	)

45 
	#√tdev_put
(
__dev
, 
__åackî
) \

46 
	`dev_put
(
__dev
)

	)

48 #ñi‡
LINUX_VERSION_IS_LESS
(6, 0, 0)

50 
	#√tdev_hﬁd
(
__dev
, 
__åackî
, 
__gÂ
) \

51 
	`dev_hﬁd_åack
(
__dev
, 
__åackî
, 
__gÂ
)

	)

53 
	#√tdev_put
(
__dev
, 
__åackî
) \

54 
	`dev_put_åack
(
__dev
, 
__åackî
)

	)

58 #i‡
LINUX_VERSION_IS_LESS
(5, 18, 0)

60 
ölöe
 
	$b©adv_√tif_rx
(
sk_buff
 *
skb
)

62 i‡(
	`ö_öãºu±
())

63  
	`√tif_rx
(
skb
);

65  
	`√tif_rx_ni
(
skb
);

66 
	}
}

67 
	#√tif_rx
 
b©adv_√tif_rx


	)

	@compat-include/linux/overflow.h

10 #i‚de‡
_NET_BATMAN_ADV_COMPAT_LINUX_OVERFLOW_H_


11 
	#_NET_BATMAN_ADV_COMPAT_LINUX_OVERFLOW_H_


	)

13 
	~<löux/vîsi⁄.h
>

14 #ö˛ude_√xà<
löux
/
ovîÊow
.
h
>

16 #i‡
LINUX_VERSION_IS_LESS
(5, 8, 0)

18 
ölöe
 
size_t
 
__mu°_check
 
	$b©adv_size_mul
(
size_t
 
f1
, size_à
f2
)

20 
size_t
 
byãs
;

22 i‡(
	`check_mul_ovîÊow
(
f1
, 
f2
, &
byãs
))

23  
SIZE_MAX
;

25  
byãs
;

26 
	}
}

28 #i‚de‡
Êex_¨øy_size


29 
	#Êex_¨øy_size
(
p
, 
membî
, 
cou¡
) \

30 
	`__buûtö_choo£_ex¥
(
	`__is_c⁄°ex¥
(
cou¡
), \

31 (
cou¡
Ë* (*(
p
)->
membî
Ë+ 
	`__mu°_be_¨øy
((p)->member), \

32 
	`b©adv_size_mul
(
cou¡
, (*(
p
)->
membî
Ë+ 
	`__mu°_be_¨øy
(’)->membî)))

	)

	@compat-include/linux/random.h

10 #i‚de‡
_NET_BATMAN_ADV_COMPAT_LINUX_RANDOM_H_


11 
	#_NET_BATMAN_ADV_COMPAT_LINUX_RANDOM_H_


	)

13 
	~<löux/vîsi⁄.h
>

14 #ö˛ude_√xà<
löux
/
øndom
.
h
>

17 #i‡
LINUX_VERSION_IS_LESS
(6, 2, 0)

19 
ölöe
 
u32
 
	$b©adv_gë_øndom_u32_bñow
(
u32
 
ï_ro
)

21  
	`¥™dom_u32_max
(
ï_ro
);

22 
	}
}

24 
	#gë_øndom_u32_bñow
 
b©adv_gë_øndom_u32_bñow


	)

	@compat-include/linux/rcupdate.h

10 #i‚de‡
_NET_BATMAN_ADV_COMPAT_LINUX_RCUPDATE_H_


11 
	#_NET_BATMAN_ADV_COMPAT_LINUX_RCUPDATE_H_


	)

13 
	~<löux/vîsi⁄.h
>

14 #ö˛ude_√xà<
löux
/
rcupd©e
.
h
>

16 #i‡
LINUX_VERSION_IS_LESS
(5, 5, 0)

18 #unde‡
rcu_ª∂a˚_poöãr


19 
	#rcu_ª∂a˚_poöãr
(
rcu_±r
, 
±r
, 
c
) \

21 
	`ty≥of
(
±r
Ë
__tmp
 = 
	`rcu_dîe„ªn˚_¥Ÿe˘ed
((
rcu_±r
), (
c
)); \

22 
	`rcu_assign_poöãr
((
rcu_±r
), (
±r
)); \

23 
__tmp
; \

24 })

	)

	@compat-include/linux/sprintf.h

10 #i‚de‡
_NET_BATMAN_ADV_COMPAT_LINUX_SPRINTF_H_


11 
	#_NET_BATMAN_ADV_COMPAT_LINUX_SPRINTF_H_


	)

13 
	~<löux/vîsi⁄.h
>

14 #i‡
LINUX_VERSION_IS_GEQ
(6, 6, 0)

15 #ö˛ude_√xà<
löux
/
•rötf
.
h
>

17 
	~<löux/kî√l.h
>

	@compat-include/linux/stdarg.h

10 #i‚de‡
_NET_BATMAN_ADV_COMPAT_LINUX_STDARG_H_


11 
	#_NET_BATMAN_ADV_COMPAT_LINUX_STDARG_H_


	)

13 
	~<löux/vîsi⁄.h
>

14 #i‡
LINUX_VERSION_IS_GEQ
(5, 15, 0)

15 #ö˛ude_√xà<
löux
/
°d¨g
.
h
>

17 
	~<°d¨g.h
>

	@compat-include/linux/string_choices.h

10 #i‚de‡
_NET_BATMAN_ADV_COMPAT_LINUX_STRING_CHOICES_H_


11 
	#_NET_BATMAN_ADV_COMPAT_LINUX_STRING_CHOICES_H_


	)

13 
	~<löux/vîsi⁄.h
>

14 #i‡
LINUX_VERSION_IS_GEQ
(6, 5, 0)

15 #ö˛ude_√xà<
löux
/
°rög_choi˚s
.
h
>

16 #ñi‡
LINUX_VERSION_IS_GEQ
(5, 18, 0)

17 
	~<löux/°rög_hñ≥rs.h
>

20 
ölöe
 c⁄° *
	$°r_yes_no
(
boﬁ
 
v
)

22  
v
 ? "yes" : "no";

23 
	}
}

25 
ölöe
 c⁄° *
	$°r_⁄_off
(
boﬁ
 
v
)

27  
v
 ? "on" : "off";

28 
	}
}

	@compat-include/linux/timer.h

10 #i‚de‡
_NET_BATMAN_ADV_COMPAT_LINUX_TIMER_H_


11 
	#_NET_BATMAN_ADV_COMPAT_LINUX_TIMER_H_


	)

13 
	~<löux/vîsi⁄.h
>

14 #ö˛ude_√xà<
löux
/
timî
.
h
>

16 #i‡
LINUX_VERSION_IS_LESS
(6, 2, 0)

18 
	#timî_dñëe_sync
(
_timî
Ë
	`dñ_timî_sync
(_timî)

	)

19 
	#timî_dñëe
(
_timî
Ë
	`dñ_timî
(_timî)

	)

	@compat-include/linux/tracepoint.h

10 #i‚de‡
_NET_BATMAN_ADV_COMPAT_LINUX_TRACEPOINT_H_


11 
	#_NET_BATMAN_ADV_COMPAT_LINUX_TRACEPOINT_H_


	)

13 
	~<löux/vîsi⁄.h
>

14 #ö˛ude_√xà<
löux
/
åa˚poöt
.
h
>

16 #i‡
LINUX_VERSION_IS_LESS
(6, 0, 0)

18 
	#__v°rög
(
ôem
, 
fmt
, 
≠
Ë
	`__dy«mic_¨øy
(, iãm, 256)

	)

19 
	#__assign_v°r
(
d°
, 
fmt
, 
va
) \

20 
	`WARN_ON_ONCE
(
	`v¢¥ötf
(
	`__gë_dy«mic_¨øy
(
d°
), 256, 
fmt
, *
va
Ë>256)

	)

	@compat-include/linux/unaligned.h

10 #i‚de‡
_NET_BATMAN_ADV_COMPAT_LINUX_UNALIGNED_H_


11 
	#_NET_BATMAN_ADV_COMPAT_LINUX_UNALIGNED_H_


	)

13 
	~<löux/vîsi⁄.h
>

14 #i‡
LINUX_VERSION_IS_GEQ
(6, 12, 0)

15 #ö˛ude_√xà<
löux
/
u«lig√d
.
h
>

17 
	~<asm/u«lig√d.h
>

	@compat-include/linux/version.h

10 #i‚de‡
_NET_BATMAN_ADV_COMPAT_LINUX_VERSION_H_


11 
	#_NET_BATMAN_ADV_COMPAT_LINUX_VERSION_H_


	)

13 #ö˛ude_√xà<
löux
/
vîsi⁄
.
h
>

15 
	#LINUX_VERSION_IS_LESS
(
a
, 
b
, 
c
) \

16 (
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(
a
, 
b
, 
c
))

	)

18 
	#LINUX_VERSION_IS_GEQ
(
a
, 
b
, 
c
) \

19 (
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(
a
, 
b
, 
c
))

	)

	@compat-include/net/addrconf.h

10 #i‚de‡
_NET_BATMAN_ADV_COMPAT_NET_ADDRCONF_H_


11 
	#_NET_BATMAN_ADV_COMPAT_NET_ADDRCONF_H_


	)

13 
	~<löux/vîsi⁄.h
>

14 #ö˛ude_√xà<
√t
/
addrc⁄f
.
h
>

16 #i‡
LINUX_VERSION_IS_LESS
(5, 13, 0)

18 
boﬁ
 
b©adv_mˇ°_mœ_is_du∂iˇã
(
u8
 *
mˇ°_addr
,

19 
hli°_hód
 *
mˇ°_li°
);

21 
ölöe
 

22 
	$com∑t_b©adv_mˇ°_mœ_meshif_gë_ùv6
(
√t_devi˚
 *
dev
,

23 
hli°_hód
 *
mˇ°_li°
,

24 
b©adv_mˇ°_mœ_Êags
 *
Êags
,

25 
u8
 *
mˇ°_addr
,

26 
b©adv_hw_addr
 *
√w
,

27 
öë6_dev
 *
ö6_dev
)

30 
ifmˇddr6
 *
pmc6
;

31 
ªt
 = 0;

33 i‡(
Êags
->
tvlv_Êags
 & 
BATADV_MCAST_WANT_ALL_IPV6
)

36 
	`rcu_ªad_lock
();

38 
ö6_dev
 = 
	`__ö6_dev_gë
(
dev
);

39 i‡(!
ö6_dev
) {

40 
	`rcu_ªad_u∆ock
();

44 
	`ªad_lock_bh
(&
ö6_dev
->
lock
);

45 
pmc6
 = 
ö6_dev
->
mc_li°
;Ömc6;Ömc6 =Ömc6->
√xt
) {

46 i‡(
	`IPV6_ADDR_MC_SCOPE
(&
pmc6
->
mˇ_addr
) <

47 
IPV6_ADDR_SCOPE_LINKLOCAL
)

50 i‡(
Êags
->
tvlv_Êags
 & 
BATADV_MCAST_WANT_ALL_UNSNOOPABLES
 &&

51 
	`ùv6_addr_is_Œ_Æl_nodes
(&
pmc6
->
mˇ_addr
))

54 i‡(!(
Êags
->
tvlv_Êags
 & 
BATADV_MCAST_WANT_NO_RTR6
) &&

55 
	`IPV6_ADDR_MC_SCOPE
(&
pmc6
->
mˇ_addr
) >

56 
IPV6_ADDR_SCOPE_LINKLOCAL
)

59 
	`ùv6_ëh_mc_m≠
(&
pmc6
->
mˇ_addr
, 
mˇ°_addr
);

61 i‡(
	`b©adv_mˇ°_mœ_is_du∂iˇã
(
mˇ°_addr
, 
mˇ°_li°
))

64 
√w
 = 
	`kmÆloc
((*√w), 
GFP_ATOMIC
);

65 i‡(!
√w
) {

66 
ªt
 = -
ENOMEM
;

70 
	`ëhî_addr_c›y
(
√w
->
addr
, 
mˇ°_addr
);

71 
	`hli°_add_hód
(&
√w
->
li°
, 
mˇ°_li°
);

72 
ªt
++;

74 
	`ªad_u∆ock_bh
(&
ö6_dev
->
lock
);

75 
	`rcu_ªad_u∆ock
();

77  
ªt
;

78 
	}
}

80 
	#ifmˇddr6
 \

81 
√t_devi˚
 *
‹ig_dev
 = 
dev
; \

82  
	`com∑t_b©adv_mˇ°_mœ_meshif_gë_ùv6
(
‹ig_dev
, \

83 
mˇ°_li°
, \

84 
Êags
, \

85 
mˇ°_addr
, \

86 
√w
 = 
NULL
, \

87 
ö6_dev
 = 
NULL
); \

89 
ölöe
 \

90 
	`__unu£d_b©adv_mˇ°_mœ_meshif_gë_ùv6
(
√t_devi˚
 *
dev
, \

91 
hli°_hód
 *
mˇ°_li°
, \

92 
b©adv_mˇ°_mœ_Êags
 *
Êags
) \

94 
b©adv_hw_addr
 *
√w
; \

95 
öë6_dev
 *
ö6_dev
; \

96 
u8
 
mˇ°_addr
[
ETH_ALEN
]; \

97 
ifmˇddr6


	)

	@compat-include/net/genetlink.h

10 #i‚de‡
_NET_BATMAN_ADV_COMPAT_NET_GENETLINK_H_


11 
	#_NET_BATMAN_ADV_COMPAT_NET_GENETLINK_H_


	)

13 
	~<löux/vîsi⁄.h
>

14 #ö˛ude_√xà<
√t
/
gíëlök
.
h
>

16 #i‡
LINUX_VERSION_IS_LESS
(5, 10, 0)

18 
	sb©adv_gíl_smÆl_›s
 {

19 (*
	mdoô
)(
sk_buff
 *
	mskb
,

20 
gíl_öfo
 *
	möfo
);

21 (*
	mdumpô
)(
sk_buff
 *
	mskb
,

22 
√éök_ˇŒback
 *
	mcb
);

23 (*
	md⁄e
)(
√éök_ˇŒback
 *
	mcb
);

24 
u8
 
	mcmd
;

25 
u8
 
	möã∫Æ_Êags
;

26 
u8
 
	mÊags
;

27 
u8
 
	mvÆid©e
;

30 
	sb©adv_gíl_Ámûy
 {

32 
gíl_Ámûy
 
	mÁmûy
;

37 
	mhdrsize
;

38 
	m«me
[
GENL_NAMSIZ
];

39 
	mvîsi⁄
;

40 
	mmax©å
;

41 c⁄° 
∆a_pﬁicy
 *
	mpﬁicy
;

42 
boﬁ
 
	m√äsok
;

43 (*
	m¥e_doô
)(c⁄° 
gíl_›s
 *
	m›s
, 
sk_buff
 *
	mskb
,

44 
gíl_öfo
 *
	möfo
);

45 (*
	mpo°_doô
)(c⁄° 
gíl_›s
 *
	m›s
, 
sk_buff
 *
	mskb
,

46 
gíl_öfo
 *
	möfo
);

47 c⁄° 
b©adv_gíl_smÆl_›s
 *
	msmÆl_›s
;

48 c⁄° 
gíl_mu…iˇ°_group
 *
	mmcgΩs
;

49 
	mn_smÆl_›s
;

50 
	mn_mcgΩs
;

51 
moduÀ
 *
	mmoduÀ
;

57 
gíl_›s
 *
	mc›y_›s
;

60 
ölöe
 
	$b©adv_gíl_ªgi°î_Ámûy
(
b©adv_gíl_Ámûy
 *
Ámûy
)

62 
gíl_›s
 *
›s
;

63 
i
;

65 
Ámûy
->Ámûy.
hdrsize
 = family->hdrsize;

66 
	`°∫˝y
(
Ámûy
->Ámûy.
«me
, family->name, (family->family.name));

67 
Ámûy
->Ámûy.
vîsi⁄
 = family->version;

68 
Ámûy
->Ámûy.
max©å
 = family->maxattr;

69 
Ámûy
->Ámûy.
√äsok
 = family->netnsok;

70 
Ámûy
->Ámûy.
¥e_doô
 = family->pre_doit;

71 
Ámûy
->Ámûy.
po°_doô
 = family->post_doit;

72 
Ámûy
->Ámûy.
mcgΩs
 = family->mcgrps;

73 
Ámûy
->Ámûy.
n_›s
 = famûy->
n_smÆl_›s
;

74 
Ámûy
->Ámûy.
n_mcgΩs
 = family->n_mcgrps;

75 
Ámûy
->Ámûy.
moduÀ
 = family->module;

77 
›s
 = 
	`kzÆloc
((*›sË* 
Ámûy
->
n_smÆl_›s
, 
GFP_KERNEL
);

78 i‡(!
›s
)

79  -
ENOMEM
;

81 
i
 = 0; i < 
Ámûy
->Ámûy.
n_›s
; i++) {

82 
›s
[
i
].
doô
 = 
Ámûy
->
smÆl_›s
[i].doit;

83 
›s
[
i
].
dumpô
 = 
Ámûy
->
smÆl_›s
[i].dumpit;

84 
›s
[
i
].
d⁄e
 = 
Ámûy
->
smÆl_›s
[i].done;

85 
›s
[
i
].
cmd
 = 
Ámûy
->
smÆl_›s
[i].cmd;

86 
›s
[
i
].
öã∫Æ_Êags
 = 
Ámûy
->
smÆl_›s
[i].internal_flags;

87 
›s
[
i
].
Êags
 = 
Ámûy
->
smÆl_›s
[i].flags;

88 
›s
[
i
].
vÆid©e
 = 
Ámûy
->
smÆl_›s
[i].validate;

91 
Ámûy
->Ámûy.
pﬁicy
 = family->policy;

93 
Ámûy
->Ámûy.
›s
 = ops;

94 
Ámûy
->
c›y_›s
 = 
›s
;

96  
	`gíl_ªgi°î_Ámûy
(&
Ámûy
->family);

97 
	}
}

99 
gíl_›s
 
	tb©adv_gíl_›s_ﬁd
;

101 
	#b©adv_¥e_doô
(
__x
, 
__y
, 
__z
) \

102 
	`b©adv_¥e_doô
(c⁄° 
b©adv_gíl_›s_ﬁd
 *
›s
, 
__y
, 
__z
)

	)

104 
	#b©adv_po°_doô
(
__x
, 
__y
, 
__z
) \

105 
	`b©adv_po°_doô
(c⁄° 
b©adv_gíl_›s_ﬁd
 *
›s
, 
__y
, 
__z
)

	)

107 
	#gíl_smÆl_›s
 
b©adv_gíl_smÆl_›s


	)

108 
	#gíl_Ámûy
 
b©adv_gíl_Ámûy


	)

110 
	#gíl_ªgi°î_Ámûy
(
Ámûy
) \

111 
	`b©adv_gíl_ªgi°î_Ámûy
((
Ámûy
))

	)

113 
ölöe
 

114 
	$b©adv_gíl_uƒegi°î_Ámûy
(
b©adv_gíl_Ámûy
 *
Ámûy
)

117 
	`gíl_uƒegi°î_Ámûy
(&
Ámûy
->family);

118 
	`k‰ì
(
Ámûy
->
c›y_›s
);

119 
	}
}

121 
	#gíl_uƒegi°î_Ámûy
(
Ámûy
) \

122 
	`b©adv_gíl_uƒegi°î_Ámûy
((
Ámûy
))

	)

124 
	#gílmsg_put
(
_skb
, 
_pid
, 
_£q
, 
_Ámûy
, 
_Êags
, 
_cmd
) \

125 
	`gílmsg_put
(
_skb
, 
_pid
, 
_£q
, &(
_Ámûy
)->
Ámûy
, 
_Êags
, 
_cmd
)

	)

127 
	#gílmsg_mu…iˇ°_√äs
(
_Ámûy
, 
_√t
, 
_skb
, 
_p‹tid
, 
_group
, 
_Êags
) \

128 
	`gílmsg_mu…iˇ°_√äs
(&(
_Ámûy
)->
Ámûy
, 
_√t
, 
_skb
, 
_p‹tid
, \

129 
_group
, 
_Êags
)

	)

134 #i‡
LINUX_VERSION_IS_LESS
(6, 2, 0)

136 
	#gíl_•lô_›s
 
gíl_›s


	)

	@compat.h

7 #i‚de‡
_NET_BATMAN_ADV_COMPAT_H_


8 
	#_NET_BATMAN_ADV_COMPAT_H_


	)

10 #ifde‡
__KERNEL__


12 
	~<löux/vîsi⁄.h
>

13 
	~<löux/kc⁄fig.h
>

14 
	~<gíî©ed/autoc⁄f.h
>

16 
	~"com∑t-autoc⁄f.h
"

	@include/uapi/linux/batadv_packet.h

7 #i‚de‡
_UAPI_LINUX_BATADV_PACKET_H_


8 
	#_UAPI_LINUX_BATADV_PACKET_H_


	)

10 
	~<asm/byã‹dî.h
>

11 
	~<löux/if_ëhî.h
>

12 
	~<löux/°ddef.h
>

13 
	~<löux/ty≥s.h
>

21 
	#b©adv_ç_is_îr‹
(
n
Ë((
__u8
)“Ë> 127 ? 1 : 0)

	)

40 
	eb©adv_∑ckëty≥
 {

42 
	mBATADV_IV_OGM
 = 0x00,

43 
	mBATADV_BCAST
 = 0x01,

44 
	mBATADV_CODED
 = 0x02,

45 
	mBATADV_ELP
 = 0x03,

46 
	mBATADV_OGM2
 = 0x04,

47 
	mBATADV_MCAST
 = 0x05,

49 
	#BATADV_UNICAST_MIN
 0x40

	)

50 
	mBATADV_UNICAST
 = 0x40,

51 
	mBATADV_UNICAST_FRAG
 = 0x41,

52 
	mBATADV_UNICAST_4ADDR
 = 0x42,

53 
	mBATADV_ICMP
 = 0x43,

54 
	mBATADV_UNICAST_TVLV
 = 0x44,

55 
	#BATADV_UNICAST_MAX
 0x7f

	)

66 
	eb©adv_subty≥
 {

67 
	mBATADV_P_DATA
 = 0x01,

68 
	mBATADV_P_DAT_DHT_GET
 = 0x02,

69 
	mBATADV_P_DAT_DHT_PUT
 = 0x03,

70 
	mBATADV_P_DAT_CACHE_REPLY
 = 0x04,

74 
	#BATADV_COMPAT_VERSION
 15

	)

84 
	eb©adv_iv_Êags
 {

85 
	mBATADV_NOT_BEST_NEXT_HOP
 = 1UL << 0,

86 
	mBATADV_PRIMARIES_FIRST_HOP
 = 1UL << 1,

87 
	mBATADV_DIRECTLINK
 = 1UL << 2,

99 
	eb©adv_icmp_∑ckëty≥
 {

100 
	mBATADV_ECHO_REPLY
 = 0,

101 
	mBATADV_DESTINATION_UNREACHABLE
 = 3,

102 
	mBATADV_ECHO_REQUEST
 = 8,

103 
	mBATADV_TTL_EXCEEDED
 = 11,

104 
	mBATADV_PARAMETER_PROBLEM
 = 12,

105 
	mBATADV_TP
 = 15,

124 
	eb©adv_mˇ°_Êags
 {

125 
	mBATADV_MCAST_WANT_ALL_UNSNOOPABLES
 = 1UL << 0,

126 
	mBATADV_MCAST_WANT_ALL_IPV4
 = 1UL << 1,

127 
	mBATADV_MCAST_WANT_ALL_IPV6
 = 1UL << 2,

128 
	mBATADV_MCAST_WANT_NO_RTR4
 = 1UL << 3,

129 
	mBATADV_MCAST_WANT_NO_RTR6
 = 1UL << 4,

130 
	mBATADV_MCAST_HAVE_MC_PTYPE_CAPA
 = 1UL << 5,

134 
	#BATADV_TT_DATA_TYPE_MASK
 0x0F

	)

143 
	eb©adv_â_d©a_Êags
 {

144 
	mBATADV_TT_OGM_DIFF
 = 1UL << 0,

145 
	mBATADV_TT_REQUEST
 = 1UL << 1,

146 
	mBATADV_TT_RESPONSE
 = 1UL << 2,

147 
	mBATADV_TT_FULL_TABLE
 = 1UL << 4,

154 
	eb©adv_vœn_Êags
 {

155 
	mBATADV_VLAN_HAS_TAG
 = 1UL << 15,

166 
	eb©adv_bœ_˛aim‰ame
 {

167 
	mBATADV_CLAIM_TYPE_CLAIM
 = 0x00,

168 
	mBATADV_CLAIM_TYPE_UNCLAIM
 = 0x01,

169 
	mBATADV_CLAIM_TYPE_ANNOUNCE
 = 0x02,

170 
	mBATADV_CLAIM_TYPE_REQUEST
 = 0x03,

171 
	mBATADV_CLAIM_TYPE_LOOPDETECT
 = 0x04,

184 
	eb©adv_tvlv_ty≥
 {

185 
	mBATADV_TVLV_GW
 = 0x01,

186 
	mBATADV_TVLV_DAT
 = 0x02,

187 
	mBATADV_TVLV_NC
 = 0x03,

188 
	mBATADV_TVLV_TT
 = 0x04,

189 
	mBATADV_TVLV_ROAM
 = 0x05,

190 
	mBATADV_TVLV_MCAST
 = 0x06,

191 
	mBATADV_TVLV_MCAST_TRACKER
 = 0x07,

194 #¥agm®
∑ck
(2)

198 
	sb©adv_bœ_˛aim_d°
 {

199 
__u8
 
	mmagic
[3];

200 
__u8
 
	mty≥
;

201 
__be16
 
	mgroup
;

217 
	sb©adv_ogm_∑ckë
 {

218 
__u8
 
	m∑ckë_ty≥
;

219 
__u8
 
	mvîsi⁄
;

220 
__u8
 
	mâl
;

221 
__u8
 
	mÊags
;

222 
__be32
 
	m£qno
;

223 
__u8
 
	m‹ig
[
ETH_ALEN
];

224 
__u8
 
	m¥ev_£ndî
[
ETH_ALEN
];

225 
__u8
 
	mª£rved
;

226 
__u8
 
	mtq
;

227 
__be16
 
	mtvlv_Àn
;

230 
	#BATADV_OGM_HLEN
 (
b©adv_ogm_∑ckë
)

	)

243 
	sb©adv_ogm2_∑ckë
 {

244 
__u8
 
	m∑ckë_ty≥
;

245 
__u8
 
	mvîsi⁄
;

246 
__u8
 
	mâl
;

247 
__u8
 
	mÊags
;

248 
__be32
 
	m£qno
;

249 
__u8
 
	m‹ig
[
ETH_ALEN
];

250 
__be16
 
	mtvlv_Àn
;

251 
__be32
 
	mthroughput
;

254 
	#BATADV_OGM2_HLEN
 (
b©adv_ogm2_∑ckë
)

	)

264 
	sb©adv_ñp_∑ckë
 {

265 
__u8
 
	m∑ckë_ty≥
;

266 
__u8
 
	mvîsi⁄
;

267 
__u8
 
	m‹ig
[
ETH_ALEN
];

268 
__be32
 
	m£qno
;

269 
__be32
 
	mñp_öãrvÆ
;

272 
	#BATADV_ELP_HLEN
 (
b©adv_ñp_∑ckë
)

	)

289 
	sb©adv_icmp_hódî
 {

290 
__u8
 
	m∑ckë_ty≥
;

291 
__u8
 
	mvîsi⁄
;

292 
__u8
 
	mâl
;

293 
__u8
 
	mmsg_ty≥
;

294 
__u8
 
	md°
[
ETH_ALEN
];

295 
__u8
 
	m‹ig
[
ETH_ALEN
];

296 
__u8
 
	muid
;

297 
__u8
 
	mÆign
[3];

312 
	sb©adv_icmp_∑ckë
 {

313 
__u8
 
	m∑ckë_ty≥
;

314 
__u8
 
	mvîsi⁄
;

315 
__u8
 
	mâl
;

316 
__u8
 
	mmsg_ty≥
;

317 
__u8
 
	md°
[
ETH_ALEN
];

318 
__u8
 
	m‹ig
[
ETH_ALEN
];

319 
__u8
 
	muid
;

320 
__u8
 
	mª£rved
;

321 
__be16
 
	m£qno
;

341 
	sb©adv_icmp_ç_∑ckë
 {

342 
__u8
 
	m∑ckë_ty≥
;

343 
__u8
 
	mvîsi⁄
;

344 
__u8
 
	mâl
;

345 
__u8
 
	mmsg_ty≥
;

346 
__u8
 
	md°
[
ETH_ALEN
];

347 
__u8
 
	m‹ig
[
ETH_ALEN
];

348 
__u8
 
	muid
;

349 
__u8
 
	msubty≥
;

350 
__u8
 
	m£ssi⁄
[2];

351 
__be32
 
	m£qno
;

352 
__be32
 
	mtime°amp
;

360 
	eb©adv_icmp_ç_subty≥
 {

361 
	mBATADV_TP_MSG
 = 0,

362 
	mBATADV_TP_ACK
,

365 
	#BATADV_RR_LEN
 16

	)

380 
	sb©adv_icmp_∑ckë_º
 {

381 
__u8
 
	m∑ckë_ty≥
;

382 
__u8
 
	mvîsi⁄
;

383 
__u8
 
	mâl
;

384 
__u8
 
	mmsg_ty≥
;

385 
__u8
 
	md°
[
ETH_ALEN
];

386 
__u8
 
	m‹ig
[
ETH_ALEN
];

387 
__u8
 
	muid
;

388 
__u8
 
	mº_cur
;

389 
__be16
 
	m£qno
;

390 
__u8
 
	mº
[
BATADV_RR_LEN
][
ETH_ALEN
];

393 
	#BATADV_ICMP_MAX_PACKET_SIZE
 (
b©adv_icmp_∑ckë_º
)

	)

414 
	sb©adv_uniˇ°_∑ckë
 {

415 
__u8
 
	m∑ckë_ty≥
;

416 
__u8
 
	mvîsi⁄
;

417 
__u8
 
	mâl
;

418 
__u8
 
	mâvn
;

419 
__u8
 
	mde°
[
ETH_ALEN
];

432 
	sb©adv_uniˇ°_4addr_∑ckë
 {

433 
b©adv_uniˇ°_∑ckë
 
	mu
;

434 
__u8
 
	m§c
[
ETH_ALEN
];

435 
__u8
 
	msubty≥
;

436 
__u8
 
	mª£rved
;

455 
	sb©adv_‰ag_∑ckë
 {

456 
__u8
 
	m∑ckë_ty≥
;

457 
__u8
 
	mvîsi⁄
;

458 
__u8
 
	mâl
;

459 #i‡
deföed
(
__BIG_ENDIAN_BITFIELD
)

460 
__u8
 
	mno
:4;

461 
__u8
 
	m¥i‹ôy
:3;

462 
__u8
 
	mª£rved
:1;

463 #ñi‡
deföed
(
__LITTLE_ENDIAN_BITFIELD
)

464 
__u8
 
	mª£rved
:1;

465 
__u8
 
	m¥i‹ôy
:3;

466 
__u8
 
	mno
:4;

470 
__u8
 
	mde°
[
ETH_ALEN
];

471 
__u8
 
	m‹ig
[
ETH_ALEN
];

472 
__be16
 
	m£qno
;

473 
__be16
 
	mtŸÆ_size
;

485 
	sb©adv_bˇ°_∑ckë
 {

486 
__u8
 
	m∑ckë_ty≥
;

487 
__u8
 
	mvîsi⁄
;

488 
__u8
 
	mâl
;

489 
__u8
 
	mª£rved
;

490 
__be32
 
	m£qno
;

491 
__u8
 
	m‹ig
[
ETH_ALEN
];

505 
	sb©adv_mˇ°_∑ckë
 {

506 
__u8
 
	m∑ckë_ty≥
;

507 
__u8
 
	mvîsi⁄
;

508 
__u8
 
	mâl
;

509 
__u8
 
	mª£rved
;

510 
__be16
 
	mtvlv_Àn
;

533 
	sb©adv_coded_∑ckë
 {

534 
__u8
 
	m∑ckë_ty≥
;

535 
__u8
 
	mvîsi⁄
;

536 
__u8
 
	mâl
;

537 
__u8
 
	mfú°_âvn
;

539 
__u8
 
	mfú°_sour˚
[
ETH_ALEN
];

540 
__u8
 
	mfú°_‹ig_de°
[
ETH_ALEN
];

541 
__be32
 
	mfú°_¸c
;

542 
__u8
 
	m£c⁄d_âl
;

543 
__u8
 
	m£c⁄d_âvn
;

544 
__u8
 
	m£c⁄d_de°
[
ETH_ALEN
];

545 
__u8
 
	m£c⁄d_sour˚
[
ETH_ALEN
];

546 
__u8
 
	m£c⁄d_‹ig_de°
[
ETH_ALEN
];

547 
__be32
 
	m£c⁄d_¸c
;

548 
__be16
 
	mcoded_Àn
;

562 
	sb©adv_uniˇ°_tvlv_∑ckë
 {

563 
__u8
 
	m∑ckë_ty≥
;

564 
__u8
 
	mvîsi⁄
;

565 
__u8
 
	mâl
;

566 
__u8
 
	mª£rved
;

567 
__u8
 
	md°
[
ETH_ALEN
];

568 
__u8
 
	m§c
[
ETH_ALEN
];

569 
__be16
 
	mtvlv_Àn
;

570 
__u16
 
	mÆign
;

579 
	sb©adv_tvlv_hdr
 {

580 
__u8
 
	mty≥
;

581 
__u8
 
	mvîsi⁄
;

582 
__be16
 
	mÀn
;

591 
	sb©adv_tvlv_g©eway_d©a
 {

592 
__be32
 
	mb™dwidth_down
;

593 
__be32
 
	mb™dwidth_up
;

603 
	sb©adv_tvlv_â_vœn_d©a
 {

604 
__be32
 
	m¸c
;

605 
__be16
 
	mvid
;

606 
__u16
 
	mª£rved
;

617 
	sb©adv_tvlv_â_d©a
 {

618 
__u8
 
	mÊags
;

619 
__u8
 
	mâvn
;

620 
__be16
 
	mnum_vœn
;

621 
b©adv_tvlv_â_vœn_d©a
 
	mvœn_d©a
[] 
__cou¡ed_by_be
(
num_vœn
);

632 
	sb©adv_tvlv_â_ch™ge
 {

633 
__u8
 
	mÊags
;

634 
__u8
 
	mª£rved
[3];

635 
__u8
 
	maddr
[
ETH_ALEN
];

636 
__be16
 
	mvid
;

644 
	sb©adv_tvlv_rﬂm_adv
 {

645 
__u8
 
	m˛õ¡
[
ETH_ALEN
];

646 
__be16
 
	mvid
;

654 
	sb©adv_tvlv_mˇ°_d©a
 {

655 
__u8
 
	mÊags
;

656 
__u8
 
	mª£rved
[3];

663 
	sb©adv_tvlv_mˇ°_åackî
 {

664 
__be16
 
	mnum_de°s
;

667 #¥agm®
∑ck
()

	@include/uapi/linux/batman_adv.h

7 #i‚de‡
_UAPI_LINUX_BATMAN_ADV_H_


8 
	#_UAPI_LINUX_BATMAN_ADV_H_


	)

10 
	#BATADV_NL_NAME
 "b©adv"

	)

12 
	#BATADV_NL_MCAST_GROUP_CONFIG
 "c⁄fig"

	)

13 
	#BATADV_NL_MCAST_GROUP_TPMETER
 "çmëî"

	)

26 
	eb©adv_â_˛õ¡_Êags
 {

30 
	mBATADV_TT_CLIENT_DEL
 = (1 << 0),

37 
	mBATADV_TT_CLIENT_ROAM
 = (1 << 1),

43 
	mBATADV_TT_CLIENT_WIFI
 = (1 << 4),

49 
	mBATADV_TT_CLIENT_ISOLA
 = (1 << 5),

55 
	mBATADV_TT_CLIENT_NOPURGE
 = (1 << 8),

61 
	mBATADV_TT_CLIENT_NEW
 = (1 << 9),

68 
	mBATADV_TT_CLIENT_PENDING
 = (1 << 10),

74 
	mBATADV_TT_CLIENT_TEMP
 = (1 << 11),

90 
	eb©adv_mˇ°_Êags_¥iv
 {

95 
	mBATADV_MCAST_FLAGS_BRIDGED
 = (1 << 0),

101 
	mBATADV_MCAST_FLAGS_QUERIER_IPV4_EXISTS
 = (1 << 1),

107 
	mBATADV_MCAST_FLAGS_QUERIER_IPV6_EXISTS
 = (1 << 2),

114 
	mBATADV_MCAST_FLAGS_QUERIER_IPV4_SHADOWING
 = (1 << 3),

121 
	mBATADV_MCAST_FLAGS_QUERIER_IPV6_SHADOWING
 = (1 << 4),

127 
	eb©adv_gw_modes
 {

129 
	mBATADV_GW_MODE_OFF
,

132 
	mBATADV_GW_MODE_CLIENT
,

135 
	mBATADV_GW_MODE_SERVER
,

141 
	eb©adv_∆_©ås
 {

145 
	mBATADV_ATTR_UNSPEC
,

150 
	mBATADV_ATTR_VERSION
,

155 
	mBATADV_ATTR_ALGO_NAME
,

160 
	mBATADV_ATTR_MESH_IFINDEX
,

165 
	mBATADV_ATTR_MESH_IFNAME
,

170 
	mBATADV_ATTR_MESH_ADDRESS
,

175 
	mBATADV_ATTR_HARD_IFINDEX
,

180 
	mBATADV_ATTR_HARD_IFNAME
,

186 
	mBATADV_ATTR_HARD_ADDRESS
,

191 
	mBATADV_ATTR_ORIG_ADDRESS
,

197 
	mBATADV_ATTR_TPMETER_RESULT
,

202 
	mBATADV_ATTR_TPMETER_TEST_TIME
,

207 
	mBATADV_ATTR_TPMETER_BYTES
,

212 
	mBATADV_ATTR_TPMETER_COOKIE
,

217 
	mBATADV_ATTR_PAD
,

222 
	mBATADV_ATTR_ACTIVE
,

227 
	mBATADV_ATTR_TT_ADDRESS
,

232 
	mBATADV_ATTR_TT_TTVN
,

237 
	mBATADV_ATTR_TT_LAST_TTVN
,

242 
	mBATADV_ATTR_TT_CRC32
,

247 
	mBATADV_ATTR_TT_VID
,

252 
	mBATADV_ATTR_TT_FLAGS
,

257 
	mBATADV_ATTR_FLAG_BEST
,

262 
	mBATADV_ATTR_LAST_SEEN_MSECS
,

267 
	mBATADV_ATTR_NEIGH_ADDRESS
,

272 
	mBATADV_ATTR_TQ
,

277 
	mBATADV_ATTR_THROUGHPUT
,

282 
	mBATADV_ATTR_BANDWIDTH_UP
,

287 
	mBATADV_ATTR_BANDWIDTH_DOWN
,

292 
	mBATADV_ATTR_ROUTER
,

297 
	mBATADV_ATTR_BLA_OWN
,

302 
	mBATADV_ATTR_BLA_ADDRESS
,

307 
	mBATADV_ATTR_BLA_VID
,

312 
	mBATADV_ATTR_BLA_BACKBONE
,

317 
	mBATADV_ATTR_BLA_CRC
,

322 
	mBATADV_ATTR_DAT_CACHE_IP4ADDRESS
,

327 
	mBATADV_ATTR_DAT_CACHE_HWADDRESS
,

332 
	mBATADV_ATTR_DAT_CACHE_VID
,

337 
	mBATADV_ATTR_MCAST_FLAGS
,

342 
	mBATADV_ATTR_MCAST_FLAGS_PRIV
,

347 
	mBATADV_ATTR_VLANID
,

353 
	mBATADV_ATTR_AGGREGATED_OGMS_ENABLED
,

360 
	mBATADV_ATTR_AP_ISOLATION_ENABLED
,

366 
	mBATADV_ATTR_ISOLATION_MARK
,

372 
	mBATADV_ATTR_ISOLATION_MASK
,

378 
	mBATADV_ATTR_BONDING_ENABLED
,

385 
	mBATADV_ATTR_BRIDGE_LOOP_AVOIDANCE_ENABLED
,

393 
	mBATADV_ATTR_DISTRIBUTED_ARP_TABLE_ENABLED
,

400 
	mBATADV_ATTR_FRAGMENTATION_ENABLED
,

407 
	mBATADV_ATTR_GW_BANDWIDTH_DOWN
,

414 
	mBATADV_ATTR_GW_BANDWIDTH_UP
,

420 
	mBATADV_ATTR_GW_MODE
,

426 
	mBATADV_ATTR_GW_SEL_CLASS
,

433 
	mBATADV_ATTR_HOP_PENALTY
,

439 
	mBATADV_ATTR_LOG_LEVEL
,

448 
	mBATADV_ATTR_MULTICAST_FORCEFLOOD_ENABLED
,

455 
	mBATADV_ATTR_NETWORK_CODING_ENABLED
,

461 
	mBATADV_ATTR_ORIG_INTERVAL
,

467 
	mBATADV_ATTR_ELP_INTERVAL
,

475 
	mBATADV_ATTR_THROUGHPUT_OVERRIDE
,

482 
	mBATADV_ATTR_MULTICAST_FANOUT
,

489 
	m__BATADV_ATTR_AFTER_LAST
,

494 
	mNUM_BATADV_ATTR
 = 
__BATADV_ATTR_AFTER_LAST
,

499 
	mBATADV_ATTR_MAX
 = 
__BATADV_ATTR_AFTER_LAST
 - 1

505 
	eb©adv_∆_comm™ds
 {

509 
	mBATADV_CMD_UNSPEC
,

514 
	mBATADV_CMD_GET_MESH
,

519 
	mBATADV_CMD_GET_MESH_INFO
 = 
BATADV_CMD_GET_MESH
,

524 
	mBATADV_CMD_TP_METER
,

529 
	mBATADV_CMD_TP_METER_CANCEL
,

534 
	mBATADV_CMD_GET_ROUTING_ALGOS
,

540 
	mBATADV_CMD_GET_HARDIF
,

545 
	mBATADV_CMD_GET_HARDIFS
 = 
BATADV_CMD_GET_HARDIF
,

550 
	mBATADV_CMD_GET_TRANSTABLE_LOCAL
,

555 
	mBATADV_CMD_GET_TRANSTABLE_GLOBAL
,

560 
	mBATADV_CMD_GET_ORIGINATORS
,

565 
	mBATADV_CMD_GET_NEIGHBORS
,

570 
	mBATADV_CMD_GET_GATEWAYS
,

575 
	mBATADV_CMD_GET_BLA_CLAIM
,

581 
	mBATADV_CMD_GET_BLA_BACKBONE
,

586 
	mBATADV_CMD_GET_DAT_CACHE
,

591 
	mBATADV_CMD_GET_MCAST_FLAGS
,

596 
	mBATADV_CMD_SET_MESH
,

602 
	mBATADV_CMD_SET_HARDIF
,

608 
	mBATADV_CMD_GET_VLAN
,

614 
	mBATADV_CMD_SET_VLAN
,

621 
	m__BATADV_CMD_AFTER_LAST
,

626 
	mBATADV_CMD_MAX
 = 
__BATADV_CMD_AFTER_LAST
 - 1

632 
	eb©adv_ç_mëî_ªas⁄
 {

636 
	mBATADV_TP_REASON_COMPLETE
 = 3,

641 
	mBATADV_TP_REASON_CANCEL
 = 4,

649 
	mBATADV_TP_REASON_DST_UNREACHABLE
 = 128,

654 
	mBATADV_TP_REASON_RESEND_LIMIT
 = 129,

660 
	mBATADV_TP_REASON_ALREADY_ONGOING
 = 130,

665 
	mBATADV_TP_REASON_MEMORY_ERROR
 = 131,

670 
	mBATADV_TP_REASON_CANT_SEND
 = 132,

675 
	mBATADV_TP_REASON_TOO_MANY
 = 133,

681 
	eb©adv_iÊa_©ås
 {

686 
	mIFLA_BATADV_UNSPEC
,

692 
	mIFLA_BATADV_ALGO_NAME
,

699 
	m__IFLA_BATADV_MAX
,

702 
	#IFLA_BATADV_MAX
 (
__IFLA_BATADV_MAX
 - 1)

	)

	@net/batman-adv/bat_algo.c

7 
	~"maö.h
"

9 
	~<löux/î∫o.h
>

10 
	~<löux/li°.h
>

11 
	~<löux/moduÀ∑øm.h
>

12 
	~<löux/√éök.h
>

13 
	~<löux/¥ötk.h
>

14 
	~<löux/skbuff.h
>

15 
	~<löux/°ddef.h
>

16 
	~<löux/°rög.h
>

17 
	~<√t/gíëlök.h
>

18 
	~<√t/√éök.h
>

19 
	~<u≠i/löux/b©m™_adv.h
>

21 
	~"b©_Ægo.h
"

22 
	~"√éök.h
"

24 
	gb©adv_routög_Ægo
[20] = "BATMAN_IV";

25 
hli°_hód
 
	gb©adv_Ægo_li°
;

31 
	$b©adv_Ægo_öô
()

33 
	`INIT_HLIST_HEAD
(&
b©adv_Ægo_li°
);

34 
	}
}

42 
b©adv_Ægo_›s
 *
	$b©adv_Ægo_gë
(c⁄° *
«me
)

44 
b©adv_Ægo_›s
 *
b©_Ægo_›s
 = 
NULL
, *
b©_Ægo_›s_tmp
;

46 
	`hli°_f‹_óch_íåy
(
b©_Ægo_›s_tmp
, &
b©adv_Ægo_li°
, 
li°
) {

47 i‡(
	`°rcmp
(
b©_Ægo_›s_tmp
->
«me
,Çame) != 0)

50 
b©_Ægo_›s
 = 
b©_Ægo_›s_tmp
;

54  
b©_Ægo_›s
;

55 
	}
}

63 
	$b©adv_Ægo_ªgi°î
(
b©adv_Ægo_›s
 *
b©_Ægo_›s
)

65 
b©adv_Ægo_›s
 *
b©_Ægo_›s_tmp
;

67 
b©_Ægo_›s_tmp
 = 
	`b©adv_Ægo_gë
(
b©_Ægo_›s
->
«me
);

68 i‡(
b©_Ægo_›s_tmp
) {

69 
	`¥_öfo
("TryingÅoÑegisterálreadyÑegisteredÑoutingálgorithm: %s\n",

70 
b©_Ægo_›s
->
«me
);

71  -
EEXIST
;

75 i‡(!
b©_Ægo_›s
->
iÁ˚
.
íabÀ
 ||

76 !
b©_Ægo_›s
->
iÁ˚
.
dißbÀ
 ||

77 !
b©_Ægo_›s
->
iÁ˚
.
upd©e_mac
 ||

78 !
b©_Ægo_›s
->
iÁ˚
.
¥im¨y_£t
 ||

79 !
b©_Ægo_›s
->
√igh
.
cmp
 ||

80 !
b©_Ægo_›s
->
√igh
.
is_simû¨_‹_bëãr
) {

81 
	`¥_öfo
("Routingálgo '%s' doesÇot implementÑequired ops\n",

82 
b©_Ægo_›s
->
«me
);

83  -
EINVAL
;

86 
	`INIT_HLIST_NODE
(&
b©_Ægo_›s
->
li°
);

87 
	`hli°_add_hód
(&
b©_Ægo_›s
->
li°
, &
b©adv_Ægo_li°
);

90 
	}
}

105 
	$b©adv_Ægo_£À˘
(
b©adv_¥iv
 *
b©_¥iv
, c⁄° *
«me
)

107 
b©adv_Ægo_›s
 *
b©_Ægo_›s
;

109 
b©_Ægo_›s
 = 
	`b©adv_Ægo_gë
(
«me
);

110 i‡(!
b©_Ægo_›s
)

111  -
EINVAL
;

113 
b©_¥iv
->
Ægo_›s
 = 
b©_Ægo_›s
;

116 
	}
}

118 
	$b©adv_∑øm_£t_ø
(c⁄° *
vÆ
, c⁄° 
kî√l_∑øm
 *
kp
)

120 
b©adv_Ægo_›s
 *
b©_Ægo_›s
;

121 *
Ægo_«me
 = (*)
vÆ
;

122 
size_t
 
«me_Àn
 = 
	`°æí
(
Ægo_«me
);

124 i‡(
«me_Àn
 > 0 && 
Ægo_«me
[name_len - 1] == '\n')

125 
Ægo_«me
[
«me_Àn
 - 1] = '\0';

127 
b©_Ægo_›s
 = 
	`b©adv_Ægo_gë
(
Ægo_«me
);

128 i‡(!
b©_Ægo_›s
) {

129 
	`¥_îr
("Routögálg‹ôhm '%s' i†nŸ suµ‹ãd\n", 
Ægo_«me
);

130  -
EINVAL
;

133  
	`∑øm_£t_c›y°rög
(
Ægo_«me
, 
kp
);

134 
	}
}

136 c⁄° 
kî√l_∑øm_›s
 
	gb©adv_∑øm_›s_ø
 = {

137 .
£t
 = 
b©adv_∑øm_£t_ø
,

138 .
	ggë
 = 
∑øm_gë_°rög
,

141 
k∑øm_°rög
 
	gb©adv_∑øm_°rög_ø
 = {

142 .
maxÀn
 = (
b©adv_routög_Ægo
),

143 .
	g°rög
 = 
b©adv_routög_Ægo
,

146 
moduÀ_∑øm_cb
(
routög_Ægo
, &
b©adv_∑øm_›s_ø
, &
b©adv_∑øm_°rög_ø
,

159 
	$b©adv_Ægo_dump_íåy
(
sk_buff
 *
msg
, 
u32
 
p‹tid
, u32 
£q
,

160 
b©adv_Ægo_›s
 *
b©_Ægo_›s
)

162 *
hdr
;

164 
hdr
 = 
	`gílmsg_put
(
msg
, 
p‹tid
, 
£q
, &
b©adv_√éök_Ámûy
,

165 
NLM_F_MULTI
, 
BATADV_CMD_GET_ROUTING_ALGOS
);

166 i‡(!
hdr
)

167  -
EMSGSIZE
;

169 i‡(
	`∆a_put_°rög
(
msg
, 
BATADV_ATTR_ALGO_NAME
, 
b©_Ægo_›s
->
«me
))

170 
∆a_put_Áûuª
;

172 
	`gílmsg_íd
(
msg
, 
hdr
);

175 
∆a_put_Áûuª
:

176 
	`gílmsg_ˇn˚l
(
msg
, 
hdr
);

177  -
EMSGSIZE
;

178 
	}
}

188 
	$b©adv_Ægo_dump
(
sk_buff
 *
msg
, 
√éök_ˇŒback
 *
cb
)

190 
p‹tid
 = 
	`NETLINK_CB
(
cb
->
skb
).portid;

191 
b©adv_Ægo_›s
 *
b©_Ægo_›s
;

192 
skù
 = 
cb
->
¨gs
[0];

193 
i
 = 0;

195 
	`hli°_f‹_óch_íåy
(
b©_Ægo_›s
, &
b©adv_Ægo_li°
, 
li°
) {

196 i‡(
i
++ < 
skù
)

199 i‡(
	`b©adv_Ægo_dump_íåy
(
msg
, 
p‹tid
, 
cb
->
∆h
->
∆msg_£q
,

200 
b©_Ægo_›s
)) {

201 
i
--;

206 
cb
->
¨gs
[0] = 
i
;

208  
msg
->
Àn
;

209 
	}
}

	@net/batman-adv/bat_algo.h

7 #i‚de‡
_NET_BATMAN_ADV_BAT_ALGO_H_


8 
	#_NET_BATMAN_ADV_BAT_ALGO_H_


	)

10 
	~"maö.h
"

12 
	~<löux/√éök.h
>

13 
	~<löux/skbuff.h
>

14 
	~<löux/ty≥s.h
>

16 
b©adv_routög_Ægo
[];

17 
li°_hód
 
b©adv_h¨dif_li°
;

19 
b©adv_Ægo_öô
();

20 
b©adv_Ægo_›s
 *
b©adv_Ægo_gë
(c⁄° *
«me
);

21 
b©adv_Ægo_ªgi°î
(
b©adv_Ægo_›s
 *
b©_Ægo_›s
);

22 
b©adv_Ægo_£À˘
(
b©adv_¥iv
 *
b©_¥iv
, c⁄° *
«me
);

23 
b©adv_Ægo_dump
(
sk_buff
 *
msg
, 
√éök_ˇŒback
 *
cb
);

	@net/batman-adv/bat_iv_ogm.c

7 
	~"b©_iv_ogm.h
"

8 
	~"maö.h
"

10 
	~<löux/©omic.h
>

11 
	~<löux/bôm≠.h
>

12 
	~<löux/bô›s.h
>

13 
	~<löux/bug.h
>

14 
	~<löux/byã‹dî/gíîic.h
>

15 
	~<löux/ˇche.h
>

16 
	~<löux/c⁄èöî_of.h
>

17 
	~<löux/î∫o.h
>

18 
	~<löux/ëhîdevi˚.h
>

19 
	~<löux/gÂ.h
>

20 
	~<löux/if_ëhî.h
>

21 
	~<löux/öô.h
>

22 
	~<löux/jiffõs.h
>

23 
	~<löux/kªf.h
>

24 
	~<löux/li°.h
>

25 
	~<löux/lockdï.h
>

26 
	~<löux/mömax.h
>

27 
	~<löux/muãx.h
>

28 
	~<löux/√tdevi˚.h
>

29 
	~<löux/√éök.h
>

30 
	~<löux/pkt_sched.h
>

31 
	~<löux/¥ötk.h
>

32 
	~<löux/øndom.h
>

33 
	~<löux/rculi°.h
>

34 
	~<löux/rcupd©e.h
>

35 
	~<löux/skbuff.h
>

36 
	~<löux/¶ab.h
>

37 
	~<löux/•ölock.h
>

38 
	~<löux/°ddef.h
>

39 
	~<löux/°rög.h
>

40 
	~<löux/°rög_choi˚s.h
>

41 
	~<löux/ty≥s.h
>

42 
	~<löux/w‹kqueue.h
>

43 
	~<√t/gíëlök.h
>

44 
	~<√t/√éök.h
>

45 
	~<u≠i/löux/b©adv_∑ckë.h
>

46 
	~<u≠i/löux/b©m™_adv.h
>

48 
	~"b©_Ægo.h
"

49 
	~"bô¨øy.h
"

50 
	~"g©eway_˛õ¡.h
"

51 
	~"h¨d-öãrÁ˚.h
"

52 
	~"hash.h
"

53 
	~"log.h
"

54 
	~"√éök.h
"

55 
	~"√tw‹k-codög.h
"

56 
	~"‹igö©‹.h
"

57 
	~"routög.h
"

58 
	~"£nd.h
"

59 
	~"å™¶©i⁄-èbÀ.h
"

60 
	~"tvlv.h
"

62 
b©adv_iv_£nd_out°™dög_b©_ogm_∑ckë
(
w‹k_°ru˘
 *
w‹k
);

67 
	eb©adv_dup_°©us
 {

69 
	mBATADV_NO_DUP
 = 0,

75 
	mBATADV_ORIG_DUP
,

78 
	mBATADV_NEIGH_DUP
,

83 
	mBATADV_PROTECTED
,

92 
	$b©adv_rög_buf„r_£t
(
u8
 
lq_ªcv
[], u8 *
lq_ödex
, u8 
vÆue
)

94 
lq_ªcv
[*
lq_ödex
] = 
vÆue
;

95 *
lq_ödex
 = (*lq_ödex + 1Ë% 
BATADV_TQ_GLOBAL_WINDOW_SIZE
;

96 
	}
}

105 
u8
 
	$b©adv_rög_buf„r_avg
(c⁄° 
u8
 
lq_ªcv
[])

107 c⁄° 
u8
 *
±r
;

108 
u16
 
cou¡
 = 0;

109 
u16
 
i
 = 0;

110 
u16
 
sum
 = 0;

112 
±r
 = 
lq_ªcv
;

114 
i
 < 
BATADV_TQ_GLOBAL_WINDOW_SIZE
) {

115 i‡(*
±r
 != 0) {

116 
cou¡
++;

117 
sum
 +*
±r
;

120 
i
++;

121 
±r
++;

124 i‡(
cou¡
 == 0)

127  (
u8
)(
sum
 / 
cou¡
);

128 
	}
}

140 
b©adv_‹ig_node
 *

141 
	$b©adv_iv_ogm_‹ig_gë
(
b©adv_¥iv
 *
b©_¥iv
, c⁄° 
u8
 *
addr
)

143 
b©adv_‹ig_node
 *
‹ig_node
;

144 
hash_added
;

146 
‹ig_node
 = 
	`b©adv_‹ig_hash_föd
(
b©_¥iv
, 
addr
);

147 i‡(
‹ig_node
)

148  
‹ig_node
;

150 
‹ig_node
 = 
	`b©adv_‹ig_node_√w
(
b©_¥iv
, 
addr
);

151 i‡(!
‹ig_node
)

152  
NULL
;

154 
	`•ö_lock_öô
(&
‹ig_node
->
b©_iv
.
ogm_˙t_lock
);

156 
	`kªf_gë
(&
‹ig_node
->
ªfcou¡
);

157 
hash_added
 = 
	`b©adv_hash_add
(
b©_¥iv
->
‹ig_hash
, 
b©adv_com∑ª_‹ig
,

158 
b©adv_choo£_‹ig
, 
‹ig_node
,

159 &
‹ig_node
->
hash_íåy
);

160 i‡(
hash_added
 != 0)

161 
‰ì_‹ig_node_hash
;

163  
‹ig_node
;

165 
‰ì_‹ig_node_hash
:

167 
	`b©adv_‹ig_node_put
(
‹ig_node
);

169 
	`b©adv_‹ig_node_put
(
‹ig_node
);

171  
NULL
;

172 
	}
}

174 
b©adv_√igh_node
 *

175 
	$b©adv_iv_ogm_√igh_√w
(
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
,

176 c⁄° 
u8
 *
√igh_addr
,

177 
b©adv_‹ig_node
 *
‹ig_node
,

178 
b©adv_‹ig_node
 *
‹ig_√igh
)

180 
b©adv_√igh_node
 *
√igh_node
;

182 
√igh_node
 = 
	`b©adv_√igh_node_gë_‹_¸óã
(
‹ig_node
,

183 
h¨d_iÁ˚
, 
√igh_addr
);

184 i‡(!
√igh_node
)

185 
out
;

187 
√igh_node
->
‹ig_node
 = 
‹ig_√igh
;

189 
out
:

190  
√igh_node
;

191 
	}
}

193 
	$b©adv_iv_ogm_iÁ˚_íabÀ
(
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
)

195 
b©adv_ogm_∑ckë
 *batadv_ogm_packet;

196 *
ogm_buff
;

197 
u32
 
øndom_£qno
;

199 
	`muãx_lock
(&
h¨d_iÁ˚
->
b©_iv
.
ogm_buff_muãx
);

202 
	`gë_øndom_byãs
(&
øndom_£qno
, (random_seqno));

203 
	`©omic_£t
(&
h¨d_iÁ˚
->
b©_iv
.
ogm_£qno
, 
øndom_£qno
);

205 
h¨d_iÁ˚
->
b©_iv
.
ogm_buff_Àn
 = 
BATADV_OGM_HLEN
;

206 
ogm_buff
 = 
	`kmÆloc
(
h¨d_iÁ˚
->
b©_iv
.
ogm_buff_Àn
, 
GFP_ATOMIC
);

207 i‡(!
ogm_buff
) {

208 
	`muãx_u∆ock
(&
h¨d_iÁ˚
->
b©_iv
.
ogm_buff_muãx
);

209  -
ENOMEM
;

212 
h¨d_iÁ˚
->
b©_iv
.
ogm_buff
 = ogm_buff;

214 
b©adv_ogm_∑ckë
 = (b©adv_ogm_∑ckë *)
ogm_buff
;

215 
b©adv_ogm_∑ckë
->
∑ckë_ty≥
 = 
BATADV_IV_OGM
;

216 
b©adv_ogm_∑ckë
->
vîsi⁄
 = 
BATADV_COMPAT_VERSION
;

217 
b©adv_ogm_∑ckë
->
âl
 = 2;

218 
b©adv_ogm_∑ckë
->
Êags
 = 
BATADV_NO_FLAGS
;

219 
b©adv_ogm_∑ckë
->
ª£rved
 = 0;

220 
b©adv_ogm_∑ckë
->
tq
 = 
BATADV_TQ_MAX_VALUE
;

222 
	`muãx_u∆ock
(&
h¨d_iÁ˚
->
b©_iv
.
ogm_buff_muãx
);

225 
	}
}

227 
	$b©adv_iv_ogm_iÁ˚_dißbÀ
(
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
)

229 
	`muãx_lock
(&
h¨d_iÁ˚
->
b©_iv
.
ogm_buff_muãx
);

231 
	`k‰ì
(
h¨d_iÁ˚
->
b©_iv
.
ogm_buff
);

232 
h¨d_iÁ˚
->
b©_iv
.
ogm_buff
 = 
NULL
;

234 
	`muãx_u∆ock
(&
h¨d_iÁ˚
->
b©_iv
.
ogm_buff_muãx
);

235 
	}
}

237 
	$b©adv_iv_ogm_iÁ˚_upd©e_mac
(
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
)

239 
b©adv_ogm_∑ckë
 *batadv_ogm_packet;

240 *
ogm_buff
;

242 
	`muãx_lock
(&
h¨d_iÁ˚
->
b©_iv
.
ogm_buff_muãx
);

244 
ogm_buff
 = 
h¨d_iÁ˚
->
b©_iv
.ogm_buff;

245 i‡(!
ogm_buff
)

246 
u∆ock
;

248 
b©adv_ogm_∑ckë
 = 
ogm_buff
;

249 
	`ëhî_addr_c›y
(
b©adv_ogm_∑ckë
->
‹ig
,

250 
h¨d_iÁ˚
->
√t_dev
->
dev_addr
);

251 
	`ëhî_addr_c›y
(
b©adv_ogm_∑ckë
->
¥ev_£ndî
,

252 
h¨d_iÁ˚
->
√t_dev
->
dev_addr
);

254 
u∆ock
:

255 
	`muãx_u∆ock
(&
h¨d_iÁ˚
->
b©_iv
.
ogm_buff_muãx
);

256 
	}
}

259 
	$b©adv_iv_ogm_¥im¨y_iÁ˚_£t
(
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
)

261 
b©adv_ogm_∑ckë
 *batadv_ogm_packet;

262 *
ogm_buff
;

264 
	`muãx_lock
(&
h¨d_iÁ˚
->
b©_iv
.
ogm_buff_muãx
);

266 
ogm_buff
 = 
h¨d_iÁ˚
->
b©_iv
.ogm_buff;

267 i‡(!
ogm_buff
)

268 
u∆ock
;

270 
b©adv_ogm_∑ckë
 = 
ogm_buff
;

271 
b©adv_ogm_∑ckë
->
âl
 = 
BATADV_TTL
;

273 
u∆ock
:

274 
	`muãx_u∆ock
(&
h¨d_iÁ˚
->
b©_iv
.
ogm_buff_muãx
);

275 
	}
}

279 
	$b©adv_iv_ogm_emô_£nd_time
(c⁄° 
b©adv_¥iv
 *
b©_¥iv
)

281 
m£cs
;

283 
m£cs
 = 
	`©omic_ªad
(&
b©_¥iv
->
‹ig_öãrvÆ
Ë- 
BATADV_JITTER
;

284 
m£cs
 +
	`gë_øndom_u32_bñow
(2 * 
BATADV_JITTER
);

286  
jiffõs
 + 
	`m£cs_to_jiffõs
(
m£cs
);

287 
	}
}

290 
	$b©adv_iv_ogm_fwd_£nd_time
()

292  
jiffõs
 + 
	`m£cs_to_jiffõs
(
	`gë_øndom_u32_bñow
(
BATADV_JITTER
 / 2));

293 
	}
}

296 
u8
 
	$b©adv_h›_≥«…y
(
u8
 
tq
, c⁄° 
b©adv_¥iv
 *
b©_¥iv
)

298 
h›_≥«…y
 = 
	`©omic_ªad
(&
b©_¥iv
->hop_penalty);

299 
√w_tq
;

301 
√w_tq
 = 
tq
 * (
BATADV_TQ_MAX_VALUE
 - 
h›_≥«…y
);

302 
√w_tq
 /
BATADV_TQ_MAX_VALUE
;

304  
√w_tq
;

305 
	}
}

315 
boﬁ


316 
	$b©adv_iv_ogm_aggr_∑ckë
(
buff_pos
, 
∑ckë_Àn
,

317 c⁄° 
b©adv_ogm_∑ckë
 *
ogm_∑ckë
)

319 
√xt_buff_pos
 = 0;

322 
√xt_buff_pos
 +
buff_pos
 + (*
ogm_∑ckë
);

323 i‡(
√xt_buff_pos
 > 
∑ckë_Àn
)

324  
Ál£
;

327 
√xt_buff_pos
 +
	`¡ohs
(
ogm_∑ckë
->
tvlv_Àn
);

329  
√xt_buff_pos
 <
∑ckë_Àn
;

330 
	}
}

333 
	$b©adv_iv_ogm_£nd_to_if
(
b©adv_f‹w_∑ckë
 *
f‹w_∑ckë
,

334 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
)

336 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
h¨d_iÁ˚
->
mesh_iÁ˚
);

337 c⁄° *
fwd_°r
;

338 
u8
 
∑ckë_num
;

339 
s16
 
buff_pos
;

340 
b©adv_ogm_∑ckë
 *batadv_ogm_packet;

341 
sk_buff
 *
skb
;

342 
u8
 *
∑ckë_pos
;

344 i‡(
h¨d_iÁ˚
->
if_°©us
 !
BATADV_IF_ACTIVE
)

347 
∑ckë_num
 = 0;

348 
buff_pos
 = 0;

349 
∑ckë_pos
 = 
f‹w_∑ckë
->
skb
->
d©a
;

350 
b©adv_ogm_∑ckë
 = (b©adv_ogm_∑ckë *)
∑ckë_pos
;

353 
	`b©adv_iv_ogm_aggr_∑ckë
(
buff_pos
, 
f‹w_∑ckë
->
∑ckë_Àn
,

354 
b©adv_ogm_∑ckë
)) {

358 i‡(
	`ã°_bô
(
∑ckë_num
, 
f‹w_∑ckë
->
dúe˘_lök_Êags
) &&

359 
f‹w_∑ckë
->
if_öcomög
 =
h¨d_iÁ˚
)

360 
b©adv_ogm_∑ckë
->
Êags
 |
BATADV_DIRECTLINK
;

362 
b©adv_ogm_∑ckë
->
Êags
 &~
BATADV_DIRECTLINK
;

364 i‡(
∑ckë_num
 > 0 || !
f‹w_∑ckë
->
own
)

365 
fwd_°r
 = "Forwarding";

367 
fwd_°r
 = "Sending own";

369 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

371 
fwd_°r
, (
∑ckë_num
 > 0 ? "aggregated " : ""),

372 
b©adv_ogm_∑ckë
->
‹ig
,

373 
	`¡ohl
(
b©adv_ogm_∑ckë
->
£qno
),

374 
b©adv_ogm_∑ckë
->
tq
, b©adv_ogm_∑ckë->
âl
,

375 
	`°r_⁄_off
(
b©adv_ogm_∑ckë
->
Êags
 & 
BATADV_DIRECTLINK
),

376 
h¨d_iÁ˚
->
√t_dev
->
«me
,

377 
h¨d_iÁ˚
->
√t_dev
->
dev_addr
);

379 
buff_pos
 +
BATADV_OGM_HLEN
;

380 
buff_pos
 +
	`¡ohs
(
b©adv_ogm_∑ckë
->
tvlv_Àn
);

381 
∑ckë_num
++;

382 
∑ckë_pos
 = 
f‹w_∑ckë
->
skb
->
d©a
 + 
buff_pos
;

383 
b©adv_ogm_∑ckë
 = (b©adv_ogm_∑ckë *)
∑ckë_pos
;

387 
skb
 = 
	`skb_˛⁄e
(
f‹w_∑ckë
->skb, 
GFP_ATOMIC
);

388 i‡(
skb
) {

389 
	`b©adv_öc_cou¡î
(
b©_¥iv
, 
BATADV_CNT_MGMT_TX
);

390 
	`b©adv_add_cou¡î
(
b©_¥iv
, 
BATADV_CNT_MGMT_TX_BYTES
,

391 
skb
->
Àn
 + 
ETH_HLEN
);

392 
	`b©adv_£nd_brﬂdˇ°_skb
(
skb
, 
h¨d_iÁ˚
);

394 
	}
}

397 
	$b©adv_iv_ogm_emô
(
b©adv_f‹w_∑ckë
 *
f‹w_∑ckë
)

399 
√t_devi˚
 *
mesh_iÁ˚
;

401 i‡(!
f‹w_∑ckë
->
if_öcomög
) {

402 
	`¥_îr
("Error - can't forwardÖacket: incoming ifaceÇot specified\n");

406 
mesh_iÁ˚
 = 
f‹w_∑ckë
->
if_öcomög
->mesh_iface;

408 i‡(
	`WARN_ON
(!
f‹w_∑ckë
->
if_outgoög
))

411 i‡(
f‹w_∑ckë
->
if_outgoög
->
mesh_iÁ˚
 != mesh_iface) {

412 
	`¥_w¨n
("%s: mesh i¡îÁ˚ swôch f‹ queued OGM\n", 
__func__
);

416 i‡(
f‹w_∑ckë
->
if_öcomög
->
if_°©us
 !
BATADV_IF_ACTIVE
)

420 
	`b©adv_iv_ogm_£nd_to_if
(
f‹w_∑ckë
, f‹w_∑ckë->
if_outgoög
);

421 
	}
}

437 
boﬁ


438 
	$b©adv_iv_ogm_ˇn_aggªg©e
(c⁄° 
b©adv_ogm_∑ckë
 *
√w_b©_ogm_∑ckë
,

439 
b©adv_¥iv
 *
b©_¥iv
,

440 
∑ckë_Àn
, 
£nd_time
,

441 
boﬁ
 
dúe˘lök
,

442 c⁄° 
b©adv_h¨d_iÁ˚
 *
if_öcomög
,

443 c⁄° 
b©adv_h¨d_iÁ˚
 *
if_outgoög
,

444 c⁄° 
b©adv_f‹w_∑ckë
 *
f‹w_∑ckë
)

446 
b©adv_ogm_∑ckë
 *batadv_ogm_packet;

447 
aggªg©ed_byãs
 = 
f‹w_∑ckë
->
∑ckë_Àn
 +Öacket_len;

448 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
 = 
NULL
;

449 
u8
 
∑ckë_num
 = 
f‹w_∑ckë
->
num_∑ckës
;

450 
boﬁ
 
ªs
 = 
Ál£
;

451 
aggªg©i⁄_íd_time
;

452 
max_byãs
;

454 
b©adv_ogm_∑ckë
 = (b©adv_ogm_∑ckë *)
f‹w_∑ckë
->
skb
->
d©a
;

455 
aggªg©i⁄_íd_time
 = 
£nd_time
;

456 
aggªg©i⁄_íd_time
 +
	`m£cs_to_jiffõs
(
BATADV_MAX_AGGREGATION_MS
);

458 
max_byãs
 = 
	`mö_t
(, 
if_outgoög
->
√t_dev
->
mtu
,

459 
BATADV_MAX_AGGREGATION_BYTES
);

470 i‡(!
	`time_bef‹e
(
£nd_time
, 
f‹w_∑ckë
->send_time) ||

471 !
	`time_a·î_eq
(
aggªg©i⁄_íd_time
, 
f‹w_∑ckë
->
£nd_time
))

472  
Ál£
;

474 i‡(
aggªg©ed_byãs
 > 
max_byãs
)

475  
Ál£
;

477 i‡(
∑ckë_num
 >
BATADV_MAX_AGGREGATION_PACKETS
)

478  
Ál£
;

481 i‡(
f‹w_∑ckë
->
if_outgoög
 != if_outgoing)

482  
Ál£
;

491 
¥im¨y_if
 = 
	`b©adv_¥im¨y_if_gë_£À˘ed
(
b©_¥iv
);

492 i‡(!
¥im¨y_if
)

493  
Ál£
;

498 i‡(!
dúe˘lök
 &&

499 !(
b©adv_ogm_∑ckë
->
Êags
 & 
BATADV_DIRECTLINK
) &&

500 
b©adv_ogm_∑ckë
->
âl
 != 1 &&

505 (!
f‹w_∑ckë
->
own
 ||

506 
f‹w_∑ckë
->
if_öcomög
 =
¥im¨y_if
)) {

507 
ªs
 = 
åue
;

508 
out
;

514 i‡(
dúe˘lök
 &&

515 
√w_b©_ogm_∑ckë
->
âl
 == 1 &&

516 
f‹w_∑ckë
->
if_öcomög
 == if_incoming &&

522 (
b©adv_ogm_∑ckë
->
Êags
 & 
BATADV_DIRECTLINK
 ||

523 (
f‹w_∑ckë
->
own
 &&

524 
f‹w_∑ckë
->
if_öcomög
 !
¥im¨y_if
))) {

525 
ªs
 = 
åue
;

526 
out
;

529 
out
:

530 
	`b©adv_h¨dif_put
(
¥im¨y_if
);

531  
ªs
;

532 
	}
}

545 
	$b©adv_iv_ogm_aggªg©e_√w
(c⁄° *
∑ckë_buff
,

546 
∑ckë_Àn
, 
£nd_time
,

547 
boﬁ
 
dúe˘_lök
,

548 
b©adv_h¨d_iÁ˚
 *
if_öcomög
,

549 
b©adv_h¨d_iÁ˚
 *
if_outgoög
,

550 
own_∑ckë
)

552 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
if_öcomög
->
mesh_iÁ˚
);

553 
b©adv_f‹w_∑ckë
 *
f‹w_∑ckë_aggr
;

554 
sk_buff
 *
skb
;

555 *
skb_buff
;

556 
skb_size
;

557 
©omic_t
 *
queue_À·
 = 
own_∑ckë
 ? 
NULL
 : &
b©_¥iv
->
b©m™_queue_À·
;

559 i‡(
	`©omic_ªad
(&
b©_¥iv
->
aggªg©ed_ogms
))

560 
skb_size
 = 
	`max_t
(, 
BATADV_MAX_AGGREGATION_BYTES
,

561 
∑ckë_Àn
);

563 
skb_size
 = 
∑ckë_Àn
;

565 
skb_size
 +
ETH_HLEN
;

567 
skb
 = 
	`√tdev_Æloc_skb_ù_Æign
(
NULL
, 
skb_size
);

568 i‡(!
skb
)

571 
f‹w_∑ckë_aggr
 = 
	`b©adv_f‹w_∑ckë_Æloc
(
if_öcomög
, 
if_outgoög
,

572 
queue_À·
, 
b©_¥iv
, 
skb
);

573 i‡(!
f‹w_∑ckë_aggr
) {

574 
	`k‰ì_skb
(
skb
);

578 
f‹w_∑ckë_aggr
->
skb
->
¥i‹ôy
 = 
TC_PRIO_CONTROL
;

579 
	`skb_ª£rve
(
f‹w_∑ckë_aggr
->
skb
, 
ETH_HLEN
);

581 
skb_buff
 = 
	`skb_put
(
f‹w_∑ckë_aggr
->
skb
, 
∑ckë_Àn
);

582 
f‹w_∑ckë_aggr
->
∑ckë_Àn
 =Öacket_len;

583 
	`mem˝y
(
skb_buff
, 
∑ckë_buff
, 
∑ckë_Àn
);

585 
f‹w_∑ckë_aggr
->
own
 = 
own_∑ckë
;

586 
	`bôm≠_zîo
(
f‹w_∑ckë_aggr
->
dúe˘_lök_Êags
,

587 
BATADV_MAX_AGGREGATION_PACKETS
);

588 
f‹w_∑ckë_aggr
->
£nd_time
 = send_time;

591 i‡(
dúe˘_lök
)

592 
	`£t_bô
(0, 
f‹w_∑ckë_aggr
->
dúe˘_lök_Êags
);

594 
	`INIT_DELAYED_WORK
(&
f‹w_∑ckë_aggr
->
dñayed_w‹k
,

595 
b©adv_iv_£nd_out°™dög_b©_ogm_∑ckë
);

597 
	`b©adv_f‹w_∑ckë_ogmv1_queue
(
b©_¥iv
, 
f‹w_∑ckë_aggr
, 
£nd_time
);

598 
	}
}

601 
	$b©adv_iv_ogm_aggªg©e
(
b©adv_f‹w_∑ckë
 *
f‹w_∑ckë_aggr
,

602 c⁄° *
∑ckë_buff
,

603 
∑ckë_Àn
, 
boﬁ
 
dúe˘_lök
)

605 
	`skb_put_d©a
(
f‹w_∑ckë_aggr
->
skb
, 
∑ckë_buff
, 
∑ckë_Àn
);

606 
f‹w_∑ckë_aggr
->
∑ckë_Àn
 +=Öacket_len;

609 i‡(
dúe˘_lök
)

610 
	`£t_bô
(
f‹w_∑ckë_aggr
->
num_∑ckës
,

611 
f‹w_∑ckë_aggr
->
dúe˘_lök_Êags
);

613 
f‹w_∑ckë_aggr
->
num_∑ckës
++;

614 
	}
}

626 
	$b©adv_iv_ogm_queue_add
(
b©adv_¥iv
 *
b©_¥iv
,

627 *
∑ckë_buff
,

628 
∑ckë_Àn
,

629 
b©adv_h¨d_iÁ˚
 *
if_öcomög
,

630 
b©adv_h¨d_iÁ˚
 *
if_outgoög
,

631 
own_∑ckë
, 
£nd_time
)

636 
b©adv_f‹w_∑ckë
 *
f‹w_∑ckë_aggr
 = 
NULL
;

637 
b©adv_f‹w_∑ckë
 *
f‹w_∑ckë_pos
 = 
NULL
;

638 
b©adv_ogm_∑ckë
 *batadv_ogm_packet;

639 
boﬁ
 
dúe˘_lök
;

640 
max_aggªg©i⁄_jiffõs
;

642 
b©adv_ogm_∑ckë
 = (b©adv_ogm_∑ckë *)
∑ckë_buff
;

643 
dúe˘_lök
 = !!(
b©adv_ogm_∑ckë
->
Êags
 & 
BATADV_DIRECTLINK
);

644 
max_aggªg©i⁄_jiffõs
 = 
	`m£cs_to_jiffõs
(
BATADV_MAX_AGGREGATION_MS
);

647 
	`•ö_lock_bh
(&
b©_¥iv
->
f‹w_b©_li°_lock
);

649 i‡(
	`©omic_ªad
(&
b©_¥iv
->
aggªg©ed_ogms
Ë&& !
own_∑ckë
) {

650 
	`hli°_f‹_óch_íåy
(
f‹w_∑ckë_pos
,

651 &
b©_¥iv
->
f‹w_b©_li°
, 
li°
) {

652 i‡(
	`b©adv_iv_ogm_ˇn_aggªg©e
(
b©adv_ogm_∑ckë
,

653 
b©_¥iv
, 
∑ckë_Àn
,

654 
£nd_time
, 
dúe˘_lök
,

655 
if_öcomög
,

656 
if_outgoög
,

657 
f‹w_∑ckë_pos
)) {

658 
f‹w_∑ckë_aggr
 = 
f‹w_∑ckë_pos
;

667 i‡(!
f‹w_∑ckë_aggr
) {

669 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
f‹w_b©_li°_lock
);

675 i‡(!
own_∑ckë
 && 
	`©omic_ªad
(&
b©_¥iv
->
aggªg©ed_ogms
))

676 
£nd_time
 +
max_aggªg©i⁄_jiffõs
;

678 
	`b©adv_iv_ogm_aggªg©e_√w
(
∑ckë_buff
, 
∑ckë_Àn
,

679 
£nd_time
, 
dúe˘_lök
,

680 
if_öcomög
, 
if_outgoög
,

681 
own_∑ckë
);

683 
	`b©adv_iv_ogm_aggªg©e
(
f‹w_∑ckë_aggr
, 
∑ckë_buff
,

684 
∑ckë_Àn
, 
dúe˘_lök
);

685 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
f‹w_b©_li°_lock
);

687 
	}
}

689 
	$b©adv_iv_ogm_f‹w¨d
(
b©adv_‹ig_node
 *
‹ig_node
,

690 c⁄° 
ëhhdr
 *ethhdr,

691 
b©adv_ogm_∑ckë
 *batadv_ogm_packet,

692 
boﬁ
 
is_sögÀ_h›_√igh
,

693 
boﬁ
 
is_‰om_be°_√xt_h›
,

694 
b©adv_h¨d_iÁ˚
 *
if_öcomög
,

695 
b©adv_h¨d_iÁ˚
 *
if_outgoög
)

697 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
if_öcomög
->
mesh_iÁ˚
);

698 
u16
 
tvlv_Àn
;

700 i‡(
b©adv_ogm_∑ckë
->
âl
 <= 1) {

701 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
, "ttlÉxceeded\n");

705 i‡(!
is_‰om_be°_√xt_h›
) {

712 i‡(
is_sögÀ_h›_√igh
)

713 
b©adv_ogm_∑ckë
->
Êags
 |
BATADV_NOT_BEST_NEXT_HOP
;

718 
tvlv_Àn
 = 
	`¡ohs
(
b©adv_ogm_∑ckë
->tvlv_len);

720 
b©adv_ogm_∑ckë
->
âl
--;

721 
	`ëhî_addr_c›y
(
b©adv_ogm_∑ckë
->
¥ev_£ndî
, 
ëhhdr
->
h_sour˚
);

724 
b©adv_ogm_∑ckë
->
tq
 = 
	`b©adv_h›_≥«…y
(batadv_ogm_packet->tq,

725 
b©_¥iv
);

727 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

729 
b©adv_ogm_∑ckë
->
tq
, b©adv_ogm_∑ckë->
âl
);

731 i‡(
is_sögÀ_h›_√igh
)

732 
b©adv_ogm_∑ckë
->
Êags
 |
BATADV_DIRECTLINK
;

734 
b©adv_ogm_∑ckë
->
Êags
 &~
BATADV_DIRECTLINK
;

736 
	`b©adv_iv_ogm_queue_add
(
b©_¥iv
, (*)
b©adv_ogm_∑ckë
,

737 
BATADV_OGM_HLEN
 + 
tvlv_Àn
,

738 
if_öcomög
, 
if_outgoög
, 0,

739 
	`b©adv_iv_ogm_fwd_£nd_time
());

740 
	}
}

748 
	$b©adv_iv_ogm_¶ide_own_bˇ°_wödow
(
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
)

750 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
h¨d_iÁ˚
->
mesh_iÁ˚
);

751 
b©adv_hashèbÀ
 *
hash
 = 
b©_¥iv
->
‹ig_hash
;

752 
hli°_hód
 *
hód
;

753 
b©adv_‹ig_node
 *
‹ig_node
;

754 
b©adv_‹ig_iföfo
 *
‹ig_iföfo
;

755 *
w‹d
;

756 
u32
 
i
;

757 
u8
 *
w
;

759 
i
 = 0; i < 
hash
->
size
; i++) {

760 
hód
 = &
hash
->
èbÀ
[
i
];

762 
	`rcu_ªad_lock
();

763 
	`hli°_f‹_óch_íåy_rcu
(
‹ig_node
, 
hód
, 
hash_íåy
) {

764 
	`hli°_f‹_óch_íåy_rcu
(
‹ig_iföfo
,

765 &
‹ig_node
->
iföfo_li°
,

766 
li°
) {

767 i‡(
‹ig_iföfo
->
if_outgoög
 !
h¨d_iÁ˚
)

770 
	`•ö_lock_bh
(&
‹ig_node
->
b©_iv
.
ogm_˙t_lock
);

771 
w‹d
 = 
‹ig_iföfo
->
b©_iv
.
bˇ°_own
;

772 
	`b©adv_bô_gë_∑ckë
(
b©_¥iv
, 
w‹d
, 1, 0);

773 
w
 = &
‹ig_iföfo
->
b©_iv
.
bˇ°_own_sum
;

774 *
w
 = 
	`bôm≠_weight
(
w‹d
,

775 
BATADV_TQ_LOCAL_WINDOW_SIZE
);

776 
	`•ö_u∆ock_bh
(&
‹ig_node
->
b©_iv
.
ogm_˙t_lock
);

779 
	`rcu_ªad_u∆ock
();

781 
	}
}

787 
	$b©adv_iv_ogm_scheduÀ_buff
(
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
)

789 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
h¨d_iÁ˚
->
mesh_iÁ˚
);

790 **
ogm_buff
 = &
h¨d_iÁ˚
->
b©_iv
.ogm_buff;

791 
b©adv_ogm_∑ckë
 *batadv_ogm_packet;

792 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
, *
tmp_h¨d_iÁ˚
;

793 *
ogm_buff_Àn
 = &
h¨d_iÁ˚
->
b©_iv
.ogm_buff_len;

794 
u32
 
£qno
;

795 
u16
 
tvlv_Àn
 = 0;

796 
£nd_time
;

798 
	`lockdï_as£π_hñd
(&
h¨d_iÁ˚
->
b©_iv
.
ogm_buff_muãx
);

801 i‡(!*
ogm_buff
)

810 i‡(
h¨d_iÁ˚
->
if_°©us
 =
BATADV_IF_TO_BE_ACTIVATED
)

811 
h¨d_iÁ˚
->
if_°©us
 = 
BATADV_IF_ACTIVE
;

813 
¥im¨y_if
 = 
	`b©adv_¥im¨y_if_gë_£À˘ed
(
b©_¥iv
);

815 i‡(
h¨d_iÁ˚
 =
¥im¨y_if
) {

819 
	`b©adv_â_loˇl_commô_ch™ges
(
b©_¥iv
);

820 
tvlv_Àn
 = 
	`b©adv_tvlv_c⁄èöî_ogm_≠≥nd
(
b©_¥iv
, 
ogm_buff
,

821 
ogm_buff_Àn
,

822 
BATADV_OGM_HLEN
);

825 
b©adv_ogm_∑ckë
 = (b©adv_ogm_∑ckë *)(*
ogm_buff
);

826 
b©adv_ogm_∑ckë
->
tvlv_Àn
 = 
	`ht⁄s
(tvlv_len);

829 
£qno
 = (
u32
)
	`©omic_ªad
(&
h¨d_iÁ˚
->
b©_iv
.
ogm_£qno
);

830 
b©adv_ogm_∑ckë
->
£qno
 = 
	`ht⁄l
(seqno);

831 
	`©omic_öc
(&
h¨d_iÁ˚
->
b©_iv
.
ogm_£qno
);

833 
	`b©adv_iv_ogm_¶ide_own_bˇ°_wödow
(
h¨d_iÁ˚
);

835 
£nd_time
 = 
	`b©adv_iv_ogm_emô_£nd_time
(
b©_¥iv
);

837 i‡(
h¨d_iÁ˚
 !
¥im¨y_if
) {

841 
	`b©adv_iv_ogm_queue_add
(
b©_¥iv
, *
ogm_buff
, *
ogm_buff_Àn
,

842 
h¨d_iÁ˚
, h¨d_iÁ˚, 1, 
£nd_time
);

843 
out
;

849 
	`rcu_ªad_lock
();

850 
	`li°_f‹_óch_íåy_rcu
(
tmp_h¨d_iÁ˚
, &
b©adv_h¨dif_li°
, 
li°
) {

851 i‡(
tmp_h¨d_iÁ˚
->
mesh_iÁ˚
 !
h¨d_iÁ˚
->mesh_iface)

854 i‡(!
	`kªf_gë_u∆ess_zîo
(&
tmp_h¨d_iÁ˚
->
ªfcou¡
))

857 
	`b©adv_iv_ogm_queue_add
(
b©_¥iv
, *
ogm_buff
,

858 *
ogm_buff_Àn
, 
h¨d_iÁ˚
,

859 
tmp_h¨d_iÁ˚
, 1, 
£nd_time
);

861 
	`b©adv_h¨dif_put
(
tmp_h¨d_iÁ˚
);

863 
	`rcu_ªad_u∆ock
();

865 
out
:

866 
	`b©adv_h¨dif_put
(
¥im¨y_if
);

867 
	}
}

869 
	$b©adv_iv_ogm_scheduÀ
(
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
)

871 i‡(
h¨d_iÁ˚
->
if_°©us
 =
BATADV_IF_NOT_IN_USE
 ||

872 
h¨d_iÁ˚
->
if_°©us
 =
BATADV_IF_TO_BE_REMOVED
)

875 
	`muãx_lock
(&
h¨d_iÁ˚
->
b©_iv
.
ogm_buff_muãx
);

876 
	`b©adv_iv_ogm_scheduÀ_buff
(
h¨d_iÁ˚
);

877 
	`muãx_u∆ock
(&
h¨d_iÁ˚
->
b©_iv
.
ogm_buff_muãx
);

878 
	}
}

890 
u8
 
	$b©adv_iv_‹ig_iföfo_sum
(
b©adv_‹ig_node
 *
‹ig_node
,

891 
b©adv_h¨d_iÁ˚
 *
if_outgoög
)

893 
b©adv_‹ig_iföfo
 *
‹ig_iföfo
;

894 
u8
 
sum
;

896 
‹ig_iföfo
 = 
	`b©adv_‹ig_iföfo_gë
(
‹ig_node
, 
if_outgoög
);

897 i‡(!
‹ig_iföfo
)

900 
	`•ö_lock_bh
(&
‹ig_node
->
b©_iv
.
ogm_˙t_lock
);

901 
sum
 = 
‹ig_iföfo
->
b©_iv
.
bˇ°_own_sum
;

902 
	`•ö_u∆ock_bh
(&
‹ig_node
->
b©_iv
.
ogm_˙t_lock
);

904 
	`b©adv_‹ig_iföfo_put
(
‹ig_iföfo
);

906  
sum
;

907 
	}
}

922 
	$b©adv_iv_ogm_‹ig_upd©e
(
b©adv_¥iv
 *
b©_¥iv
,

923 
b©adv_‹ig_node
 *
‹ig_node
,

924 
b©adv_‹ig_iföfo
 *
‹ig_iföfo
,

925 c⁄° 
ëhhdr
 *ethhdr,

926 c⁄° 
b©adv_ogm_∑ckë
 *batadv_ogm_packet,

927 
b©adv_h¨d_iÁ˚
 *
if_öcomög
,

928 
b©adv_h¨d_iÁ˚
 *
if_outgoög
,

929 
b©adv_dup_°©us
 
dup_°©us
)

931 
b©adv_√igh_iföfo
 *
√igh_iföfo
 = 
NULL
;

932 
b©adv_√igh_iföfo
 *
rouãr_iföfo
 = 
NULL
;

933 
b©adv_√igh_node
 *
√igh_node
 = 
NULL
;

934 
b©adv_√igh_node
 *
tmp_√igh_node
 = 
NULL
;

935 
b©adv_√igh_node
 *
rouãr
 = 
NULL
;

936 
u8
 
sum_‹ig
, 
sum_√igh
;

937 
u8
 *
√igh_addr
;

938 
u8
 
tq_avg
;

940 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

942 
__func__
);

944 
	`rcu_ªad_lock
();

945 
	`hli°_f‹_óch_íåy_rcu
(
tmp_√igh_node
,

946 &
‹ig_node
->
√igh_li°
, 
li°
) {

947 
√igh_addr
 = 
tmp_√igh_node
->
addr
;

948 i‡(
	`b©adv_com∑ª_ëh
(
√igh_addr
, 
ëhhdr
->
h_sour˚
) &&

949 
tmp_√igh_node
->
if_öcomög
 == if_incoming &&

950 
	`kªf_gë_u∆ess_zîo
(&
tmp_√igh_node
->
ªfcou¡
)) {

951 i‡(
	`WARN
(
√igh_node
, "too many matchingÇeigh_nodes"))

952 
	`b©adv_√igh_node_put
(
√igh_node
);

953 
√igh_node
 = 
tmp_√igh_node
;

957 i‡(
dup_°©us
 !
BATADV_NO_DUP
)

961 
√igh_iföfo
 = 
	`b©adv_√igh_iföfo_gë
(
tmp_√igh_node
,

962 
if_outgoög
);

963 i‡(!
√igh_iföfo
)

966 
	`•ö_lock_bh
(&
tmp_√igh_node
->
iföfo_lock
);

967 
	`b©adv_rög_buf„r_£t
(
√igh_iföfo
->
b©_iv
.
tq_ªcv
,

968 &
√igh_iföfo
->
b©_iv
.
tq_ödex
, 0);

969 
tq_avg
 = 
	`b©adv_rög_buf„r_avg
(
√igh_iföfo
->
b©_iv
.
tq_ªcv
);

970 
√igh_iföfo
->
b©_iv
.
tq_avg
 =Åq_avg;

971 
	`•ö_u∆ock_bh
(&
tmp_√igh_node
->
iföfo_lock
);

973 
	`b©adv_√igh_iföfo_put
(
√igh_iföfo
);

974 
√igh_iföfo
 = 
NULL
;

977 i‡(!
√igh_node
) {

978 
b©adv_‹ig_node
 *
‹ig_tmp
;

980 
‹ig_tmp
 = 
	`b©adv_iv_ogm_‹ig_gë
(
b©_¥iv
, 
ëhhdr
->
h_sour˚
);

981 i‡(!
‹ig_tmp
)

982 
u∆ock
;

984 
√igh_node
 = 
	`b©adv_iv_ogm_√igh_√w
(
if_öcomög
,

985 
ëhhdr
->
h_sour˚
,

986 
‹ig_node
, 
‹ig_tmp
);

988 
	`b©adv_‹ig_node_put
(
‹ig_tmp
);

989 i‡(!
√igh_node
)

990 
u∆ock
;

992 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

996 
	`rcu_ªad_u∆ock
();

997 
√igh_iföfo
 = 
	`b©adv_√igh_iföfo_√w
(
√igh_node
, 
if_outgoög
);

998 i‡(!
√igh_iföfo
)

999 
out
;

1001 
√igh_node
->
œ°_£í
 = 
jiffõs
;

1003 
	`•ö_lock_bh
(&
√igh_node
->
iföfo_lock
);

1004 
	`b©adv_rög_buf„r_£t
(
√igh_iföfo
->
b©_iv
.
tq_ªcv
,

1005 &
√igh_iföfo
->
b©_iv
.
tq_ödex
,

1006 
b©adv_ogm_∑ckë
->
tq
);

1007 
tq_avg
 = 
	`b©adv_rög_buf„r_avg
(
√igh_iföfo
->
b©_iv
.
tq_ªcv
);

1008 
√igh_iföfo
->
b©_iv
.
tq_avg
 =Åq_avg;

1009 
	`•ö_u∆ock_bh
(&
√igh_node
->
iföfo_lock
);

1011 i‡(
dup_°©us
 =
BATADV_NO_DUP
) {

1012 
‹ig_iföfo
->
œ°_âl
 = 
b©adv_ogm_∑ckë
->
âl
;

1013 
√igh_iföfo
->
œ°_âl
 = 
b©adv_ogm_∑ckë
->
âl
;

1019 
rouãr
 = 
	`b©adv_‹ig_rouãr_gë
(
‹ig_node
, 
if_outgoög
);

1020 i‡(
rouãr
 =
√igh_node
)

1021 
out
;

1023 i‡(
rouãr
) {

1024 
rouãr_iföfo
 = 
	`b©adv_√igh_iföfo_gë
(
rouãr
, 
if_outgoög
);

1025 i‡(!
rouãr_iföfo
)

1026 
out
;

1031 i‡(
rouãr_iföfo
->
b©_iv
.
tq_avg
 > 
√igh_iföfo
->bat_iv.tq_avg)

1032 
out
;

1038 i‡(
rouãr_iföfo
 &&

1039 
√igh_iföfo
->
b©_iv
.
tq_avg
 =
rouãr_iföfo
->bat_iv.tq_avg) {

1040 
sum_‹ig
 = 
	`b©adv_iv_‹ig_iföfo_sum
(
rouãr
->
‹ig_node
,

1041 
rouãr
->
if_öcomög
);

1042 
sum_√igh
 = 
	`b©adv_iv_‹ig_iföfo_sum
(
√igh_node
->
‹ig_node
,

1043 
√igh_node
->
if_öcomög
);

1044 i‡(
sum_‹ig
 >
sum_√igh
)

1045 
out
;

1048 
	`b©adv_upd©e_rouã
(
b©_¥iv
, 
‹ig_node
, 
if_outgoög
, 
√igh_node
);

1049 
out
;

1051 
u∆ock
:

1052 
	`rcu_ªad_u∆ock
();

1053 
out
:

1054 
	`b©adv_√igh_node_put
(
√igh_node
);

1055 
	`b©adv_√igh_node_put
(
rouãr
);

1056 
	`b©adv_√igh_iföfo_put
(
√igh_iföfo
);

1057 
	`b©adv_√igh_iföfo_put
(
rouãr_iföfo
);

1058 
	}
}

1070 
boﬁ
 
	$b©adv_iv_ogm_ˇlc_tq
(
b©adv_‹ig_node
 *
‹ig_node
,

1071 
b©adv_‹ig_node
 *
‹ig_√igh_node
,

1072 
b©adv_ogm_∑ckë
 *batadv_ogm_packet,

1073 
b©adv_h¨d_iÁ˚
 *
if_öcomög
,

1074 
b©adv_h¨d_iÁ˚
 *
if_outgoög
)

1076 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
if_öcomög
->
mesh_iÁ˚
);

1077 
b©adv_√igh_node
 *
√igh_node
 = 
NULL
, *
tmp_√igh_node
;

1078 
b©adv_√igh_iföfo
 *
√igh_iföfo
;

1079 
u8
 
tŸÆ_cou¡
;

1080 
u8
 
‹ig_eq_cou¡
, 
√igh_rq_cou¡
, 
√igh_rq_öv
, 
tq_own
;

1081 
tq_iÁ˚_h›_≥«…y
 = 
BATADV_TQ_MAX_VALUE
;

1082 
√igh_rq_öv_cube
, 
√igh_rq_max_cube
;

1083 
tq_asym_≥«…y
, 
öv_asym_≥«…y
;

1084 
comböed_tq
;

1085 
boﬁ
 
ªt
 = 
Ál£
;

1088 
	`rcu_ªad_lock
();

1089 
	`hli°_f‹_óch_íåy_rcu
(
tmp_√igh_node
,

1090 &
‹ig_√igh_node
->
√igh_li°
, 
li°
) {

1091 i‡(!
	`b©adv_com∑ª_ëh
(
tmp_√igh_node
->
addr
,

1092 
‹ig_√igh_node
->
‹ig
))

1095 i‡(
tmp_√igh_node
->
if_öcomög
 != if_incoming)

1098 i‡(!
	`kªf_gë_u∆ess_zîo
(&
tmp_√igh_node
->
ªfcou¡
))

1101 
√igh_node
 = 
tmp_√igh_node
;

1104 
	`rcu_ªad_u∆ock
();

1106 i‡(!
√igh_node
)

1107 
√igh_node
 = 
	`b©adv_iv_ogm_√igh_√w
(
if_öcomög
,

1108 
‹ig_√igh_node
->
‹ig
,

1109 
‹ig_√igh_node
,

1110 
‹ig_√igh_node
);

1112 i‡(!
√igh_node
)

1113 
out
;

1116 i‡(
‹ig_node
 =
‹ig_√igh_node
)

1117 
√igh_node
->
œ°_£í
 = 
jiffõs
;

1119 
‹ig_node
->
œ°_£í
 = 
jiffõs
;

1122 
‹ig_eq_cou¡
 = 
	`b©adv_iv_‹ig_iföfo_sum
(
‹ig_√igh_node
, 
if_öcomög
);

1123 
√igh_iföfo
 = 
	`b©adv_√igh_iföfo_√w
(
√igh_node
, 
if_outgoög
);

1124 i‡(
√igh_iföfo
) {

1125 
√igh_rq_cou¡
 = 
√igh_iföfo
->
b©_iv
.
ªÆ_∑ckë_cou¡
;

1126 
	`b©adv_√igh_iföfo_put
(
√igh_iföfo
);

1128 
√igh_rq_cou¡
 = 0;

1132 i‡(
‹ig_eq_cou¡
 > 
√igh_rq_cou¡
)

1133 
tŸÆ_cou¡
 = 
√igh_rq_cou¡
;

1135 
tŸÆ_cou¡
 = 
‹ig_eq_cou¡
;

1140 i‡(
tŸÆ_cou¡
 < 
BATADV_TQ_LOCAL_BIDRECT_SEND_MINIMUM
 ||

1141 
√igh_rq_cou¡
 < 
BATADV_TQ_LOCAL_BIDRECT_RECV_MINIMUM
)

1142 
tq_own
 = 0;

1148 
tq_own
 = (
BATADV_TQ_MAX_VALUE
 * 
tŸÆ_cou¡
Ë/ 
√igh_rq_cou¡
;

1155 
√igh_rq_öv
 = 
BATADV_TQ_LOCAL_WINDOW_SIZE
 - 
√igh_rq_cou¡
;

1156 
√igh_rq_öv_cube
 = 
√igh_rq_öv
 *Çeigh_rq_inv *Çeigh_rq_inv;

1157 
√igh_rq_max_cube
 = 
BATADV_TQ_LOCAL_WINDOW_SIZE
 *

1158 
BATADV_TQ_LOCAL_WINDOW_SIZE
 *

1159 
BATADV_TQ_LOCAL_WINDOW_SIZE
;

1160 
öv_asym_≥«…y
 = 
BATADV_TQ_MAX_VALUE
 * 
√igh_rq_öv_cube
;

1161 
öv_asym_≥«…y
 /
√igh_rq_max_cube
;

1162 
tq_asym_≥«…y
 = 
BATADV_TQ_MAX_VALUE
 - 
öv_asym_≥«…y
;

1163 
tq_iÁ˚_h›_≥«…y
 -
	`©omic_ªad
(&
if_öcomög
->
h›_≥«…y
);

1169 i‡(
if_outgoög
 && 
if_öcomög
 == if_outgoing &&

1170 
	`b©adv_is_wifi_h¨dif
(
if_outgoög
))

1171 
tq_iÁ˚_h›_≥«…y
 = 
	`b©adv_h›_≥«…y
(tq_iface_hop_penalty,

1172 
b©_¥iv
);

1174 
comböed_tq
 = 
b©adv_ogm_∑ckë
->
tq
 *

1175 
tq_own
 *

1176 
tq_asym_≥«…y
 *

1177 
tq_iÁ˚_h›_≥«…y
;

1178 
comböed_tq
 /
BATADV_TQ_MAX_VALUE
 *

1179 
BATADV_TQ_MAX_VALUE
 *

1180 
BATADV_TQ_MAX_VALUE
;

1181 
b©adv_ogm_∑ckë
->
tq
 = 
comböed_tq
;

1183 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

1185 
‹ig_node
->
‹ig
, 
‹ig_√igh_node
->‹ig, 
tŸÆ_cou¡
,

1186 
√igh_rq_cou¡
, 
tq_own
, 
tq_asym_≥«…y
,

1187 
tq_iÁ˚_h›_≥«…y
, 
b©adv_ogm_∑ckë
->
tq
,

1188 
if_öcomög
->
√t_dev
->
«me
,

1189 
if_outgoög
 ? if_outgoög->
√t_dev
->
«me
 : "DEFAULT");

1194 i‡(
b©adv_ogm_∑ckë
->
tq
 >
BATADV_TQ_TOTAL_BIDRECT_LIMIT
)

1195 
ªt
 = 
åue
;

1197 
out
:

1198 
	`b©adv_√igh_node_put
(
√igh_node
);

1199  
ªt
;

1200 
	}
}

1212 
b©adv_dup_°©us


1213 
	$b©adv_iv_ogm_upd©e_£qnos
(c⁄° 
ëhhdr
 *ethhdr,

1214 c⁄° 
b©adv_ogm_∑ckë
 *batadv_ogm_packet,

1215 c⁄° 
b©adv_h¨d_iÁ˚
 *
if_öcomög
,

1216 
b©adv_h¨d_iÁ˚
 *
if_outgoög
)

1218 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
if_öcomög
->
mesh_iÁ˚
);

1219 
b©adv_‹ig_node
 *
‹ig_node
;

1220 
b©adv_‹ig_iföfo
 *
‹ig_iföfo
 = 
NULL
;

1221 
b©adv_√igh_node
 *
√igh_node
;

1222 
b©adv_√igh_iföfo
 *
√igh_iföfo
;

1223 
boﬁ
 
is_dup
;

1224 
s32
 
£q_diff
;

1225 
boﬁ
 
√ed_upd©e
 = 
Ál£
;

1226 
£t_m¨k
;

1227 
b©adv_dup_°©us
 
ªt
 = 
BATADV_NO_DUP
;

1228 
u32
 
£qno
 = 
	`¡ohl
(
b©adv_ogm_∑ckë
->seqno);

1229 
u8
 *
√igh_addr
;

1230 
u8
 
∑ckë_cou¡
;

1231 *
bôm≠
;

1233 
‹ig_node
 = 
	`b©adv_iv_ogm_‹ig_gë
(
b©_¥iv
, 
b©adv_ogm_∑ckë
->
‹ig
);

1234 i‡(!
‹ig_node
)

1235  
BATADV_NO_DUP
;

1237 
‹ig_iföfo
 = 
	`b©adv_‹ig_iföfo_√w
(
‹ig_node
, 
if_outgoög
);

1238 i‡(
	`WARN_ON
(!
‹ig_iföfo
)) {

1239 
	`b©adv_‹ig_node_put
(
‹ig_node
);

1243 
	`•ö_lock_bh
(&
‹ig_node
->
b©_iv
.
ogm_˙t_lock
);

1244 
£q_diff
 = 
£qno
 - 
‹ig_iföfo
->
œ°_ªÆ_£qno
;

1247 i‡(!
	`hli°_em±y
(&
‹ig_node
->
√igh_li°
) &&

1248 
	`b©adv_wödow_¥Ÿe˘ed
(
b©_¥iv
, 
£q_diff
,

1249 
BATADV_TQ_LOCAL_WINDOW_SIZE
,

1250 &
‹ig_iföfo
->
b©m™_£qno_ª£t
, 
NULL
)) {

1251 
ªt
 = 
BATADV_PROTECTED
;

1252 
out
;

1255 
	`rcu_ªad_lock
();

1256 
	`hli°_f‹_óch_íåy_rcu
(
√igh_node
, &
‹ig_node
->
√igh_li°
, 
li°
) {

1257 
√igh_iföfo
 = 
	`b©adv_√igh_iföfo_√w
(
√igh_node
,

1258 
if_outgoög
);

1259 i‡(!
√igh_iföfo
)

1262 
√igh_addr
 = 
√igh_node
->
addr
;

1263 
is_dup
 = 
	`b©adv_ã°_bô
(
√igh_iföfo
->
b©_iv
.
ªÆ_bôs
,

1264 
‹ig_iföfo
->
œ°_ªÆ_£qno
,

1265 
£qno
);

1267 i‡(
	`b©adv_com∑ª_ëh
(
√igh_addr
, 
ëhhdr
->
h_sour˚
) &&

1268 
√igh_node
->
if_öcomög
 == if_incoming) {

1269 
£t_m¨k
 = 1;

1270 i‡(
is_dup
)

1271 
ªt
 = 
BATADV_NEIGH_DUP
;

1273 
£t_m¨k
 = 0;

1274 i‡(
is_dup
 && 
ªt
 !
BATADV_NEIGH_DUP
)

1275 
ªt
 = 
BATADV_ORIG_DUP
;

1279 
bôm≠
 = 
√igh_iföfo
->
b©_iv
.
ªÆ_bôs
;

1280 
√ed_upd©e
 |
	`b©adv_bô_gë_∑ckë
(
b©_¥iv
, 
bôm≠
,

1281 
£q_diff
, 
£t_m¨k
);

1283 
∑ckë_cou¡
 = 
	`bôm≠_weight
(
bôm≠
,

1284 
BATADV_TQ_LOCAL_WINDOW_SIZE
);

1285 
√igh_iföfo
->
b©_iv
.
ªÆ_∑ckë_cou¡
 = 
∑ckë_cou¡
;

1286 
	`b©adv_√igh_iföfo_put
(
√igh_iföfo
);

1288 
	`rcu_ªad_u∆ock
();

1290 i‡(
√ed_upd©e
) {

1291 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

1293 
if_outgoög
 ? if_outgoög->
√t_dev
->
«me
 : "DEFAULT",

1294 
‹ig_iföfo
->
œ°_ªÆ_£qno
, 
£qno
);

1295 
‹ig_iföfo
->
œ°_ªÆ_£qno
 = 
£qno
;

1298 
out
:

1299 
	`•ö_u∆ock_bh
(&
‹ig_node
->
b©_iv
.
ogm_˙t_lock
);

1300 
	`b©adv_‹ig_node_put
(
‹ig_node
);

1301 
	`b©adv_‹ig_iföfo_put
(
‹ig_iföfo
);

1302  
ªt
;

1303 
	}
}

1315 
	$b©adv_iv_ogm_¥o˚ss_≥r_outif
(c⁄° 
sk_buff
 *
skb
, 
ogm_off£t
,

1316 
b©adv_‹ig_node
 *
‹ig_node
,

1317 
b©adv_h¨d_iÁ˚
 *
if_öcomög
,

1318 
b©adv_h¨d_iÁ˚
 *
if_outgoög
)

1320 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
if_öcomög
->
mesh_iÁ˚
);

1321 
b©adv_h¨dif_√igh_node
 *
h¨dif_√igh
 = 
NULL
;

1322 
b©adv_√igh_node
 *
rouãr
 = 
NULL
;

1323 
b©adv_√igh_node
 *
rouãr_rouãr
 = 
NULL
;

1324 
b©adv_‹ig_node
 *
‹ig_√igh_node
;

1325 
b©adv_‹ig_iföfo
 *
‹ig_iföfo
;

1326 
b©adv_√igh_node
 *
‹ig_√igh_rouãr
 = 
NULL
;

1327 
b©adv_√igh_iföfo
 *
rouãr_iföfo
 = 
NULL
;

1328 
b©adv_ogm_∑ckë
 *
ogm_∑ckë
;

1329 
b©adv_dup_°©us
 
dup_°©us
;

1330 
boﬁ
 
is_‰om_be°_√xt_h›
 = 
Ál£
;

1331 
boﬁ
 
is_sögÀ_h›_√igh
 = 
Ál£
;

1332 
boﬁ
 
ßme£q
, 
simû¨_âl
;

1333 
sk_buff
 *
skb_¥iv
;

1334 
ëhhdr
 *ethhdr;

1335 
u8
 *
¥ev_£ndî
;

1336 
boﬁ
 
is_bidúe˘
;

1341 
skb_¥iv
 = 
	`skb_c›y
(
skb
, 
GFP_ATOMIC
);

1342 i‡(!
skb_¥iv
)

1345 
ëhhdr
 = 
	`ëh_hdr
(
skb_¥iv
);

1346 
ogm_∑ckë
 = (
b©adv_ogm_∑ckë
 *)(
skb_¥iv
->
d©a
 + 
ogm_off£t
);

1348 
dup_°©us
 = 
	`b©adv_iv_ogm_upd©e_£qnos
(
ëhhdr
, 
ogm_∑ckë
,

1349 
if_öcomög
, 
if_outgoög
);

1350 i‡(
	`b©adv_com∑ª_ëh
(
ëhhdr
->
h_sour˚
, 
ogm_∑ckë
->
‹ig
))

1351 
is_sögÀ_h›_√igh
 = 
åue
;

1353 i‡(
dup_°©us
 =
BATADV_PROTECTED
) {

1354 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

1356 
ëhhdr
->
h_sour˚
);

1357 
out
;

1360 i‡(
ogm_∑ckë
->
tq
 == 0) {

1361 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

1363 
out
;

1366 i‡(
is_sögÀ_h›_√igh
) {

1367 
h¨dif_√igh
 = 
	`b©adv_h¨dif_√igh_gë
(
if_öcomög
,

1368 
ëhhdr
->
h_sour˚
);

1369 i‡(
h¨dif_√igh
)

1370 
h¨dif_√igh
->
œ°_£í
 = 
jiffõs
;

1373 
rouãr
 = 
	`b©adv_‹ig_rouãr_gë
(
‹ig_node
, 
if_outgoög
);

1374 i‡(
rouãr
) {

1375 
rouãr_rouãr
 = 
	`b©adv_‹ig_rouãr_gë
(
rouãr
->
‹ig_node
,

1376 
if_outgoög
);

1377 
rouãr_iföfo
 = 
	`b©adv_√igh_iföfo_gë
(
rouãr
, 
if_outgoög
);

1380 i‡((
rouãr_iföfo
 &&Ñouãr_iföfo->
b©_iv
.
tq_avg
 != 0) &&

1381 (
	`b©adv_com∑ª_ëh
(
rouãr
->
addr
, 
ëhhdr
->
h_sour˚
)))

1382 
is_‰om_be°_√xt_h›
 = 
åue
;

1384 
¥ev_£ndî
 = 
ogm_∑ckë
->prev_sender;

1386 i‡(
rouãr
 && 
rouãr_rouãr
 &&

1387 (
	`b©adv_com∑ª_ëh
(
rouãr
->
addr
, 
¥ev_£ndî
)) &&

1388 !(
	`b©adv_com∑ª_ëh
(
ogm_∑ckë
->
‹ig
, 
¥ev_£ndî
)) &&

1389 (
	`b©adv_com∑ª_ëh
(
rouãr
->
addr
, 
rouãr_rouãr
->addr))) {

1390 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

1392 
ëhhdr
->
h_sour˚
);

1393 
out
;

1396 i‡(
if_outgoög
 =
BATADV_IF_DEFAULT
)

1397 
	`b©adv_tvlv_ogm_ª˚ive
(
b©_¥iv
, 
ogm_∑ckë
, 
‹ig_node
);

1402 i‡(
is_sögÀ_h›_√igh
)

1403 
‹ig_√igh_node
 = 
‹ig_node
;

1405 
‹ig_√igh_node
 = 
	`b©adv_iv_ogm_‹ig_gë
(
b©_¥iv
,

1406 
ëhhdr
->
h_sour˚
);

1408 i‡(!
‹ig_√igh_node
)

1409 
out
;

1412 
	`b©adv_nc_upd©e_nc_node
(
b©_¥iv
, 
‹ig_node
, 
‹ig_√igh_node
,

1413 
ogm_∑ckë
, 
is_sögÀ_h›_√igh
);

1415 
‹ig_√igh_rouãr
 = 
	`b©adv_‹ig_rouãr_gë
(
‹ig_√igh_node
,

1416 
if_outgoög
);

1421 i‡(!
is_sögÀ_h›_√igh
 && !
‹ig_√igh_rouãr
) {

1422 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

1424 
out_√igh
;

1427 
is_bidúe˘
 = 
	`b©adv_iv_ogm_ˇlc_tq
(
‹ig_node
, 
‹ig_√igh_node
,

1428 
ogm_∑ckë
, 
if_öcomög
,

1429 
if_outgoög
);

1434 
‹ig_iföfo
 = 
	`b©adv_‹ig_iföfo_√w
(
‹ig_node
, 
if_outgoög
);

1435 i‡(!
‹ig_iföfo
)

1436 
out_√igh
;

1438 
ßme£q
 = 
‹ig_iföfo
->
œ°_ªÆ_£qno
 =
	`¡ohl
(
ogm_∑ckë
->
£qno
);

1439 
simû¨_âl
 = (
‹ig_iföfo
->
œ°_âl
 - 3Ë<
ogm_∑ckë
->
âl
;

1441 i‡(
is_bidúe˘
 && (
dup_°©us
 =
BATADV_NO_DUP
 ||

1442 (
ßme£q
 && 
simû¨_âl
))) {

1443 
	`b©adv_iv_ogm_‹ig_upd©e
(
b©_¥iv
, 
‹ig_node
,

1444 
‹ig_iföfo
, 
ëhhdr
,

1445 
ogm_∑ckë
, 
if_öcomög
,

1446 
if_outgoög
, 
dup_°©us
);

1448 
	`b©adv_‹ig_iföfo_put
(
‹ig_iföfo
);

1451 i‡(
if_outgoög
 =
BATADV_IF_DEFAULT
)

1452 
out_√igh
;

1455 i‡(
is_sögÀ_h›_√igh
) {

1459 i‡(
ogm_∑ckë
->
âl
 <= 2 &&

1460 
if_öcomög
 !
if_outgoög
) {

1461 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

1463 
out_√igh
;

1466 
	`b©adv_iv_ogm_f‹w¨d
(
‹ig_node
, 
ëhhdr
, 
ogm_∑ckë
,

1467 
is_sögÀ_h›_√igh
,

1468 
is_‰om_be°_√xt_h›
, 
if_öcomög
,

1469 
if_outgoög
);

1471 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

1473 
out_√igh
;

1477 i‡(!
is_bidúe˘
) {

1478 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

1480 
out_√igh
;

1483 i‡(
dup_°©us
 =
BATADV_NEIGH_DUP
) {

1484 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

1486 
out_√igh
;

1489 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

1491 
	`b©adv_iv_ogm_f‹w¨d
(
‹ig_node
, 
ëhhdr
, 
ogm_∑ckë
,

1492 
is_sögÀ_h›_√igh
, 
is_‰om_be°_√xt_h›
,

1493 
if_öcomög
, 
if_outgoög
);

1495 
out_√igh
:

1496 i‡(
‹ig_√igh_node
 && !
is_sögÀ_h›_√igh
)

1497 
	`b©adv_‹ig_node_put
(
‹ig_√igh_node
);

1498 
out
:

1499 
	`b©adv_√igh_iföfo_put
(
rouãr_iföfo
);

1500 
	`b©adv_√igh_node_put
(
rouãr
);

1501 
	`b©adv_√igh_node_put
(
rouãr_rouãr
);

1502 
	`b©adv_√igh_node_put
(
‹ig_√igh_rouãr
);

1503 
	`b©adv_h¨dif_√igh_put
(
h¨dif_√igh
);

1505 
	`c⁄sume_skb
(
skb_¥iv
);

1506 
	}
}

1515 
	$b©adv_iv_ogm_¥o˚ss_ª∂y
(
b©adv_ogm_∑ckë
 *
ogm_∑ckë
,

1516 
b©adv_h¨d_iÁ˚
 *
if_öcomög
,

1517 
b©adv_‹ig_node
 *
‹ig_node
,

1518 
u32
 
if_öcomög_£qno
)

1520 
b©adv_‹ig_iföfo
 *
‹ig_iföfo
;

1521 
s32
 
bô_pos
;

1522 
u8
 *
weight
;

1527 i‡(!(
ogm_∑ckë
->
Êags
 & 
BATADV_DIRECTLINK
))

1530 i‡(!
	`b©adv_com∑ª_ëh
(
if_öcomög
->
√t_dev
->
dev_addr
,

1531 
ogm_∑ckë
->
‹ig
))

1534 
‹ig_iföfo
 = 
	`b©adv_‹ig_iföfo_gë
(
‹ig_node
, 
if_öcomög
);

1535 i‡(!
‹ig_iföfo
)

1539 
	`•ö_lock_bh
(&
‹ig_node
->
b©_iv
.
ogm_˙t_lock
);

1540 
bô_pos
 = 
if_öcomög_£qno
 - 2;

1541 
bô_pos
 -
	`¡ohl
(
ogm_∑ckë
->
£qno
);

1542 
	`b©adv_£t_bô
(
‹ig_iföfo
->
b©_iv
.
bˇ°_own
, 
bô_pos
);

1543 
weight
 = &
‹ig_iföfo
->
b©_iv
.
bˇ°_own_sum
;

1544 *
weight
 = 
	`bôm≠_weight
(
‹ig_iföfo
->
b©_iv
.
bˇ°_own
,

1545 
BATADV_TQ_LOCAL_WINDOW_SIZE
);

1546 
	`•ö_u∆ock_bh
(&
‹ig_node
->
b©_iv
.
ogm_˙t_lock
);

1548 
	`b©adv_‹ig_iföfo_put
(
‹ig_iföfo
);

1549 
	}
}

1557 
	$b©adv_iv_ogm_¥o˚ss
(c⁄° 
sk_buff
 *
skb
, 
ogm_off£t
,

1558 
b©adv_h¨d_iÁ˚
 *
if_öcomög
)

1560 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
if_öcomög
->
mesh_iÁ˚
);

1561 
b©adv_‹ig_node
 *
‹ig_√igh_node
, *
‹ig_node
;

1562 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
;

1563 
b©adv_ogm_∑ckë
 *
ogm_∑ckë
;

1564 
u32
 
if_öcomög_£qno
;

1565 
boﬁ
 
has_dúe˘lök_Êag
;

1566 
ëhhdr
 *ethhdr;

1567 
boﬁ
 
is_my_ﬁd‹ig
 = 
Ál£
;

1568 
boﬁ
 
is_my_addr
 = 
Ál£
;

1569 
boﬁ
 
is_my_‹ig
 = 
Ál£
;

1571 
ogm_∑ckë
 = (
b©adv_ogm_∑ckë
 *)(
skb
->
d©a
 + 
ogm_off£t
);

1572 
ëhhdr
 = 
	`ëh_hdr
(
skb
);

1586 i‡(
ogm_∑ckë
->
∑ckë_ty≥
 !
BATADV_IV_OGM
)

1590 
if_öcomög_£qno
 = 
	`©omic_ªad
(&
if_öcomög
->
b©_iv
.
ogm_£qno
);

1592 i‡(
ogm_∑ckë
->
Êags
 & 
BATADV_DIRECTLINK
)

1593 
has_dúe˘lök_Êag
 = 
åue
;

1595 
has_dúe˘lök_Êag
 = 
Ál£
;

1597 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

1599 
ëhhdr
->
h_sour˚
, 
if_öcomög
->
√t_dev
->
«me
,

1600 
if_öcomög
->
√t_dev
->
dev_addr
, 
ogm_∑ckë
->
‹ig
,

1601 
ogm_∑ckë
->
¥ev_£ndî
, 
	`¡ohl
(ogm_∑ckë->
£qno
),

1602 
ogm_∑ckë
->
tq
, ogm_∑ckë->
âl
,

1603 
ogm_∑ckë
->
vîsi⁄
, 
has_dúe˘lök_Êag
);

1605 
	`rcu_ªad_lock
();

1606 
	`li°_f‹_óch_íåy_rcu
(
h¨d_iÁ˚
, &
b©adv_h¨dif_li°
, 
li°
) {

1607 i‡(
h¨d_iÁ˚
->
if_°©us
 !
BATADV_IF_ACTIVE
)

1610 i‡(
h¨d_iÁ˚
->
mesh_iÁ˚
 !
if_öcomög
->mesh_iface)

1613 i‡(
	`b©adv_com∑ª_ëh
(
ëhhdr
->
h_sour˚
,

1614 
h¨d_iÁ˚
->
√t_dev
->
dev_addr
))

1615 
is_my_addr
 = 
åue
;

1617 i‡(
	`b©adv_com∑ª_ëh
(
ogm_∑ckë
->
‹ig
,

1618 
h¨d_iÁ˚
->
√t_dev
->
dev_addr
))

1619 
is_my_‹ig
 = 
åue
;

1621 i‡(
	`b©adv_com∑ª_ëh
(
ogm_∑ckë
->
¥ev_£ndî
,

1622 
h¨d_iÁ˚
->
√t_dev
->
dev_addr
))

1623 
is_my_ﬁd‹ig
 = 
åue
;

1625 
	`rcu_ªad_u∆ock
();

1627 i‡(
is_my_addr
) {

1628 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

1630 
ëhhdr
->
h_sour˚
);

1634 i‡(
is_my_‹ig
) {

1635 
‹ig_√igh_node
 = 
	`b©adv_iv_ogm_‹ig_gë
(
b©_¥iv
,

1636 
ëhhdr
->
h_sour˚
);

1637 i‡(!
‹ig_√igh_node
)

1640 
	`b©adv_iv_ogm_¥o˚ss_ª∂y
(
ogm_∑ckë
, 
if_öcomög
,

1641 
‹ig_√igh_node
, 
if_öcomög_£qno
);

1643 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

1645 
	`b©adv_‹ig_node_put
(
‹ig_√igh_node
);

1649 i‡(
is_my_ﬁd‹ig
) {

1650 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

1652 
ëhhdr
->
h_sour˚
);

1656 i‡(
ogm_∑ckë
->
Êags
 & 
BATADV_NOT_BEST_NEXT_HOP
) {

1657 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

1659 
ëhhdr
->
h_sour˚
);

1663 
‹ig_node
 = 
	`b©adv_iv_ogm_‹ig_gë
(
b©_¥iv
, 
ogm_∑ckë
->
‹ig
);

1664 i‡(!
‹ig_node
)

1667 
	`b©adv_iv_ogm_¥o˚ss_≥r_outif
(
skb
, 
ogm_off£t
, 
‹ig_node
,

1668 
if_öcomög
, 
BATADV_IF_DEFAULT
);

1670 
	`rcu_ªad_lock
();

1671 
	`li°_f‹_óch_íåy_rcu
(
h¨d_iÁ˚
, &
b©adv_h¨dif_li°
, 
li°
) {

1672 i‡(
h¨d_iÁ˚
->
if_°©us
 !
BATADV_IF_ACTIVE
)

1675 i‡(
h¨d_iÁ˚
->
mesh_iÁ˚
 !
b©_¥iv
->mesh_iface)

1678 i‡(!
	`kªf_gë_u∆ess_zîo
(&
h¨d_iÁ˚
->
ªfcou¡
))

1681 
	`b©adv_iv_ogm_¥o˚ss_≥r_outif
(
skb
, 
ogm_off£t
, 
‹ig_node
,

1682 
if_öcomög
, 
h¨d_iÁ˚
);

1684 
	`b©adv_h¨dif_put
(
h¨d_iÁ˚
);

1686 
	`rcu_ªad_u∆ock
();

1688 
	`b©adv_‹ig_node_put
(
‹ig_node
);

1689 
	}
}

1691 
	$b©adv_iv_£nd_out°™dög_b©_ogm_∑ckë
(
w‹k_°ru˘
 *
w‹k
)

1693 
dñayed_w‹k
 *delayed_work;

1694 
b©adv_f‹w_∑ckë
 *
f‹w_∑ckë
;

1695 
b©adv_¥iv
 *
b©_¥iv
;

1696 
boﬁ
 
dr›≥d
 = 
Ál£
;

1698 
dñayed_w‹k
 = 
	`to_dñayed_w‹k
(
w‹k
);

1699 
f‹w_∑ckë
 = 
	`c⁄èöî_of
(
dñayed_w‹k
, 
b©adv_f‹w_∑ckë
,

1700 
dñayed_w‹k
);

1701 
b©_¥iv
 = 
	`√tdev_¥iv
(
f‹w_∑ckë
->
if_öcomög
->
mesh_iÁ˚
);

1703 i‡(
	`©omic_ªad
(&
b©_¥iv
->
mesh_°©e
Ë=
BATADV_MESH_DEACTIVATING
) {

1704 
dr›≥d
 = 
åue
;

1705 
out
;

1708 
	`b©adv_iv_ogm_emô
(
f‹w_∑ckë
);

1718 i‡(
f‹w_∑ckë
->
own
 &&

1719 
f‹w_∑ckë
->
if_öcomög
 =f‹w_∑ckë->
if_outgoög
)

1720 
	`b©adv_iv_ogm_scheduÀ
(
f‹w_∑ckë
->
if_öcomög
);

1722 
out
:

1724 i‡(
	`b©adv_f‹w_∑ckë_°ól
(
f‹w_∑ckë
,

1725 &
b©_¥iv
->
f‹w_b©_li°_lock
))

1726 
	`b©adv_f‹w_∑ckë_‰ì
(
f‹w_∑ckë
, 
dr›≥d
);

1727 
	}
}

1729 
	$b©adv_iv_ogm_ª˚ive
(
sk_buff
 *
skb
,

1730 
b©adv_h¨d_iÁ˚
 *
if_öcomög
)

1732 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
if_öcomög
->
mesh_iÁ˚
);

1733 
b©adv_ogm_∑ckë
 *
ogm_∑ckë
;

1734 
u8
 *
∑ckë_pos
;

1735 
ogm_off£t
;

1736 
boﬁ
 
ªs
;

1737 
ªt
 = 
NET_RX_DROP
;

1739 
ªs
 = 
	`b©adv_check_m™agemít_∑ckë
(
skb
, 
if_öcomög
, 
BATADV_OGM_HLEN
);

1740 i‡(!
ªs
)

1741 
‰ì_skb
;

1746 i‡(
b©_¥iv
->
Ægo_›s
->
iÁ˚
.
íabÀ
 !
b©adv_iv_ogm_iÁ˚_íabÀ
)

1747 
‰ì_skb
;

1749 
	`b©adv_öc_cou¡î
(
b©_¥iv
, 
BATADV_CNT_MGMT_RX
);

1750 
	`b©adv_add_cou¡î
(
b©_¥iv
, 
BATADV_CNT_MGMT_RX_BYTES
,

1751 
skb
->
Àn
 + 
ETH_HLEN
);

1753 
ogm_off£t
 = 0;

1754 
ogm_∑ckë
 = (
b©adv_ogm_∑ckë
 *)
skb
->
d©a
;

1757 
	`b©adv_iv_ogm_aggr_∑ckë
(
ogm_off£t
, 
	`skb_hódÀn
(
skb
),

1758 
ogm_∑ckë
)) {

1759 
	`b©adv_iv_ogm_¥o˚ss
(
skb
, 
ogm_off£t
, 
if_öcomög
);

1761 
ogm_off£t
 +
BATADV_OGM_HLEN
;

1762 
ogm_off£t
 +
	`¡ohs
(
ogm_∑ckë
->
tvlv_Àn
);

1764 
∑ckë_pos
 = 
skb
->
d©a
 + 
ogm_off£t
;

1765 
ogm_∑ckë
 = (
b©adv_ogm_∑ckë
 *)
∑ckë_pos
;

1768 
ªt
 = 
NET_RX_SUCCESS
;

1770 
‰ì_skb
:

1771 i‡(
ªt
 =
NET_RX_SUCCESS
)

1772 
	`c⁄sume_skb
(
skb
);

1774 
	`k‰ì_skb
(
skb
);

1776  
ªt
;

1777 
	}
}

1788 
boﬁ


1789 
	$b©adv_iv_ogm_√igh_gë_tq_avg
(
b©adv_√igh_node
 *
√igh_node
,

1790 
b©adv_h¨d_iÁ˚
 *
if_outgoög
,

1791 
u8
 *
tq_avg
)

1793 
b©adv_√igh_iföfo
 *
n_iföfo
;

1795 
n_iföfo
 = 
	`b©adv_√igh_iföfo_gë
(
√igh_node
, 
if_outgoög
);

1796 i‡(!
n_iföfo
)

1797  
Ál£
;

1799 *
tq_avg
 = 
n_iföfo
->
b©_iv
.tq_avg;

1800 
	`b©adv_√igh_iföfo_put
(
n_iföfo
);

1802  
åue
;

1803 
	}
}

1820 
	$b©adv_iv_ogm_‹ig_dump_subíåy
(
sk_buff
 *
msg
, 
u32
 
p‹tid
, u32 
£q
,

1821 
b©adv_¥iv
 *
b©_¥iv
,

1822 
b©adv_h¨d_iÁ˚
 *
if_outgoög
,

1823 
b©adv_‹ig_node
 *
‹ig_node
,

1824 
b©adv_√igh_node
 *
√igh_node
,

1825 
boﬁ
 
be°
)

1827 *
hdr
;

1828 
u8
 
tq_avg
;

1829 
œ°_£í_m£cs
;

1831 
œ°_£í_m£cs
 = 
	`jiffõs_to_m£cs
(
jiffõs
 - 
‹ig_node
->
œ°_£í
);

1833 i‡(!
	`b©adv_iv_ogm_√igh_gë_tq_avg
(
√igh_node
, 
if_outgoög
, &
tq_avg
))

1836 i‡(
if_outgoög
 !
BATADV_IF_DEFAULT
 &&

1837 
if_outgoög
 !
√igh_node
->
if_öcomög
)

1840 
hdr
 = 
	`gílmsg_put
(
msg
, 
p‹tid
, 
£q
, &
b©adv_√éök_Ámûy
,

1841 
NLM_F_MULTI
, 
BATADV_CMD_GET_ORIGINATORS
);

1842 i‡(!
hdr
)

1843  -
ENOBUFS
;

1845 i‡(
	`∆a_put
(
msg
, 
BATADV_ATTR_ORIG_ADDRESS
, 
ETH_ALEN
,

1846 
‹ig_node
->
‹ig
) ||

1847 
	`∆a_put
(
msg
, 
BATADV_ATTR_NEIGH_ADDRESS
, 
ETH_ALEN
,

1848 
√igh_node
->
addr
) ||

1849 
	`∆a_put_°rög
(
msg
, 
BATADV_ATTR_HARD_IFNAME
,

1850 
√igh_node
->
if_öcomög
->
√t_dev
->
«me
) ||

1851 
	`∆a_put_u32
(
msg
, 
BATADV_ATTR_HARD_IFINDEX
,

1852 
√igh_node
->
if_öcomög
->
√t_dev
->
ifödex
) ||

1853 
	`∆a_put_u8
(
msg
, 
BATADV_ATTR_TQ
, 
tq_avg
) ||

1854 
	`∆a_put_u32
(
msg
, 
BATADV_ATTR_LAST_SEEN_MSECS
,

1855 
œ°_£í_m£cs
))

1856 
∆a_put_Áûuª
;

1858 i‡(
be°
 && 
	`∆a_put_Êag
(
msg
, 
BATADV_ATTR_FLAG_BEST
))

1859 
∆a_put_Áûuª
;

1861 
	`gílmsg_íd
(
msg
, 
hdr
);

1864 
∆a_put_Áûuª
:

1865 
	`gílmsg_ˇn˚l
(
msg
, 
hdr
);

1866  -
EMSGSIZE
;

1867 
	}
}

1884 
	$b©adv_iv_ogm_‹ig_dump_íåy
(
sk_buff
 *
msg
, 
u32
 
p‹tid
, u32 
£q
,

1885 
b©adv_¥iv
 *
b©_¥iv
,

1886 
b©adv_h¨d_iÁ˚
 *
if_outgoög
,

1887 
b©adv_‹ig_node
 *
‹ig_node
, *
sub_s
)

1889 
b©adv_√igh_node
 *
√igh_node_be°
;

1890 
b©adv_√igh_node
 *
√igh_node
;

1891 
sub
 = 0;

1892 
boﬁ
 
be°
;

1893 
u8
 
tq_avg_be°
;

1895 
√igh_node_be°
 = 
	`b©adv_‹ig_rouãr_gë
(
‹ig_node
, 
if_outgoög
);

1896 i‡(!
√igh_node_be°
)

1897 
out
;

1899 i‡(!
	`b©adv_iv_ogm_√igh_gë_tq_avg
(
√igh_node_be°
, 
if_outgoög
,

1900 &
tq_avg_be°
))

1901 
out
;

1903 i‡(
tq_avg_be°
 == 0)

1904 
out
;

1906 
	`hli°_f‹_óch_íåy_rcu
(
√igh_node
, &
‹ig_node
->
√igh_li°
, 
li°
) {

1907 i‡(
sub
++ < *
sub_s
)

1910 
be°
 = (
√igh_node
 =
√igh_node_be°
);

1912 i‡(
	`b©adv_iv_ogm_‹ig_dump_subíåy
(
msg
, 
p‹tid
, 
£q
,

1913 
b©_¥iv
, 
if_outgoög
,

1914 
‹ig_node
, 
√igh_node
,

1915 
be°
)) {

1916 
	`b©adv_√igh_node_put
(
√igh_node_be°
);

1918 *
sub_s
 = 
sub
 - 1;

1919  -
EMSGSIZE
;

1923 
out
:

1924 
	`b©adv_√igh_node_put
(
√igh_node_be°
);

1926 *
sub_s
 = 0;

1928 
	}
}

1945 
	$b©adv_iv_ogm_‹ig_dump_buckë
(
sk_buff
 *
msg
, 
u32
 
p‹tid
, u32 
£q
,

1946 
b©adv_¥iv
 *
b©_¥iv
,

1947 
b©adv_h¨d_iÁ˚
 *
if_outgoög
,

1948 
hli°_hód
 *
hód
, *
idx_s
, *
sub
)

1950 
b©adv_‹ig_node
 *
‹ig_node
;

1951 
idx
 = 0;

1953 
	`rcu_ªad_lock
();

1954 
	`hli°_f‹_óch_íåy_rcu
(
‹ig_node
, 
hód
, 
hash_íåy
) {

1955 i‡(
idx
++ < *
idx_s
)

1958 i‡(
	`b©adv_iv_ogm_‹ig_dump_íåy
(
msg
, 
p‹tid
, 
£q
, 
b©_¥iv
,

1959 
if_outgoög
, 
‹ig_node
,

1960 
sub
)) {

1961 
	`rcu_ªad_u∆ock
();

1962 *
idx_s
 = 
idx
 - 1;

1963  -
EMSGSIZE
;

1966 
	`rcu_ªad_u∆ock
();

1968 *
idx_s
 = 0;

1969 *
sub
 = 0;

1971 
	}
}

1981 
	$b©adv_iv_ogm_‹ig_dump
(
sk_buff
 *
msg
, 
√éök_ˇŒback
 *
cb
,

1982 
b©adv_¥iv
 *
b©_¥iv
,

1983 
b©adv_h¨d_iÁ˚
 *
if_outgoög
)

1985 
b©adv_hashèbÀ
 *
hash
 = 
b©_¥iv
->
‹ig_hash
;

1986 
hli°_hód
 *
hód
;

1987 
buckë
 = 
cb
->
¨gs
[0];

1988 
idx
 = 
cb
->
¨gs
[1];

1989 
sub
 = 
cb
->
¨gs
[2];

1990 
p‹tid
 = 
	`NETLINK_CB
(
cb
->
skb
).portid;

1992 
buckë
 < 
hash
->
size
) {

1993 
hód
 = &
hash
->
èbÀ
[
buckë
];

1995 i‡(
	`b©adv_iv_ogm_‹ig_dump_buckë
(
msg
, 
p‹tid
,

1996 
cb
->
∆h
->
∆msg_£q
,

1997 
b©_¥iv
, 
if_outgoög
, 
hód
,

1998 &
idx
, &
sub
))

2001 
buckë
++;

2004 
cb
->
¨gs
[0] = 
buckë
;

2005 
cb
->
¨gs
[1] = 
idx
;

2006 
cb
->
¨gs
[2] = 
sub
;

2007 
	}
}

2023 
boﬁ
 
	$b©adv_iv_ogm_√igh_diff
(
b©adv_√igh_node
 *
√igh1
,

2024 
b©adv_h¨d_iÁ˚
 *
if_outgoög1
,

2025 
b©adv_√igh_node
 *
√igh2
,

2026 
b©adv_h¨d_iÁ˚
 *
if_outgoög2
,

2027 *
diff
)

2029 
b©adv_√igh_iföfo
 *
√igh1_iföfo
, *
√igh2_iföfo
;

2030 
u8
 
tq1
, 
tq2
;

2031 
boﬁ
 
ªt
 = 
åue
;

2033 
√igh1_iföfo
 = 
	`b©adv_√igh_iföfo_gë
(
√igh1
, 
if_outgoög1
);

2034 
√igh2_iföfo
 = 
	`b©adv_√igh_iföfo_gë
(
√igh2
, 
if_outgoög2
);

2036 i‡(!
√igh1_iföfo
 || !
√igh2_iföfo
) {

2037 
ªt
 = 
Ál£
;

2038 
out
;

2041 
tq1
 = 
√igh1_iföfo
->
b©_iv
.
tq_avg
;

2042 
tq2
 = 
√igh2_iföfo
->
b©_iv
.
tq_avg
;

2043 *
diff
 = ()
tq1
 - ()
tq2
;

2045 
out
:

2046 
	`b©adv_√igh_iföfo_put
(
√igh1_iföfo
);

2047 
	`b©adv_√igh_iföfo_put
(
√igh2_iföfo
);

2049  
ªt
;

2050 
	}
}

2062 
	$b©adv_iv_ogm_√igh_dump_√igh
(
sk_buff
 *
msg
, 
u32
 
p‹tid
, u32 
£q
,

2063 
b©adv_h¨dif_√igh_node
 *
h¨dif_√igh
)

2065 *
hdr
;

2066 
œ°_£í_m£cs
;

2068 
œ°_£í_m£cs
 = 
	`jiffõs_to_m£cs
(
jiffõs
 - 
h¨dif_√igh
->
œ°_£í
);

2070 
hdr
 = 
	`gílmsg_put
(
msg
, 
p‹tid
, 
£q
, &
b©adv_√éök_Ámûy
,

2071 
NLM_F_MULTI
, 
BATADV_CMD_GET_NEIGHBORS
);

2072 i‡(!
hdr
)

2073  -
ENOBUFS
;

2075 i‡(
	`∆a_put
(
msg
, 
BATADV_ATTR_NEIGH_ADDRESS
, 
ETH_ALEN
,

2076 
h¨dif_√igh
->
addr
) ||

2077 
	`∆a_put_°rög
(
msg
, 
BATADV_ATTR_HARD_IFNAME
,

2078 
h¨dif_√igh
->
if_öcomög
->
√t_dev
->
«me
) ||

2079 
	`∆a_put_u32
(
msg
, 
BATADV_ATTR_HARD_IFINDEX
,

2080 
h¨dif_√igh
->
if_öcomög
->
√t_dev
->
ifödex
) ||

2081 
	`∆a_put_u32
(
msg
, 
BATADV_ATTR_LAST_SEEN_MSECS
,

2082 
œ°_£í_m£cs
))

2083 
∆a_put_Áûuª
;

2085 
	`gílmsg_íd
(
msg
, 
hdr
);

2088 
∆a_put_Áûuª
:

2089 
	`gílmsg_ˇn˚l
(
msg
, 
hdr
);

2090  -
EMSGSIZE
;

2091 
	}
}

2108 
	$b©adv_iv_ogm_√igh_dump_h¨dif
(
sk_buff
 *
msg
, 
u32
 
p‹tid
, u32 
£q
,

2109 
b©adv_¥iv
 *
b©_¥iv
,

2110 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
,

2111 *
idx_s
)

2113 
b©adv_h¨dif_√igh_node
 *
h¨dif_√igh
;

2114 
idx
 = 0;

2116 
	`hli°_f‹_óch_íåy_rcu
(
h¨dif_√igh
,

2117 &
h¨d_iÁ˚
->
√igh_li°
, 
li°
) {

2118 i‡(
idx
++ < *
idx_s
)

2121 i‡(
	`b©adv_iv_ogm_√igh_dump_√igh
(
msg
, 
p‹tid
, 
£q
,

2122 
h¨dif_√igh
)) {

2123 *
idx_s
 = 
idx
 - 1;

2124  -
EMSGSIZE
;

2128 *
idx_s
 = 0;

2130 
	}
}

2140 
	$b©adv_iv_ogm_√igh_dump
(
sk_buff
 *
msg
, 
√éök_ˇŒback
 *
cb
,

2141 
b©adv_¥iv
 *
b©_¥iv
,

2142 
b©adv_h¨d_iÁ˚
 *
sögÀ_h¨dif
)

2144 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
;

2145 
i_h¨dif
 = 0;

2146 
i_h¨dif_s
 = 
cb
->
¨gs
[0];

2147 
idx
 = 
cb
->
¨gs
[1];

2148 
p‹tid
 = 
	`NETLINK_CB
(
cb
->
skb
).portid;

2150 
	`rcu_ªad_lock
();

2151 i‡(
sögÀ_h¨dif
) {

2152 i‡(
i_h¨dif_s
 == 0) {

2153 i‡(
	`b©adv_iv_ogm_√igh_dump_h¨dif
(
msg
, 
p‹tid
,

2154 
cb
->
∆h
->
∆msg_£q
,

2155 
b©_¥iv
,

2156 
sögÀ_h¨dif
,

2157 &
idx
) == 0)

2158 
i_h¨dif
++;

2161 
	`li°_f‹_óch_íåy_rcu
(
h¨d_iÁ˚
, &
b©adv_h¨dif_li°
,

2162 
li°
) {

2163 i‡(
h¨d_iÁ˚
->
mesh_iÁ˚
 !
b©_¥iv
->mesh_iface)

2166 i‡(
i_h¨dif
++ < 
i_h¨dif_s
)

2169 i‡(
	`b©adv_iv_ogm_√igh_dump_h¨dif
(
msg
, 
p‹tid
,

2170 
cb
->
∆h
->
∆msg_£q
,

2171 
b©_¥iv
,

2172 
h¨d_iÁ˚
, &
idx
)) {

2173 
i_h¨dif
--;

2178 
	`rcu_ªad_u∆ock
();

2180 
cb
->
¨gs
[0] = 
i_h¨dif
;

2181 
cb
->
¨gs
[1] = 
idx
;

2182 
	}
}

2194 
	$b©adv_iv_ogm_√igh_cmp
(
b©adv_√igh_node
 *
√igh1
,

2195 
b©adv_h¨d_iÁ˚
 *
if_outgoög1
,

2196 
b©adv_√igh_node
 *
√igh2
,

2197 
b©adv_h¨d_iÁ˚
 *
if_outgoög2
)

2199 
boﬁ
 
ªt
;

2200 
diff
;

2202 
ªt
 = 
	`b©adv_iv_ogm_√igh_diff
(
√igh1
, 
if_outgoög1
, 
√igh2
,

2203 
if_outgoög2
, &
diff
);

2204 i‡(!
ªt
)

2207  
diff
;

2208 
	}
}

2221 
boﬁ


2222 
	$b©adv_iv_ogm_√igh_is_sob
(
b©adv_√igh_node
 *
√igh1
,

2223 
b©adv_h¨d_iÁ˚
 *
if_outgoög1
,

2224 
b©adv_√igh_node
 *
√igh2
,

2225 
b©adv_h¨d_iÁ˚
 *
if_outgoög2
)

2227 
boﬁ
 
ªt
;

2228 
diff
;

2230 
ªt
 = 
	`b©adv_iv_ogm_√igh_diff
(
√igh1
, 
if_outgoög1
, 
√igh2
,

2231 
if_outgoög2
, &
diff
);

2232 i‡(!
ªt
)

2233  
Ál£
;

2235 
ªt
 = 
diff
 > -
BATADV_TQ_SIMILARITY_THRESHOLD
;

2236  
ªt
;

2237 
	}
}

2239 
	$b©adv_iv_iÁ˚_íabÀd
(
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
)

2242 
	`b©adv_iv_ogm_scheduÀ
(
h¨d_iÁ˚
);

2243 
	}
}

2249 
	$b©adv_iv_öô_£l_˛ass
(
b©adv_¥iv
 *
b©_¥iv
)

2252 
	`©omic_£t
(&
b©_¥iv
->
gw
.
£l_˛ass
, 20);

2253 
	}
}

2255 
b©adv_gw_node
 *

2256 
	$b©adv_iv_gw_gë_be°_gw_node
(
b©adv_¥iv
 *
b©_¥iv
)

2258 
b©adv_√igh_node
 *
rouãr
;

2259 
b©adv_√igh_iföfo
 *
rouãr_iföfo
;

2260 
b©adv_gw_node
 *
gw_node
, *
cuº_gw
 = 
NULL
;

2261 
u64
 
max_gw_Á˘‹
 = 0;

2262 
u64
 
tmp_gw_Á˘‹
 = 0;

2263 
u8
 
max_tq
 = 0;

2264 
u8
 
tq_avg
;

2265 
b©adv_‹ig_node
 *
‹ig_node
;

2267 
	`rcu_ªad_lock
();

2268 
	`hli°_f‹_óch_íåy_rcu
(
gw_node
, &
b©_¥iv
->
gw
.
g©eway_li°
, 
li°
) {

2269 
‹ig_node
 = 
gw_node
->orig_node;

2270 
rouãr
 = 
	`b©adv_‹ig_rouãr_gë
(
‹ig_node
, 
BATADV_IF_DEFAULT
);

2271 i‡(!
rouãr
)

2274 
rouãr_iföfo
 = 
	`b©adv_√igh_iföfo_gë
(
rouãr
,

2275 
BATADV_IF_DEFAULT
);

2276 i‡(!
rouãr_iföfo
)

2277 
√xt
;

2279 i‡(!
	`kªf_gë_u∆ess_zîo
(&
gw_node
->
ªfcou¡
))

2280 
√xt
;

2282 
tq_avg
 = 
rouãr_iföfo
->
b©_iv
.tq_avg;

2284 
	`©omic_ªad
(&
b©_¥iv
->
gw
.
£l_˛ass
)) {

2286 
tmp_gw_Á˘‹
 = 
tq_avg
 *Åq_avg;

2287 
tmp_gw_Á˘‹
 *
gw_node
->
b™dwidth_down
;

2288 
tmp_gw_Á˘‹
 *= 100 * 100;

2289 
tmp_gw_Á˘‹
 >>= 18;

2291 i‡(
tmp_gw_Á˘‹
 > 
max_gw_Á˘‹
 ||

2292 (
tmp_gw_Á˘‹
 =
max_gw_Á˘‹
 &&

2293 
tq_avg
 > 
max_tq
)) {

2294 
	`b©adv_gw_node_put
(
cuº_gw
);

2295 
cuº_gw
 = 
gw_node
;

2296 
	`kªf_gë
(&
cuº_gw
->
ªfcou¡
);

2307 i‡(
tq_avg
 > 
max_tq
) {

2308 
	`b©adv_gw_node_put
(
cuº_gw
);

2309 
cuº_gw
 = 
gw_node
;

2310 
	`kªf_gë
(&
cuº_gw
->
ªfcou¡
);

2315 i‡(
tq_avg
 > 
max_tq
)

2316 
max_tq
 = 
tq_avg
;

2318 i‡(
tmp_gw_Á˘‹
 > 
max_gw_Á˘‹
)

2319 
max_gw_Á˘‹
 = 
tmp_gw_Á˘‹
;

2321 
	`b©adv_gw_node_put
(
gw_node
);

2323 
√xt
:

2324 
	`b©adv_√igh_node_put
(
rouãr
);

2325 
	`b©adv_√igh_iföfo_put
(
rouãr_iföfo
);

2327 
	`rcu_ªad_u∆ock
();

2329  
cuº_gw
;

2330 
	}
}

2332 
boﬁ
 
	$b©adv_iv_gw_is_ñigibÀ
(
b©adv_¥iv
 *
b©_¥iv
,

2333 
b©adv_‹ig_node
 *
cuº_gw_‹ig
,

2334 
b©adv_‹ig_node
 *
‹ig_node
)

2336 
b©adv_√igh_iföfo
 *
rouãr_‹ig_iföfo
 = 
NULL
;

2337 
b©adv_√igh_iföfo
 *
rouãr_gw_iföfo
 = 
NULL
;

2338 
b©adv_√igh_node
 *
rouãr_gw
 = 
NULL
;

2339 
b©adv_√igh_node
 *
rouãr_‹ig
 = 
NULL
;

2340 
u8
 
gw_tq_avg
, 
‹ig_tq_avg
;

2341 
boﬁ
 
ªt
 = 
Ál£
;

2344 i‡(
	`©omic_ªad
(&
b©_¥iv
->
gw
.
£l_˛ass
) <= 2)

2345  
Ál£
;

2347 
rouãr_gw
 = 
	`b©adv_‹ig_rouãr_gë
(
cuº_gw_‹ig
, 
BATADV_IF_DEFAULT
);

2348 i‡(!
rouãr_gw
) {

2349 
ªt
 = 
åue
;

2350 
out
;

2353 
rouãr_gw_iföfo
 = 
	`b©adv_√igh_iföfo_gë
(
rouãr_gw
,

2354 
BATADV_IF_DEFAULT
);

2355 i‡(!
rouãr_gw_iföfo
) {

2356 
ªt
 = 
åue
;

2357 
out
;

2360 
rouãr_‹ig
 = 
	`b©adv_‹ig_rouãr_gë
(
‹ig_node
, 
BATADV_IF_DEFAULT
);

2361 i‡(!
rouãr_‹ig
)

2362 
out
;

2364 
rouãr_‹ig_iföfo
 = 
	`b©adv_√igh_iföfo_gë
(
rouãr_‹ig
,

2365 
BATADV_IF_DEFAULT
);

2366 i‡(!
rouãr_‹ig_iföfo
)

2367 
out
;

2369 
gw_tq_avg
 = 
rouãr_gw_iföfo
->
b©_iv
.
tq_avg
;

2370 
‹ig_tq_avg
 = 
rouãr_‹ig_iföfo
->
b©_iv
.
tq_avg
;

2373 i‡(
‹ig_tq_avg
 < 
gw_tq_avg
)

2374 
out
;

2379 i‡((
	`©omic_ªad
(&
b©_¥iv
->
gw
.
£l_˛ass
) > 3) &&

2380 (
‹ig_tq_avg
 - 
gw_tq_avg
 < 
	`©omic_ªad
(&
b©_¥iv
->
gw
.
£l_˛ass
)))

2381 
out
;

2383 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

2385 
gw_tq_avg
, 
‹ig_tq_avg
);

2387 
ªt
 = 
åue
;

2388 
out
:

2389 
	`b©adv_√igh_iföfo_put
(
rouãr_gw_iföfo
);

2390 
	`b©adv_√igh_iföfo_put
(
rouãr_‹ig_iföfo
);

2391 
	`b©adv_√igh_node_put
(
rouãr_gw
);

2392 
	`b©adv_√igh_node_put
(
rouãr_‹ig
);

2394  
ªt
;

2395 
	}
}

2407 
	$b©adv_iv_gw_dump_íåy
(
sk_buff
 *
msg
, 
u32
 
p‹tid
,

2408 
√éök_ˇŒback
 *
cb
,

2409 
b©adv_¥iv
 *
b©_¥iv
,

2410 
b©adv_gw_node
 *
gw_node
)

2412 
b©adv_√igh_iföfo
 *
rouãr_iföfo
 = 
NULL
;

2413 
b©adv_√igh_node
 *
rouãr
;

2414 
b©adv_gw_node
 *
cuº_gw
 = 
NULL
;

2415 
ªt
 = 0;

2416 *
hdr
;

2418 
rouãr
 = 
	`b©adv_‹ig_rouãr_gë
(
gw_node
->
‹ig_node
, 
BATADV_IF_DEFAULT
);

2419 i‡(!
rouãr
)

2420 
out
;

2422 
rouãr_iföfo
 = 
	`b©adv_√igh_iföfo_gë
(
rouãr
, 
BATADV_IF_DEFAULT
);

2423 i‡(!
rouãr_iföfo
)

2424 
out
;

2426 
cuº_gw
 = 
	`b©adv_gw_gë_£À˘ed_gw_node
(
b©_¥iv
);

2428 
hdr
 = 
	`gílmsg_put
(
msg
, 
p‹tid
, 
cb
->
∆h
->
∆msg_£q
,

2429 &
b©adv_√éök_Ámûy
, 
NLM_F_MULTI
,

2430 
BATADV_CMD_GET_GATEWAYS
);

2431 i‡(!
hdr
) {

2432 
ªt
 = -
ENOBUFS
;

2433 
out
;

2436 
	`gíl_dump_check_c⁄si°ít
(
cb
, 
hdr
);

2438 
ªt
 = -
EMSGSIZE
;

2440 i‡(
cuº_gw
 =
gw_node
)

2441 i‡(
	`∆a_put_Êag
(
msg
, 
BATADV_ATTR_FLAG_BEST
)) {

2442 
	`gílmsg_ˇn˚l
(
msg
, 
hdr
);

2443 
out
;

2446 i‡(
	`∆a_put
(
msg
, 
BATADV_ATTR_ORIG_ADDRESS
, 
ETH_ALEN
,

2447 
gw_node
->
‹ig_node
->
‹ig
) ||

2448 
	`∆a_put_u8
(
msg
, 
BATADV_ATTR_TQ
, 
rouãr_iföfo
->
b©_iv
.
tq_avg
) ||

2449 
	`∆a_put
(
msg
, 
BATADV_ATTR_ROUTER
, 
ETH_ALEN
,

2450 
rouãr
->
addr
) ||

2451 
	`∆a_put_°rög
(
msg
, 
BATADV_ATTR_HARD_IFNAME
,

2452 
rouãr
->
if_öcomög
->
√t_dev
->
«me
) ||

2453 
	`∆a_put_u32
(
msg
, 
BATADV_ATTR_HARD_IFINDEX
,

2454 
rouãr
->
if_öcomög
->
√t_dev
->
ifödex
) ||

2455 
	`∆a_put_u32
(
msg
, 
BATADV_ATTR_BANDWIDTH_DOWN
,

2456 
gw_node
->
b™dwidth_down
) ||

2457 
	`∆a_put_u32
(
msg
, 
BATADV_ATTR_BANDWIDTH_UP
,

2458 
gw_node
->
b™dwidth_up
)) {

2459 
	`gílmsg_ˇn˚l
(
msg
, 
hdr
);

2460 
out
;

2463 
	`gílmsg_íd
(
msg
, 
hdr
);

2464 
ªt
 = 0;

2466 
out
:

2467 
	`b©adv_gw_node_put
(
cuº_gw
);

2468 
	`b©adv_√igh_iföfo_put
(
rouãr_iföfo
);

2469 
	`b©adv_√igh_node_put
(
rouãr
);

2470  
ªt
;

2471 
	}
}

2479 
	$b©adv_iv_gw_dump
(
sk_buff
 *
msg
, 
√éök_ˇŒback
 *
cb
,

2480 
b©adv_¥iv
 *
b©_¥iv
)

2482 
p‹tid
 = 
	`NETLINK_CB
(
cb
->
skb
).portid;

2483 
b©adv_gw_node
 *
gw_node
;

2484 
idx_skù
 = 
cb
->
¨gs
[0];

2485 
idx
 = 0;

2487 
	`•ö_lock_bh
(&
b©_¥iv
->
gw
.
li°_lock
);

2488 
cb
->
£q
 = 
b©_¥iv
->
gw
.
gíî©i⁄
 << 1 | 1;

2490 
	`hli°_f‹_óch_íåy
(
gw_node
, &
b©_¥iv
->
gw
.
g©eway_li°
, 
li°
) {

2491 i‡(
idx
++ < 
idx_skù
)

2494 i‡(
	`b©adv_iv_gw_dump_íåy
(
msg
, 
p‹tid
, 
cb
, 
b©_¥iv
,

2495 
gw_node
)) {

2496 
idx_skù
 = 
idx
 - 1;

2497 
u∆ock
;

2501 
idx_skù
 = 
idx
;

2502 
u∆ock
:

2503 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
gw
.
li°_lock
);

2505 
cb
->
¨gs
[0] = 
idx_skù
;

2506 
	}
}

2508 
b©adv_Ægo_›s
 
b©adv_b©m™_iv
 
	g__ªad_mo°ly
 = {

2509 .
«me
 = "BATMAN_IV",

2510 .
	giÁ˚
 = {

2511 .
íabÀ
 = 
b©adv_iv_ogm_iÁ˚_íabÀ
,

2512 .
	gíabÀd
 = 
b©adv_iv_iÁ˚_íabÀd
,

2513 .
	gdißbÀ
 = 
b©adv_iv_ogm_iÁ˚_dißbÀ
,

2514 .
	gupd©e_mac
 = 
b©adv_iv_ogm_iÁ˚_upd©e_mac
,

2515 .
	g¥im¨y_£t
 = 
b©adv_iv_ogm_¥im¨y_iÁ˚_£t
,

2517 .
	g√igh
 = {

2518 .
cmp
 = 
b©adv_iv_ogm_√igh_cmp
,

2519 .
	gis_simû¨_‹_bëãr
 = 
b©adv_iv_ogm_√igh_is_sob
,

2520 .
	gdump
 = 
b©adv_iv_ogm_√igh_dump
,

2522 .
	g‹ig
 = {

2523 .
dump
 = 
b©adv_iv_ogm_‹ig_dump
,

2525 .
	ggw
 = {

2526 .
öô_£l_˛ass
 = 
b©adv_iv_öô_£l_˛ass
,

2527 .
	g£l_˛ass_max
 = 
BATADV_TQ_MAX_VALUE
,

2528 .
	ggë_be°_gw_node
 = 
b©adv_iv_gw_gë_be°_gw_node
,

2529 .
	gis_ñigibÀ
 = 
b©adv_iv_gw_is_ñigibÀ
,

2530 .
	gdump
 = 
b©adv_iv_gw_dump
,

2539 
__öô
 
	$b©adv_iv_öô
()

2541 
ªt
;

2544 
ªt
 = 
	`b©adv_ªcv_h™dÀr_ªgi°î
(
BATADV_IV_OGM
,

2545 
b©adv_iv_ogm_ª˚ive
);

2546 i‡(
ªt
 < 0)

2547 
out
;

2549 
ªt
 = 
	`b©adv_Ægo_ªgi°î
(&
b©adv_b©m™_iv
);

2550 i‡(
ªt
 < 0)

2551 
h™dÀr_uƒegi°î
;

2553 
out
;

2555 
h™dÀr_uƒegi°î
:

2556 
	`b©adv_ªcv_h™dÀr_uƒegi°î
(
BATADV_IV_OGM
);

2557 
out
:

2558  
ªt
;

2559 
	}
}

	@net/batman-adv/bat_iv_ogm.h

7 #i‚de‡
_NET_BATMAN_ADV_BAT_IV_OGM_H_


8 
	#_NET_BATMAN_ADV_BAT_IV_OGM_H_


	)

10 
	~"maö.h
"

12 
b©adv_iv_öô
();

	@net/batman-adv/bat_v.c

7 
	~"b©_v.h
"

8 
	~"maö.h
"

10 
	~<löux/©omic.h
>

11 
	~<löux/ˇche.h
>

12 
	~<löux/î∫o.h
>

13 
	~<löux/if_ëhî.h
>

14 
	~<löux/öô.h
>

15 
	~<löux/jiffõs.h
>

16 
	~<löux/kªf.h
>

17 
	~<löux/limôs.h
>

18 
	~<löux/li°.h
>

19 
	~<löux/mömax.h
>

20 
	~<löux/√tdevi˚.h
>

21 
	~<löux/√éök.h
>

22 
	~<löux/rculi°.h
>

23 
	~<löux/rcupd©e.h
>

24 
	~<löux/skbuff.h
>

25 
	~<löux/•ölock.h
>

26 
	~<löux/°ddef.h
>

27 
	~<löux/ty≥s.h
>

28 
	~<löux/w‹kqueue.h
>

29 
	~<√t/gíëlök.h
>

30 
	~<√t/√éök.h
>

31 
	~<u≠i/löux/b©adv_∑ckë.h
>

32 
	~<u≠i/löux/b©m™_adv.h
>

34 
	~"b©_Ægo.h
"

35 
	~"b©_v_ñp.h
"

36 
	~"b©_v_ogm.h
"

37 
	~"g©eway_˛õ¡.h
"

38 
	~"h¨d-öãrÁ˚.h
"

39 
	~"hash.h
"

40 
	~"log.h
"

41 
	~"√éök.h
"

42 
	~"‹igö©‹.h
"

44 
	$b©adv_v_iÁ˚_a˘iv©e
(
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
)

46 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
h¨d_iÁ˚
->
mesh_iÁ˚
);

47 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
;

49 
¥im¨y_if
 = 
	`b©adv_¥im¨y_if_gë_£À˘ed
(
b©_¥iv
);

51 i‡(
¥im¨y_if
) {

52 
	`b©adv_v_ñp_iÁ˚_a˘iv©e
(
¥im¨y_if
, 
h¨d_iÁ˚
);

53 
	`b©adv_h¨dif_put
(
¥im¨y_if
);

60 i‡(
h¨d_iÁ˚
->
if_°©us
 =
BATADV_IF_TO_BE_ACTIVATED
)

61 
h¨d_iÁ˚
->
if_°©us
 = 
BATADV_IF_ACTIVE
;

62 
	}
}

64 
	$b©adv_v_iÁ˚_íabÀ
(
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
)

66 
ªt
;

68 
ªt
 = 
	`b©adv_v_ñp_iÁ˚_íabÀ
(
h¨d_iÁ˚
);

69 i‡(
ªt
 < 0)

70  
ªt
;

72 
ªt
 = 
	`b©adv_v_ogm_iÁ˚_íabÀ
(
h¨d_iÁ˚
);

73 i‡(
ªt
 < 0)

74 
	`b©adv_v_ñp_iÁ˚_dißbÀ
(
h¨d_iÁ˚
);

76  
ªt
;

77 
	}
}

79 
	$b©adv_v_iÁ˚_dißbÀ
(
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
)

81 
	`b©adv_v_ogm_iÁ˚_dißbÀ
(
h¨d_iÁ˚
);

82 
	`b©adv_v_ñp_iÁ˚_dißbÀ
(
h¨d_iÁ˚
);

83 
	}
}

85 
	$b©adv_v_¥im¨y_iÁ˚_£t
(
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
)

87 
	`b©adv_v_ñp_¥im¨y_iÁ˚_£t
(
h¨d_iÁ˚
);

88 
	`b©adv_v_ogm_¥im¨y_iÁ˚_£t
(
h¨d_iÁ˚
);

89 
	}
}

98 
	$b©adv_v_iÁ˚_upd©e_mac
(
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
)

100 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
h¨d_iÁ˚
->
mesh_iÁ˚
);

101 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
;

103 
¥im¨y_if
 = 
	`b©adv_¥im¨y_if_gë_£À˘ed
(
b©_¥iv
);

104 i‡(
¥im¨y_if
 !
h¨d_iÁ˚
)

105 
out
;

107 
	`b©adv_v_¥im¨y_iÁ˚_£t
(
h¨d_iÁ˚
);

108 
out
:

109 
	`b©adv_h¨dif_put
(
¥im¨y_if
);

110 
	}
}

113 
	$b©adv_v_h¨dif_√igh_öô
(
b©adv_h¨dif_√igh_node
 *
h¨dif_√igh
)

115 
	`ewma_throughput_öô
(&
h¨dif_√igh
->
b©_v
.
throughput
);

116 
	}
}

128 
	$b©adv_v_√igh_dump_√igh
(
sk_buff
 *
msg
, 
u32
 
p‹tid
, u32 
£q
,

129 
b©adv_h¨dif_√igh_node
 *
h¨dif_√igh
)

131 *
hdr
;

132 
œ°_£í_m£cs
;

133 
u32
 
throughput
;

135 
œ°_£í_m£cs
 = 
	`jiffõs_to_m£cs
(
jiffõs
 - 
h¨dif_√igh
->
œ°_£í
);

136 
throughput
 = 
	`ewma_throughput_ªad
(&
h¨dif_√igh
->
b©_v
.throughput);

137 
throughput
 =Åhroughput * 100;

139 
hdr
 = 
	`gílmsg_put
(
msg
, 
p‹tid
, 
£q
, &
b©adv_√éök_Ámûy
, 
NLM_F_MULTI
,

140 
BATADV_CMD_GET_NEIGHBORS
);

141 i‡(!
hdr
)

142  -
ENOBUFS
;

144 i‡(
	`∆a_put
(
msg
, 
BATADV_ATTR_NEIGH_ADDRESS
, 
ETH_ALEN
,

145 
h¨dif_√igh
->
addr
) ||

146 
	`∆a_put_°rög
(
msg
, 
BATADV_ATTR_HARD_IFNAME
,

147 
h¨dif_√igh
->
if_öcomög
->
√t_dev
->
«me
) ||

148 
	`∆a_put_u32
(
msg
, 
BATADV_ATTR_HARD_IFINDEX
,

149 
h¨dif_√igh
->
if_öcomög
->
√t_dev
->
ifödex
) ||

150 
	`∆a_put_u32
(
msg
, 
BATADV_ATTR_LAST_SEEN_MSECS
,

151 
œ°_£í_m£cs
) ||

152 
	`∆a_put_u32
(
msg
, 
BATADV_ATTR_THROUGHPUT
, 
throughput
))

153 
∆a_put_Áûuª
;

155 
	`gílmsg_íd
(
msg
, 
hdr
);

158 
∆a_put_Áûuª
:

159 
	`gílmsg_ˇn˚l
(
msg
, 
hdr
);

160  -
EMSGSIZE
;

161 
	}
}

178 
	$b©adv_v_√igh_dump_h¨dif
(
sk_buff
 *
msg
, 
u32
 
p‹tid
, u32 
£q
,

179 
b©adv_¥iv
 *
b©_¥iv
,

180 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
,

181 *
idx_s
)

183 
b©adv_h¨dif_√igh_node
 *
h¨dif_√igh
;

184 
idx
 = 0;

186 
	`hli°_f‹_óch_íåy_rcu
(
h¨dif_√igh
,

187 &
h¨d_iÁ˚
->
√igh_li°
, 
li°
) {

188 i‡(
idx
++ < *
idx_s
)

191 i‡(
	`b©adv_v_√igh_dump_√igh
(
msg
, 
p‹tid
, 
£q
, 
h¨dif_√igh
)) {

192 *
idx_s
 = 
idx
 - 1;

193  -
EMSGSIZE
;

197 *
idx_s
 = 0;

199 
	}
}

210 
	$b©adv_v_√igh_dump
(
sk_buff
 *
msg
, 
√éök_ˇŒback
 *
cb
,

211 
b©adv_¥iv
 *
b©_¥iv
,

212 
b©adv_h¨d_iÁ˚
 *
sögÀ_h¨dif
)

214 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
;

215 
i_h¨dif
 = 0;

216 
i_h¨dif_s
 = 
cb
->
¨gs
[0];

217 
idx
 = 
cb
->
¨gs
[1];

218 
p‹tid
 = 
	`NETLINK_CB
(
cb
->
skb
).portid;

220 
	`rcu_ªad_lock
();

221 i‡(
sögÀ_h¨dif
) {

222 i‡(
i_h¨dif_s
 == 0) {

223 i‡(
	`b©adv_v_√igh_dump_h¨dif
(
msg
, 
p‹tid
,

224 
cb
->
∆h
->
∆msg_£q
,

225 
b©_¥iv
, 
sögÀ_h¨dif
,

226 &
idx
) == 0)

227 
i_h¨dif
++;

230 
	`li°_f‹_óch_íåy_rcu
(
h¨d_iÁ˚
, &
b©adv_h¨dif_li°
, 
li°
) {

231 i‡(
h¨d_iÁ˚
->
mesh_iÁ˚
 !
b©_¥iv
->mesh_iface)

234 i‡(
i_h¨dif
++ < 
i_h¨dif_s
)

237 i‡(
	`b©adv_v_√igh_dump_h¨dif
(
msg
, 
p‹tid
,

238 
cb
->
∆h
->
∆msg_£q
,

239 
b©_¥iv
, 
h¨d_iÁ˚
,

240 &
idx
)) {

241 
i_h¨dif
--;

246 
	`rcu_ªad_u∆ock
();

248 
cb
->
¨gs
[0] = 
i_h¨dif
;

249 
cb
->
¨gs
[1] = 
idx
;

250 
	}
}

266 
	$b©adv_v_‹ig_dump_subíåy
(
sk_buff
 *
msg
, 
u32
 
p‹tid
, u32 
£q
,

267 
b©adv_¥iv
 *
b©_¥iv
,

268 
b©adv_h¨d_iÁ˚
 *
if_outgoög
,

269 
b©adv_‹ig_node
 *
‹ig_node
,

270 
b©adv_√igh_node
 *
√igh_node
,

271 
boﬁ
 
be°
)

273 
b©adv_√igh_iföfo
 *
n_iföfo
;

274 
œ°_£í_m£cs
;

275 
u32
 
throughput
;

276 *
hdr
;

278 
n_iföfo
 = 
	`b©adv_√igh_iföfo_gë
(
√igh_node
, 
if_outgoög
);

279 i‡(!
n_iföfo
)

282 
throughput
 = 
n_iföfo
->
b©_v
.throughput * 100;

284 
	`b©adv_√igh_iföfo_put
(
n_iföfo
);

286 
œ°_£í_m£cs
 = 
	`jiffõs_to_m£cs
(
jiffõs
 - 
‹ig_node
->
œ°_£í
);

288 i‡(
if_outgoög
 !
BATADV_IF_DEFAULT
 &&

289 
if_outgoög
 !
√igh_node
->
if_öcomög
)

292 
hdr
 = 
	`gílmsg_put
(
msg
, 
p‹tid
, 
£q
, &
b©adv_√éök_Ámûy
, 
NLM_F_MULTI
,

293 
BATADV_CMD_GET_ORIGINATORS
);

294 i‡(!
hdr
)

295  -
ENOBUFS
;

297 i‡(
	`∆a_put
(
msg
, 
BATADV_ATTR_ORIG_ADDRESS
, 
ETH_ALEN
, 
‹ig_node
->
‹ig
) ||

298 
	`∆a_put
(
msg
, 
BATADV_ATTR_NEIGH_ADDRESS
, 
ETH_ALEN
,

299 
√igh_node
->
addr
) ||

300 
	`∆a_put_°rög
(
msg
, 
BATADV_ATTR_HARD_IFNAME
,

301 
√igh_node
->
if_öcomög
->
√t_dev
->
«me
) ||

302 
	`∆a_put_u32
(
msg
, 
BATADV_ATTR_HARD_IFINDEX
,

303 
√igh_node
->
if_öcomög
->
√t_dev
->
ifödex
) ||

304 
	`∆a_put_u32
(
msg
, 
BATADV_ATTR_THROUGHPUT
, 
throughput
) ||

305 
	`∆a_put_u32
(
msg
, 
BATADV_ATTR_LAST_SEEN_MSECS
,

306 
œ°_£í_m£cs
))

307 
∆a_put_Áûuª
;

309 i‡(
be°
 && 
	`∆a_put_Êag
(
msg
, 
BATADV_ATTR_FLAG_BEST
))

310 
∆a_put_Áûuª
;

312 
	`gílmsg_íd
(
msg
, 
hdr
);

315 
∆a_put_Áûuª
:

316 
	`gílmsg_ˇn˚l
(
msg
, 
hdr
);

317  -
EMSGSIZE
;

318 
	}
}

335 
	$b©adv_v_‹ig_dump_íåy
(
sk_buff
 *
msg
, 
u32
 
p‹tid
, u32 
£q
,

336 
b©adv_¥iv
 *
b©_¥iv
,

337 
b©adv_h¨d_iÁ˚
 *
if_outgoög
,

338 
b©adv_‹ig_node
 *
‹ig_node
, *
sub_s
)

340 
b©adv_√igh_node
 *
√igh_node_be°
;

341 
b©adv_√igh_node
 *
√igh_node
;

342 
sub
 = 0;

343 
boﬁ
 
be°
;

345 
√igh_node_be°
 = 
	`b©adv_‹ig_rouãr_gë
(
‹ig_node
, 
if_outgoög
);

346 i‡(!
√igh_node_be°
)

347 
out
;

349 
	`hli°_f‹_óch_íåy_rcu
(
√igh_node
, &
‹ig_node
->
√igh_li°
, 
li°
) {

350 i‡(
sub
++ < *
sub_s
)

353 
be°
 = (
√igh_node
 =
√igh_node_be°
);

355 i‡(
	`b©adv_v_‹ig_dump_subíåy
(
msg
, 
p‹tid
, 
£q
, 
b©_¥iv
,

356 
if_outgoög
, 
‹ig_node
,

357 
√igh_node
, 
be°
)) {

358 
	`b©adv_√igh_node_put
(
√igh_node_be°
);

360 *
sub_s
 = 
sub
 - 1;

361  -
EMSGSIZE
;

365 
out
:

366 
	`b©adv_√igh_node_put
(
√igh_node_be°
);

368 *
sub_s
 = 0;

370 
	}
}

386 
	$b©adv_v_‹ig_dump_buckë
(
sk_buff
 *
msg
, 
u32
 
p‹tid
, u32 
£q
,

387 
b©adv_¥iv
 *
b©_¥iv
,

388 
b©adv_h¨d_iÁ˚
 *
if_outgoög
,

389 
hli°_hód
 *
hód
, *
idx_s
, *
sub
)

391 
b©adv_‹ig_node
 *
‹ig_node
;

392 
idx
 = 0;

394 
	`rcu_ªad_lock
();

395 
	`hli°_f‹_óch_íåy_rcu
(
‹ig_node
, 
hód
, 
hash_íåy
) {

396 i‡(
idx
++ < *
idx_s
)

399 i‡(
	`b©adv_v_‹ig_dump_íåy
(
msg
, 
p‹tid
, 
£q
, 
b©_¥iv
,

400 
if_outgoög
, 
‹ig_node
, 
sub
)) {

401 
	`rcu_ªad_u∆ock
();

402 *
idx_s
 = 
idx
 - 1;

403  -
EMSGSIZE
;

406 
	`rcu_ªad_u∆ock
();

408 *
idx_s
 = 0;

409 *
sub
 = 0;

411 
	}
}

421 
	$b©adv_v_‹ig_dump
(
sk_buff
 *
msg
, 
√éök_ˇŒback
 *
cb
,

422 
b©adv_¥iv
 *
b©_¥iv
,

423 
b©adv_h¨d_iÁ˚
 *
if_outgoög
)

425 
b©adv_hashèbÀ
 *
hash
 = 
b©_¥iv
->
‹ig_hash
;

426 
hli°_hód
 *
hód
;

427 
buckë
 = 
cb
->
¨gs
[0];

428 
idx
 = 
cb
->
¨gs
[1];

429 
sub
 = 
cb
->
¨gs
[2];

430 
p‹tid
 = 
	`NETLINK_CB
(
cb
->
skb
).portid;

432 
buckë
 < 
hash
->
size
) {

433 
hód
 = &
hash
->
èbÀ
[
buckë
];

435 i‡(
	`b©adv_v_‹ig_dump_buckë
(
msg
, 
p‹tid
,

436 
cb
->
∆h
->
∆msg_£q
,

437 
b©_¥iv
, 
if_outgoög
, 
hód
, &
idx
,

438 &
sub
))

441 
buckë
++;

444 
cb
->
¨gs
[0] = 
buckë
;

445 
cb
->
¨gs
[1] = 
idx
;

446 
cb
->
¨gs
[2] = 
sub
;

447 
	}
}

449 
	$b©adv_v_√igh_cmp
(
b©adv_√igh_node
 *
√igh1
,

450 
b©adv_h¨d_iÁ˚
 *
if_outgoög1
,

451 
b©adv_√igh_node
 *
√igh2
,

452 
b©adv_h¨d_iÁ˚
 *
if_outgoög2
)

454 
b©adv_√igh_iföfo
 *
iföfo1
, *
iföfo2
;

455 
ªt
 = 0;

457 
iföfo1
 = 
	`b©adv_√igh_iföfo_gë
(
√igh1
, 
if_outgoög1
);

458 i‡(!
iföfo1
)

459 
îr_iföfo1
;

461 
iföfo2
 = 
	`b©adv_√igh_iföfo_gë
(
√igh2
, 
if_outgoög2
);

462 i‡(!
iföfo2
)

463 
îr_iföfo2
;

465 
ªt
 = 
iföfo1
->
b©_v
.
throughput
 - 
iföfo2
->bat_v.throughput;

467 
	`b©adv_√igh_iföfo_put
(
iföfo2
);

468 
îr_iföfo2
:

469 
	`b©adv_√igh_iföfo_put
(
iföfo1
);

470 
îr_iföfo1
:

471  
ªt
;

472 
	}
}

474 
boﬁ
 
	$b©adv_v_√igh_is_sob
(
b©adv_√igh_node
 *
√igh1
,

475 
b©adv_h¨d_iÁ˚
 *
if_outgoög1
,

476 
b©adv_√igh_node
 *
√igh2
,

477 
b©adv_h¨d_iÁ˚
 *
if_outgoög2
)

479 
b©adv_√igh_iföfo
 *
iföfo1
, *
iföfo2
;

480 
u32
 
thªshﬁd
;

481 
boﬁ
 
ªt
 = 
Ál£
;

483 
iföfo1
 = 
	`b©adv_√igh_iföfo_gë
(
√igh1
, 
if_outgoög1
);

484 i‡(!
iföfo1
)

485 
îr_iföfo1
;

487 
iföfo2
 = 
	`b©adv_√igh_iföfo_gë
(
√igh2
, 
if_outgoög2
);

488 i‡(!
iföfo2
)

489 
îr_iföfo2
;

491 
thªshﬁd
 = 
iföfo1
->
b©_v
.
throughput
 / 4;

492 
thªshﬁd
 = 
iföfo1
->
b©_v
.
throughput
 -Åhreshold;

494 
ªt
 = 
iföfo2
->
b©_v
.
throughput
 > 
thªshﬁd
;

496 
	`b©adv_√igh_iföfo_put
(
iföfo2
);

497 
îr_iföfo2
:

498 
	`b©adv_√igh_iföfo_put
(
iföfo1
);

499 
îr_iföfo1
:

500  
ªt
;

501 
	}
}

507 
	$b©adv_v_öô_£l_˛ass
(
b©adv_¥iv
 *
b©_¥iv
)

510 
	`©omic_£t
(&
b©_¥iv
->
gw
.
£l_˛ass
, 50);

511 
	}
}

522 
	$b©adv_v_gw_throughput_gë
(
b©adv_gw_node
 *
gw_node
, 
u32
 *
bw
)

524 
b©adv_√igh_iföfo
 *
rouãr_iföfo
 = 
NULL
;

525 
b©adv_‹ig_node
 *
‹ig_node
;

526 
b©adv_√igh_node
 *
rouãr
;

527 
ªt
 = -1;

529 
‹ig_node
 = 
gw_node
->orig_node;

530 
rouãr
 = 
	`b©adv_‹ig_rouãr_gë
(
‹ig_node
, 
BATADV_IF_DEFAULT
);

531 i‡(!
rouãr
)

532 
out
;

534 
rouãr_iföfo
 = 
	`b©adv_√igh_iföfo_gë
(
rouãr
, 
BATADV_IF_DEFAULT
);

535 i‡(!
rouãr_iföfo
)

536 
out
;

543 *
bw
 = 
rouãr_iföfo
->
b©_v
.
throughput
;

544 *
bw
 = 
	`mö_t
(
u32
, *bw, 
gw_node
->
b™dwidth_down
);

546 
ªt
 = 0;

547 
out
:

548 
	`b©adv_√igh_node_put
(
rouãr
);

549 
	`b©adv_√igh_iföfo_put
(
rouãr_iföfo
);

551  
ªt
;

552 
	}
}

560 
b©adv_gw_node
 *

561 
	$b©adv_v_gw_gë_be°_gw_node
(
b©adv_¥iv
 *
b©_¥iv
)

563 
b©adv_gw_node
 *
gw_node
, *
cuº_gw
 = 
NULL
;

564 
u32
 
max_bw
 = 0, 
bw
;

566 
	`rcu_ªad_lock
();

567 
	`hli°_f‹_óch_íåy_rcu
(
gw_node
, &
b©_¥iv
->
gw
.
g©eway_li°
, 
li°
) {

568 i‡(!
	`kªf_gë_u∆ess_zîo
(&
gw_node
->
ªfcou¡
))

571 i‡(
	`b©adv_v_gw_throughput_gë
(
gw_node
, &
bw
) < 0)

572 
√xt
;

574 i‡(
cuº_gw
 && 
bw
 <
max_bw
)

575 
√xt
;

577 
	`b©adv_gw_node_put
(
cuº_gw
);

579 
cuº_gw
 = 
gw_node
;

580 
	`kªf_gë
(&
cuº_gw
->
ªfcou¡
);

581 
max_bw
 = 
bw
;

583 
√xt
:

584 
	`b©adv_gw_node_put
(
gw_node
);

586 
	`rcu_ªad_u∆ock
();

588  
cuº_gw
;

589 
	}
}

599 
boﬁ
 
	$b©adv_v_gw_is_ñigibÀ
(
b©adv_¥iv
 *
b©_¥iv
,

600 
b©adv_‹ig_node
 *
cuº_gw_‹ig
,

601 
b©adv_‹ig_node
 *
‹ig_node
)

603 
b©adv_gw_node
 *
cuº_gw
, *
‹ig_gw
 = 
NULL
;

604 
u32
 
gw_throughput
, 
‹ig_throughput
, 
thªshﬁd
;

605 
boﬁ
 
ªt
 = 
Ál£
;

607 
thªshﬁd
 = 
	`©omic_ªad
(&
b©_¥iv
->
gw
.
£l_˛ass
);

609 
cuº_gw
 = 
	`b©adv_gw_node_gë
(
b©_¥iv
, 
cuº_gw_‹ig
);

610 i‡(!
cuº_gw
) {

611 
ªt
 = 
åue
;

612 
out
;

615 i‡(
	`b©adv_v_gw_throughput_gë
(
cuº_gw
, &
gw_throughput
) < 0) {

616 
ªt
 = 
åue
;

617 
out
;

620 
‹ig_gw
 = 
	`b©adv_gw_node_gë
(
b©_¥iv
, 
‹ig_node
);

621 i‡(!
‹ig_gw
)

622 
out
;

624 i‡(
	`b©adv_v_gw_throughput_gë
(
‹ig_gw
, &
‹ig_throughput
) < 0)

625 
out
;

627 i‡(
‹ig_throughput
 < 
gw_throughput
)

628 
out
;

630 i‡((
‹ig_throughput
 - 
gw_throughput
Ë< 
thªshﬁd
)

631 
out
;

633 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

635 
gw_throughput
, 
‹ig_throughput
);

637 
ªt
 = 
åue
;

638 
out
:

639 
	`b©adv_gw_node_put
(
cuº_gw
);

640 
	`b©adv_gw_node_put
(
‹ig_gw
);

642  
ªt
;

643 
	}
}

655 
	$b©adv_v_gw_dump_íåy
(
sk_buff
 *
msg
, 
u32
 
p‹tid
,

656 
√éök_ˇŒback
 *
cb
,

657 
b©adv_¥iv
 *
b©_¥iv
,

658 
b©adv_gw_node
 *
gw_node
)

660 
b©adv_√igh_iföfo
 *
rouãr_iföfo
 = 
NULL
;

661 
b©adv_√igh_node
 *
rouãr
;

662 
b©adv_gw_node
 *
cuº_gw
 = 
NULL
;

663 
ªt
 = 0;

664 *
hdr
;

666 
rouãr
 = 
	`b©adv_‹ig_rouãr_gë
(
gw_node
->
‹ig_node
, 
BATADV_IF_DEFAULT
);

667 i‡(!
rouãr
)

668 
out
;

670 
rouãr_iföfo
 = 
	`b©adv_√igh_iföfo_gë
(
rouãr
, 
BATADV_IF_DEFAULT
);

671 i‡(!
rouãr_iföfo
)

672 
out
;

674 
cuº_gw
 = 
	`b©adv_gw_gë_£À˘ed_gw_node
(
b©_¥iv
);

676 
hdr
 = 
	`gílmsg_put
(
msg
, 
p‹tid
, 
cb
->
∆h
->
∆msg_£q
,

677 &
b©adv_√éök_Ámûy
, 
NLM_F_MULTI
,

678 
BATADV_CMD_GET_GATEWAYS
);

679 i‡(!
hdr
) {

680 
ªt
 = -
ENOBUFS
;

681 
out
;

684 
	`gíl_dump_check_c⁄si°ít
(
cb
, 
hdr
);

686 
ªt
 = -
EMSGSIZE
;

688 i‡(
cuº_gw
 =
gw_node
) {

689 i‡(
	`∆a_put_Êag
(
msg
, 
BATADV_ATTR_FLAG_BEST
)) {

690 
	`gílmsg_ˇn˚l
(
msg
, 
hdr
);

691 
out
;

695 i‡(
	`∆a_put
(
msg
, 
BATADV_ATTR_ORIG_ADDRESS
, 
ETH_ALEN
,

696 
gw_node
->
‹ig_node
->
‹ig
)) {

697 
	`gílmsg_ˇn˚l
(
msg
, 
hdr
);

698 
out
;

701 i‡(
	`∆a_put_u32
(
msg
, 
BATADV_ATTR_THROUGHPUT
,

702 
rouãr_iföfo
->
b©_v
.
throughput
)) {

703 
	`gílmsg_ˇn˚l
(
msg
, 
hdr
);

704 
out
;

707 i‡(
	`∆a_put
(
msg
, 
BATADV_ATTR_ROUTER
, 
ETH_ALEN
, 
rouãr
->
addr
)) {

708 
	`gílmsg_ˇn˚l
(
msg
, 
hdr
);

709 
out
;

712 i‡(
	`∆a_put_°rög
(
msg
, 
BATADV_ATTR_HARD_IFNAME
,

713 
rouãr
->
if_öcomög
->
√t_dev
->
«me
)) {

714 
	`gílmsg_ˇn˚l
(
msg
, 
hdr
);

715 
out
;

718 i‡(
	`∆a_put_u32
(
msg
, 
BATADV_ATTR_HARD_IFINDEX
,

719 
rouãr
->
if_öcomög
->
√t_dev
->
ifödex
)) {

720 
	`gílmsg_ˇn˚l
(
msg
, 
hdr
);

721 
out
;

724 i‡(
	`∆a_put_u32
(
msg
, 
BATADV_ATTR_BANDWIDTH_DOWN
,

725 
gw_node
->
b™dwidth_down
)) {

726 
	`gílmsg_ˇn˚l
(
msg
, 
hdr
);

727 
out
;

730 i‡(
	`∆a_put_u32
(
msg
, 
BATADV_ATTR_BANDWIDTH_UP
, 
gw_node
->
b™dwidth_up
)) {

731 
	`gílmsg_ˇn˚l
(
msg
, 
hdr
);

732 
out
;

735 
	`gílmsg_íd
(
msg
, 
hdr
);

736 
ªt
 = 0;

738 
out
:

739 
	`b©adv_gw_node_put
(
cuº_gw
);

740 
	`b©adv_√igh_iföfo_put
(
rouãr_iföfo
);

741 
	`b©adv_√igh_node_put
(
rouãr
);

742  
ªt
;

743 
	}
}

751 
	$b©adv_v_gw_dump
(
sk_buff
 *
msg
, 
√éök_ˇŒback
 *
cb
,

752 
b©adv_¥iv
 *
b©_¥iv
)

754 
p‹tid
 = 
	`NETLINK_CB
(
cb
->
skb
).portid;

755 
b©adv_gw_node
 *
gw_node
;

756 
idx_skù
 = 
cb
->
¨gs
[0];

757 
idx
 = 0;

759 
	`•ö_lock_bh
(&
b©_¥iv
->
gw
.
li°_lock
);

760 
cb
->
£q
 = 
b©_¥iv
->
gw
.
gíî©i⁄
 << 1 | 1;

762 
	`hli°_f‹_óch_íåy
(
gw_node
, &
b©_¥iv
->
gw
.
g©eway_li°
, 
li°
) {

763 i‡(
idx
++ < 
idx_skù
)

766 i‡(
	`b©adv_v_gw_dump_íåy
(
msg
, 
p‹tid
, 
cb
, 
b©_¥iv
,

767 
gw_node
)) {

768 
idx_skù
 = 
idx
 - 1;

769 
u∆ock
;

773 
idx_skù
 = 
idx
;

774 
u∆ock
:

775 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
gw
.
li°_lock
);

777 
cb
->
¨gs
[0] = 
idx_skù
;

778 
	}
}

780 
b©adv_Ægo_›s
 
b©adv_b©m™_v
 
	g__ªad_mo°ly
 = {

781 .
«me
 = "BATMAN_V",

782 .
	giÁ˚
 = {

783 .
a˘iv©e
 = 
b©adv_v_iÁ˚_a˘iv©e
,

784 .
	gíabÀ
 = 
b©adv_v_iÁ˚_íabÀ
,

785 .
	gdißbÀ
 = 
b©adv_v_iÁ˚_dißbÀ
,

786 .
	gupd©e_mac
 = 
b©adv_v_iÁ˚_upd©e_mac
,

787 .
	g¥im¨y_£t
 = 
b©adv_v_¥im¨y_iÁ˚_£t
,

789 .
	g√igh
 = {

790 .
h¨dif_öô
 = 
b©adv_v_h¨dif_√igh_öô
,

791 .
	gcmp
 = 
b©adv_v_√igh_cmp
,

792 .
	gis_simû¨_‹_bëãr
 = 
b©adv_v_√igh_is_sob
,

793 .
	gdump
 = 
b©adv_v_√igh_dump
,

795 .
	g‹ig
 = {

796 .
dump
 = 
b©adv_v_‹ig_dump
,

798 .
	ggw
 = {

799 .
öô_£l_˛ass
 = 
b©adv_v_öô_£l_˛ass
,

800 .
	g£l_˛ass_max
 = 
U32_MAX
,

801 .
	ggë_be°_gw_node
 = 
b©adv_v_gw_gë_be°_gw_node
,

802 .
	gis_ñigibÀ
 = 
b©adv_v_gw_is_ñigibÀ
,

803 .
	gdump
 = 
b©adv_v_gw_dump
,

812 
	$b©adv_v_h¨dif_öô
(
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
)

817 
	`©omic_£t
(&
h¨d_iÁ˚
->
b©_v
.
throughput_ovîride
, 0);

818 
	`©omic_£t
(&
h¨d_iÁ˚
->
b©_v
.
ñp_öãrvÆ
, 500);

820 
h¨d_iÁ˚
->
b©_v
.
aggr_Àn
 = 0;

821 
	`skb_queue_hód_öô
(&
h¨d_iÁ˚
->
b©_v
.
aggr_li°
);

822 
	`INIT_DELAYED_WORK
(&
h¨d_iÁ˚
->
b©_v
.
aggr_wq
,

823 
b©adv_v_ogm_aggr_w‹k
);

824 
	}
}

833 
	$b©adv_v_mesh_öô
(
b©adv_¥iv
 *
b©_¥iv
)

835 
ªt
 = 0;

837 
ªt
 = 
	`b©adv_v_ogm_öô
(
b©_¥iv
);

838 i‡(
ªt
 < 0)

839  
ªt
;

842 
	}
}

848 
	$b©adv_v_mesh_‰ì
(
b©adv_¥iv
 *
b©_¥iv
)

850 
	`b©adv_v_ogm_‰ì
(
b©_¥iv
);

851 
	}
}

861 
__öô
 
	$b©adv_v_öô
()

863 
ªt
;

866 
ªt
 = 
	`b©adv_ªcv_h™dÀr_ªgi°î
(
BATADV_ELP
,

867 
b©adv_v_ñp_∑ckë_ªcv
);

868 i‡(
ªt
 < 0)

869  
ªt
;

871 
ªt
 = 
	`b©adv_ªcv_h™dÀr_ªgi°î
(
BATADV_OGM2
,

872 
b©adv_v_ogm_∑ckë_ªcv
);

873 i‡(
ªt
 < 0)

874 
ñp_uƒegi°î
;

876 
ªt
 = 
	`b©adv_Ægo_ªgi°î
(&
b©adv_b©m™_v
);

877 i‡(
ªt
 < 0)

878 
ogm_uƒegi°î
;

880  
ªt
;

882 
ogm_uƒegi°î
:

883 
	`b©adv_ªcv_h™dÀr_uƒegi°î
(
BATADV_OGM2
);

885 
ñp_uƒegi°î
:

886 
	`b©adv_ªcv_h™dÀr_uƒegi°î
(
BATADV_ELP
);

888  
ªt
;

889 
	}
}

	@net/batman-adv/bat_v.h

7 #i‚de‡
_NET_BATMAN_ADV_BAT_V_H_


8 
	#_NET_BATMAN_ADV_BAT_V_H_


	)

10 
	~"maö.h
"

12 #ifde‡
CONFIG_BATMAN_ADV_BATMAN_V


14 
b©adv_v_öô
();

15 
b©adv_v_h¨dif_öô
(
b©adv_h¨d_iÁ˚
 *
h¨dif
);

16 
b©adv_v_mesh_öô
(
b©adv_¥iv
 *
b©_¥iv
);

17 
b©adv_v_mesh_‰ì
(
b©adv_¥iv
 *
b©_¥iv
);

21 
ölöe
 
	$b©adv_v_öô
()

24 
	}
}

26 
ölöe
 
	$b©adv_v_h¨dif_öô
(
b©adv_h¨d_iÁ˚
 *
h¨dif
)

28 
	}
}

30 
ölöe
 
	$b©adv_v_mesh_öô
(
b©adv_¥iv
 *
b©_¥iv
)

33 
	}
}

35 
ölöe
 
	$b©adv_v_mesh_‰ì
(
b©adv_¥iv
 *
b©_¥iv
)

37 
	}
}

	@net/batman-adv/bat_v_elp.c

7 
	~"b©_v_ñp.h
"

8 
	~"maö.h
"

10 
	~<löux/©omic.h
>

11 
	~<löux/bô›s.h
>

12 
	~<löux/byã‹dî/gíîic.h
>

13 
	~<löux/c⁄èöî_of.h
>

14 
	~<löux/î∫o.h
>

15 
	~<löux/ëhîdevi˚.h
>

16 
	~<löux/ëhtoﬁ.h
>

17 
	~<löux/gÂ.h
>

18 
	~<löux/if_ëhî.h
>

19 
	~<löux/jiffõs.h
>

20 
	~<löux/kªf.h
>

21 
	~<löux/li°.h
>

22 
	~<löux/mömax.h
>

23 
	~<löux/√tdevi˚.h
>

24 
	~<löux/∆80211.h
>

25 
	~<löux/øndom.h
>

26 
	~<löux/rculi°.h
>

27 
	~<löux/rcupd©e.h
>

28 
	~<löux/π√éök.h
>

29 
	~<löux/skbuff.h
>

30 
	~<löux/¶ab.h
>

31 
	~<löux/°ddef.h
>

32 
	~<löux/°rög.h
>

33 
	~<löux/ty≥s.h
>

34 
	~<löux/w‹kqueue.h
>

35 
	~<√t/cfg80211.h
>

36 
	~<u≠i/löux/b©adv_∑ckë.h
>

38 
	~"b©_Ægo.h
"

39 
	~"b©_v_ogm.h
"

40 
	~"h¨d-öãrÁ˚.h
"

41 
	~"log.h
"

42 
	~"‹igö©‹.h
"

43 
	~"routög.h
"

44 
	~"£nd.h
"

50 
	sb©adv_v_mëric_queue_íåy
 {

52 
b©adv_h¨dif_√igh_node
 *
	mh¨dif_√igh
;

55 
li°_hód
 
	mli°
;

62 
	$b©adv_v_ñp_°¨t_timî
(
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
)

64 
m£cs
;

66 
m£cs
 = 
	`©omic_ªad
(&
h¨d_iÁ˚
->
b©_v
.
ñp_öãrvÆ
Ë- 
BATADV_JITTER
;

67 
m£cs
 +
	`gë_øndom_u32_bñow
(2 * 
BATADV_JITTER
);

69 
	`queue_dñayed_w‹k
(
b©adv_evít_w‹kqueue
, &
h¨d_iÁ˚
->
b©_v
.
ñp_wq
,

70 
	`m£cs_to_jiffõs
(
m£cs
));

71 
	}
}

81 
boﬁ
 
	$b©adv_v_ñp_gë_throughput
(
b©adv_h¨dif_√igh_node
 *
√igh
,

82 
u32
 *
±hroughput
)

84 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
 = 
√igh
->
if_öcomög
;

85 
√t_devi˚
 *
mesh_iÁ˚
 = 
h¨d_iÁ˚
->mesh_iface;

86 
ëhtoﬁ_lök_k£âögs
 
lök_£âögs
;

87 
√t_devi˚
 *
ªÆ_√tdev
;

88 
°©i⁄_öfo
 
söfo
;

89 
u32
 
throughput
;

90 
ªt
;

95 i‡(!
mesh_iÁ˚
)

96  
Ál£
;

101 
throughput
 = 
	`©omic_ªad
(&
h¨d_iÁ˚
->
b©_v
.
throughput_ovîride
);

102 i‡(
throughput
 != 0) {

103 *
±hroughput
 = 
throughput
;

104  
åue
;

110 i‡(
	`b©adv_is_wifi_h¨dif
(
h¨d_iÁ˚
)) {

111 i‡(!
	`b©adv_is_cfg80211_h¨dif
(
h¨d_iÁ˚
))

113 
deÁu…_throughput
;

115 
ªÆ_√tdev
 = 
	`b©adv_gë_ªÆ_√tdev
(
h¨d_iÁ˚
->
√t_dev
);

116 i‡(!
ªÆ_√tdev
)

117 
deÁu…_throughput
;

119 
ªt
 = 
	`cfg80211_gë_°©i⁄
(
ªÆ_√tdev
, 
√igh
->
addr
, &
söfo
);

121 i‡(!
ªt
) {

123 
	`cfg80211_söfo_ªÀa£_c⁄ã¡
(&
söfo
);

126 
	`dev_put
(
ªÆ_√tdev
);

127 i‡(
ªt
 =-
ENOENT
) {

132 *
±hroughput
 = 0;

133  
åue
;

135 i‡(
ªt
)

136 
deÁu…_throughput
;

138 i‡(
söfo
.
fûÀd
 & 
	`BIT
(
NL80211_STA_INFO_EXPECTED_THROUGHPUT
)) {

139 *
±hroughput
 = 
söfo
.
ex≥˘ed_throughput
 / 100;

140  
åue
;

146 i‡(
söfo
.
fûÀd
 & 
	`BIT
(
NL80211_STA_INFO_TX_BITRATE
)) {

147 *
±hroughput
 = 
	`cfg80211_ˇlcuœã_bôøã
(&
söfo
.
txøã
) / 3;

148  
åue
;

151 
deÁu…_throughput
;

159 i‡(!
	`π∆_åylock
())

160  
Ál£
;

165 
ªt
 = 
	`__ëhtoﬁ_gë_lök_k£âögs
(
h¨d_iÁ˚
->
√t_dev
, &
lök_£âögs
);

166 
	`π∆_u∆ock
();

167 i‡(
ªt
 == 0) {

169 i‡(
lök_£âögs
.
ba£
.
du∂ex
 =
DUPLEX_FULL
)

170 
h¨d_iÁ˚
->
b©_v
.
Êags
 |
BATADV_FULL_DUPLEX
;

172 
h¨d_iÁ˚
->
b©_v
.
Êags
 &~
BATADV_FULL_DUPLEX
;

174 
throughput
 = 
lök_£âögs
.
ba£
.
•ìd
;

175 i‡(
throughput
 &&Åhroughpuà!
SPEED_UNKNOWN
) {

176 *
±hroughput
 = 
throughput
 * 10;

177  
åue
;

181 
deÁu…_throughput
:

182 i‡(!(
h¨d_iÁ˚
->
b©_v
.
Êags
 & 
BATADV_WARNING_DEFAULT
)) {

183 
	`b©adv_öfo
(
mesh_iÁ˚
,

185 
h¨d_iÁ˚
->
√t_dev
->
«me
,

186 
BATADV_THROUGHPUT_DEFAULT_VALUE
 / 10,

187 
BATADV_THROUGHPUT_DEFAULT_VALUE
 % 10);

188 
h¨d_iÁ˚
->
b©_v
.
Êags
 |
BATADV_WARNING_DEFAULT
;

192 *
±hroughput
 = 
BATADV_THROUGHPUT_DEFAULT_VALUE
;

193  
åue
;

194 
	}
}

202 
	$b©adv_v_ñp_throughput_mëric_upd©e
(
b©adv_h¨dif_√igh_node
 *
√igh
)

204 
u32
 
throughput
;

205 
boﬁ
 
vÆid
;

207 
vÆid
 = 
	`b©adv_v_ñp_gë_throughput
(
√igh
, &
throughput
);

208 i‡(!
vÆid
)

211 
	`ewma_throughput_add
(&
√igh
->
b©_v
.
throughput
,Åhroughput);

212 
	}
}

225 
boﬁ


226 
	$b©adv_v_ñp_wifi_√igh_¥obe
(
b©adv_h¨dif_√igh_node
 *
√igh
)

228 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
 = 
√igh
->
if_öcomög
;

229 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
h¨d_iÁ˚
->
mesh_iÁ˚
);

230 
œ°_tx_diff
;

231 
sk_buff
 *
skb
;

232 
¥obe_Àn
, 
i
;

233 
ñp_skb_Àn
;

236 i‡(!
	`b©adv_is_wifi_h¨dif
(
h¨d_iÁ˚
))

237  
åue
;

246 
œ°_tx_diff
 = 
	`jiffõs_to_m£cs
(
jiffõs
 - 
√igh
->
b©_v
.
œ°_uniˇ°_tx
);

247 i‡(
œ°_tx_diff
 <
BATADV_ELP_PROBE_MAX_TX_DIFF
)

248  
åue
;

250 
¥obe_Àn
 = 
	`max_t
(, (
b©adv_ñp_∑ckë
),

251 
BATADV_ELP_MIN_PROBE_SIZE
);

253 
i
 = 0; i < 
BATADV_ELP_PROBES_PER_NODE
; i++) {

254 
ñp_skb_Àn
 = 
h¨d_iÁ˚
->
b©_v
.
ñp_skb
->
Àn
;

255 
skb
 = 
	`skb_c›y_ex∑nd
(
h¨d_iÁ˚
->
b©_v
.
ñp_skb
, 0,

256 
¥obe_Àn
 - 
ñp_skb_Àn
,

257 
GFP_ATOMIC
);

258 i‡(!
skb
)

259  
Ál£
;

265 
	`skb_put_zîo
(
skb
, 
¥obe_Àn
 - 
h¨d_iÁ˚
->
b©_v
.
ñp_skb
->
Àn
);

267 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

269 
h¨d_iÁ˚
->
√t_dev
->
«me
, 
√igh
->
addr
);

271 
	`b©adv_£nd_skb_∑ckë
(
skb
, 
h¨d_iÁ˚
, 
√igh
->
addr
);

274  
åue
;

275 
	}
}

283 
	$b©adv_v_ñp_≥riodic_w‹k
(
w‹k_°ru˘
 *
w‹k
)

285 
b©adv_v_mëric_queue_íåy
 *
mëric_íåy
;

286 
b©adv_v_mëric_queue_íåy
 *
mëric_ß„
;

287 
b©adv_h¨dif_√igh_node
 *
h¨dif_√igh
;

288 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
;

289 
b©adv_h¨d_iÁ˚_b©_v
 *
b©_v
;

290 
b©adv_ñp_∑ckë
 *
ñp_∑ckë
;

291 
li°_hód
 
mëric_queue
;

292 
b©adv_¥iv
 *
b©_¥iv
;

293 
sk_buff
 *
skb
;

294 
u32
 
ñp_öãrvÆ
;

296 
b©_v
 = 
	`c⁄èöî_of
(
w‹k
, 
b©adv_h¨d_iÁ˚_b©_v
, 
ñp_wq
.work);

297 
h¨d_iÁ˚
 = 
	`c⁄èöî_of
(
b©_v
, 
b©adv_h¨d_iÁ˚
, bat_v);

298 
b©_¥iv
 = 
	`√tdev_¥iv
(
h¨d_iÁ˚
->
mesh_iÁ˚
);

300 i‡(
	`©omic_ªad
(&
b©_¥iv
->
mesh_°©e
Ë=
BATADV_MESH_DEACTIVATING
)

301 
out
;

304 i‡(
h¨d_iÁ˚
->
if_°©us
 =
BATADV_IF_NOT_IN_USE
 ||

305 
h¨d_iÁ˚
->
if_°©us
 =
BATADV_IF_TO_BE_REMOVED
)

306 
out
;

309 i‡(
h¨d_iÁ˚
->
if_°©us
 !
BATADV_IF_ACTIVE
)

310 
ª°¨t_timî
;

312 
skb
 = 
	`skb_c›y
(
h¨d_iÁ˚
->
b©_v
.
ñp_skb
, 
GFP_ATOMIC
);

313 i‡(!
skb
)

314 
ª°¨t_timî
;

316 
ñp_∑ckë
 = (
b©adv_ñp_∑ckë
 *)
skb
->
d©a
;

317 
ñp_∑ckë
->
£qno
 = 
	`ht⁄l
(
	`©omic_ªad
(&
h¨d_iÁ˚
->
b©_v
.
ñp_£qno
));

318 
ñp_öãrvÆ
 = 
	`©omic_ªad
(&
h¨d_iÁ˚
->
b©_v
.elp_interval);

319 
ñp_∑ckë
->
ñp_öãrvÆ
 = 
	`ht⁄l
(elp_interval);

321 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

323 
h¨d_iÁ˚
->
√t_dev
->
«me
,

324 
	`©omic_ªad
(&
h¨d_iÁ˚
->
b©_v
.
ñp_£qno
));

326 
	`b©adv_£nd_brﬂdˇ°_skb
(
skb
, 
h¨d_iÁ˚
);

328 
	`©omic_öc
(&
h¨d_iÁ˚
->
b©_v
.
ñp_£qno
);

330 
	`INIT_LIST_HEAD
(&
mëric_queue
);

343 
	`rcu_ªad_lock
();

344 
	`hli°_f‹_óch_íåy_rcu
(
h¨dif_√igh
, &
h¨d_iÁ˚
->
√igh_li°
, 
li°
) {

345 i‡(!
	`b©adv_v_ñp_wifi_√igh_¥obe
(
h¨dif_√igh
))

351 i‡(!
	`kªf_gë_u∆ess_zîo
(&
h¨dif_√igh
->
ªfcou¡
))

359 
mëric_íåy
 = 
	`kzÆloc
((*mëric_íåy), 
GFP_ATOMIC
);

360 i‡(!
mëric_íåy
) {

361 
	`b©adv_h¨dif_√igh_put
(
h¨dif_√igh
);

365 
mëric_íåy
->
h¨dif_√igh
 = hardif_neigh;

366 
	`li°_add
(&
mëric_íåy
->
li°
, &
mëric_queue
);

368 
	`rcu_ªad_u∆ock
();

370 
	`li°_f‹_óch_íåy_ß„
(
mëric_íåy
, 
mëric_ß„
, &
mëric_queue
, 
li°
) {

371 
	`b©adv_v_ñp_throughput_mëric_upd©e
(
mëric_íåy
->
h¨dif_√igh
);

373 
	`b©adv_h¨dif_√igh_put
(
mëric_íåy
->
h¨dif_√igh
);

374 
	`li°_dñ
(&
mëric_íåy
->
li°
);

375 
	`k‰ì
(
mëric_íåy
);

378 
ª°¨t_timî
:

379 
	`b©adv_v_ñp_°¨t_timî
(
h¨d_iÁ˚
);

380 
out
:

382 
	}
}

390 
	$b©adv_v_ñp_iÁ˚_íabÀ
(
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
)

392 c⁄° 
size_t
 
tvlv_∑ddög
 = (
__be32
);

393 
b©adv_ñp_∑ckë
 *
ñp_∑ckë
;

394 *
ñp_buff
;

395 
u32
 
øndom_£qno
;

396 
size_t
 
size
;

397 
ªs
 = -
ENOMEM
;

399 
size
 = 
ETH_HLEN
 + 
NET_IP_ALIGN
 + 
BATADV_ELP_HLEN
 + 
tvlv_∑ddög
;

400 
h¨d_iÁ˚
->
b©_v
.
ñp_skb
 = 
	`dev_Æloc_skb
(
size
);

401 i‡(!
h¨d_iÁ˚
->
b©_v
.
ñp_skb
)

402 
out
;

404 
	`skb_ª£rve
(
h¨d_iÁ˚
->
b©_v
.
ñp_skb
, 
ETH_HLEN
 + 
NET_IP_ALIGN
);

405 
ñp_buff
 = 
	`skb_put_zîo
(
h¨d_iÁ˚
->
b©_v
.
ñp_skb
,

406 
BATADV_ELP_HLEN
 + 
tvlv_∑ddög
);

407 
ñp_∑ckë
 = (
b©adv_ñp_∑ckë
 *)
ñp_buff
;

409 
ñp_∑ckë
->
∑ckë_ty≥
 = 
BATADV_ELP
;

410 
ñp_∑ckë
->
vîsi⁄
 = 
BATADV_COMPAT_VERSION
;

413 
	`gë_øndom_byãs
(&
øndom_£qno
, (random_seqno));

414 
	`©omic_£t
(&
h¨d_iÁ˚
->
b©_v
.
ñp_£qno
, 
øndom_£qno
);

417 
h¨d_iÁ˚
->
b©_v
.
Êags
 |
BATADV_FULL_DUPLEX
;

420 
h¨d_iÁ˚
->
b©_v
.
Êags
 &~
BATADV_WARNING_DEFAULT
;

422 i‡(
	`b©adv_is_wifi_h¨dif
(
h¨d_iÁ˚
))

423 
h¨d_iÁ˚
->
b©_v
.
Êags
 &~
BATADV_FULL_DUPLEX
;

425 
	`INIT_DELAYED_WORK
(&
h¨d_iÁ˚
->
b©_v
.
ñp_wq
,

426 
b©adv_v_ñp_≥riodic_w‹k
);

427 
	`b©adv_v_ñp_°¨t_timî
(
h¨d_iÁ˚
);

428 
ªs
 = 0;

430 
out
:

431  
ªs
;

432 
	}
}

438 
	$b©adv_v_ñp_iÁ˚_dißbÀ
(
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
)

440 
	`ˇn˚l_dñayed_w‹k_sync
(&
h¨d_iÁ˚
->
b©_v
.
ñp_wq
);

442 
	`dev_k‰ì_skb
(
h¨d_iÁ˚
->
b©_v
.
ñp_skb
);

443 
h¨d_iÁ˚
->
b©_v
.
ñp_skb
 = 
NULL
;

444 
	}
}

452 
	$b©adv_v_ñp_iÁ˚_a˘iv©e
(
b©adv_h¨d_iÁ˚
 *
¥im¨y_iÁ˚
,

453 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
)

455 
b©adv_ñp_∑ckë
 *
ñp_∑ckë
;

456 
sk_buff
 *
skb
;

458 i‡(!
h¨d_iÁ˚
->
b©_v
.
ñp_skb
)

461 
skb
 = 
h¨d_iÁ˚
->
b©_v
.
ñp_skb
;

462 
ñp_∑ckë
 = (
b©adv_ñp_∑ckë
 *)
skb
->
d©a
;

463 
	`ëhî_addr_c›y
(
ñp_∑ckë
->
‹ig
,

464 
¥im¨y_iÁ˚
->
√t_dev
->
dev_addr
);

465 
	}
}

472 
	$b©adv_v_ñp_¥im¨y_iÁ˚_£t
(
b©adv_h¨d_iÁ˚
 *
¥im¨y_iÁ˚
)

474 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
;

477 
	`rcu_ªad_lock
();

478 
	`li°_f‹_óch_íåy_rcu
(
h¨d_iÁ˚
, &
b©adv_h¨dif_li°
, 
li°
) {

479 i‡(
¥im¨y_iÁ˚
->
mesh_iÁ˚
 !
h¨d_iÁ˚
->mesh_iface)

482 
	`b©adv_v_ñp_iÁ˚_a˘iv©e
(
¥im¨y_iÁ˚
, 
h¨d_iÁ˚
);

484 
	`rcu_ªad_u∆ock
();

485 
	}
}

497 
	$b©adv_v_ñp_√igh_upd©e
(
b©adv_¥iv
 *
b©_¥iv
,

498 
u8
 *
√igh_addr
,

499 
b©adv_h¨d_iÁ˚
 *
if_öcomög
,

500 
b©adv_ñp_∑ckë
 *
ñp_∑ckë
)

503 
b©adv_√igh_node
 *
√igh
;

504 
b©adv_‹ig_node
 *
‹ig_√igh
;

505 
b©adv_h¨dif_√igh_node
 *
h¨dif_√igh
;

506 
s32
 
£qno_diff
;

507 
s32
 
ñp_œã°_£qno
;

509 
‹ig_√igh
 = 
	`b©adv_v_ogm_‹ig_gë
(
b©_¥iv
, 
ñp_∑ckë
->
‹ig
);

510 i‡(!
‹ig_√igh
)

513 
√igh
 = 
	`b©adv_√igh_node_gë_‹_¸óã
(
‹ig_√igh
,

514 
if_öcomög
, 
√igh_addr
);

515 i‡(!
√igh
)

516 
‹ig_‰ì
;

518 
h¨dif_√igh
 = 
	`b©adv_h¨dif_√igh_gë
(
if_öcomög
, 
√igh_addr
);

519 i‡(!
h¨dif_√igh
)

520 
√igh_‰ì
;

522 
ñp_œã°_£qno
 = 
h¨dif_√igh
->
b©_v
.elp_latest_seqno;

523 
£qno_diff
 = 
	`¡ohl
(
ñp_∑ckë
->
£qno
Ë- 
ñp_œã°_£qno
;

528 i‡(
£qno_diff
 < 1 && seqno_dif‡> -
BATADV_ELP_MAX_AGE
)

529 
h¨dif_‰ì
;

531 
√igh
->
œ°_£í
 = 
jiffõs
;

532 
h¨dif_√igh
->
œ°_£í
 = 
jiffõs
;

533 
h¨dif_√igh
->
b©_v
.
ñp_œã°_£qno
 = 
	`¡ohl
(
ñp_∑ckë
->
£qno
);

534 
h¨dif_√igh
->
b©_v
.
ñp_öãrvÆ
 = 
	`¡ohl
(
ñp_∑ckë
->elp_interval);

536 
h¨dif_‰ì
:

537 
	`b©adv_h¨dif_√igh_put
(
h¨dif_√igh
);

538 
√igh_‰ì
:

539 
	`b©adv_√igh_node_put
(
√igh
);

540 
‹ig_‰ì
:

541 
	`b©adv_‹ig_node_put
(
‹ig_√igh
);

542 
	}
}

552 
	$b©adv_v_ñp_∑ckë_ªcv
(
sk_buff
 *
skb
,

553 
b©adv_h¨d_iÁ˚
 *
if_öcomög
)

555 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
if_öcomög
->
mesh_iÁ˚
);

556 
b©adv_ñp_∑ckë
 *
ñp_∑ckë
;

557 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
;

558 
ëhhdr
 *ethhdr;

559 
boﬁ
 
ªs
;

560 
ªt
 = 
NET_RX_DROP
;

562 
ªs
 = 
	`b©adv_check_m™agemít_∑ckë
(
skb
, 
if_öcomög
, 
BATADV_ELP_HLEN
);

563 i‡(!
ªs
)

564 
‰ì_skb
;

566 
ëhhdr
 = 
	`ëh_hdr
(
skb
);

567 i‡(
	`b©adv_is_my_mac
(
b©_¥iv
, 
ëhhdr
->
h_sour˚
))

568 
‰ì_skb
;

573 i‡(
	`°rcmp
(
b©_¥iv
->
Ægo_›s
->
«me
, "BATMAN_V") != 0)

574 
‰ì_skb
;

576 
ñp_∑ckë
 = (
b©adv_ñp_∑ckë
 *)
skb
->
d©a
;

578 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

580 
ëhhdr
->
h_sour˚
, 
	`¡ohl
(
ñp_∑ckë
->
£qno
),

581 
ñp_∑ckë
->
‹ig
);

583 
¥im¨y_if
 = 
	`b©adv_¥im¨y_if_gë_£À˘ed
(
b©_¥iv
);

584 i‡(!
¥im¨y_if
)

585 
‰ì_skb
;

587 
	`b©adv_v_ñp_√igh_upd©e
(
b©_¥iv
, 
ëhhdr
->
h_sour˚
, 
if_öcomög
,

588 
ñp_∑ckë
);

590 
ªt
 = 
NET_RX_SUCCESS
;

591 
	`b©adv_h¨dif_put
(
¥im¨y_if
);

593 
‰ì_skb
:

594 i‡(
ªt
 =
NET_RX_SUCCESS
)

595 
	`c⁄sume_skb
(
skb
);

597 
	`k‰ì_skb
(
skb
);

599  
ªt
;

600 
	}
}

	@net/batman-adv/bat_v_elp.h

7 #i‚de‡
_NET_BATMAN_ADV_BAT_V_ELP_H_


8 
	#_NET_BATMAN_ADV_BAT_V_ELP_H_


	)

10 
	~"maö.h
"

12 
	~<löux/skbuff.h
>

14 
b©adv_v_ñp_iÁ˚_íabÀ
(
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
);

15 
b©adv_v_ñp_iÁ˚_dißbÀ
(
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
);

16 
b©adv_v_ñp_iÁ˚_a˘iv©e
(
b©adv_h¨d_iÁ˚
 *
¥im¨y_iÁ˚
,

17 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
);

18 
b©adv_v_ñp_¥im¨y_iÁ˚_£t
(
b©adv_h¨d_iÁ˚
 *
¥im¨y_iÁ˚
);

19 
b©adv_v_ñp_∑ckë_ªcv
(
sk_buff
 *
skb
,

20 
b©adv_h¨d_iÁ˚
 *
if_öcomög
);

	@net/batman-adv/bat_v_ogm.c

7 
	~"b©_v_ogm.h
"

8 
	~"maö.h
"

10 
	~<löux/©omic.h
>

11 
	~<löux/byã‹dî/gíîic.h
>

12 
	~<löux/c⁄èöî_of.h
>

13 
	~<löux/î∫o.h
>

14 
	~<löux/ëhîdevi˚.h
>

15 
	~<löux/gÂ.h
>

16 
	~<löux/if_ëhî.h
>

17 
	~<löux/jiffõs.h
>

18 
	~<löux/kªf.h
>

19 
	~<löux/li°.h
>

20 
	~<löux/lockdï.h
>

21 
	~<löux/mömax.h
>

22 
	~<löux/muãx.h
>

23 
	~<löux/√tdevi˚.h
>

24 
	~<löux/øndom.h
>

25 
	~<löux/rculi°.h
>

26 
	~<löux/rcupd©e.h
>

27 
	~<löux/skbuff.h
>

28 
	~<löux/¶ab.h
>

29 
	~<löux/•ölock.h
>

30 
	~<löux/°ddef.h
>

31 
	~<löux/°rög.h
>

32 
	~<löux/ty≥s.h
>

33 
	~<löux/w‹kqueue.h
>

34 
	~<u≠i/löux/b©adv_∑ckë.h
>

36 
	~"b©_Ægo.h
"

37 
	~"h¨d-öãrÁ˚.h
"

38 
	~"hash.h
"

39 
	~"log.h
"

40 
	~"‹igö©‹.h
"

41 
	~"routög.h
"

42 
	~"£nd.h
"

43 
	~"å™¶©i⁄-èbÀ.h
"

44 
	~"tvlv.h
"

55 
b©adv_‹ig_node
 *
	$b©adv_v_ogm_‹ig_gë
(
b©adv_¥iv
 *
b©_¥iv
,

56 c⁄° 
u8
 *
addr
)

58 
b©adv_‹ig_node
 *
‹ig_node
;

59 
hash_added
;

61 
‹ig_node
 = 
	`b©adv_‹ig_hash_föd
(
b©_¥iv
, 
addr
);

62 i‡(
‹ig_node
)

63  
‹ig_node
;

65 
‹ig_node
 = 
	`b©adv_‹ig_node_√w
(
b©_¥iv
, 
addr
);

66 i‡(!
‹ig_node
)

67  
NULL
;

69 
	`kªf_gë
(&
‹ig_node
->
ªfcou¡
);

70 
hash_added
 = 
	`b©adv_hash_add
(
b©_¥iv
->
‹ig_hash
, 
b©adv_com∑ª_‹ig
,

71 
b©adv_choo£_‹ig
, 
‹ig_node
,

72 &
‹ig_node
->
hash_íåy
);

73 i‡(
hash_added
 != 0) {

75 
	`b©adv_‹ig_node_put
(
‹ig_node
);

76 
	`b©adv_‹ig_node_put
(
‹ig_node
);

77 
‹ig_node
 = 
NULL
;

80  
‹ig_node
;

81 
	}
}

87 
	$b©adv_v_ogm_°¨t_queue_timî
(
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
)

89 
m£cs
 = 
BATADV_MAX_AGGREGATION_MS
 * 1000;

92 
m£cs
 +
	`gë_øndom_u32_bñow
(msecs / 5) - (msecs / 10);

93 
	`queue_dñayed_w‹k
(
b©adv_evít_w‹kqueue
, &
h¨d_iÁ˚
->
b©_v
.
aggr_wq
,

94 
	`m£cs_to_jiffõs
(
m£cs
 / 1000));

95 
	}
}

101 
	$b©adv_v_ogm_°¨t_timî
(
b©adv_¥iv
 *
b©_¥iv
)

103 
m£cs
;

107 i‡(
	`dñayed_w‹k_≥ndög
(&
b©_¥iv
->
b©_v
.
ogm_wq
))

110 
m£cs
 = 
	`©omic_ªad
(&
b©_¥iv
->
‹ig_öãrvÆ
Ë- 
BATADV_JITTER
;

111 
m£cs
 +
	`gë_øndom_u32_bñow
(2 * 
BATADV_JITTER
);

112 
	`queue_dñayed_w‹k
(
b©adv_evít_w‹kqueue
, &
b©_¥iv
->
b©_v
.
ogm_wq
,

113 
	`m£cs_to_jiffõs
(
m£cs
));

114 
	}
}

121 
	$b©adv_v_ogm_£nd_to_if
(
sk_buff
 *
skb
,

122 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
)

124 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
h¨d_iÁ˚
->
mesh_iÁ˚
);

126 i‡(
h¨d_iÁ˚
->
if_°©us
 !
BATADV_IF_ACTIVE
) {

127 
	`k‰ì_skb
(
skb
);

131 
	`b©adv_öc_cou¡î
(
b©_¥iv
, 
BATADV_CNT_MGMT_TX
);

132 
	`b©adv_add_cou¡î
(
b©_¥iv
, 
BATADV_CNT_MGMT_TX_BYTES
,

133 
skb
->
Àn
 + 
ETH_HLEN
);

135 
	`b©adv_£nd_brﬂdˇ°_skb
(
skb
, 
h¨d_iÁ˚
);

136 
	}
}

145 
	$b©adv_v_ogm_Àn
(
sk_buff
 *
skb
)

147 
b©adv_ogm2_∑ckë
 *
ogm_∑ckë
;

149 
ogm_∑ckë
 = (
b©adv_ogm2_∑ckë
 *)
skb
->
d©a
;

150  
BATADV_OGM2_HLEN
 + 
	`¡ohs
(
ogm_∑ckë
->
tvlv_Àn
);

151 
	}
}

162 
boﬁ
 
	$b©adv_v_ogm_queue_À·
(
sk_buff
 *
skb
,

163 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
)

165 
max
 = 
	`mö_t
(, 
h¨d_iÁ˚
->
√t_dev
->
mtu
,

166 
BATADV_MAX_AGGREGATION_BYTES
);

167 
ogm_Àn
 = 
	`b©adv_v_ogm_Àn
(
skb
);

169 
	`lockdï_as£π_hñd
(&
h¨d_iÁ˚
->
b©_v
.
aggr_li°
.
lock
);

171  
h¨d_iÁ˚
->
b©_v
.
aggr_Àn
 + 
ogm_Àn
 <
max
;

172 
	}
}

182 
	$b©adv_v_ogm_aggr_li°_‰ì
(
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
)

184 
	`lockdï_as£π_hñd
(&
h¨d_iÁ˚
->
b©_v
.
aggr_li°
.
lock
);

186 
	`__skb_queue_purge
(&
h¨d_iÁ˚
->
b©_v
.
aggr_li°
);

187 
h¨d_iÁ˚
->
b©_v
.
aggr_Àn
 = 0;

188 
	}
}

201 
	$b©adv_v_ogm_aggr_£nd
(
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
)

203 
aggr_Àn
 = 
h¨d_iÁ˚
->
b©_v
.aggr_len;

204 
sk_buff
 *
skb_aggr
;

205 
ogm_Àn
;

206 
sk_buff
 *
skb
;

208 
	`lockdï_as£π_hñd
(&
h¨d_iÁ˚
->
b©_v
.
aggr_li°
.
lock
);

210 i‡(!
aggr_Àn
)

213 
skb_aggr
 = 
	`dev_Æloc_skb
(
aggr_Àn
 + 
ETH_HLEN
 + 
NET_IP_ALIGN
);

214 i‡(!
skb_aggr
) {

215 
	`b©adv_v_ogm_aggr_li°_‰ì
(
h¨d_iÁ˚
);

219 
	`skb_ª£rve
(
skb_aggr
, 
ETH_HLEN
 + 
NET_IP_ALIGN
);

220 
	`skb_ª£t_√tw‹k_hódî
(
skb_aggr
);

222 (
skb
 = 
	`__skb_dequeue
(&
h¨d_iÁ˚
->
b©_v
.
aggr_li°
))) {

223 
h¨d_iÁ˚
->
b©_v
.
aggr_Àn
 -
	`b©adv_v_ogm_Àn
(
skb
);

225 
ogm_Àn
 = 
	`b©adv_v_ogm_Àn
(
skb
);

226 
	`skb_put_d©a
(
skb_aggr
, 
skb
->
d©a
, 
ogm_Àn
);

228 
	`c⁄sume_skb
(
skb
);

231 
	`b©adv_v_ogm_£nd_to_if
(
skb_aggr
, 
h¨d_iÁ˚
);

232 
	}
}

239 
	$b©adv_v_ogm_queue_⁄_if
(
sk_buff
 *
skb
,

240 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
)

242 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
h¨d_iÁ˚
->
mesh_iÁ˚
);

244 i‡(!
	`©omic_ªad
(&
b©_¥iv
->
aggªg©ed_ogms
)) {

245 
	`b©adv_v_ogm_£nd_to_if
(
skb
, 
h¨d_iÁ˚
);

249 
	`•ö_lock_bh
(&
h¨d_iÁ˚
->
b©_v
.
aggr_li°
.
lock
);

250 i‡(!
	`b©adv_v_ogm_queue_À·
(
skb
, 
h¨d_iÁ˚
))

251 
	`b©adv_v_ogm_aggr_£nd
(
h¨d_iÁ˚
);

253 
h¨d_iÁ˚
->
b©_v
.
aggr_Àn
 +
	`b©adv_v_ogm_Àn
(
skb
);

254 
	`__skb_queue_èû
(&
h¨d_iÁ˚
->
b©_v
.
aggr_li°
, 
skb
);

255 
	`•ö_u∆ock_bh
(&
h¨d_iÁ˚
->
b©_v
.
aggr_li°
.
lock
);

256 
	}
}

262 
	$b©adv_v_ogm_£nd_meshif
(
b©adv_¥iv
 *
b©_¥iv
)

264 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
;

265 
b©adv_ogm2_∑ckë
 *
ogm_∑ckë
;

266 
sk_buff
 *
skb
, *
skb_tmp
;

267 *
ogm_buff
;

268 
ogm_buff_Àn
;

269 
u16
 
tvlv_Àn
 = 0;

270 
ªt
;

272 
	`lockdï_as£π_hñd
(&
b©_¥iv
->
b©_v
.
ogm_buff_muãx
);

274 i‡(
	`©omic_ªad
(&
b©_¥iv
->
mesh_°©e
Ë=
BATADV_MESH_DEACTIVATING
)

275 
out
;

277 
ogm_buff
 = 
b©_¥iv
->
b©_v
.ogm_buff;

278 
ogm_buff_Àn
 = 
b©_¥iv
->
b©_v
.ogm_buff_len;

282 
	`b©adv_â_loˇl_commô_ch™ges
(
b©_¥iv
);

283 
tvlv_Àn
 = 
	`b©adv_tvlv_c⁄èöî_ogm_≠≥nd
(
b©_¥iv
, &
ogm_buff
,

284 &
ogm_buff_Àn
,

285 
BATADV_OGM2_HLEN
);

287 
b©_¥iv
->
b©_v
.
ogm_buff
 = ogm_buff;

288 
b©_¥iv
->
b©_v
.
ogm_buff_Àn
 = ogm_buff_len;

290 
skb
 = 
	`√tdev_Æloc_skb_ù_Æign
(
NULL
, 
ETH_HLEN
 + 
ogm_buff_Àn
);

291 i‡(!
skb
)

292 
ªscheduÀ
;

294 
	`skb_ª£rve
(
skb
, 
ETH_HLEN
);

295 
	`skb_put_d©a
(
skb
, 
ogm_buff
, 
ogm_buff_Àn
);

297 
ogm_∑ckë
 = (
b©adv_ogm2_∑ckë
 *)
skb
->
d©a
;

298 
ogm_∑ckë
->
£qno
 = 
	`ht⁄l
(
	`©omic_ªad
(&
b©_¥iv
->
b©_v
.
ogm_£qno
));

299 
	`©omic_öc
(&
b©_¥iv
->
b©_v
.
ogm_£qno
);

300 
ogm_∑ckë
->
tvlv_Àn
 = 
	`ht⁄s
(tvlv_len);

303 
	`rcu_ªad_lock
();

304 
	`li°_f‹_óch_íåy_rcu
(
h¨d_iÁ˚
, &
b©adv_h¨dif_li°
, 
li°
) {

305 i‡(
h¨d_iÁ˚
->
mesh_iÁ˚
 !
b©_¥iv
->mesh_iface)

308 i‡(!
	`kªf_gë_u∆ess_zîo
(&
h¨d_iÁ˚
->
ªfcou¡
))

311 
ªt
 = 
	`b©adv_h¨dif_no_brﬂdˇ°
(
h¨d_iÁ˚
, 
NULL
, NULL);

312 i‡(
ªt
) {

313 *
ty≥
;

315 
ªt
) {

316 
BATADV_HARDIF_BCAST_NORECIPIENT
:

317 
ty≥
 = "noÇeighbor";

319 
BATADV_HARDIF_BCAST_DUPFWD
:

320 
ty≥
 = "singleÇeighbor is source";

322 
BATADV_HARDIF_BCAST_DUPORIG
:

323 
ty≥
 = "singleÇeighbor is originator";

326 
ty≥
 = "unknown";

329 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
, "OGM2 from ourselves on %s suppressed: %s\n",

330 
h¨d_iÁ˚
->
√t_dev
->
«me
, 
ty≥
);

332 
	`b©adv_h¨dif_put
(
h¨d_iÁ˚
);

336 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

338 
ogm_∑ckë
->
‹ig
, 
	`¡ohl
(ogm_∑ckë->
£qno
),

339 
	`¡ohl
(
ogm_∑ckë
->
throughput
), ogm_∑ckë->
âl
,

340 
h¨d_iÁ˚
->
√t_dev
->
«me
,

341 
h¨d_iÁ˚
->
√t_dev
->
dev_addr
);

344 
skb_tmp
 = 
	`skb_˛⁄e
(
skb
, 
GFP_ATOMIC
);

345 i‡(!
skb_tmp
) {

346 
	`b©adv_h¨dif_put
(
h¨d_iÁ˚
);

350 
	`b©adv_v_ogm_queue_⁄_if
(
skb_tmp
, 
h¨d_iÁ˚
);

351 
	`b©adv_h¨dif_put
(
h¨d_iÁ˚
);

353 
	`rcu_ªad_u∆ock
();

355 
	`c⁄sume_skb
(
skb
);

357 
ªscheduÀ
:

358 
	`b©adv_v_ogm_°¨t_timî
(
b©_¥iv
);

359 
out
:

361 
	}
}

367 
	$b©adv_v_ogm_£nd
(
w‹k_°ru˘
 *
w‹k
)

369 
b©adv_¥iv_b©_v
 *
b©_v
;

370 
b©adv_¥iv
 *
b©_¥iv
;

372 
b©_v
 = 
	`c⁄èöî_of
(
w‹k
, 
b©adv_¥iv_b©_v
, 
ogm_wq
.work);

373 
b©_¥iv
 = 
	`c⁄èöî_of
(
b©_v
, 
b©adv_¥iv
, bat_v);

375 
	`muãx_lock
(&
b©_¥iv
->
b©_v
.
ogm_buff_muãx
);

376 
	`b©adv_v_ogm_£nd_meshif
(
b©_¥iv
);

377 
	`muãx_u∆ock
(&
b©_¥iv
->
b©_v
.
ogm_buff_muãx
);

378 
	}
}

386 
	$b©adv_v_ogm_aggr_w‹k
(
w‹k_°ru˘
 *
w‹k
)

388 
b©adv_h¨d_iÁ˚_b©_v
 *
b©v
;

389 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
;

391 
b©v
 = 
	`c⁄èöî_of
(
w‹k
, 
b©adv_h¨d_iÁ˚_b©_v
, 
aggr_wq
.work);

392 
h¨d_iÁ˚
 = 
	`c⁄èöî_of
(
b©v
, 
b©adv_h¨d_iÁ˚
, 
b©_v
);

394 
	`•ö_lock_bh
(&
h¨d_iÁ˚
->
b©_v
.
aggr_li°
.
lock
);

395 
	`b©adv_v_ogm_aggr_£nd
(
h¨d_iÁ˚
);

396 
	`•ö_u∆ock_bh
(&
h¨d_iÁ˚
->
b©_v
.
aggr_li°
.
lock
);

398 
	`b©adv_v_ogm_°¨t_queue_timî
(
h¨d_iÁ˚
);

399 
	}
}

409 
	$b©adv_v_ogm_iÁ˚_íabÀ
(
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
)

411 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
h¨d_iÁ˚
->
mesh_iÁ˚
);

413 
	`b©adv_v_ogm_°¨t_queue_timî
(
h¨d_iÁ˚
);

414 
	`b©adv_v_ogm_°¨t_timî
(
b©_¥iv
);

417 
	}
}

423 
	$b©adv_v_ogm_iÁ˚_dißbÀ
(
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
)

425 
	`ˇn˚l_dñayed_w‹k_sync
(&
h¨d_iÁ˚
->
b©_v
.
aggr_wq
);

427 
	`•ö_lock_bh
(&
h¨d_iÁ˚
->
b©_v
.
aggr_li°
.
lock
);

428 
	`b©adv_v_ogm_aggr_li°_‰ì
(
h¨d_iÁ˚
);

429 
	`•ö_u∆ock_bh
(&
h¨d_iÁ˚
->
b©_v
.
aggr_li°
.
lock
);

430 
	}
}

436 
	$b©adv_v_ogm_¥im¨y_iÁ˚_£t
(
b©adv_h¨d_iÁ˚
 *
¥im¨y_iÁ˚
)

438 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
¥im¨y_iÁ˚
->
mesh_iÁ˚
);

439 
b©adv_ogm2_∑ckë
 *
ogm_∑ckë
;

441 
	`muãx_lock
(&
b©_¥iv
->
b©_v
.
ogm_buff_muãx
);

442 i‡(!
b©_¥iv
->
b©_v
.
ogm_buff
)

443 
u∆ock
;

445 
ogm_∑ckë
 = (
b©adv_ogm2_∑ckë
 *)
b©_¥iv
->
b©_v
.
ogm_buff
;

446 
	`ëhî_addr_c›y
(
ogm_∑ckë
->
‹ig
, 
¥im¨y_iÁ˚
->
√t_dev
->
dev_addr
);

448 
u∆ock
:

449 
	`muãx_u∆ock
(&
b©_¥iv
->
b©_v
.
ogm_buff_muãx
);

450 
	}
}

475 
u32
 
	$b©adv_v_f‹w¨d_≥«…y
(
b©adv_¥iv
 *
b©_¥iv
,

476 
b©adv_h¨d_iÁ˚
 *
if_öcomög
,

477 
b©adv_h¨d_iÁ˚
 *
if_outgoög
,

478 
u32
 
throughput
)

480 
if_h›_≥«…y
 = 
	`©omic_ªad
(&
if_öcomög
->
h›_≥«…y
);

481 
h›_≥«…y
 = 
	`©omic_ªad
(&
b©_¥iv
->hop_penalty);

482 
h›_≥«…y_max
 = 
BATADV_TQ_MAX_VALUE
;

485 
throughput
 =Åhroughpuà* (
h›_≥«…y_max
 - 
if_h›_≥«…y
) /

486 
h›_≥«…y_max
;

489 i‡(
if_outgoög
 =
BATADV_IF_DEFAULT
)

490  
throughput
;

496 i‡(
throughput
 > 10 &&

497 
if_öcomög
 =
if_outgoög
 &&

498 !(
if_öcomög
->
b©_v
.
Êags
 & 
BATADV_FULL_DUPLEX
))

499  
throughput
 / 2;

502  
throughput
 * (
h›_≥«…y_max
 - 
h›_≥«…y
) / hop_penalty_max;

503 
	}
}

518 
	$b©adv_v_ogm_f‹w¨d
(
b©adv_¥iv
 *
b©_¥iv
,

519 c⁄° 
b©adv_ogm2_∑ckë
 *
ogm_ª˚ived
,

520 
b©adv_‹ig_node
 *
‹ig_node
,

521 
b©adv_√igh_node
 *
√igh_node
,

522 
b©adv_h¨d_iÁ˚
 *
if_öcomög
,

523 
b©adv_h¨d_iÁ˚
 *
if_outgoög
)

525 
b©adv_√igh_iföfo
 *
√igh_iföfo
 = 
NULL
;

526 
b©adv_‹ig_iföfo
 *
‹ig_iföfo
 = 
NULL
;

527 
b©adv_√igh_node
 *
rouãr
 = 
NULL
;

528 
b©adv_ogm2_∑ckë
 *
ogm_f‹w¨d
;

529 *
skb_buff
;

530 
sk_buff
 *
skb
;

531 
size_t
 
∑ckë_Àn
;

532 
u16
 
tvlv_Àn
;

535 i‡(
if_outgoög
 =
BATADV_IF_DEFAULT
)

536 
out
;

538 
‹ig_iföfo
 = 
	`b©adv_‹ig_iföfo_√w
(
‹ig_node
, 
if_outgoög
);

539 i‡(!
‹ig_iföfo
)

540 
out
;

543 
rouãr
 = 
	`b©adv_‹ig_rouãr_gë
(
‹ig_node
, 
if_outgoög
);

546 i‡(
√igh_node
 !
rouãr
)

547 
out
;

550 i‡(
‹ig_iföfo
->
œ°_£qno_f‹w¨ded
 =
	`¡ohl
(
ogm_ª˚ived
->
£qno
))

551 
out
;

553 
‹ig_iföfo
->
œ°_£qno_f‹w¨ded
 = 
	`¡ohl
(
ogm_ª˚ived
->
£qno
);

555 i‡(
ogm_ª˚ived
->
âl
 <= 1) {

556 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
, "ttlÉxceeded\n");

557 
out
;

560 
√igh_iföfo
 = 
	`b©adv_√igh_iföfo_gë
(
√igh_node
, 
if_outgoög
);

561 i‡(!
√igh_iföfo
)

562 
out
;

564 
tvlv_Àn
 = 
	`¡ohs
(
ogm_ª˚ived
->tvlv_len);

566 
∑ckë_Àn
 = 
BATADV_OGM2_HLEN
 + 
tvlv_Àn
;

567 
skb
 = 
	`√tdev_Æloc_skb_ù_Æign
(
if_outgoög
->
√t_dev
,

568 
ETH_HLEN
 + 
∑ckë_Àn
);

569 i‡(!
skb
)

570 
out
;

572 
	`skb_ª£rve
(
skb
, 
ETH_HLEN
);

573 
skb_buff
 = 
	`skb_put_d©a
(
skb
, 
ogm_ª˚ived
, 
∑ckë_Àn
);

576 
ogm_f‹w¨d
 = (
b©adv_ogm2_∑ckë
 *)
skb_buff
;

577 
ogm_f‹w¨d
->
throughput
 = 
	`ht⁄l
(
√igh_iföfo
->
b©_v
.throughput);

578 
ogm_f‹w¨d
->
âl
--;

580 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

582 
if_outgoög
->
√t_dev
->
«me
, 
	`¡ohl
(
ogm_f‹w¨d
->
throughput
),

583 
ogm_f‹w¨d
->
âl
, 
if_öcomög
->
√t_dev
->
«me
);

585 
	`b©adv_v_ogm_queue_⁄_if
(
skb
, 
if_outgoög
);

587 
out
:

588 
	`b©adv_‹ig_iföfo_put
(
‹ig_iföfo
);

589 
	`b©adv_√igh_node_put
(
rouãr
);

590 
	`b©adv_√igh_iföfo_put
(
√igh_iföfo
);

591 
	}
}

607 
	$b©adv_v_ogm_mëric_upd©e
(
b©adv_¥iv
 *
b©_¥iv
,

608 c⁄° 
b©adv_ogm2_∑ckë
 *
ogm2
,

609 
b©adv_‹ig_node
 *
‹ig_node
,

610 
b©adv_√igh_node
 *
√igh_node
,

611 
b©adv_h¨d_iÁ˚
 *
if_öcomög
,

612 
b©adv_h¨d_iÁ˚
 *
if_outgoög
)

614 
b©adv_‹ig_iföfo
 *
‹ig_iföfo
;

615 
b©adv_√igh_iföfo
 *
√igh_iföfo
 = 
NULL
;

616 
boﬁ
 
¥Ÿe˘i⁄_°¨ãd
 = 
Ál£
;

617 
ªt
 = -
EINVAL
;

618 
u32
 
∑th_throughput
;

619 
s32
 
£q_diff
;

621 
‹ig_iföfo
 = 
	`b©adv_‹ig_iföfo_√w
(
‹ig_node
, 
if_outgoög
);

622 i‡(!
‹ig_iföfo
)

623 
out
;

625 
£q_diff
 = 
	`¡ohl
(
ogm2
->
£qno
Ë- 
‹ig_iföfo
->
œ°_ªÆ_£qno
;

627 i‡(!
	`hli°_em±y
(&
‹ig_node
->
√igh_li°
) &&

628 
	`b©adv_wödow_¥Ÿe˘ed
(
b©_¥iv
, 
£q_diff
,

629 
BATADV_OGM_MAX_AGE
,

630 &
‹ig_iföfo
->
b©m™_£qno_ª£t
,

631 &
¥Ÿe˘i⁄_°¨ãd
)) {

632 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

634 
ogm2
->
‹ig
);

635 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

637 
‹ig_iföfo
->
b©m™_£qno_ª£t
, 
jiffõs
);

638 
out
;

644 i‡(
£q_diff
 < 0 && !
¥Ÿe˘i⁄_°¨ãd
)

645 
out
;

647 
√igh_node
->
œ°_£í
 = 
jiffõs
;

649 
‹ig_node
->
œ°_£í
 = 
jiffõs
;

651 
‹ig_iföfo
->
œ°_ªÆ_£qno
 = 
	`¡ohl
(
ogm2
->
£qno
);

652 
‹ig_iföfo
->
œ°_âl
 = 
ogm2
->
âl
;

654 
√igh_iföfo
 = 
	`b©adv_√igh_iföfo_√w
(
√igh_node
, 
if_outgoög
);

655 i‡(!
√igh_iföfo
)

656 
out
;

658 
∑th_throughput
 = 
	`b©adv_v_f‹w¨d_≥«…y
(
b©_¥iv
, 
if_öcomög
,

659 
if_outgoög
,

660 
	`¡ohl
(
ogm2
->
throughput
));

661 
√igh_iföfo
->
b©_v
.
throughput
 = 
∑th_throughput
;

662 
√igh_iföfo
->
b©_v
.
œ°_£qno
 = 
	`¡ohl
(
ogm2
->
£qno
);

663 
√igh_iföfo
->
œ°_âl
 = 
ogm2
->
âl
;

665 i‡(
£q_diff
 > 0 || 
¥Ÿe˘i⁄_°¨ãd
)

666 
ªt
 = 1;

668 
ªt
 = 0;

669 
out
:

670 
	`b©adv_‹ig_iföfo_put
(
‹ig_iföfo
);

671 
	`b©adv_√igh_iföfo_put
(
√igh_iföfo
);

673  
ªt
;

674 
	}
}

688 
boﬁ
 
	$b©adv_v_ogm_rouã_upd©e
(
b©adv_¥iv
 *
b©_¥iv
,

689 c⁄° 
ëhhdr
 *ethhdr,

690 c⁄° 
b©adv_ogm2_∑ckë
 *
ogm2
,

691 
b©adv_‹ig_node
 *
‹ig_node
,

692 
b©adv_√igh_node
 *
√igh_node
,

693 
b©adv_h¨d_iÁ˚
 *
if_öcomög
,

694 
b©adv_h¨d_iÁ˚
 *
if_outgoög
)

696 
b©adv_√igh_node
 *
rouãr
 = 
NULL
;

697 
b©adv_‹ig_node
 *
‹ig_√igh_node
;

698 
b©adv_√igh_node
 *
‹ig_√igh_rouãr
 = 
NULL
;

699 
b©adv_√igh_iföfo
 *
rouãr_iföfo
 = 
NULL
, *
√igh_iföfo
 = NULL;

700 
u32
 
rouãr_throughput
, 
√igh_throughput
;

701 
u32
 
rouãr_œ°_£qno
;

702 
u32
 
√igh_œ°_£qno
;

703 
s32
 
√igh_£q_diff
;

704 
boﬁ
 
f‹w¨d
 = 
Ál£
;

706 
‹ig_√igh_node
 = 
	`b©adv_v_ogm_‹ig_gë
(
b©_¥iv
, 
ëhhdr
->
h_sour˚
);

707 i‡(!
‹ig_√igh_node
)

708 
out
;

710 
‹ig_√igh_rouãr
 = 
	`b©adv_‹ig_rouãr_gë
(
‹ig_√igh_node
,

711 
if_outgoög
);

716 
rouãr
 = 
	`b©adv_‹ig_rouãr_gë
(
‹ig_node
, 
if_outgoög
);

717 i‡(
rouãr
 &&Ñouãr->
‹ig_node
 !‹ig_nodê&& !
‹ig_√igh_rouãr
) {

718 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

720 
out
;

726 
f‹w¨d
 = 
åue
;

728 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

734 i‡(
rouãr
 =
√igh_node
)

735 
out
;

741 i‡(
rouãr
) {

742 
rouãr_iföfo
 = 
	`b©adv_√igh_iföfo_gë
(
rouãr
, 
if_outgoög
);

743 
√igh_iföfo
 = 
	`b©adv_√igh_iföfo_gë
(
√igh_node
, 
if_outgoög
);

746 i‡(!
rouãr_iföfo
 || !
√igh_iföfo
)

747 
out
;

749 
√igh_œ°_£qno
 = 
√igh_iföfo
->
b©_v
.
œ°_£qno
;

750 
rouãr_œ°_£qno
 = 
rouãr_iföfo
->
b©_v
.
œ°_£qno
;

751 
√igh_£q_diff
 = 
√igh_œ°_£qno
 - 
rouãr_œ°_£qno
;

752 
rouãr_throughput
 = 
rouãr_iföfo
->
b©_v
.
throughput
;

753 
√igh_throughput
 = 
√igh_iföfo
->
b©_v
.
throughput
;

755 i‡(
√igh_£q_diff
 < 
BATADV_OGM_MAX_ORIGDIFF
 &&

756 
rouãr_throughput
 >
√igh_throughput
)

757 
out
;

760 
	`b©adv_upd©e_rouã
(
b©_¥iv
, 
‹ig_node
, 
if_outgoög
, 
√igh_node
);

761 
out
:

762 
	`b©adv_√igh_node_put
(
rouãr
);

763 
	`b©adv_√igh_node_put
(
‹ig_√igh_rouãr
);

764 
	`b©adv_‹ig_node_put
(
‹ig_√igh_node
);

765 
	`b©adv_√igh_iföfo_put
(
rouãr_iföfo
);

766 
	`b©adv_√igh_iföfo_put
(
√igh_iföfo
);

768  
f‹w¨d
;

769 
	}
}

782 
	$b©adv_v_ogm_¥o˚ss_≥r_outif
(
b©adv_¥iv
 *
b©_¥iv
,

783 c⁄° 
ëhhdr
 *ethhdr,

784 c⁄° 
b©adv_ogm2_∑ckë
 *
ogm2
,

785 
b©adv_‹ig_node
 *
‹ig_node
,

786 
b©adv_√igh_node
 *
√igh_node
,

787 
b©adv_h¨d_iÁ˚
 *
if_öcomög
,

788 
b©adv_h¨d_iÁ˚
 *
if_outgoög
)

790 
£qno_age
;

791 
boﬁ
 
f‹w¨d
;

794 
£qno_age
 = 
	`b©adv_v_ogm_mëric_upd©e
(
b©_¥iv
, 
ogm2
, 
‹ig_node
,

795 
√igh_node
, 
if_öcomög
,

796 
if_outgoög
);

799 i‡(
£qno_age
 < 0)

803 i‡(
£qno_age
 > 0 && 
if_outgoög
 =
BATADV_IF_DEFAULT
)

804 
	`b©adv_tvlv_c⁄èöîs_¥o˚ss
(
b©_¥iv
, 
BATADV_OGM2
, 
‹ig_node
,

805 
NULL
,

806 (*)(
ogm2
 + 1),

807 
	`¡ohs
(
ogm2
->
tvlv_Àn
));

810 
f‹w¨d
 = 
	`b©adv_v_ogm_rouã_upd©e
(
b©_¥iv
, 
ëhhdr
, 
ogm2
, 
‹ig_node
,

811 
√igh_node
, 
if_öcomög
,

812 
if_outgoög
);

815 i‡(
f‹w¨d
)

816 
	`b©adv_v_ogm_f‹w¨d
(
b©_¥iv
, 
ogm2
, 
‹ig_node
, 
√igh_node
,

817 
if_öcomög
, 
if_outgoög
);

818 
	}
}

828 
boﬁ


829 
	$b©adv_v_ogm_aggr_∑ckë
(
buff_pos
, 
∑ckë_Àn
,

830 c⁄° 
b©adv_ogm2_∑ckë
 *
ogm2_∑ckë
)

832 
√xt_buff_pos
 = 0;

835 
√xt_buff_pos
 +
buff_pos
 + (*
ogm2_∑ckë
);

836 i‡(
√xt_buff_pos
 > 
∑ckë_Àn
)

837  
Ál£
;

840 
√xt_buff_pos
 +
	`¡ohs
(
ogm2_∑ckë
->
tvlv_Àn
);

842  
√xt_buff_pos
 <
∑ckë_Àn
;

843 
	}
}

851 
	$b©adv_v_ogm_¥o˚ss
(c⁄° 
sk_buff
 *
skb
, 
ogm_off£t
,

852 
b©adv_h¨d_iÁ˚
 *
if_öcomög
)

854 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
if_öcomög
->
mesh_iÁ˚
);

855 
ëhhdr
 *ethhdr;

856 
b©adv_‹ig_node
 *
‹ig_node
 = 
NULL
;

857 
b©adv_h¨dif_√igh_node
 *
h¨dif_√igh
 = 
NULL
;

858 
b©adv_√igh_node
 *
√igh_node
 = 
NULL
;

859 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
;

860 
b©adv_ogm2_∑ckë
 *
ogm_∑ckë
;

861 
u32
 
ogm_throughput
, 
lök_throughput
, 
∑th_throughput
;

862 
ªt
;

864 
ëhhdr
 = 
	`ëh_hdr
(
skb
);

865 
ogm_∑ckë
 = (
b©adv_ogm2_∑ckë
 *)(
skb
->
d©a
 + 
ogm_off£t
);

867 
ogm_throughput
 = 
	`¡ohl
(
ogm_∑ckë
->
throughput
);

869 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

871 
ëhhdr
->
h_sour˚
, 
if_öcomög
->
√t_dev
->
«me
,

872 
if_öcomög
->
√t_dev
->
dev_addr
, 
ogm_∑ckë
->
‹ig
,

873 
	`¡ohl
(
ogm_∑ckë
->
£qno
), 
ogm_throughput
, ogm_∑ckë->
âl
,

874 
ogm_∑ckë
->
vîsi⁄
, 
	`¡ohs
(ogm_∑ckë->
tvlv_Àn
));

876 i‡(
	`b©adv_is_my_mac
(
b©_¥iv
, 
ogm_∑ckë
->
‹ig
)) {

877 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

885 i‡(
ogm_throughput
 == 0) {

886 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

892 
h¨dif_√igh
 = 
	`b©adv_h¨dif_√igh_gë
(
if_öcomög
, 
ëhhdr
->
h_sour˚
);

893 i‡(!
h¨dif_√igh
) {

894 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

896 
out
;

899 
‹ig_node
 = 
	`b©adv_v_ogm_‹ig_gë
(
b©_¥iv
, 
ogm_∑ckë
->
‹ig
);

900 i‡(!
‹ig_node
)

901 
out
;

903 
√igh_node
 = 
	`b©adv_√igh_node_gë_‹_¸óã
(
‹ig_node
, 
if_öcomög
,

904 
ëhhdr
->
h_sour˚
);

905 i‡(!
√igh_node
)

906 
out
;

915 
lök_throughput
 = 
	`ewma_throughput_ªad
(&
h¨dif_√igh
->
b©_v
.
throughput
);

916 
∑th_throughput
 = 
	`mö_t
(
u32
, 
lök_throughput
, 
ogm_throughput
);

917 
ogm_∑ckë
->
throughput
 = 
	`ht⁄l
(
∑th_throughput
);

919 
	`b©adv_v_ogm_¥o˚ss_≥r_outif
(
b©_¥iv
, 
ëhhdr
, 
ogm_∑ckë
, 
‹ig_node
,

920 
√igh_node
, 
if_öcomög
,

921 
BATADV_IF_DEFAULT
);

923 
	`rcu_ªad_lock
();

924 
	`li°_f‹_óch_íåy_rcu
(
h¨d_iÁ˚
, &
b©adv_h¨dif_li°
, 
li°
) {

925 i‡(
h¨d_iÁ˚
->
if_°©us
 !
BATADV_IF_ACTIVE
)

928 i‡(
h¨d_iÁ˚
->
mesh_iÁ˚
 !
b©_¥iv
->mesh_iface)

931 i‡(!
	`kªf_gë_u∆ess_zîo
(&
h¨d_iÁ˚
->
ªfcou¡
))

934 
ªt
 = 
	`b©adv_h¨dif_no_brﬂdˇ°
(
h¨d_iÁ˚
,

935 
ogm_∑ckë
->
‹ig
,

936 
h¨dif_√igh
->
‹ig
);

938 i‡(
ªt
) {

939 *
ty≥
;

941 
ªt
) {

942 
BATADV_HARDIF_BCAST_NORECIPIENT
:

943 
ty≥
 = "noÇeighbor";

945 
BATADV_HARDIF_BCAST_DUPFWD
:

946 
ty≥
 = "singleÇeighbor is source";

948 
BATADV_HARDIF_BCAST_DUPORIG
:

949 
ty≥
 = "singleÇeighbor is originator";

952 
ty≥
 = "unknown";

955 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
, "OGM2Öacket from %pM on %s suppressed: %s\n",

956 
ogm_∑ckë
->
‹ig
, 
h¨d_iÁ˚
->
√t_dev
->
«me
,

957 
ty≥
);

959 
	`b©adv_h¨dif_put
(
h¨d_iÁ˚
);

963 
	`b©adv_v_ogm_¥o˚ss_≥r_outif
(
b©_¥iv
, 
ëhhdr
, 
ogm_∑ckë
,

964 
‹ig_node
, 
√igh_node
,

965 
if_öcomög
, 
h¨d_iÁ˚
);

967 
	`b©adv_h¨dif_put
(
h¨d_iÁ˚
);

969 
	`rcu_ªad_u∆ock
();

970 
out
:

971 
	`b©adv_‹ig_node_put
(
‹ig_node
);

972 
	`b©adv_√igh_node_put
(
√igh_node
);

973 
	`b©adv_h¨dif_√igh_put
(
h¨dif_√igh
);

974 
	}
}

984 
	$b©adv_v_ogm_∑ckë_ªcv
(
sk_buff
 *
skb
,

985 
b©adv_h¨d_iÁ˚
 *
if_öcomög
)

987 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
if_öcomög
->
mesh_iÁ˚
);

988 
b©adv_ogm2_∑ckë
 *
ogm_∑ckë
;

989 
ëhhdr
 *ethhdr;

990 
ogm_off£t
;

991 
u8
 *
∑ckë_pos
;

992 
ªt
 = 
NET_RX_DROP
;

997 i‡(
	`°rcmp
(
b©_¥iv
->
Ægo_›s
->
«me
, "BATMAN_V") != 0)

998 
‰ì_skb
;

1000 i‡(!
	`b©adv_check_m™agemít_∑ckë
(
skb
, 
if_öcomög
, 
BATADV_OGM2_HLEN
))

1001 
‰ì_skb
;

1003 
ëhhdr
 = 
	`ëh_hdr
(
skb
);

1004 i‡(
	`b©adv_is_my_mac
(
b©_¥iv
, 
ëhhdr
->
h_sour˚
))

1005 
‰ì_skb
;

1007 
	`b©adv_öc_cou¡î
(
b©_¥iv
, 
BATADV_CNT_MGMT_RX
);

1008 
	`b©adv_add_cou¡î
(
b©_¥iv
, 
BATADV_CNT_MGMT_RX_BYTES
,

1009 
skb
->
Àn
 + 
ETH_HLEN
);

1011 
ogm_off£t
 = 0;

1012 
ogm_∑ckë
 = (
b©adv_ogm2_∑ckë
 *)
skb
->
d©a
;

1014 
	`b©adv_v_ogm_aggr_∑ckë
(
ogm_off£t
, 
	`skb_hódÀn
(
skb
),

1015 
ogm_∑ckë
)) {

1016 
	`b©adv_v_ogm_¥o˚ss
(
skb
, 
ogm_off£t
, 
if_öcomög
);

1018 
ogm_off£t
 +
BATADV_OGM2_HLEN
;

1019 
ogm_off£t
 +
	`¡ohs
(
ogm_∑ckë
->
tvlv_Àn
);

1021 
∑ckë_pos
 = 
skb
->
d©a
 + 
ogm_off£t
;

1022 
ogm_∑ckë
 = (
b©adv_ogm2_∑ckë
 *)
∑ckë_pos
;

1025 
ªt
 = 
NET_RX_SUCCESS
;

1027 
‰ì_skb
:

1028 i‡(
ªt
 =
NET_RX_SUCCESS
)

1029 
	`c⁄sume_skb
(
skb
);

1031 
	`k‰ì_skb
(
skb
);

1033  
ªt
;

1034 
	}
}

1042 
	$b©adv_v_ogm_öô
(
b©adv_¥iv
 *
b©_¥iv
)

1044 
b©adv_ogm2_∑ckë
 *
ogm_∑ckë
;

1045 *
ogm_buff
;

1046 
u32
 
øndom_£qno
;

1048 
b©_¥iv
->
b©_v
.
ogm_buff_Àn
 = 
BATADV_OGM2_HLEN
;

1049 
ogm_buff
 = 
	`kzÆloc
(
b©_¥iv
->
b©_v
.
ogm_buff_Àn
, 
GFP_ATOMIC
);

1050 i‡(!
ogm_buff
)

1051  -
ENOMEM
;

1053 
b©_¥iv
->
b©_v
.
ogm_buff
 = ogm_buff;

1054 
ogm_∑ckë
 = (
b©adv_ogm2_∑ckë
 *)
ogm_buff
;

1055 
ogm_∑ckë
->
∑ckë_ty≥
 = 
BATADV_OGM2
;

1056 
ogm_∑ckë
->
vîsi⁄
 = 
BATADV_COMPAT_VERSION
;

1057 
ogm_∑ckë
->
âl
 = 
BATADV_TTL
;

1058 
ogm_∑ckë
->
Êags
 = 
BATADV_NO_FLAGS
;

1059 
ogm_∑ckë
->
throughput
 = 
	`ht⁄l
(
BATADV_THROUGHPUT_MAX_VALUE
);

1062 
	`gë_øndom_byãs
(&
øndom_£qno
, (random_seqno));

1063 
	`©omic_£t
(&
b©_¥iv
->
b©_v
.
ogm_£qno
, 
øndom_£qno
);

1064 
	`INIT_DELAYED_WORK
(&
b©_¥iv
->
b©_v
.
ogm_wq
, 
b©adv_v_ogm_£nd
);

1066 
	`muãx_öô
(&
b©_¥iv
->
b©_v
.
ogm_buff_muãx
);

1069 
	}
}

1075 
	$b©adv_v_ogm_‰ì
(
b©adv_¥iv
 *
b©_¥iv
)

1077 
	`ˇn˚l_dñayed_w‹k_sync
(&
b©_¥iv
->
b©_v
.
ogm_wq
);

1079 
	`muãx_lock
(&
b©_¥iv
->
b©_v
.
ogm_buff_muãx
);

1081 
	`k‰ì
(
b©_¥iv
->
b©_v
.
ogm_buff
);

1082 
b©_¥iv
->
b©_v
.
ogm_buff
 = 
NULL
;

1083 
b©_¥iv
->
b©_v
.
ogm_buff_Àn
 = 0;

1085 
	`muãx_u∆ock
(&
b©_¥iv
->
b©_v
.
ogm_buff_muãx
);

1086 
	}
}

	@net/batman-adv/bat_v_ogm.h

7 #i‚de‡
_NET_BATMAN_ADV_BAT_V_OGM_H_


8 
	#_NET_BATMAN_ADV_BAT_V_OGM_H_


	)

10 
	~"maö.h
"

12 
	~<löux/skbuff.h
>

13 
	~<löux/ty≥s.h
>

14 
	~<löux/w‹kqueue.h
>

16 
b©adv_v_ogm_öô
(
b©adv_¥iv
 *
b©_¥iv
);

17 
b©adv_v_ogm_‰ì
(
b©adv_¥iv
 *
b©_¥iv
);

18 
b©adv_v_ogm_aggr_w‹k
(
w‹k_°ru˘
 *
w‹k
);

19 
b©adv_v_ogm_iÁ˚_íabÀ
(
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
);

20 
b©adv_v_ogm_iÁ˚_dißbÀ
(
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
);

21 
b©adv_‹ig_node
 *
b©adv_v_ogm_‹ig_gë
(
b©adv_¥iv
 *
b©_¥iv
,

22 c⁄° 
u8
 *
addr
);

23 
b©adv_v_ogm_¥im¨y_iÁ˚_£t
(
b©adv_h¨d_iÁ˚
 *
¥im¨y_iÁ˚
);

24 
b©adv_v_ogm_∑ckë_ªcv
(
sk_buff
 *
skb
,

25 
b©adv_h¨d_iÁ˚
 *
if_öcomög
);

	@net/batman-adv/batman-adv.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/exp‹t-öã∫Æ.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
«me
, 
KBUILD_MODNAME
);

7 
__visibÀ
 
moduÀ
 
__this_moduÀ


8 
__£˘i⁄
(".gnu.linkonce.this_module") = {

9 .
«me
 = 
KBUILD_MODNAME
,

10 .
	göô
 = 
öô_moduÀ
,

11 #ifde‡
CONFIG_MODULE_UNLOAD


12 .
	gexô
 = 
˛ónup_moduÀ
,

14 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

19 c⁄° 
modvîsi⁄_öfo
 
	g____vîsi⁄s
[]

20 
__u£d
 
__£˘i⁄
("__versions") = {

177 c⁄° 
u32
 
	g____vîsi⁄_ext_¸cs
[]

178 
__u£d
 
__£˘i⁄
("__version_ext_crcs") = {

334 c⁄° 
	g____vîsi⁄_ext_«mes
[]

335 
__u£d
 
__£˘i⁄
("__version_ext_names") =

492 
MODULE_INFO
(
dïíds
, "cfg80211,bridge");

495 
MODULE_INFO
(
§cvîsi⁄
, "580E03022A4C4E4B0D9F3FC");

	@net/batman-adv/bitarray.c

7 
	~"bô¨øy.h
"

8 
	~"maö.h
"

10 
	~<löux/bôm≠.h
>

12 
	~"log.h
"

15 
	$b©adv_bôm≠_shi·_À·
(*
£q_bôs
, 
s32
 
n
)

17 i‡(
n
 <0 ||Ç >
BATADV_TQ_LOCAL_WINDOW_SIZE
)

20 
	`bôm≠_shi·_À·
(
£q_bôs
, seq_bôs, 
n
, 
BATADV_TQ_LOCAL_WINDOW_SIZE
);

21 
	}
}

35 
boﬁ
 
	$b©adv_bô_gë_∑ckë
(*
¥iv
, *
£q_bôs
,

36 
s32
 
£q_num_diff
, 
£t_m¨k
)

38 
b©adv_¥iv
 *
b©_¥iv
 = 
¥iv
;

43 i‡(
£q_num_diff
 <0 && seq_num_dif‡> -
BATADV_TQ_LOCAL_WINDOW_SIZE
) {

44 i‡(
£t_m¨k
)

45 
	`b©adv_£t_bô
(
£q_bôs
, -
£q_num_diff
);

46  
Ál£
;

52 i‡(
£q_num_diff
 > 0 && seq_num_dif‡< 
BATADV_TQ_LOCAL_WINDOW_SIZE
) {

53 
	`b©adv_bôm≠_shi·_À·
(
£q_bôs
, 
£q_num_diff
);

55 i‡(
£t_m¨k
)

56 
	`b©adv_£t_bô
(
£q_bôs
, 0);

57  
åue
;

61 i‡(
£q_num_diff
 >
BATADV_TQ_LOCAL_WINDOW_SIZE
 &&

62 
£q_num_diff
 < 
BATADV_EXPECTED_SEQNO_RANGE
) {

63 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

65 
£q_num_diff
 - 1);

66 
	`bôm≠_zîo
(
£q_bôs
, 
BATADV_TQ_LOCAL_WINDOW_SIZE
);

67 i‡(
£t_m¨k
)

68 
	`b©adv_£t_bô
(
£q_bôs
, 0);

69  
åue
;

81 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

84 
	`bôm≠_zîo
(
£q_bôs
, 
BATADV_TQ_LOCAL_WINDOW_SIZE
);

85 i‡(
£t_m¨k
)

86 
	`b©adv_£t_bô
(
£q_bôs
, 0);

88  
åue
;

89 
	}
}

	@net/batman-adv/bitarray.h

7 #i‚de‡
_NET_BATMAN_ADV_BITARRAY_H_


8 
	#_NET_BATMAN_ADV_BITARRAY_H_


	)

10 
	~"maö.h
"

12 
	~<löux/bô›s.h
>

13 
	~<löux/compûî.h
>

14 
	~<löux/°ddef.h
>

15 
	~<löux/ty≥s.h
>

27 
ölöe
 
boﬁ
 
	$b©adv_ã°_bô
(c⁄° *
£q_bôs
,

28 
u32
 
œ°_£qno
, u32 
cuº_£qno
)

30 
s32
 
diff
;

32 
diff
 = 
œ°_£qno
 - 
cuº_£qno
;

33 i‡(
diff
 < 0 || dif‡>
BATADV_TQ_LOCAL_WINDOW_SIZE
)

34  
Ál£
;

35  
	`ã°_bô
(
diff
, 
£q_bôs
) != 0;

36 
	}
}

44 
ölöe
 
	$b©adv_£t_bô
(*
£q_bôs
, 
s32
 
n
)

47 i‡(
n
 < 0 ||Ç >
BATADV_TQ_LOCAL_WINDOW_SIZE
)

50 
	`£t_bô
(
n
, 
£q_bôs
);

51 
	}
}

53 
boﬁ
 
b©adv_bô_gë_∑ckë
(*
¥iv
, *
£q_bôs
,

54 
s32
 
£q_num_diff
, 
£t_m¨k
);

	@net/batman-adv/bridge_loop_avoidance.c

7 
	~"bridge_lo›_avoid™˚.h
"

8 
	~"maö.h
"

10 
	~<löux/©omic.h
>

11 
	~<löux/byã‹dî/gíîic.h
>

12 
	~<löux/compûî.h
>

13 
	~<löux/c⁄èöî_of.h
>

14 
	~<löux/¸c16.h
>

15 
	~<löux/îr.h
>

16 
	~<löux/î∫o.h
>

17 
	~<löux/ëhîdevi˚.h
>

18 
	~<löux/gÂ.h
>

19 
	~<löux/if_¨p.h
>

20 
	~<löux/if_ëhî.h
>

21 
	~<löux/if_vœn.h
>

22 
	~<löux/jhash.h
>

23 
	~<löux/jiffõs.h
>

24 
	~<löux/kªf.h
>

25 
	~<löux/li°.h
>

26 
	~<löux/lockdï.h
>

27 
	~<löux/√tdevi˚.h
>

28 
	~<löux/√éök.h
>

29 
	~<löux/rculi°.h
>

30 
	~<löux/rcupd©e.h
>

31 
	~<löux/skbuff.h
>

32 
	~<löux/¶ab.h
>

33 
	~<löux/•ölock.h
>

34 
	~<löux/•rötf.h
>

35 
	~<löux/°ddef.h
>

36 
	~<löux/°rög.h
>

37 
	~<löux/°rög_choi˚s.h
>

38 
	~<löux/w‹kqueue.h
>

39 
	~<√t/¨p.h
>

40 
	~<√t/gíëlök.h
>

41 
	~<√t/√éök.h
>

42 
	~<u≠i/löux/b©adv_∑ckë.h
>

43 
	~<u≠i/löux/b©m™_adv.h
>

45 
	~"h¨d-öãrÁ˚.h
"

46 
	~"hash.h
"

47 
	~"log.h
"

48 
	~"√éök.h
"

49 
	~"‹igö©‹.h
"

50 
	~"å™¶©i⁄-èbÀ.h
"

52 c⁄° 
u8
 
	gb©adv_™noun˚_mac
[4] = {0x43, 0x05, 0x43, 0x05};

54 
b©adv_bœ_≥riodic_w‹k
(
w‹k_°ru˘
 *
w‹k
);

56 
b©adv_bœ_£nd_™noun˚
(
b©adv_¥iv
 *
b©_¥iv
,

57 
b©adv_bœ_backb⁄e_gw
 *
backb⁄e_gw
);

66 
ölöe
 
u32
 
	$b©adv_choo£_˛aim
(c⁄° *
d©a
, 
u32
 
size
)

68 c⁄° 
b©adv_bœ_˛aim
 *
˛aim
 = 
d©a
;

69 
u32
 
hash
 = 0;

71 
hash
 = 
	`jhash
(&
˛aim
->
addr
, (claim->addr), hash);

72 
hash
 = 
	`jhash
(&
˛aim
->
vid
, (claim->vid), hash);

74  
hash
 % 
size
;

75 
	}
}

84 
ölöe
 
u32
 
	$b©adv_choo£_backb⁄e_gw
(c⁄° *
d©a
, 
u32
 
size
)

86 c⁄° 
b©adv_bœ_backb⁄e_gw
 *
gw
;

87 
u32
 
hash
 = 0;

89 
gw
 = 
d©a
;

90 
hash
 = 
	`jhash
(&
gw
->
‹ig
, (gw->orig), hash);

91 
hash
 = 
	`jhash
(&
gw
->
vid
, (gw->vid), hash);

93  
hash
 % 
size
;

94 
	}
}

103 
boﬁ
 
	$b©adv_com∑ª_backb⁄e_gw
(c⁄° 
hli°_node
 *
node
,

104 c⁄° *
d©a2
)

106 c⁄° *
d©a1
 = 
	`c⁄èöî_of
(
node
, 
b©adv_bœ_backb⁄e_gw
,

107 
hash_íåy
);

108 c⁄° 
b©adv_bœ_backb⁄e_gw
 *
gw1
 = 
d©a1
;

109 c⁄° 
b©adv_bœ_backb⁄e_gw
 *
gw2
 = 
d©a2
;

111 i‡(!
	`b©adv_com∑ª_ëh
(
gw1
->
‹ig
, 
gw2
->orig))

112  
Ál£
;

114 i‡(
gw1
->
vid
 !
gw2
->vid)

115  
Ál£
;

117  
åue
;

118 
	}
}

127 
boﬁ
 
	$b©adv_com∑ª_˛aim
(c⁄° 
hli°_node
 *
node
,

128 c⁄° *
d©a2
)

130 c⁄° *
d©a1
 = 
	`c⁄èöî_of
(
node
, 
b©adv_bœ_˛aim
,

131 
hash_íåy
);

132 c⁄° 
b©adv_bœ_˛aim
 *
˛1
 = 
d©a1
;

133 c⁄° 
b©adv_bœ_˛aim
 *
˛2
 = 
d©a2
;

135 i‡(!
	`b©adv_com∑ª_ëh
(
˛1
->
addr
, 
˛2
->addr))

136  
Ál£
;

138 i‡(
˛1
->
vid
 !
˛2
->vid)

139  
Ál£
;

141  
åue
;

142 
	}
}

149 
	$b©adv_backb⁄e_gw_ªÀa£
(
kªf
 *
ªf
)

151 
b©adv_bœ_backb⁄e_gw
 *
backb⁄e_gw
;

153 
backb⁄e_gw
 = 
	`c⁄èöî_of
(
ªf
, 
b©adv_bœ_backb⁄e_gw
,

154 
ªfcou¡
);

156 
	`k‰ì_rcu
(
backb⁄e_gw
, 
rcu
);

157 
	}
}

164 
	$b©adv_backb⁄e_gw_put
(
b©adv_bœ_backb⁄e_gw
 *
backb⁄e_gw
)

166 i‡(!
backb⁄e_gw
)

169 
	`kªf_put
(&
backb⁄e_gw
->
ªfcou¡
, 
b©adv_backb⁄e_gw_ªÀa£
);

170 
	}
}

177 
	$b©adv_˛aim_ªÀa£
(
kªf
 *
ªf
)

179 
b©adv_bœ_˛aim
 *
˛aim
;

180 
b©adv_bœ_backb⁄e_gw
 *
ﬁd_backb⁄e_gw
;

182 
˛aim
 = 
	`c⁄èöî_of
(
ªf
, 
b©adv_bœ_˛aim
, 
ªfcou¡
);

184 
	`•ö_lock_bh
(&
˛aim
->
backb⁄e_lock
);

185 
ﬁd_backb⁄e_gw
 = 
˛aim
->
backb⁄e_gw
;

186 
˛aim
->
backb⁄e_gw
 = 
NULL
;

187 
	`•ö_u∆ock_bh
(&
˛aim
->
backb⁄e_lock
);

189 
	`•ö_lock_bh
(&
ﬁd_backb⁄e_gw
->
¸c_lock
);

190 
ﬁd_backb⁄e_gw
->
¸c
 ^
	`¸c16
(0, 
˛aim
->
addr
, 
ETH_ALEN
);

191 
	`•ö_u∆ock_bh
(&
ﬁd_backb⁄e_gw
->
¸c_lock
);

193 
	`b©adv_backb⁄e_gw_put
(
ﬁd_backb⁄e_gw
);

195 
	`k‰ì_rcu
(
˛aim
, 
rcu
);

196 
	}
}

202 
	$b©adv_˛aim_put
(
b©adv_bœ_˛aim
 *
˛aim
)

204 i‡(!
˛aim
)

207 
	`kªf_put
(&
˛aim
->
ªfcou¡
, 
b©adv_˛aim_ªÀa£
);

208 
	}
}

217 
b©adv_bœ_˛aim
 *

218 
	$b©adv_˛aim_hash_föd
(
b©adv_¥iv
 *
b©_¥iv
,

219 
b©adv_bœ_˛aim
 *
d©a
)

221 
b©adv_hashèbÀ
 *
hash
 = 
b©_¥iv
->
bœ
.
˛aim_hash
;

222 
hli°_hód
 *
hód
;

223 
b©adv_bœ_˛aim
 *
˛aim
;

224 
b©adv_bœ_˛aim
 *
˛aim_tmp
 = 
NULL
;

225 
ödex
;

227 i‡(!
hash
)

228  
NULL
;

230 
ödex
 = 
	`b©adv_choo£_˛aim
(
d©a
, 
hash
->
size
);

231 
hód
 = &
hash
->
èbÀ
[
ödex
];

233 
	`rcu_ªad_lock
();

234 
	`hli°_f‹_óch_íåy_rcu
(
˛aim
, 
hód
, 
hash_íåy
) {

235 i‡(!
	`b©adv_com∑ª_˛aim
(&
˛aim
->
hash_íåy
, 
d©a
))

238 i‡(!
	`kªf_gë_u∆ess_zîo
(&
˛aim
->
ªfcou¡
))

241 
˛aim_tmp
 = 
˛aim
;

244 
	`rcu_ªad_u∆ock
();

246  
˛aim_tmp
;

247 
	}
}

257 
b©adv_bœ_backb⁄e_gw
 *

258 
	$b©adv_backb⁄e_hash_föd
(
b©adv_¥iv
 *
b©_¥iv
, c⁄° 
u8
 *
addr
,

259 
vid
)

261 
b©adv_hashèbÀ
 *
hash
 = 
b©_¥iv
->
bœ
.
backb⁄e_hash
;

262 
hli°_hód
 *
hód
;

263 
b©adv_bœ_backb⁄e_gw
 
£¨ch_íåy
, *
backb⁄e_gw
;

264 
b©adv_bœ_backb⁄e_gw
 *
backb⁄e_gw_tmp
 = 
NULL
;

265 
ödex
;

267 i‡(!
hash
)

268  
NULL
;

270 
	`ëhî_addr_c›y
(
£¨ch_íåy
.
‹ig
, 
addr
);

271 
£¨ch_íåy
.
vid
 = vid;

273 
ödex
 = 
	`b©adv_choo£_backb⁄e_gw
(&
£¨ch_íåy
, 
hash
->
size
);

274 
hód
 = &
hash
->
èbÀ
[
ödex
];

276 
	`rcu_ªad_lock
();

277 
	`hli°_f‹_óch_íåy_rcu
(
backb⁄e_gw
, 
hód
, 
hash_íåy
) {

278 i‡(!
	`b©adv_com∑ª_backb⁄e_gw
(&
backb⁄e_gw
->
hash_íåy
,

279 &
£¨ch_íåy
))

282 i‡(!
	`kªf_gë_u∆ess_zîo
(&
backb⁄e_gw
->
ªfcou¡
))

285 
backb⁄e_gw_tmp
 = 
backb⁄e_gw
;

288 
	`rcu_ªad_u∆ock
();

290  
backb⁄e_gw_tmp
;

291 
	}
}

298 
	$b©adv_bœ_dñ_backb⁄e_˛aims
(
b©adv_bœ_backb⁄e_gw
 *
backb⁄e_gw
)

300 
b©adv_hashèbÀ
 *
hash
;

301 
hli°_node
 *
node_tmp
;

302 
hli°_hód
 *
hód
;

303 
b©adv_bœ_˛aim
 *
˛aim
;

304 
i
;

305 
•ölock_t
 *
li°_lock
;

307 
hash
 = 
backb⁄e_gw
->
b©_¥iv
->
bœ
.
˛aim_hash
;

308 i‡(!
hash
)

311 
i
 = 0; i < 
hash
->
size
; i++) {

312 
hód
 = &
hash
->
èbÀ
[
i
];

313 
li°_lock
 = &
hash
->
li°_locks
[
i
];

315 
	`•ö_lock_bh
(
li°_lock
);

316 
	`hli°_f‹_óch_íåy_ß„
(
˛aim
, 
node_tmp
,

317 
hód
, 
hash_íåy
) {

318 i‡(
˛aim
->
backb⁄e_gw
 != backbone_gw)

321 
	`b©adv_˛aim_put
(
˛aim
);

322 
	`hli°_dñ_rcu
(&
˛aim
->
hash_íåy
);

324 
	`•ö_u∆ock_bh
(
li°_lock
);

328 
	`•ö_lock_bh
(&
backb⁄e_gw
->
¸c_lock
);

329 
backb⁄e_gw
->
¸c
 = 
BATADV_BLA_CRC_INIT
;

330 
	`•ö_u∆ock_bh
(&
backb⁄e_gw
->
¸c_lock
);

331 
	}
}

340 
	$b©adv_bœ_£nd_˛aim
(
b©adv_¥iv
 *
b©_¥iv
, c⁄° 
u8
 *
mac
,

341 
vid
, 
˛aimty≥
)

343 
sk_buff
 *
skb
;

344 
ëhhdr
 *ethhdr;

345 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
;

346 
√t_devi˚
 *
mesh_iÁ˚
;

347 
u8
 *
hw_§c
;

348 
b©adv_bœ_˛aim_d°
 
loˇl_˛aim_de°
;

349 
__be32
 
zîoù
 = 0;

351 
¥im¨y_if
 = 
	`b©adv_¥im¨y_if_gë_£À˘ed
(
b©_¥iv
);

352 i‡(!
¥im¨y_if
)

355 
	`mem˝y
(&
loˇl_˛aim_de°
, &
b©_¥iv
->
bœ
.
˛aim_de°
,

356 (
loˇl_˛aim_de°
));

357 
loˇl_˛aim_de°
.
ty≥
 = 
˛aimty≥
;

359 
mesh_iÁ˚
 = 
¥im¨y_if
->mesh_iface;

361 
skb
 = 
	`¨p_¸óã
(
ARPOP_REPLY
, 
ETH_P_ARP
,

363 
zîoù
,

364 
¥im¨y_if
->
mesh_iÁ˚
,

366 
zîoù
,

368 
NULL
,

370 
¥im¨y_if
->
√t_dev
->
dev_addr
,

375 (
u8
 *)&
loˇl_˛aim_de°
);

377 i‡(!
skb
)

378 
out
;

380 
ëhhdr
 = (ëhhd∏*)
skb
->
d©a
;

381 
hw_§c
 = (
u8
 *)
ëhhdr
 + 
ETH_HLEN
 + (
¨phdr
);

384 
˛aimty≥
) {

385 
BATADV_CLAIM_TYPE_CLAIM
:

389 
	`ëhî_addr_c›y
(
ëhhdr
->
h_sour˚
, 
mac
);

390 
	`b©adv_dbg
(
BATADV_DBG_BLA
, 
b©_¥iv
,

391 "%s(): CLAIM %pM o¿vid %d\n", 
__func__
, 
mac
,

392 
	`b©adv_¥öt_vid
(
vid
));

394 
BATADV_CLAIM_TYPE_UNCLAIM
:

398 
	`ëhî_addr_c›y
(
hw_§c
, 
mac
);

399 
	`b©adv_dbg
(
BATADV_DBG_BLA
, 
b©_¥iv
,

400 "%s(): UNCLAIM %pM o¿vid %d\n", 
__func__
, 
mac
,

401 
	`b©adv_¥öt_vid
(
vid
));

403 
BATADV_CLAIM_TYPE_ANNOUNCE
:

407 
	`ëhî_addr_c›y
(
hw_§c
, 
mac
);

408 
	`b©adv_dbg
(
BATADV_DBG_BLA
, 
b©_¥iv
,

409 "%s(): ANNOUNCE o‡%pM o¿vid %d\n", 
__func__
,

410 
ëhhdr
->
h_sour˚
, 
	`b©adv_¥öt_vid
(
vid
));

412 
BATADV_CLAIM_TYPE_REQUEST
:

417 
	`ëhî_addr_c›y
(
hw_§c
, 
mac
);

418 
	`ëhî_addr_c›y
(
ëhhdr
->
h_de°
, 
mac
);

419 
	`b©adv_dbg
(
BATADV_DBG_BLA
, 
b©_¥iv
,

420 "%s(): REQUEST o‡%pMÅÿ%pM o¿vid %d\n", 
__func__
,

421 
ëhhdr
->
h_sour˚
,Éthhdr->
h_de°
,

422 
	`b©adv_¥öt_vid
(
vid
));

424 
BATADV_CLAIM_TYPE_LOOPDETECT
:

425 
	`ëhî_addr_c›y
(
ëhhdr
->
h_sour˚
, 
mac
);

426 
	`b©adv_dbg
(
BATADV_DBG_BLA
, 
b©_¥iv
,

428 
__func__
, 
ëhhdr
->
h_sour˚
,Éthhdr->
h_de°
,

429 
	`b©adv_¥öt_vid
(
vid
));

434 i‡(
vid
 & 
BATADV_VLAN_HAS_TAG
) {

435 
skb
 = 
	`vœn_ö£π_èg
(skb, 
	`ht⁄s
(
ETH_P_8021Q
),

436 
vid
 & 
VLAN_VID_MASK
);

437 i‡(!
skb
)

438 
out
;

441 
	`skb_ª£t_mac_hódî
(
skb
);

442 
skb
->
¥Ÿocﬁ
 = 
	`ëh_ty≥_å™s
(skb, 
mesh_iÁ˚
);

443 
	`b©adv_öc_cou¡î
(
b©_¥iv
, 
BATADV_CNT_RX
);

444 
	`b©adv_add_cou¡î
(
b©_¥iv
, 
BATADV_CNT_RX_BYTES
,

445 
skb
->
Àn
 + 
ETH_HLEN
);

447 
	`√tif_rx
(
skb
);

448 
out
:

449 
	`b©adv_h¨dif_put
(
¥im¨y_if
);

450 
	}
}

459 
	$b©adv_bœ_lo›dëe˘_ªp‹t
(
w‹k_°ru˘
 *
w‹k
)

461 
b©adv_bœ_backb⁄e_gw
 *
backb⁄e_gw
;

462 
b©adv_¥iv
 *
b©_¥iv
;

463 
vid_°r
[6] = { '\0' };

465 
backb⁄e_gw
 = 
	`c⁄èöî_of
(
w‹k
, 
b©adv_bœ_backb⁄e_gw
,

466 
ªp‹t_w‹k
);

467 
b©_¥iv
 = 
backb⁄e_gw
->bat_priv;

469 
	`b©adv_öfo
(
b©_¥iv
->
mesh_iÁ˚
,

471 
	`b©adv_¥öt_vid
(
backb⁄e_gw
->
vid
));

472 
	`¢¥ötf
(
vid_°r
, (vid_str), "%d",

473 
	`b©adv_¥öt_vid
(
backb⁄e_gw
->
vid
));

474 
vid_°r
[(vid_str) - 1] = 0;

476 
	`b©adv_throw_uevít
(
b©_¥iv
, 
BATADV_UEV_BLA
, 
BATADV_UEV_LOOPDETECT
,

477 
vid_°r
);

479 
	`b©adv_backb⁄e_gw_put
(
backb⁄e_gw
);

480 
	}
}

491 
b©adv_bœ_backb⁄e_gw
 *

492 
	$b©adv_bœ_gë_backb⁄e_gw
(
b©adv_¥iv
 *
b©_¥iv
, c⁄° 
u8
 *
‹ig
,

493 
vid
, 
boﬁ
 
own_backb⁄e
)

495 
b©adv_bœ_backb⁄e_gw
 *
íåy
;

496 
b©adv_‹ig_node
 *
‹ig_node
;

497 
hash_added
;

499 
íåy
 = 
	`b©adv_backb⁄e_hash_föd
(
b©_¥iv
, 
‹ig
, 
vid
);

501 i‡(
íåy
)

502  
íåy
;

504 
	`b©adv_dbg
(
BATADV_DBG_BLA
, 
b©_¥iv
,

505 "%s():ÇŸ found (%pM, %d), cª©ögÇewÉ¡ry\n", 
__func__
,

506 
‹ig
, 
	`b©adv_¥öt_vid
(
vid
));

508 
íåy
 = 
	`kzÆloc
((*íåy), 
GFP_ATOMIC
);

509 i‡(!
íåy
)

510  
NULL
;

512 
íåy
->
vid
 = vid;

513 
íåy
->
œ°time
 = 
jiffõs
;

514 
íåy
->
¸c
 = 
BATADV_BLA_CRC_INIT
;

515 
íåy
->
b©_¥iv
 = bat_priv;

516 
	`•ö_lock_öô
(&
íåy
->
¸c_lock
);

517 
	`©omic_£t
(&
íåy
->
ªque°_£¡
, 0);

518 
	`©omic_£t
(&
íåy
->
waô_≥riods
, 0);

519 
	`ëhî_addr_c›y
(
íåy
->
‹ig
, orig);

520 
	`INIT_WORK
(&
íåy
->
ªp‹t_w‹k
, 
b©adv_bœ_lo›dëe˘_ªp‹t
);

521 
	`kªf_öô
(&
íåy
->
ªfcou¡
);

523 
	`kªf_gë
(&
íåy
->
ªfcou¡
);

524 
hash_added
 = 
	`b©adv_hash_add
(
b©_¥iv
->
bœ
.
backb⁄e_hash
,

525 
b©adv_com∑ª_backb⁄e_gw
,

526 
b©adv_choo£_backb⁄e_gw
, 
íåy
,

527 &
íåy
->
hash_íåy
);

529 i‡(
	`u∆ikñy
(
hash_added
 != 0)) {

531 
	`k‰ì
(
íåy
);

532  
NULL
;

536 
‹ig_node
 = 
	`b©adv_‹ig_hash_föd
(
b©_¥iv
, 
‹ig
);

537 i‡(
‹ig_node
) {

538 
	`b©adv_â_globÆ_dñ_‹ig
(
b©_¥iv
, 
‹ig_node
, 
vid
,

540 
	`b©adv_‹ig_node_put
(
‹ig_node
);

543 i‡(
own_backb⁄e
) {

544 
	`b©adv_bœ_£nd_™noun˚
(
b©_¥iv
, 
íåy
);

547 
	`©omic_öc
(&
íåy
->
ªque°_£¡
);

548 
	`©omic_£t
(&
íåy
->
waô_≥riods
, 
BATADV_BLA_WAIT_PERIODS
);

549 
	`©omic_öc
(&
b©_¥iv
->
bœ
.
num_ªque°s
);

552  
íåy
;

553 
	}
}

565 
	$b©adv_bœ_upd©e_own_backb⁄e_gw
(
b©adv_¥iv
 *
b©_¥iv
,

566 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
,

567 
vid
)

569 
b©adv_bœ_backb⁄e_gw
 *
backb⁄e_gw
;

571 
backb⁄e_gw
 = 
	`b©adv_bœ_gë_backb⁄e_gw
(
b©_¥iv
,

572 
¥im¨y_if
->
√t_dev
->
dev_addr
,

573 
vid
, 
åue
);

574 i‡(
	`u∆ikñy
(!
backb⁄e_gw
))

577 
backb⁄e_gw
->
œ°time
 = 
jiffõs
;

578 
	`b©adv_backb⁄e_gw_put
(
backb⁄e_gw
);

579 
	}
}

590 
	$b©adv_bœ_™swî_ªque°
(
b©adv_¥iv
 *
b©_¥iv
,

591 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
,

592 
vid
)

594 
hli°_hód
 *
hód
;

595 
b©adv_hashèbÀ
 *
hash
;

596 
b©adv_bœ_˛aim
 *
˛aim
;

597 
b©adv_bœ_backb⁄e_gw
 *
backb⁄e_gw
;

598 
i
;

600 
	`b©adv_dbg
(
BATADV_DBG_BLA
, 
b©_¥iv
,

602 
__func__
);

604 
backb⁄e_gw
 = 
	`b©adv_backb⁄e_hash_föd
(
b©_¥iv
,

605 
¥im¨y_if
->
√t_dev
->
dev_addr
,

606 
vid
);

607 i‡(!
backb⁄e_gw
)

610 
hash
 = 
b©_¥iv
->
bœ
.
˛aim_hash
;

611 
i
 = 0; i < 
hash
->
size
; i++) {

612 
hód
 = &
hash
->
èbÀ
[
i
];

614 
	`rcu_ªad_lock
();

615 
	`hli°_f‹_óch_íåy_rcu
(
˛aim
, 
hód
, 
hash_íåy
) {

617 i‡(
˛aim
->
backb⁄e_gw
 != backbone_gw)

620 
	`b©adv_bœ_£nd_˛aim
(
b©_¥iv
, 
˛aim
->
addr
, cœim->
vid
,

621 
BATADV_CLAIM_TYPE_CLAIM
);

623 
	`rcu_ªad_u∆ock
();

627 
	`b©adv_bœ_£nd_™noun˚
(
b©_¥iv
, 
backb⁄e_gw
);

628 
	`b©adv_backb⁄e_gw_put
(
backb⁄e_gw
);

629 
	}
}

639 
	$b©adv_bœ_£nd_ªque°
(
b©adv_bœ_backb⁄e_gw
 *
backb⁄e_gw
)

642 
	`b©adv_bœ_dñ_backb⁄e_˛aims
(
backb⁄e_gw
);

644 
	`b©adv_dbg
(
BATADV_DBG_BLA
, 
backb⁄e_gw
->
b©_¥iv
,

645 "Sídög REQUESTÅÿ%pM\n", 
backb⁄e_gw
->
‹ig
);

648 
	`b©adv_bœ_£nd_˛aim
(
backb⁄e_gw
->
b©_¥iv
, backb⁄e_gw->
‹ig
,

649 
backb⁄e_gw
->
vid
, 
BATADV_CLAIM_TYPE_REQUEST
);

652 i‡(!
	`©omic_ªad
(&
backb⁄e_gw
->
ªque°_£¡
)) {

653 
	`©omic_öc
(&
backb⁄e_gw
->
b©_¥iv
->
bœ
.
num_ªque°s
);

654 
	`©omic_£t
(&
backb⁄e_gw
->
ªque°_£¡
, 1);

656 
	}
}

663 
	$b©adv_bœ_£nd_™noun˚
(
b©adv_¥iv
 *
b©_¥iv
,

664 
b©adv_bœ_backb⁄e_gw
 *
backb⁄e_gw
)

666 
u8
 
mac
[
ETH_ALEN
];

667 
__be16
 
¸c
;

669 
	`mem˝y
(
mac
, 
b©adv_™noun˚_mac
, 4);

670 
	`•ö_lock_bh
(&
backb⁄e_gw
->
¸c_lock
);

671 
¸c
 = 
	`ht⁄s
(
backb⁄e_gw
->crc);

672 
	`•ö_u∆ock_bh
(&
backb⁄e_gw
->
¸c_lock
);

673 
	`mem˝y
(&
mac
[4], &
¸c
, 2);

675 
	`b©adv_bœ_£nd_˛aim
(
b©_¥iv
, 
mac
, 
backb⁄e_gw
->
vid
,

676 
BATADV_CLAIM_TYPE_ANNOUNCE
);

677 
	}
}

686 
	$b©adv_bœ_add_˛aim
(
b©adv_¥iv
 *
b©_¥iv
,

687 c⁄° 
u8
 *
mac
, c⁄° 
vid
,

688 
b©adv_bœ_backb⁄e_gw
 *
backb⁄e_gw
)

690 
b©adv_bœ_backb⁄e_gw
 *
ﬁd_backb⁄e_gw
;

691 
b©adv_bœ_˛aim
 *
˛aim
;

692 
b©adv_bœ_˛aim
 
£¨ch_˛aim
;

693 
boﬁ
 
ªmove_¸c
 = 
Ál£
;

694 
hash_added
;

696 
	`ëhî_addr_c›y
(
£¨ch_˛aim
.
addr
, 
mac
);

697 
£¨ch_˛aim
.
vid
 = vid;

698 
˛aim
 = 
	`b©adv_˛aim_hash_föd
(
b©_¥iv
, &
£¨ch_˛aim
);

701 i‡(!
˛aim
) {

702 
˛aim
 = 
	`kzÆloc
((*˛aim), 
GFP_ATOMIC
);

703 i‡(!
˛aim
)

706 
	`ëhî_addr_c›y
(
˛aim
->
addr
, 
mac
);

707 
	`•ö_lock_öô
(&
˛aim
->
backb⁄e_lock
);

708 
˛aim
->
vid
 = vid;

709 
˛aim
->
œ°time
 = 
jiffõs
;

710 
	`kªf_gë
(&
backb⁄e_gw
->
ªfcou¡
);

711 
˛aim
->
backb⁄e_gw
 = backbone_gw;

712 
	`kªf_öô
(&
˛aim
->
ªfcou¡
);

714 
	`b©adv_dbg
(
BATADV_DBG_BLA
, 
b©_¥iv
,

716 
__func__
, 
mac
, 
	`b©adv_¥öt_vid
(
vid
));

718 
	`kªf_gë
(&
˛aim
->
ªfcou¡
);

719 
hash_added
 = 
	`b©adv_hash_add
(
b©_¥iv
->
bœ
.
˛aim_hash
,

720 
b©adv_com∑ª_˛aim
,

721 
b©adv_choo£_˛aim
, 
˛aim
,

722 &
˛aim
->
hash_íåy
);

724 i‡(
	`u∆ikñy
(
hash_added
 != 0)) {

726 
	`k‰ì
(
˛aim
);

730 
˛aim
->
œ°time
 = 
jiffõs
;

731 i‡(
˛aim
->
backb⁄e_gw
 == backbone_gw)

733 
˛aim_‰ì_ªf
;

735 
	`b©adv_dbg
(
BATADV_DBG_BLA
, 
b©_¥iv
,

737 
__func__
, 
mac
, 
	`b©adv_¥öt_vid
(
vid
),

738 
backb⁄e_gw
->
‹ig
);

740 
ªmove_¸c
 = 
åue
;

744 
	`•ö_lock_bh
(&
˛aim
->
backb⁄e_lock
);

745 
ﬁd_backb⁄e_gw
 = 
˛aim
->
backb⁄e_gw
;

746 
	`kªf_gë
(&
backb⁄e_gw
->
ªfcou¡
);

747 
˛aim
->
backb⁄e_gw
 = backbone_gw;

748 
	`•ö_u∆ock_bh
(&
˛aim
->
backb⁄e_lock
);

750 i‡(
ªmove_¸c
) {

752 
	`•ö_lock_bh
(&
ﬁd_backb⁄e_gw
->
¸c_lock
);

753 
ﬁd_backb⁄e_gw
->
¸c
 ^
	`¸c16
(0, 
˛aim
->
addr
, 
ETH_ALEN
);

754 
	`•ö_u∆ock_bh
(&
ﬁd_backb⁄e_gw
->
¸c_lock
);

757 
	`b©adv_backb⁄e_gw_put
(
ﬁd_backb⁄e_gw
);

760 
	`•ö_lock_bh
(&
backb⁄e_gw
->
¸c_lock
);

761 
backb⁄e_gw
->
¸c
 ^
	`¸c16
(0, 
˛aim
->
addr
, 
ETH_ALEN
);

762 
	`•ö_u∆ock_bh
(&
backb⁄e_gw
->
¸c_lock
);

763 
backb⁄e_gw
->
œ°time
 = 
jiffõs
;

765 
˛aim_‰ì_ªf
:

766 
	`b©adv_˛aim_put
(
˛aim
);

767 
	}
}

776 
b©adv_bœ_backb⁄e_gw
 *

777 
	$b©adv_bœ_˛aim_gë_backb⁄e_gw
(
b©adv_bœ_˛aim
 *
˛aim
)

779 
b©adv_bœ_backb⁄e_gw
 *
backb⁄e_gw
;

781 
	`•ö_lock_bh
(&
˛aim
->
backb⁄e_lock
);

782 
backb⁄e_gw
 = 
˛aim
->backbone_gw;

783 
	`kªf_gë
(&
backb⁄e_gw
->
ªfcou¡
);

784 
	`•ö_u∆ock_bh
(&
˛aim
->
backb⁄e_lock
);

786  
backb⁄e_gw
;

787 
	}
}

795 
	$b©adv_bœ_dñ_˛aim
(
b©adv_¥iv
 *
b©_¥iv
,

796 c⁄° 
u8
 *
mac
, c⁄° 
vid
)

798 
b©adv_bœ_˛aim
 
£¨ch_˛aim
, *
˛aim
;

799 
b©adv_bœ_˛aim
 *
˛aim_ªmoved_íåy
;

800 
hli°_node
 *
˛aim_ªmoved_node
;

802 
	`ëhî_addr_c›y
(
£¨ch_˛aim
.
addr
, 
mac
);

803 
£¨ch_˛aim
.
vid
 = vid;

804 
˛aim
 = 
	`b©adv_˛aim_hash_föd
(
b©_¥iv
, &
£¨ch_˛aim
);

805 i‡(!
˛aim
)

808 
	`b©adv_dbg
(
BATADV_DBG_BLA
, 
b©_¥iv
, "%s(): %pM, vid %d\n", 
__func__
,

809 
mac
, 
	`b©adv_¥öt_vid
(
vid
));

811 
˛aim_ªmoved_node
 = 
	`b©adv_hash_ªmove
(
b©_¥iv
->
bœ
.
˛aim_hash
,

812 
b©adv_com∑ª_˛aim
,

813 
b©adv_choo£_˛aim
, 
˛aim
);

814 i‡(!
˛aim_ªmoved_node
)

815 
‰ì_˛aim
;

818 
˛aim_ªmoved_íåy
 = 
	`hli°_íåy
(
˛aim_ªmoved_node
,

819 
b©adv_bœ_˛aim
, 
hash_íåy
);

820 
	`b©adv_˛aim_put
(
˛aim_ªmoved_íåy
);

822 
‰ì_˛aim
:

824 
	`b©adv_˛aim_put
(
˛aim
);

825 
	}
}

836 
boﬁ
 
	$b©adv_h™dÀ_™noun˚
(
b©adv_¥iv
 *
b©_¥iv
, 
u8
 *
™_addr
,

837 
u8
 *
backb⁄e_addr
, 
vid
)

839 
b©adv_bœ_backb⁄e_gw
 *
backb⁄e_gw
;

840 
u16
 
backb⁄e_¸c
, 
¸c
;

842 i‡(
	`memcmp
(
™_addr
, 
b©adv_™noun˚_mac
, 4) != 0)

843  
Ál£
;

845 
backb⁄e_gw
 = 
	`b©adv_bœ_gë_backb⁄e_gw
(
b©_¥iv
, 
backb⁄e_addr
, 
vid
,

846 
Ál£
);

848 i‡(
	`u∆ikñy
(!
backb⁄e_gw
))

849  
åue
;

852 
backb⁄e_gw
->
œ°time
 = 
jiffõs
;

853 
¸c
 = 
	`¡ohs
(*((
__f‹˚
 
__be16
 *)(&
™_addr
[4])));

855 
	`b©adv_dbg
(
BATADV_DBG_BLA
, 
b©_¥iv
,

857 
__func__
, 
	`b©adv_¥öt_vid
(
vid
), 
backb⁄e_gw
->
‹ig
, 
¸c
);

859 
	`•ö_lock_bh
(&
backb⁄e_gw
->
¸c_lock
);

860 
backb⁄e_¸c
 = 
backb⁄e_gw
->
¸c
;

861 
	`•ö_u∆ock_bh
(&
backb⁄e_gw
->
¸c_lock
);

863 i‡(
backb⁄e_¸c
 !
¸c
) {

864 
	`b©adv_dbg
(
BATADV_DBG_BLA
, 
backb⁄e_gw
->
b©_¥iv
,

866 
__func__
, 
backb⁄e_gw
->
‹ig
,

867 
	`b©adv_¥öt_vid
(
backb⁄e_gw
->
vid
),

868 
backb⁄e_¸c
, 
¸c
);

870 
	`b©adv_bœ_£nd_ªque°
(
backb⁄e_gw
);

875 i‡(
	`©omic_ªad
(&
backb⁄e_gw
->
ªque°_£¡
)) {

876 
	`©omic_dec
(&
backb⁄e_gw
->
b©_¥iv
->
bœ
.
num_ªque°s
);

877 
	`©omic_£t
(&
backb⁄e_gw
->
ªque°_£¡
, 0);

881 
	`b©adv_backb⁄e_gw_put
(
backb⁄e_gw
);

882  
åue
;

883 
	}
}

895 
boﬁ
 
	$b©adv_h™dÀ_ªque°
(
b©adv_¥iv
 *
b©_¥iv
,

896 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
,

897 
u8
 *
backb⁄e_addr
, 
ëhhdr
 *ethhdr,

898 
vid
)

901 i‡(!
	`b©adv_com∑ª_ëh
(
backb⁄e_addr
, 
ëhhdr
->
h_de°
))

902  
Ál£
;

907 i‡(!
	`b©adv_com∑ª_ëh
(
ëhhdr
->
h_de°
, 
¥im¨y_if
->
√t_dev
->
dev_addr
))

908  
åue
;

910 
	`b©adv_dbg
(
BATADV_DBG_BLA
, 
b©_¥iv
,

912 
__func__
, 
	`b©adv_¥öt_vid
(
vid
), 
ëhhdr
->
h_sour˚
);

914 
	`b©adv_bœ_™swî_ªque°
(
b©_¥iv
, 
¥im¨y_if
, 
vid
);

915  
åue
;

916 
	}
}

928 
boﬁ
 
	$b©adv_h™dÀ_un˛aim
(
b©adv_¥iv
 *
b©_¥iv
,

929 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
,

930 c⁄° 
u8
 *
backb⁄e_addr
, c⁄° u8 *
˛aim_addr
,

931 
vid
)

933 
b©adv_bœ_backb⁄e_gw
 *
backb⁄e_gw
;

936 i‡(
¥im¨y_if
 && 
	`b©adv_com∑ª_ëh
(
backb⁄e_addr
,

937 
¥im¨y_if
->
√t_dev
->
dev_addr
))

938 
	`b©adv_bœ_£nd_˛aim
(
b©_¥iv
, 
˛aim_addr
, 
vid
,

939 
BATADV_CLAIM_TYPE_UNCLAIM
);

941 
backb⁄e_gw
 = 
	`b©adv_backb⁄e_hash_föd
(
b©_¥iv
, 
backb⁄e_addr
, 
vid
);

943 i‡(!
backb⁄e_gw
)

944  
åue
;

947 
	`b©adv_dbg
(
BATADV_DBG_BLA
, 
b©_¥iv
,

948 "%s(): UNCLAIM %pM o¿vid %d (£¡ by %pM)...\n", 
__func__
,

949 
˛aim_addr
, 
	`b©adv_¥öt_vid
(
vid
), 
backb⁄e_gw
->
‹ig
);

951 
	`b©adv_bœ_dñ_˛aim
(
b©_¥iv
, 
˛aim_addr
, 
vid
);

952 
	`b©adv_backb⁄e_gw_put
(
backb⁄e_gw
);

953  
åue
;

954 
	}
}

966 
boﬁ
 
	$b©adv_h™dÀ_˛aim
(
b©adv_¥iv
 *
b©_¥iv
,

967 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
,

968 c⁄° 
u8
 *
backb⁄e_addr
, c⁄° u8 *
˛aim_addr
,

969 
vid
)

971 
b©adv_bœ_backb⁄e_gw
 *
backb⁄e_gw
;

975 
backb⁄e_gw
 = 
	`b©adv_bœ_gë_backb⁄e_gw
(
b©_¥iv
, 
backb⁄e_addr
, 
vid
,

976 
Ál£
);

978 i‡(
	`u∆ikñy
(!
backb⁄e_gw
))

979  
åue
;

982 
	`b©adv_bœ_add_˛aim
(
b©_¥iv
, 
˛aim_addr
, 
vid
, 
backb⁄e_gw
);

983 i‡(
	`b©adv_com∑ª_ëh
(
backb⁄e_addr
, 
¥im¨y_if
->
√t_dev
->
dev_addr
))

984 
	`b©adv_bœ_£nd_˛aim
(
b©_¥iv
, 
˛aim_addr
, 
vid
,

985 
BATADV_CLAIM_TYPE_CLAIM
);

989 
	`b©adv_backb⁄e_gw_put
(
backb⁄e_gw
);

990  
åue
;

991 
	}
}

1010 
	$b©adv_check_˛aim_group
(
b©adv_¥iv
 *
b©_¥iv
,

1011 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
,

1012 
u8
 *
hw_§c
, u8 *
hw_d°
,

1013 
ëhhdr
 *ethhdr)

1015 
u8
 *
backb⁄e_addr
;

1016 
b©adv_‹ig_node
 *
‹ig_node
;

1017 
b©adv_bœ_˛aim_d°
 *
bœ_d°
, *
bœ_d°_own
;

1019 
bœ_d°
 = (
b©adv_bœ_˛aim_d°
 *)
hw_d°
;

1020 
bœ_d°_own
 = &
b©_¥iv
->
bœ
.
˛aim_de°
;

1025 
bœ_d°
->
ty≥
) {

1026 
BATADV_CLAIM_TYPE_CLAIM
:

1027 
backb⁄e_addr
 = 
hw_§c
;

1029 
BATADV_CLAIM_TYPE_REQUEST
:

1030 
BATADV_CLAIM_TYPE_ANNOUNCE
:

1031 
BATADV_CLAIM_TYPE_UNCLAIM
:

1032 
backb⁄e_addr
 = 
ëhhdr
->
h_sour˚
;

1039 i‡(
	`b©adv_com∑ª_ëh
(
backb⁄e_addr
, 
¥im¨y_if
->
√t_dev
->
dev_addr
))

1043 i‡(
bœ_d°
->
group
 =
bœ_d°_own
->group)

1047 
‹ig_node
 = 
	`b©adv_‹ig_hash_föd
(
b©_¥iv
, 
backb⁄e_addr
);

1052 i‡(!
‹ig_node
)

1056 i‡(
	`¡ohs
(
bœ_d°
->
group
Ë>Çtohs(
bœ_d°_own
->group)) {

1057 
	`b©adv_dbg
(
BATADV_DBG_BLA
, 
b©_¥iv
,

1059 
	`¡ohs
(
bœ_d°
->
group
));

1060 
bœ_d°_own
->
group
 = 
bœ_d°
->group;

1063 
	`b©adv_‹ig_node_put
(
‹ig_node
);

1066 
	}
}

1077 
boﬁ
 
	$b©adv_bœ_¥o˚ss_˛aim
(
b©adv_¥iv
 *
b©_¥iv
,

1078 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
,

1079 
sk_buff
 *
skb
)

1081 
b©adv_bœ_˛aim_d°
 *
bœ_d°
, *
bœ_d°_own
;

1082 
u8
 *
hw_§c
, *
hw_d°
;

1083 
vœn_hdr
 *
vhdr
, 
vhdr_buf
;

1084 
ëhhdr
 *ethhdr;

1085 
¨phdr
 *arphdr;

1086 
vid
;

1087 
vœn_dïth
 = 0;

1088 
__be16
 
¥Ÿo
;

1089 
hódÀn
;

1090 
ªt
;

1092 
vid
 = 
	`b©adv_gë_vid
(
skb
, 0);

1093 
ëhhdr
 = 
	`ëh_hdr
(
skb
);

1095 
¥Ÿo
 = 
ëhhdr
->
h_¥Ÿo
;

1096 
hódÀn
 = 
ETH_HLEN
;

1097 i‡(
vid
 & 
BATADV_VLAN_HAS_TAG
) {

1107 
vhdr
 = 
	`skb_hódî_poöãr
(
skb
, 
hódÀn
, 
VLAN_HLEN
,

1108 &
vhdr_buf
);

1109 i‡(!
vhdr
)

1110  
Ál£
;

1112 
¥Ÿo
 = 
vhdr
->
h_vœn_íˇpsuœãd_¥Ÿo
;

1113 
hódÀn
 +
VLAN_HLEN
;

1114 
vœn_dïth
++;

1115 } 
¥Ÿo
 =
	`ht⁄s
(
ETH_P_8021Q
));

1118 i‡(
¥Ÿo
 !
	`ht⁄s
(
ETH_P_ARP
))

1119  
Ál£
;

1123 i‡(
	`u∆ikñy
(!
	`pskb_may_puŒ
(
skb
, 
hódÀn
 + 
	`¨p_hdr_Àn
(skb->
dev
))))

1124  
Ál£
;

1127 
ëhhdr
 = 
	`ëh_hdr
(
skb
);

1128 
¨phdr
 = (¨phd∏*)((
u8
 *)
ëhhdr
 + 
hódÀn
);

1133 i‡(
¨phdr
->
¨_hrd
 !
	`ht⁄s
(
ARPHRD_ETHER
))

1134  
Ál£
;

1135 i‡(
¨phdr
->
¨_¥o
 !
	`ht⁄s
(
ETH_P_IP
))

1136  
Ál£
;

1137 i‡(
¨phdr
->
¨_h 
 !
ETH_ALEN
)

1138  
Ál£
;

1139 i‡(
¨phdr
->
¨_∂n
 != 4)

1140  
Ál£
;

1142 
hw_§c
 = (
u8
 *)
¨phdr
 + (arphdr);

1143 
hw_d°
 = 
hw_§c
 + 
ETH_ALEN
 + 4;

1144 
bœ_d°
 = (
b©adv_bœ_˛aim_d°
 *)
hw_d°
;

1145 
bœ_d°_own
 = &
b©_¥iv
->
bœ
.
˛aim_de°
;

1148 i‡(
	`memcmp
(
bœ_d°
->
magic
, 
bœ_d°_own
->magic,

1149 (
bœ_d°
->
magic
)) != 0)

1150  
Ál£
;

1156 i‡(
vœn_dïth
 > 1)

1157  
åue
;

1160 i‡(
bœ_d°
->
ty≥
 =
BATADV_CLAIM_TYPE_LOOPDETECT
)

1161  
Ál£
;

1164 
ªt
 = 
	`b©adv_check_˛aim_group
(
b©_¥iv
, 
¥im¨y_if
, 
hw_§c
, 
hw_d°
,

1165 
ëhhdr
);

1166 i‡(
ªt
 == 1)

1167 
	`b©adv_dbg
(
BATADV_DBG_BLA
, 
b©_¥iv
,

1169 
__func__
, 
ëhhdr
->
h_sour˚
, 
	`b©adv_¥öt_vid
(
vid
),

1170 
hw_§c
, 
hw_d°
);

1172 i‡(
ªt
 < 2)

1173  !!
ªt
;

1176 
	`b©adv_bœ_upd©e_own_backb⁄e_gw
(
b©_¥iv
, 
¥im¨y_if
, 
vid
);

1179 
bœ_d°
->
ty≥
) {

1180 
BATADV_CLAIM_TYPE_CLAIM
:

1181 i‡(
	`b©adv_h™dÀ_˛aim
(
b©_¥iv
, 
¥im¨y_if
, 
hw_§c
,

1182 
ëhhdr
->
h_sour˚
, 
vid
))

1183  
åue
;

1185 
BATADV_CLAIM_TYPE_UNCLAIM
:

1186 i‡(
	`b©adv_h™dÀ_un˛aim
(
b©_¥iv
, 
¥im¨y_if
,

1187 
ëhhdr
->
h_sour˚
, 
hw_§c
, 
vid
))

1188  
åue
;

1191 
BATADV_CLAIM_TYPE_ANNOUNCE
:

1192 i‡(
	`b©adv_h™dÀ_™noun˚
(
b©_¥iv
, 
hw_§c
, 
ëhhdr
->
h_sour˚
,

1193 
vid
))

1194  
åue
;

1196 
BATADV_CLAIM_TYPE_REQUEST
:

1197 i‡(
	`b©adv_h™dÀ_ªque°
(
b©_¥iv
, 
¥im¨y_if
, 
hw_§c
, 
ëhhdr
,

1198 
vid
))

1199  
åue
;

1203 
	`b©adv_dbg
(
BATADV_DBG_BLA
, 
b©_¥iv
,

1205 
__func__
, 
ëhhdr
->
h_sour˚
, 
	`b©adv_¥öt_vid
(
vid
), 
hw_§c
,

1206 
hw_d°
);

1207  
åue
;

1208 
	}
}

1219 
	$b©adv_bœ_purge_backb⁄e_gw
(
b©adv_¥iv
 *
b©_¥iv
, 
now
)

1221 
b©adv_bœ_backb⁄e_gw
 *
backb⁄e_gw
;

1222 
hli°_node
 *
node_tmp
;

1223 
hli°_hód
 *
hód
;

1224 
b©adv_hashèbÀ
 *
hash
;

1225 
•ölock_t
 *
li°_lock
;

1226 
i
;

1228 
hash
 = 
b©_¥iv
->
bœ
.
backb⁄e_hash
;

1229 i‡(!
hash
)

1232 
i
 = 0; i < 
hash
->
size
; i++) {

1233 
hód
 = &
hash
->
èbÀ
[
i
];

1234 
li°_lock
 = &
hash
->
li°_locks
[
i
];

1236 
	`•ö_lock_bh
(
li°_lock
);

1237 
	`hli°_f‹_óch_íåy_ß„
(
backb⁄e_gw
, 
node_tmp
,

1238 
hód
, 
hash_íåy
) {

1239 i‡(
now
)

1240 
purge_now
;

1241 i‡(!
	`b©adv_has_timed_out
(
backb⁄e_gw
->
œ°time
,

1242 
BATADV_BLA_BACKBONE_TIMEOUT
))

1245 
	`b©adv_dbg
(
BATADV_DBG_BLA
, 
backb⁄e_gw
->
b©_¥iv
,

1247 
__func__
, 
backb⁄e_gw
->
‹ig
);

1249 
purge_now
:

1251 i‡(
	`©omic_ªad
(&
backb⁄e_gw
->
ªque°_£¡
))

1252 
	`©omic_dec
(&
b©_¥iv
->
bœ
.
num_ªque°s
);

1254 
	`b©adv_bœ_dñ_backb⁄e_˛aims
(
backb⁄e_gw
);

1256 
	`hli°_dñ_rcu
(&
backb⁄e_gw
->
hash_íåy
);

1257 
	`b©adv_backb⁄e_gw_put
(
backb⁄e_gw
);

1259 
	`•ö_u∆ock_bh
(
li°_lock
);

1261 
	}
}

1272 
	$b©adv_bœ_purge_˛aims
(
b©adv_¥iv
 *
b©_¥iv
,

1273 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
,

1274 
now
)

1276 
b©adv_bœ_backb⁄e_gw
 *
backb⁄e_gw
;

1277 
b©adv_bœ_˛aim
 *
˛aim
;

1278 
hli°_hód
 *
hód
;

1279 
b©adv_hashèbÀ
 *
hash
;

1280 
i
;

1282 
hash
 = 
b©_¥iv
->
bœ
.
˛aim_hash
;

1283 i‡(!
hash
)

1286 
i
 = 0; i < 
hash
->
size
; i++) {

1287 
hód
 = &
hash
->
èbÀ
[
i
];

1289 
	`rcu_ªad_lock
();

1290 
	`hli°_f‹_óch_íåy_rcu
(
˛aim
, 
hód
, 
hash_íåy
) {

1291 
backb⁄e_gw
 = 
	`b©adv_bœ_˛aim_gë_backb⁄e_gw
(
˛aim
);

1292 i‡(
now
)

1293 
purge_now
;

1295 i‡(!
	`b©adv_com∑ª_ëh
(
backb⁄e_gw
->
‹ig
,

1296 
¥im¨y_if
->
√t_dev
->
dev_addr
))

1297 
skù
;

1299 i‡(!
	`b©adv_has_timed_out
(
˛aim
->
œ°time
,

1300 
BATADV_BLA_CLAIM_TIMEOUT
))

1301 
skù
;

1303 
	`b©adv_dbg
(
BATADV_DBG_BLA
, 
b©_¥iv
,

1304 "%s():Åimed out.\n", 
__func__
);

1306 
purge_now
:

1307 
	`b©adv_dbg
(
BATADV_DBG_BLA
, 
b©_¥iv
,

1308 "%s(): %pM, vid %d\n", 
__func__
,

1309 
˛aim
->
addr
, cœim->
vid
);

1311 
	`b©adv_h™dÀ_un˛aim
(
b©_¥iv
, 
¥im¨y_if
,

1312 
backb⁄e_gw
->
‹ig
,

1313 
˛aim
->
addr
, cœim->
vid
);

1314 
skù
:

1315 
	`b©adv_backb⁄e_gw_put
(
backb⁄e_gw
);

1317 
	`rcu_ªad_u∆ock
();

1319 
	}
}

1328 
	$b©adv_bœ_upd©e_‹ig_addªss
(
b©adv_¥iv
 *
b©_¥iv
,

1329 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
,

1330 
b©adv_h¨d_iÁ˚
 *
ﬁdif
)

1332 
b©adv_bœ_backb⁄e_gw
 *
backb⁄e_gw
;

1333 
hli°_hód
 *
hód
;

1334 
b©adv_hashèbÀ
 *
hash
;

1335 
__be16
 
group
;

1336 
i
;

1339 
group
 = 
	`ht⁄s
(
	`¸c16
(0, 
¥im¨y_if
->
√t_dev
->
dev_addr
, 
ETH_ALEN
));

1340 
b©_¥iv
->
bœ
.
˛aim_de°
.
group
 = group;

1343 i‡(!
	`©omic_ªad
(&
b©_¥iv
->
bridge_lo›_avoid™˚
))

1344 
ﬁdif
 = 
NULL
;

1346 i‡(!
ﬁdif
) {

1347 
	`b©adv_bœ_purge_˛aims
(
b©_¥iv
, 
NULL
, 1);

1348 
	`b©adv_bœ_purge_backb⁄e_gw
(
b©_¥iv
, 1);

1352 
hash
 = 
b©_¥iv
->
bœ
.
backb⁄e_hash
;

1353 i‡(!
hash
)

1356 
i
 = 0; i < 
hash
->
size
; i++) {

1357 
hód
 = &
hash
->
èbÀ
[
i
];

1359 
	`rcu_ªad_lock
();

1360 
	`hli°_f‹_óch_íåy_rcu
(
backb⁄e_gw
, 
hód
, 
hash_íåy
) {

1362 i‡(!
	`b©adv_com∑ª_ëh
(
backb⁄e_gw
->
‹ig
,

1363 
ﬁdif
->
√t_dev
->
dev_addr
))

1366 
	`ëhî_addr_c›y
(
backb⁄e_gw
->
‹ig
,

1367 
¥im¨y_if
->
√t_dev
->
dev_addr
);

1371 
	`b©adv_bœ_£nd_™noun˚
(
b©_¥iv
, 
backb⁄e_gw
);

1373 
	`rcu_ªad_u∆ock
();

1375 
	}
}

1388 
	$b©adv_bœ_£nd_lo›dëe˘
(
b©adv_¥iv
 *
b©_¥iv
,

1389 
b©adv_bœ_backb⁄e_gw
 *
backb⁄e_gw
)

1391 
	`b©adv_dbg
(
BATADV_DBG_BLA
, 
b©_¥iv
, "SendÜoopdetect frame for vid %d\n",

1392 
backb⁄e_gw
->
vid
);

1393 
	`b©adv_bœ_£nd_˛aim
(
b©_¥iv
, b©_¥iv->
bœ
.
lo›dëe˘_addr
,

1394 
backb⁄e_gw
->
vid
, 
BATADV_CLAIM_TYPE_LOOPDETECT
);

1395 
	}
}

1401 
	$b©adv_bœ_°©us_upd©e
(
√t_devi˚
 *
√t_dev
)

1403 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
√t_dev
);

1404 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
;

1406 
¥im¨y_if
 = 
	`b©adv_¥im¨y_if_gë_£À˘ed
(
b©_¥iv
);

1407 i‡(!
¥im¨y_if
)

1413 
	`b©adv_bœ_upd©e_‹ig_addªss
(
b©_¥iv
, 
¥im¨y_if
,Örimary_if);

1414 
	`b©adv_h¨dif_put
(
¥im¨y_if
);

1415 
	}
}

1425 
	$b©adv_bœ_≥riodic_w‹k
(
w‹k_°ru˘
 *
w‹k
)

1427 
dñayed_w‹k
 *delayed_work;

1428 
b©adv_¥iv
 *
b©_¥iv
;

1429 
b©adv_¥iv_bœ
 *
¥iv_bœ
;

1430 
hli°_hód
 *
hód
;

1431 
b©adv_bœ_backb⁄e_gw
 *
backb⁄e_gw
;

1432 
b©adv_hashèbÀ
 *
hash
;

1433 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
;

1434 
boﬁ
 
£nd_lo›dëe˘
 = 
Ál£
;

1435 
i
;

1437 
dñayed_w‹k
 = 
	`to_dñayed_w‹k
(
w‹k
);

1438 
¥iv_bœ
 = 
	`c⁄èöî_of
(
dñayed_w‹k
, 
b©adv_¥iv_bœ
, 
w‹k
);

1439 
b©_¥iv
 = 
	`c⁄èöî_of
(
¥iv_bœ
, 
b©adv_¥iv
, 
bœ
);

1440 
¥im¨y_if
 = 
	`b©adv_¥im¨y_if_gë_£À˘ed
(
b©_¥iv
);

1441 i‡(!
¥im¨y_if
)

1442 
out
;

1444 
	`b©adv_bœ_purge_˛aims
(
b©_¥iv
, 
¥im¨y_if
, 0);

1445 
	`b©adv_bœ_purge_backb⁄e_gw
(
b©_¥iv
, 0);

1447 i‡(!
	`©omic_ªad
(&
b©_¥iv
->
bridge_lo›_avoid™˚
))

1448 
out
;

1450 i‡(
	`©omic_dec_™d_ã°
(&
b©_¥iv
->
bœ
.
lo›dëe˘_√xt
)) {

1455 
	`ëh_øndom_addr
(
b©_¥iv
->
bœ
.
lo›dëe˘_addr
);

1456 
b©_¥iv
->
bœ
.
lo›dëe˘_addr
[0] = 0xba;

1457 
b©_¥iv
->
bœ
.
lo›dëe˘_addr
[1] = 0xbe;

1458 
b©_¥iv
->
bœ
.
lo›dëe˘_œ°time
 = 
jiffõs
;

1459 
	`©omic_£t
(&
b©_¥iv
->
bœ
.
lo›dëe˘_√xt
,

1460 
BATADV_BLA_LOOPDETECT_PERIODS
);

1463 
£nd_lo›dëe˘
 = 
åue
;

1466 
hash
 = 
b©_¥iv
->
bœ
.
backb⁄e_hash
;

1467 i‡(!
hash
)

1468 
out
;

1470 
i
 = 0; i < 
hash
->
size
; i++) {

1471 
hód
 = &
hash
->
èbÀ
[
i
];

1473 
	`rcu_ªad_lock
();

1474 
	`hli°_f‹_óch_íåy_rcu
(
backb⁄e_gw
, 
hód
, 
hash_íåy
) {

1475 i‡(!
	`b©adv_com∑ª_ëh
(
backb⁄e_gw
->
‹ig
,

1476 
¥im¨y_if
->
√t_dev
->
dev_addr
))

1479 
backb⁄e_gw
->
œ°time
 = 
jiffõs
;

1481 
	`b©adv_bœ_£nd_™noun˚
(
b©_¥iv
, 
backb⁄e_gw
);

1482 i‡(
£nd_lo›dëe˘
)

1483 
	`b©adv_bœ_£nd_lo›dëe˘
(
b©_¥iv
,

1484 
backb⁄e_gw
);

1495 i‡(
	`©omic_ªad
(&
backb⁄e_gw
->
ªque°_£¡
) == 0)

1498 i‡(!
	`©omic_dec_™d_ã°
(&
backb⁄e_gw
->
waô_≥riods
))

1501 
	`©omic_dec
(&
backb⁄e_gw
->
b©_¥iv
->
bœ
.
num_ªque°s
);

1502 
	`©omic_£t
(&
backb⁄e_gw
->
ªque°_£¡
, 0);

1504 
	`rcu_ªad_u∆ock
();

1506 
out
:

1507 
	`b©adv_h¨dif_put
(
¥im¨y_if
);

1509 
	`queue_dñayed_w‹k
(
b©adv_evít_w‹kqueue
, &
b©_¥iv
->
bœ
.
w‹k
,

1510 
	`m£cs_to_jiffõs
(
BATADV_BLA_PERIOD_LENGTH
));

1511 
	}
}

1518 
lock_˛ass_key
 
	gb©adv_˛aim_hash_lock_˛ass_key
;

1519 
lock_˛ass_key
 
	gb©adv_backb⁄e_hash_lock_˛ass_key
;

1527 
	$b©adv_bœ_öô
(
b©adv_¥iv
 *
b©_¥iv
)

1529 
i
;

1530 
u8
 
˛aim_de°
[
ETH_ALEN
] = {0xff, 0x43, 0x05, 0x00, 0x00, 0x00};

1531 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
;

1532 
u16
 
¸c
;

1533 
íåytime
;

1535 
	`•ö_lock_öô
(&
b©_¥iv
->
bœ
.
bˇ°_du∂i°_lock
);

1537 
	`b©adv_dbg
(
BATADV_DBG_BLA
, 
b©_¥iv
, "bla hashÑegistering\n");

1540 
	`mem˝y
(&
b©_¥iv
->
bœ
.
˛aim_de°
.
magic
, claim_dest, 3);

1541 
b©_¥iv
->
bœ
.
˛aim_de°
.
ty≥
 = 0;

1542 
¥im¨y_if
 = 
	`b©adv_¥im¨y_if_gë_£À˘ed
(
b©_¥iv
);

1543 i‡(
¥im¨y_if
) {

1544 
¸c
 = 
	`¸c16
(0, 
¥im¨y_if
->
√t_dev
->
dev_addr
, 
ETH_ALEN
);

1545 
b©_¥iv
->
bœ
.
˛aim_de°
.
group
 = 
	`ht⁄s
(
¸c
);

1546 
	`b©adv_h¨dif_put
(
¥im¨y_if
);

1548 
b©_¥iv
->
bœ
.
˛aim_de°
.
group
 = 0;

1552 
íåytime
 = 
jiffõs
 - 
	`m£cs_to_jiffõs
(
BATADV_DUPLIST_TIMEOUT
);

1553 
i
 = 0; i < 
BATADV_DUPLIST_SIZE
; i++)

1554 
b©_¥iv
->
bœ
.
bˇ°_du∂i°
[
i
].
íåytime
 =Éntrytime;

1555 
b©_¥iv
->
bœ
.
bˇ°_du∂i°_cuº
 = 0;

1557 
	`©omic_£t
(&
b©_¥iv
->
bœ
.
lo›dëe˘_√xt
,

1558 
BATADV_BLA_LOOPDETECT_PERIODS
);

1560 i‡(
b©_¥iv
->
bœ
.
˛aim_hash
)

1563 
b©_¥iv
->
bœ
.
˛aim_hash
 = 
	`b©adv_hash_√w
(128);

1564 i‡(!
b©_¥iv
->
bœ
.
˛aim_hash
)

1565  -
ENOMEM
;

1567 
b©_¥iv
->
bœ
.
backb⁄e_hash
 = 
	`b©adv_hash_√w
(32);

1568 i‡(!
b©_¥iv
->
bœ
.
backb⁄e_hash
) {

1569 
	`b©adv_hash_de°roy
(
b©_¥iv
->
bœ
.
˛aim_hash
);

1570  -
ENOMEM
;

1573 
	`b©adv_hash_£t_lock_˛ass
(
b©_¥iv
->
bœ
.
˛aim_hash
,

1574 &
b©adv_˛aim_hash_lock_˛ass_key
);

1575 
	`b©adv_hash_£t_lock_˛ass
(
b©_¥iv
->
bœ
.
backb⁄e_hash
,

1576 &
b©adv_backb⁄e_hash_lock_˛ass_key
);

1578 
	`b©adv_dbg
(
BATADV_DBG_BLA
, 
b©_¥iv
, "bla hashes initialized\n");

1580 
	`INIT_DELAYED_WORK
(&
b©_¥iv
->
bœ
.
w‹k
, 
b©adv_bœ_≥riodic_w‹k
);

1582 
	`queue_dñayed_w‹k
(
b©adv_evít_w‹kqueue
, &
b©_¥iv
->
bœ
.
w‹k
,

1583 
	`m£cs_to_jiffõs
(
BATADV_BLA_PERIOD_LENGTH
));

1585 
	}
}

1606 
boﬁ
 
	$b©adv_bœ_check_du∂i°
(
b©adv_¥iv
 *
b©_¥iv
,

1607 
sk_buff
 *
skb
, 
u8
 *
∑ylﬂd_±r
,

1608 c⁄° 
u8
 *
‹ig
)

1610 
b©adv_bˇ°_du∂i°_íåy
 *
íåy
;

1611 
boﬁ
 
ªt
 = 
Ál£
;

1612 
i
, 
cuº
;

1613 
__be32
 
¸c
;

1616 
¸c
 = 
	`b©adv_skb_¸c32
(
skb
, 
∑ylﬂd_±r
);

1618 
	`•ö_lock_bh
(&
b©_¥iv
->
bœ
.
bˇ°_du∂i°_lock
);

1620 
i
 = 0; i < 
BATADV_DUPLIST_SIZE
; i++) {

1621 
cuº
 = (
b©_¥iv
->
bœ
.
bˇ°_du∂i°_cuº
 + 
i
);

1622 
cuº
 %
BATADV_DUPLIST_SIZE
;

1623 
íåy
 = &
b©_¥iv
->
bœ
.
bˇ°_du∂i°
[
cuº
];

1628 i‡(
	`b©adv_has_timed_out
(
íåy
->
íåytime
,

1629 
BATADV_DUPLIST_TIMEOUT
))

1632 i‡(
íåy
->
¸c
 != crc)

1636 i‡(
‹ig
 && !
	`is_zîo_ëhî_addr
(orig) &&

1637 !
	`is_zîo_ëhî_addr
(
íåy
->
‹ig
)) {

1647 i‡(
	`b©adv_com∑ª_ëh
(
íåy
->
‹ig
, orig))

1654 
ªt
 = 
åue
;

1655 
out
;

1660 
cuº
 = (
b©_¥iv
->
bœ
.
bˇ°_du∂i°_cuº
 + 
BATADV_DUPLIST_SIZE
 - 1);

1661 
cuº
 %
BATADV_DUPLIST_SIZE
;

1662 
íåy
 = &
b©_¥iv
->
bœ
.
bˇ°_du∂i°
[
cuº
];

1663 
íåy
->
¸c
 = crc;

1664 
íåy
->
íåytime
 = 
jiffõs
;

1667 i‡(
‹ig
)

1668 
	`ëhî_addr_c›y
(
íåy
->
‹ig
, orig);

1671 
	`ëh_zîo_addr
(
íåy
->
‹ig
);

1673 
b©_¥iv
->
bœ
.
bˇ°_du∂i°_cuº
 = 
cuº
;

1675 
out
:

1676 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
bœ
.
bˇ°_du∂i°_lock
);

1678  
ªt
;

1679 
	}
}

1693 
boﬁ
 
	$b©adv_bœ_check_uˇ°_du∂i°
(
b©adv_¥iv
 *
b©_¥iv
,

1694 
sk_buff
 *
skb
)

1696  
	`b©adv_bœ_check_du∂i°
(
b©_¥iv
, 
skb
, (
u8
 *)skb->
d©a
, 
NULL
);

1697 
	}
}

1710 
boﬁ
 
	$b©adv_bœ_check_bˇ°_du∂i°
(
b©adv_¥iv
 *
b©_¥iv
,

1711 
sk_buff
 *
skb
)

1713 
b©adv_bˇ°_∑ckë
 *
bˇ°_∑ckë
;

1714 
u8
 *
∑ylﬂd_±r
;

1716 
bˇ°_∑ckë
 = (
b©adv_bˇ°_∑ckë
 *)
skb
->
d©a
;

1717 
∑ylﬂd_±r
 = (
u8
 *)(
bˇ°_∑ckë
 + 1);

1719  
	`b©adv_bœ_check_du∂i°
(
b©_¥iv
, 
skb
, 
∑ylﬂd_±r
,

1720 
bˇ°_∑ckë
->
‹ig
);

1721 
	}
}

1732 
boﬁ
 
	$b©adv_bœ_is_backb⁄e_gw_‹ig
(
b©adv_¥iv
 *
b©_¥iv
, 
u8
 *
‹ig
,

1733 
vid
)

1735 
b©adv_hashèbÀ
 *
hash
 = 
b©_¥iv
->
bœ
.
backb⁄e_hash
;

1736 
hli°_hód
 *
hód
;

1737 
b©adv_bœ_backb⁄e_gw
 *
backb⁄e_gw
;

1738 
i
;

1740 i‡(!
	`©omic_ªad
(&
b©_¥iv
->
bridge_lo›_avoid™˚
))

1741  
Ál£
;

1743 i‡(!
hash
)

1744  
Ál£
;

1746 
i
 = 0; i < 
hash
->
size
; i++) {

1747 
hód
 = &
hash
->
èbÀ
[
i
];

1749 
	`rcu_ªad_lock
();

1750 
	`hli°_f‹_óch_íåy_rcu
(
backb⁄e_gw
, 
hód
, 
hash_íåy
) {

1751 i‡(
	`b©adv_com∑ª_ëh
(
backb⁄e_gw
->
‹ig
, orig) &&

1752 
backb⁄e_gw
->
vid
 == vid) {

1753 
	`rcu_ªad_u∆ock
();

1754  
åue
;

1757 
	`rcu_ªad_u∆ock
();

1760  
Ál£
;

1761 
	}
}

1772 
boﬁ
 
	$b©adv_bœ_is_backb⁄e_gw
(
sk_buff
 *
skb
,

1773 
b©adv_‹ig_node
 *
‹ig_node
, 
hdr_size
)

1775 
b©adv_bœ_backb⁄e_gw
 *
backb⁄e_gw
;

1776 
vid
;

1778 i‡(!
	`©omic_ªad
(&
‹ig_node
->
b©_¥iv
->
bridge_lo›_avoid™˚
))

1779  
Ál£
;

1782 i‡(!
	`pskb_may_puŒ
(
skb
, 
hdr_size
 + 
ETH_HLEN
))

1783  
Ál£
;

1785 
vid
 = 
	`b©adv_gë_vid
(
skb
, 
hdr_size
);

1788 
backb⁄e_gw
 = 
	`b©adv_backb⁄e_hash_föd
(
‹ig_node
->
b©_¥iv
,

1789 
‹ig_node
->
‹ig
, 
vid
);

1790 i‡(!
backb⁄e_gw
)

1791  
Ál£
;

1793 
	`b©adv_backb⁄e_gw_put
(
backb⁄e_gw
);

1794  
åue
;

1795 
	}
}

1803 
	$b©adv_bœ_‰ì
(
b©adv_¥iv
 *
b©_¥iv
)

1805 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
;

1807 
	`ˇn˚l_dñayed_w‹k_sync
(&
b©_¥iv
->
bœ
.
w‹k
);

1808 
¥im¨y_if
 = 
	`b©adv_¥im¨y_if_gë_£À˘ed
(
b©_¥iv
);

1810 i‡(
b©_¥iv
->
bœ
.
˛aim_hash
) {

1811 
	`b©adv_bœ_purge_˛aims
(
b©_¥iv
, 
¥im¨y_if
, 1);

1812 
	`b©adv_hash_de°roy
(
b©_¥iv
->
bœ
.
˛aim_hash
);

1813 
b©_¥iv
->
bœ
.
˛aim_hash
 = 
NULL
;

1815 i‡(
b©_¥iv
->
bœ
.
backb⁄e_hash
) {

1816 
	`b©adv_bœ_purge_backb⁄e_gw
(
b©_¥iv
, 1);

1817 
	`b©adv_hash_de°roy
(
b©_¥iv
->
bœ
.
backb⁄e_hash
);

1818 
b©_¥iv
->
bœ
.
backb⁄e_hash
 = 
NULL
;

1820 
	`b©adv_h¨dif_put
(
¥im¨y_if
);

1821 
	}
}

1836 
boﬁ


1837 
	$b©adv_bœ_lo›dëe˘_check
(
b©adv_¥iv
 *
b©_¥iv
, 
sk_buff
 *
skb
,

1838 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
,

1839 
vid
)

1841 
b©adv_bœ_backb⁄e_gw
 *
backb⁄e_gw
;

1842 
ëhhdr
 *ethhdr;

1843 
boﬁ
 
ªt
;

1845 
ëhhdr
 = 
	`ëh_hdr
(
skb
);

1850 i‡(!
	`b©adv_com∑ª_ëh
(
ëhhdr
->
h_sour˚
,

1851 
b©_¥iv
->
bœ
.
lo›dëe˘_addr
))

1852  
Ál£
;

1857 i‡(
	`b©adv_has_timed_out
(
b©_¥iv
->
bœ
.
lo›dëe˘_œ°time
,

1858 
BATADV_BLA_LOOPDETECT_TIMEOUT
))

1859  
åue
;

1861 
backb⁄e_gw
 = 
	`b©adv_bœ_gë_backb⁄e_gw
(
b©_¥iv
,

1862 
¥im¨y_if
->
√t_dev
->
dev_addr
,

1863 
vid
, 
åue
);

1864 i‡(
	`u∆ikñy
(!
backb⁄e_gw
))

1865  
åue
;

1867 
ªt
 = 
	`queue_w‹k
(
b©adv_evít_w‹kqueue
, &
backb⁄e_gw
->
ªp‹t_w‹k
);

1872 i‡(!
ªt
)

1873 
	`b©adv_backb⁄e_gw_put
(
backb⁄e_gw
);

1875  
åue
;

1876 
	}
}

1894 
boﬁ
 
	$b©adv_bœ_rx
(
b©adv_¥iv
 *
b©_¥iv
, 
sk_buff
 *
skb
,

1895 
vid
, 
∑ckë_ty≥
)

1897 
b©adv_bœ_backb⁄e_gw
 *
backb⁄e_gw
;

1898 
ëhhdr
 *ethhdr;

1899 
b©adv_bœ_˛aim
 
£¨ch_˛aim
, *
˛aim
 = 
NULL
;

1900 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
;

1901 
boﬁ
 
own_˛aim
;

1902 
boﬁ
 
ªt
;

1904 
ëhhdr
 = 
	`ëh_hdr
(
skb
);

1906 
¥im¨y_if
 = 
	`b©adv_¥im¨y_if_gë_£À˘ed
(
b©_¥iv
);

1907 i‡(!
¥im¨y_if
)

1908 
h™dÀd
;

1910 i‡(!
	`©omic_ªad
(&
b©_¥iv
->
bridge_lo›_avoid™˚
))

1911 
Ælow
;

1913 i‡(
	`b©adv_bœ_lo›dëe˘_check
(
b©_¥iv
, 
skb
, 
¥im¨y_if
, 
vid
))

1914 
h™dÀd
;

1916 i‡(
	`u∆ikñy
(
	`©omic_ªad
(&
b©_¥iv
->
bœ
.
num_ªque°s
)))

1918 i‡(
	`is_mu…iˇ°_ëhî_addr
(
ëhhdr
->
h_de°
))

1932 i‡(
∑ckë_ty≥
 =
BATADV_BCAST
 ||

1933 
∑ckë_ty≥
 =
BATADV_UNICAST
)

1934 
h™dÀd
;

1939 i‡(
	`is_mu…iˇ°_ëhî_addr
(
ëhhdr
->
h_de°
) &&

1940 
∑ckë_ty≥
 =
BATADV_UNICAST
 &&

1941 
	`b©adv_bœ_check_uˇ°_du∂i°
(
b©_¥iv
, 
skb
))

1942 
h™dÀd
;

1944 
	`ëhî_addr_c›y
(
£¨ch_˛aim
.
addr
, 
ëhhdr
->
h_sour˚
);

1945 
£¨ch_˛aim
.
vid
 = vid;

1946 
˛aim
 = 
	`b©adv_˛aim_hash_föd
(
b©_¥iv
, &
£¨ch_˛aim
);

1948 i‡(!
˛aim
) {

1949 
boﬁ
 
loˇl
 = 
	`b©adv_is_my_˛õ¡
(
b©_¥iv
, 
ëhhdr
->
h_sour˚
, 
vid
);

1955 
	`b©adv_dbg
(
BATADV_DBG_BLA
, 
b©_¥iv
,

1957 
__func__
, 
ëhhdr
->
h_sour˚
, 
	`°r_yes_no
(
loˇl
));

1958 
	`b©adv_h™dÀ_˛aim
(
b©_¥iv
, 
¥im¨y_if
,

1959 
¥im¨y_if
->
√t_dev
->
dev_addr
,

1960 
ëhhdr
->
h_sour˚
, 
vid
);

1961 
Ælow
;

1965 
backb⁄e_gw
 = 
	`b©adv_bœ_˛aim_gë_backb⁄e_gw
(
˛aim
);

1966 
own_˛aim
 = 
	`b©adv_com∑ª_ëh
(
backb⁄e_gw
->
‹ig
,

1967 
¥im¨y_if
->
√t_dev
->
dev_addr
);

1968 
	`b©adv_backb⁄e_gw_put
(
backb⁄e_gw
);

1970 i‡(
own_˛aim
) {

1972 
˛aim
->
œ°time
 = 
jiffõs
;

1973 
Ælow
;

1977 i‡(
	`is_mu…iˇ°_ëhî_addr
(
ëhhdr
->
h_de°
) &&

1978 (
∑ckë_ty≥
 =
BATADV_BCAST
 ||Öackë_ty≥ =
BATADV_UNICAST
)) {

1985 
h™dÀd
;

1991 
	`b©adv_h™dÀ_˛aim
(
b©_¥iv
, 
¥im¨y_if
,

1992 
¥im¨y_if
->
√t_dev
->
dev_addr
,

1993 
ëhhdr
->
h_sour˚
, 
vid
);

1994 
Ælow
;

1996 
Ælow
:

1997 
	`b©adv_bœ_upd©e_own_backb⁄e_gw
(
b©_¥iv
, 
¥im¨y_if
, 
vid
);

1998 
ªt
 = 
Ál£
;

1999 
out
;

2001 
h™dÀd
:

2002 
	`k‰ì_skb
(
skb
);

2003 
ªt
 = 
åue
;

2005 
out
:

2006 
	`b©adv_h¨dif_put
(
¥im¨y_if
);

2007 
	`b©adv_˛aim_put
(
˛aim
);

2008  
ªt
;

2009 
	}
}

2028 
boﬁ
 
	$b©adv_bœ_tx
(
b©adv_¥iv
 *
b©_¥iv
, 
sk_buff
 *
skb
,

2029 
vid
)

2031 
ëhhdr
 *ethhdr;

2032 
b©adv_bœ_˛aim
 
£¨ch_˛aim
, *
˛aim
 = 
NULL
;

2033 
b©adv_bœ_backb⁄e_gw
 *
backb⁄e_gw
;

2034 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
;

2035 
boﬁ
 
˛õ¡_rﬂmed
;

2036 
boﬁ
 
ªt
 = 
Ál£
;

2038 
¥im¨y_if
 = 
	`b©adv_¥im¨y_if_gë_£À˘ed
(
b©_¥iv
);

2039 i‡(!
¥im¨y_if
)

2040 
out
;

2042 i‡(!
	`©omic_ªad
(&
b©_¥iv
->
bridge_lo›_avoid™˚
))

2043 
Ælow
;

2045 i‡(
	`b©adv_bœ_¥o˚ss_˛aim
(
b©_¥iv
, 
¥im¨y_if
, 
skb
))

2046 
h™dÀd
;

2048 
ëhhdr
 = 
	`ëh_hdr
(
skb
);

2050 i‡(
	`u∆ikñy
(
	`©omic_ªad
(&
b©_¥iv
->
bœ
.
num_ªque°s
)))

2052 i‡(
	`is_mu…iˇ°_ëhî_addr
(
ëhhdr
->
h_de°
))

2053 
h™dÀd
;

2055 
	`ëhî_addr_c›y
(
£¨ch_˛aim
.
addr
, 
ëhhdr
->
h_sour˚
);

2056 
£¨ch_˛aim
.
vid
 = vid;

2058 
˛aim
 = 
	`b©adv_˛aim_hash_föd
(
b©_¥iv
, &
£¨ch_˛aim
);

2061 i‡(!
˛aim
)

2062 
Ælow
;

2065 
backb⁄e_gw
 = 
	`b©adv_bœ_˛aim_gë_backb⁄e_gw
(
˛aim
);

2066 
˛õ¡_rﬂmed
 = 
	`b©adv_com∑ª_ëh
(
backb⁄e_gw
->
‹ig
,

2067 
¥im¨y_if
->
√t_dev
->
dev_addr
);

2068 
	`b©adv_backb⁄e_gw_put
(
backb⁄e_gw
);

2070 i‡(
˛õ¡_rﬂmed
) {

2074 i‡(
	`b©adv_has_timed_out
(
˛aim
->
œ°time
, 100)) {

2079 
	`b©adv_dbg
(
BATADV_DBG_BLA
, 
b©_¥iv
, "%s(): Roaming client %pM detected. Unclaim it.\n",

2080 
__func__
, 
ëhhdr
->
h_sour˚
);

2081 
	`b©adv_h™dÀ_un˛aim
(
b©_¥iv
, 
¥im¨y_if
,

2082 
¥im¨y_if
->
√t_dev
->
dev_addr
,

2083 
ëhhdr
->
h_sour˚
, 
vid
);

2084 
Ælow
;

2086 
	`b©adv_dbg
(
BATADV_DBG_BLA
, 
b©_¥iv
, "%s(): Race for claim %pM detected. DropÖacket.\n",

2087 
__func__
, 
ëhhdr
->
h_sour˚
);

2088 
h™dÀd
;

2093 i‡(
	`is_mu…iˇ°_ëhî_addr
(
ëhhdr
->
h_de°
)) {

2097 
h™dÀd
;

2102 
Ælow
;

2104 
Ælow
:

2105 
	`b©adv_bœ_upd©e_own_backb⁄e_gw
(
b©_¥iv
, 
¥im¨y_if
, 
vid
);

2106 
ªt
 = 
Ál£
;

2107 
out
;

2108 
h™dÀd
:

2109 
ªt
 = 
åue
;

2110 
out
:

2111 
	`b©adv_h¨dif_put
(
¥im¨y_if
);

2112 
	`b©adv_˛aim_put
(
˛aim
);

2113  
ªt
;

2114 
	}
}

2128 
	$b©adv_bœ_˛aim_dump_íåy
(
sk_buff
 *
msg
, 
u32
 
p‹tid
,

2129 
√éök_ˇŒback
 *
cb
,

2130 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
,

2131 
b©adv_bœ_˛aim
 *
˛aim
)

2133 c⁄° 
u8
 *
¥im¨y_addr
 = 
¥im¨y_if
->
√t_dev
->
dev_addr
;

2134 
u16
 
backb⁄e_¸c
;

2135 
boﬁ
 
is_own
;

2136 *
hdr
;

2137 
ªt
 = -
EINVAL
;

2139 
hdr
 = 
	`gílmsg_put
(
msg
, 
p‹tid
, 
cb
->
∆h
->
∆msg_£q
,

2140 &
b©adv_√éök_Ámûy
, 
NLM_F_MULTI
,

2141 
BATADV_CMD_GET_BLA_CLAIM
);

2142 i‡(!
hdr
) {

2143 
ªt
 = -
ENOBUFS
;

2144 
out
;

2147 
	`gíl_dump_check_c⁄si°ít
(
cb
, 
hdr
);

2149 
is_own
 = 
	`b©adv_com∑ª_ëh
(
˛aim
->
backb⁄e_gw
->
‹ig
,

2150 
¥im¨y_addr
);

2152 
	`•ö_lock_bh
(&
˛aim
->
backb⁄e_gw
->
¸c_lock
);

2153 
backb⁄e_¸c
 = 
˛aim
->
backb⁄e_gw
->
¸c
;

2154 
	`•ö_u∆ock_bh
(&
˛aim
->
backb⁄e_gw
->
¸c_lock
);

2156 i‡(
is_own
)

2157 i‡(
	`∆a_put_Êag
(
msg
, 
BATADV_ATTR_BLA_OWN
)) {

2158 
	`gílmsg_ˇn˚l
(
msg
, 
hdr
);

2159 
out
;

2162 i‡(
	`∆a_put
(
msg
, 
BATADV_ATTR_BLA_ADDRESS
, 
ETH_ALEN
, 
˛aim
->
addr
) ||

2163 
	`∆a_put_u16
(
msg
, 
BATADV_ATTR_BLA_VID
, 
˛aim
->
vid
) ||

2164 
	`∆a_put
(
msg
, 
BATADV_ATTR_BLA_BACKBONE
, 
ETH_ALEN
,

2165 
˛aim
->
backb⁄e_gw
->
‹ig
) ||

2166 
	`∆a_put_u16
(
msg
, 
BATADV_ATTR_BLA_CRC
,

2167 
backb⁄e_¸c
)) {

2168 
	`gílmsg_ˇn˚l
(
msg
, 
hdr
);

2169 
out
;

2172 
	`gílmsg_íd
(
msg
, 
hdr
);

2173 
ªt
 = 0;

2175 
out
:

2176  
ªt
;

2177 
	}
}

2193 
	$b©adv_bœ_˛aim_dump_buckë
(
sk_buff
 *
msg
, 
u32
 
p‹tid
,

2194 
√éök_ˇŒback
 *
cb
,

2195 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
,

2196 
b©adv_hashèbÀ
 *
hash
, 
buckë
,

2197 *
idx_skù
)

2199 
b©adv_bœ_˛aim
 *
˛aim
;

2200 
idx
 = 0;

2201 
ªt
 = 0;

2203 
	`•ö_lock_bh
(&
hash
->
li°_locks
[
buckë
]);

2204 
cb
->
£q
 = 
	`©omic_ªad
(&
hash
->
gíî©i⁄
) << 1 | 1;

2206 
	`hli°_f‹_óch_íåy
(
˛aim
, &
hash
->
èbÀ
[
buckë
], 
hash_íåy
) {

2207 i‡(
idx
++ < *
idx_skù
)

2210 
ªt
 = 
	`b©adv_bœ_˛aim_dump_íåy
(
msg
, 
p‹tid
, 
cb
,

2211 
¥im¨y_if
, 
˛aim
);

2212 i‡(
ªt
) {

2213 *
idx_skù
 = 
idx
 - 1;

2214 
u∆ock
;

2218 *
idx_skù
 = 0;

2219 
u∆ock
:

2220 
	`•ö_u∆ock_bh
(&
hash
->
li°_locks
[
buckë
]);

2221  
ªt
;

2222 
	}
}

2231 
	$b©adv_bœ_˛aim_dump
(
sk_buff
 *
msg
, 
√éök_ˇŒback
 *
cb
)

2233 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
 = 
NULL
;

2234 
p‹tid
 = 
	`NETLINK_CB
(
cb
->
skb
).portid;

2235 
√t_devi˚
 *
mesh_iÁ˚
;

2236 
b©adv_hashèbÀ
 *
hash
;

2237 
b©adv_¥iv
 *
b©_¥iv
;

2238 
buckë
 = 
cb
->
¨gs
[0];

2239 
idx
 = 
cb
->
¨gs
[1];

2240 
ªt
 = 0;

2242 
mesh_iÁ˚
 = 
	`b©adv_√éök_gë_meshif
(
cb
);

2243 i‡(
	`IS_ERR
(
mesh_iÁ˚
))

2244  
	`PTR_ERR
(
mesh_iÁ˚
);

2246 
b©_¥iv
 = 
	`√tdev_¥iv
(
mesh_iÁ˚
);

2247 
hash
 = 
b©_¥iv
->
bœ
.
˛aim_hash
;

2249 
¥im¨y_if
 = 
	`b©adv_¥im¨y_if_gë_£À˘ed
(
b©_¥iv
);

2250 i‡(!
¥im¨y_if
 ||Örim¨y_if->
if_°©us
 !
BATADV_IF_ACTIVE
) {

2251 
ªt
 = -
ENOENT
;

2252 
out
;

2255 
buckë
 < 
hash
->
size
) {

2256 i‡(
	`b©adv_bœ_˛aim_dump_buckë
(
msg
, 
p‹tid
, 
cb
, 
¥im¨y_if
,

2257 
hash
, 
buckë
, &
idx
))

2259 
buckë
++;

2262 
cb
->
¨gs
[0] = 
buckë
;

2263 
cb
->
¨gs
[1] = 
idx
;

2265 
ªt
 = 
msg
->
Àn
;

2267 
out
:

2268 
	`b©adv_h¨dif_put
(
¥im¨y_if
);

2270 
	`dev_put
(
mesh_iÁ˚
);

2272  
ªt
;

2273 
	}
}

2287 
	$b©adv_bœ_backb⁄e_dump_íåy
(
sk_buff
 *
msg
, 
u32
 
p‹tid
,

2288 
√éök_ˇŒback
 *
cb
,

2289 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
,

2290 
b©adv_bœ_backb⁄e_gw
 *
backb⁄e_gw
)

2292 c⁄° 
u8
 *
¥im¨y_addr
 = 
¥im¨y_if
->
√t_dev
->
dev_addr
;

2293 
u16
 
backb⁄e_¸c
;

2294 
boﬁ
 
is_own
;

2295 
m£cs
;

2296 *
hdr
;

2297 
ªt
 = -
EINVAL
;

2299 
hdr
 = 
	`gílmsg_put
(
msg
, 
p‹tid
, 
cb
->
∆h
->
∆msg_£q
,

2300 &
b©adv_√éök_Ámûy
, 
NLM_F_MULTI
,

2301 
BATADV_CMD_GET_BLA_BACKBONE
);

2302 i‡(!
hdr
) {

2303 
ªt
 = -
ENOBUFS
;

2304 
out
;

2307 
	`gíl_dump_check_c⁄si°ít
(
cb
, 
hdr
);

2309 
is_own
 = 
	`b©adv_com∑ª_ëh
(
backb⁄e_gw
->
‹ig
, 
¥im¨y_addr
);

2311 
	`•ö_lock_bh
(&
backb⁄e_gw
->
¸c_lock
);

2312 
backb⁄e_¸c
 = 
backb⁄e_gw
->
¸c
;

2313 
	`•ö_u∆ock_bh
(&
backb⁄e_gw
->
¸c_lock
);

2315 
m£cs
 = 
	`jiffõs_to_m£cs
(
jiffõs
 - 
backb⁄e_gw
->
œ°time
);

2317 i‡(
is_own
)

2318 i‡(
	`∆a_put_Êag
(
msg
, 
BATADV_ATTR_BLA_OWN
)) {

2319 
	`gílmsg_ˇn˚l
(
msg
, 
hdr
);

2320 
out
;

2323 i‡(
	`∆a_put
(
msg
, 
BATADV_ATTR_BLA_BACKBONE
, 
ETH_ALEN
,

2324 
backb⁄e_gw
->
‹ig
) ||

2325 
	`∆a_put_u16
(
msg
, 
BATADV_ATTR_BLA_VID
, 
backb⁄e_gw
->
vid
) ||

2326 
	`∆a_put_u16
(
msg
, 
BATADV_ATTR_BLA_CRC
,

2327 
backb⁄e_¸c
) ||

2328 
	`∆a_put_u32
(
msg
, 
BATADV_ATTR_LAST_SEEN_MSECS
, 
m£cs
)) {

2329 
	`gílmsg_ˇn˚l
(
msg
, 
hdr
);

2330 
out
;

2333 
	`gílmsg_íd
(
msg
, 
hdr
);

2334 
ªt
 = 0;

2336 
out
:

2337  
ªt
;

2338 
	}
}

2354 
	$b©adv_bœ_backb⁄e_dump_buckë
(
sk_buff
 *
msg
, 
u32
 
p‹tid
,

2355 
√éök_ˇŒback
 *
cb
,

2356 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
,

2357 
b©adv_hashèbÀ
 *
hash
,

2358 
buckë
, *
idx_skù
)

2360 
b©adv_bœ_backb⁄e_gw
 *
backb⁄e_gw
;

2361 
idx
 = 0;

2362 
ªt
 = 0;

2364 
	`•ö_lock_bh
(&
hash
->
li°_locks
[
buckë
]);

2365 
cb
->
£q
 = 
	`©omic_ªad
(&
hash
->
gíî©i⁄
) << 1 | 1;

2367 
	`hli°_f‹_óch_íåy
(
backb⁄e_gw
, &
hash
->
èbÀ
[
buckë
], 
hash_íåy
) {

2368 i‡(
idx
++ < *
idx_skù
)

2371 
ªt
 = 
	`b©adv_bœ_backb⁄e_dump_íåy
(
msg
, 
p‹tid
, 
cb
,

2372 
¥im¨y_if
, 
backb⁄e_gw
);

2373 i‡(
ªt
) {

2374 *
idx_skù
 = 
idx
 - 1;

2375 
u∆ock
;

2379 *
idx_skù
 = 0;

2380 
u∆ock
:

2381 
	`•ö_u∆ock_bh
(&
hash
->
li°_locks
[
buckë
]);

2382  
ªt
;

2383 
	}
}

2392 
	$b©adv_bœ_backb⁄e_dump
(
sk_buff
 *
msg
, 
√éök_ˇŒback
 *
cb
)

2394 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
 = 
NULL
;

2395 
p‹tid
 = 
	`NETLINK_CB
(
cb
->
skb
).portid;

2396 
√t_devi˚
 *
mesh_iÁ˚
;

2397 
b©adv_hashèbÀ
 *
hash
;

2398 
b©adv_¥iv
 *
b©_¥iv
;

2399 
buckë
 = 
cb
->
¨gs
[0];

2400 
idx
 = 
cb
->
¨gs
[1];

2401 
ªt
 = 0;

2403 
mesh_iÁ˚
 = 
	`b©adv_√éök_gë_meshif
(
cb
);

2404 i‡(
	`IS_ERR
(
mesh_iÁ˚
))

2405  
	`PTR_ERR
(
mesh_iÁ˚
);

2407 
b©_¥iv
 = 
	`√tdev_¥iv
(
mesh_iÁ˚
);

2408 
hash
 = 
b©_¥iv
->
bœ
.
backb⁄e_hash
;

2410 
¥im¨y_if
 = 
	`b©adv_¥im¨y_if_gë_£À˘ed
(
b©_¥iv
);

2411 i‡(!
¥im¨y_if
 ||Örim¨y_if->
if_°©us
 !
BATADV_IF_ACTIVE
) {

2412 
ªt
 = -
ENOENT
;

2413 
out
;

2416 
buckë
 < 
hash
->
size
) {

2417 i‡(
	`b©adv_bœ_backb⁄e_dump_buckë
(
msg
, 
p‹tid
, 
cb
, 
¥im¨y_if
,

2418 
hash
, 
buckë
, &
idx
))

2420 
buckë
++;

2423 
cb
->
¨gs
[0] = 
buckë
;

2424 
cb
->
¨gs
[1] = 
idx
;

2426 
ªt
 = 
msg
->
Àn
;

2428 
out
:

2429 
	`b©adv_h¨dif_put
(
¥im¨y_if
);

2431 
	`dev_put
(
mesh_iÁ˚
);

2433  
ªt
;

2434 
	}
}

2436 #ifde‡
CONFIG_BATMAN_ADV_DAT


2449 
boﬁ
 
	$b©adv_bœ_check_˛aim
(
b©adv_¥iv
 *
b©_¥iv
,

2450 
u8
 *
addr
, 
vid
)

2452 
b©adv_bœ_˛aim
 
£¨ch_˛aim
;

2453 
b©adv_bœ_˛aim
 *
˛aim
 = 
NULL
;

2454 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
 = 
NULL
;

2455 
boﬁ
 
ªt
 = 
åue
;

2457 i‡(!
	`©omic_ªad
(&
b©_¥iv
->
bridge_lo›_avoid™˚
))

2458  
ªt
;

2460 
¥im¨y_if
 = 
	`b©adv_¥im¨y_if_gë_£À˘ed
(
b©_¥iv
);

2461 i‡(!
¥im¨y_if
)

2462  
ªt
;

2465 
	`ëhî_addr_c›y
(
£¨ch_˛aim
.
addr
,áddr);

2466 
£¨ch_˛aim
.
vid
 = vid;

2468 
˛aim
 = 
	`b©adv_˛aim_hash_föd
(
b©_¥iv
, &
£¨ch_˛aim
);

2473 i‡(
˛aim
) {

2474 i‡(!
	`b©adv_com∑ª_ëh
(
˛aim
->
backb⁄e_gw
->
‹ig
,

2475 
¥im¨y_if
->
√t_dev
->
dev_addr
))

2476 
ªt
 = 
Ál£
;

2477 
	`b©adv_˛aim_put
(
˛aim
);

2480 
	`b©adv_h¨dif_put
(
¥im¨y_if
);

2481  
ªt
;

2482 
	}
}

	@net/batman-adv/bridge_loop_avoidance.h

7 #i‚de‡
_NET_BATMAN_ADV_BLA_H_


8 
	#_NET_BATMAN_ADV_BLA_H_


	)

10 
	~"maö.h
"

12 
	~<löux/compûî.h
>

13 
	~<löux/√tdevi˚.h
>

14 
	~<löux/√éök.h
>

15 
	~<löux/skbuff.h
>

16 
	~<löux/°ddef.h
>

17 
	~<löux/ty≥s.h
>

27 
ölöe
 
boﬁ
 
	$b©adv_bœ_is_lo›dëe˘_mac
(c⁄° 
uöt8_t
 *
mac
)

29 i‡(
mac
[0] == 0xba && mac[1] == 0xbe)

30  
åue
;

32  
Ál£
;

33 
	}
}

35 #ifde‡
CONFIG_BATMAN_ADV_BLA


36 
boﬁ
 
b©adv_bœ_rx
(
b©adv_¥iv
 *
b©_¥iv
, 
sk_buff
 *
skb
,

37 
vid
, 
∑ckë_ty≥
);

38 
boﬁ
 
b©adv_bœ_tx
(
b©adv_¥iv
 *
b©_¥iv
, 
sk_buff
 *
skb
,

39 
vid
);

40 
boﬁ
 
b©adv_bœ_is_backb⁄e_gw
(
sk_buff
 *
skb
,

41 
b©adv_‹ig_node
 *
‹ig_node
,

42 
hdr_size
);

43 
b©adv_bœ_˛aim_dump
(
sk_buff
 *
msg
, 
√éök_ˇŒback
 *
cb
);

44 
b©adv_bœ_backb⁄e_dump
(
sk_buff
 *
msg
, 
√éök_ˇŒback
 *
cb
);

45 
boﬁ
 
b©adv_bœ_is_backb⁄e_gw_‹ig
(
b©adv_¥iv
 *
b©_¥iv
, 
u8
 *
‹ig
,

46 
vid
);

47 
boﬁ
 
b©adv_bœ_check_bˇ°_du∂i°
(
b©adv_¥iv
 *
b©_¥iv
,

48 
sk_buff
 *
skb
);

49 
b©adv_bœ_upd©e_‹ig_addªss
(
b©adv_¥iv
 *
b©_¥iv
,

50 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
,

51 
b©adv_h¨d_iÁ˚
 *
ﬁdif
);

52 
b©adv_bœ_°©us_upd©e
(
√t_devi˚
 *
√t_dev
);

53 
b©adv_bœ_öô
(
b©adv_¥iv
 *
b©_¥iv
);

54 
b©adv_bœ_‰ì
(
b©adv_¥iv
 *
b©_¥iv
);

55 #ifde‡
CONFIG_BATMAN_ADV_DAT


56 
boﬁ
 
b©adv_bœ_check_˛aim
(
b©adv_¥iv
 *
b©_¥iv
, 
u8
 *
addr
,

57 
vid
);

59 
	#BATADV_BLA_CRC_INIT
 0

	)

62 
ölöe
 
boﬁ
 
	$b©adv_bœ_rx
(
b©adv_¥iv
 *
b©_¥iv
,

63 
sk_buff
 *
skb
, 
vid
,

64 
∑ckë_ty≥
)

66  
Ál£
;

67 
	}
}

69 
ölöe
 
boﬁ
 
	$b©adv_bœ_tx
(
b©adv_¥iv
 *
b©_¥iv
,

70 
sk_buff
 *
skb
, 
vid
)

72  
Ál£
;

73 
	}
}

75 
ölöe
 
boﬁ
 
	$b©adv_bœ_is_backb⁄e_gw
(
sk_buff
 *
skb
,

76 
b©adv_‹ig_node
 *
‹ig_node
,

77 
hdr_size
)

79  
Ál£
;

80 
	}
}

82 
ölöe
 
boﬁ
 
	$b©adv_bœ_is_backb⁄e_gw_‹ig
(
b©adv_¥iv
 *
b©_¥iv
,

83 
u8
 *
‹ig
, 
vid
)

85  
Ál£
;

86 
	}
}

88 
ölöe
 
boﬁ


89 
	$b©adv_bœ_check_bˇ°_du∂i°
(
b©adv_¥iv
 *
b©_¥iv
,

90 
sk_buff
 *
skb
)

92  
Ál£
;

93 
	}
}

95 
ölöe
 

96 
	$b©adv_bœ_upd©e_‹ig_addªss
(
b©adv_¥iv
 *
b©_¥iv
,

97 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
,

98 
b©adv_h¨d_iÁ˚
 *
ﬁdif
)

100 
	}
}

102 
ölöe
 
	$b©adv_bœ_öô
(
b©adv_¥iv
 *
b©_¥iv
)

105 
	}
}

107 
ölöe
 
	$b©adv_bœ_‰ì
(
b©adv_¥iv
 *
b©_¥iv
)

109 
	}
}

111 
ölöe
 
	$b©adv_bœ_˛aim_dump
(
sk_buff
 *
msg
,

112 
√éök_ˇŒback
 *
cb
)

114  -
EOPNOTSUPP
;

115 
	}
}

117 
ölöe
 
	$b©adv_bœ_backb⁄e_dump
(
sk_buff
 *
msg
,

118 
√éök_ˇŒback
 *
cb
)

120  -
EOPNOTSUPP
;

121 
	}
}

123 
ölöe


124 
boﬁ
 
	$b©adv_bœ_check_˛aim
(
b©adv_¥iv
 *
b©_¥iv
, 
u8
 *
addr
,

125 
vid
)

127  
åue
;

128 
	}
}

	@net/batman-adv/distributed-arp-table.c

7 
	~"di°ribuãd-¨p-èbÀ.h
"

8 
	~"maö.h
"

10 
	~<löux/©omic.h
>

11 
	~<löux/bô›s.h
>

12 
	~<löux/byã‹dî/gíîic.h
>

13 
	~<löux/c⁄èöî_of.h
>

14 
	~<löux/îr.h
>

15 
	~<löux/î∫o.h
>

16 
	~<löux/ëhîdevi˚.h
>

17 
	~<löux/gÂ.h
>

18 
	~<löux/if_¨p.h
>

19 
	~<löux/if_ëhî.h
>

20 
	~<löux/if_vœn.h
>

21 
	~<löux/ö.h
>

22 
	~<löux/ù.h
>

23 
	~<löux/jiffõs.h
>

24 
	~<löux/kªf.h
>

25 
	~<löux/li°.h
>

26 
	~<löux/√éök.h
>

27 
	~<löux/rculi°.h
>

28 
	~<löux/rcupd©e.h
>

29 
	~<löux/skbuff.h
>

30 
	~<löux/¶ab.h
>

31 
	~<löux/•ölock.h
>

32 
	~<löux/°ddef.h
>

33 
	~<löux/°rög.h
>

34 
	~<löux/udp.h
>

35 
	~<löux/u«lig√d.h
>

36 
	~<löux/w‹kqueue.h
>

37 
	~<√t/¨p.h
>

38 
	~<√t/gíëlök.h
>

39 
	~<√t/√éök.h
>

40 
	~<u≠i/löux/b©m™_adv.h
>

42 
	~"bridge_lo›_avoid™˚.h
"

43 
	~"h¨d-öãrÁ˚.h
"

44 
	~"hash.h
"

45 
	~"log.h
"

46 
	~"√éök.h
"

47 
	~"‹igö©‹.h
"

48 
	~"£nd.h
"

49 
	~"å™¶©i⁄-èbÀ.h
"

50 
	~"tvlv.h
"

52 
	eb©adv_boŸp›
 {

53 
	mBATADV_BOOTREPLY
 = 2,

56 
	eb©adv_boŸhty≥
 {

57 
	mBATADV_HTYPE_ETHERNET
 = 1,

60 
	eb©adv_dh˝›ti⁄code
 {

61 
	mBATADV_DHCP_OPT_PAD
 = 0,

62 
	mBATADV_DHCP_OPT_MSG_TYPE
 = 53,

63 
	mBATADV_DHCP_OPT_END
 = 255,

66 
	eb©adv_dh˝ty≥
 {

67 
	mBATADV_DHCPACK
 = 5,

71 
	#BATADV_DHCP_MAGIC
 1669485411

	)

73 
	sb©adv_dh˝_∑ckë
 {

74 
__u8
 
	m›
;

75 
__u8
 
	mhty≥
;

76 
__u8
 
	mhÀn
;

77 
__u8
 
	mh›s
;

78 
__be32
 
	mxid
;

79 
__be16
 
	m£cs
;

80 
__be16
 
	mÊags
;

81 
__be32
 
	mcüddr
;

82 
__be32
 
	myüddr
;

83 
__be32
 
	msüddr
;

84 
__be32
 
	mgüddr
;

85 
__u8
 
	mchaddr
[16];

86 
__u8
 
	m¢ame
[64];

87 
__u8
 
	mfûe
[128];

88 
__be32
 
	mmagic
;

92 
	#BATADV_DHCP_YIADDR_LEN
 (((
b©adv_dh˝_∑ckë
 *)0)->
yüddr
)

	)

93 
	#BATADV_DHCP_CHADDR_LEN
 (((
b©adv_dh˝_∑ckë
 *)0)->
chaddr
)

	)

95 
b©adv_d©_purge
(
w‹k_°ru˘
 *
w‹k
);

101 
	$b©adv_d©_°¨t_timî
(
b©adv_¥iv
 *
b©_¥iv
)

103 
	`queue_dñayed_w‹k
(
b©adv_evít_w‹kqueue
, &
b©_¥iv
->
d©
.
w‹k
,

104 
	`m£cs_to_jiffõs
(10000));

105 
	}
}

112 
	$b©adv_d©_íåy_ªÀa£
(
kªf
 *
ªf
)

114 
b©adv_d©_íåy
 *
d©_íåy
;

116 
d©_íåy
 = 
	`c⁄èöî_of
(
ªf
, 
b©adv_d©_íåy
, 
ªfcou¡
);

118 
	`k‰ì_rcu
(
d©_íåy
, 
rcu
);

119 
	}
}

126 
	$b©adv_d©_íåy_put
(
b©adv_d©_íåy
 *
d©_íåy
)

128 i‡(!
d©_íåy
)

131 
	`kªf_put
(&
d©_íåy
->
ªfcou¡
, 
b©adv_d©_íåy_ªÀa£
);

132 
	}
}

140 
boﬁ
 
	$b©adv_d©_to_purge
(
b©adv_d©_íåy
 *
d©_íåy
)

142  
	`b©adv_has_timed_out
(
d©_íåy
->
œ°_upd©e
,

143 
BATADV_DAT_ENTRY_TIMEOUT
);

144 
	}
}

157 
	$__b©adv_d©_purge
(
b©adv_¥iv
 *
b©_¥iv
,

158 
	$boﬁ
 (*
to_purge
)(
b©adv_d©_íåy
 *))

160 
•ölock_t
 *
li°_lock
;

161 
b©adv_d©_íåy
 *
d©_íåy
;

162 
hli°_node
 *
node_tmp
;

163 
hli°_hód
 *
hód
;

164 
u32
 
i
;

166 i‡(!
b©_¥iv
->
d©
.
hash
)

169 
i
 = 0; i < 
b©_¥iv
->
d©
.
hash
->
size
; i++) {

170 
hód
 = &
b©_¥iv
->
d©
.
hash
->
èbÀ
[
i
];

171 
li°_lock
 = &
b©_¥iv
->
d©
.
hash
->
li°_locks
[
i
];

173 
	`•ö_lock_bh
(
li°_lock
);

174 
	`hli°_f‹_óch_íåy_ß„
(
d©_íåy
, 
node_tmp
, 
hód
,

175 
hash_íåy
) {

179 i‡(
to_purge
 && !
	`to_purge
(
d©_íåy
))

182 
	`hli°_dñ_rcu
(&
d©_íåy
->
hash_íåy
);

183 
	`b©adv_d©_íåy_put
(
d©_íåy
);

185 
	`•ö_u∆ock_bh
(
li°_lock
);

187 
	}
}

194 
	$b©adv_d©_purge
(
w‹k_°ru˘
 *
w‹k
)

196 
dñayed_w‹k
 *delayed_work;

197 
b©adv_¥iv_d©
 *
¥iv_d©
;

198 
b©adv_¥iv
 *
b©_¥iv
;

200 
dñayed_w‹k
 = 
	`to_dñayed_w‹k
(
w‹k
);

201 
¥iv_d©
 = 
	`c⁄èöî_of
(
dñayed_w‹k
, 
b©adv_¥iv_d©
, 
w‹k
);

202 
b©_¥iv
 = 
	`c⁄èöî_of
(
¥iv_d©
, 
b©adv_¥iv
, 
d©
);

204 
	`__b©adv_d©_purge
(
b©_¥iv
, 
b©adv_d©_to_purge
);

205 
	`b©adv_d©_°¨t_timî
(
b©_¥iv
);

206 
	}
}

215 
boﬁ
 
	$b©adv_com∑ª_d©
(c⁄° 
hli°_node
 *
node
, c⁄° *
d©a2
)

217 c⁄° *
d©a1
 = 
	`c⁄èöî_of
(
node
, 
b©adv_d©_íåy
,

218 
hash_íåy
);

220  
	`memcmp
(
d©a1
, 
d©a2
, (
__be32
)) == 0;

221 
	}
}

230 
u8
 *
	$b©adv_¨p_hw_§c
(
sk_buff
 *
skb
, 
hdr_size
)

232 
u8
 *
addr
;

234 
addr
 = (
u8
 *)(
skb
->
d©a
 + 
hdr_size
);

235 
addr
 +
ETH_HLEN
 + (
¨phdr
);

237  
addr
;

238 
	}
}

247 
__be32
 
	$b©adv_¨p_ù_§c
(
sk_buff
 *
skb
, 
hdr_size
)

249  *(
__f‹˚
 
__be32
 *)(
	`b©adv_¨p_hw_§c
(
skb
, 
hdr_size
Ë+ 
ETH_ALEN
);

250 
	}
}

259 
u8
 *
	$b©adv_¨p_hw_d°
(
sk_buff
 *
skb
, 
hdr_size
)

261  
	`b©adv_¨p_hw_§c
(
skb
, 
hdr_size
Ë+ 
ETH_ALEN
 + 4;

262 
	}
}

271 
__be32
 
	$b©adv_¨p_ù_d°
(
sk_buff
 *
skb
, 
hdr_size
)

273 
u8
 *
d°
 = 
	`b©adv_¨p_hw_§c
(
skb
, 
hdr_size
Ë+ 
ETH_ALEN
 * 2 + 4;

275  *(
__f‹˚
 
__be32
 *)
d°
;

276 
	}
}

285 
u32
 
	$b©adv_hash_d©
(c⁄° *
d©a
, 
u32
 
size
)

287 
u32
 
hash
 = 0;

288 c⁄° 
b©adv_d©_íåy
 *
d©
 = 
d©a
;

289 c⁄° *
key
;

290 
__be16
 
vid
;

291 
u32
 
i
;

293 
key
 = (
__f‹˚
 c⁄° *)&
d©
->
ù
;

294 
i
 = 0; i < (
d©
->
ù
); i++) {

295 
hash
 +
key
[
i
];

296 
hash
 += (hash << 10);

297 
hash
 ^= (hash >> 6);

300 
vid
 = 
	`ht⁄s
(
d©
->vid);

301 
key
 = (
__f‹˚
 c⁄° *)&
vid
;

302 
i
 = 0; i < (
d©
->
vid
); i++) {

303 
hash
 +
key
[
i
];

304 
hash
 += (hash << 10);

305 
hash
 ^= (hash >> 6);

308 
hash
 += (hash << 3);

309 
hash
 ^= (hash >> 11);

310 
hash
 += (hash << 15);

312  
hash
 % 
size
;

313 
	}
}

324 
b©adv_d©_íåy
 *

325 
	$b©adv_d©_íåy_hash_föd
(
b©adv_¥iv
 *
b©_¥iv
, 
__be32
 
ù
,

326 
vid
)

328 
hli°_hód
 *
hód
;

329 
b©adv_d©_íåy
 
to_föd
, *
d©_íåy
, *
d©_íåy_tmp
 = 
NULL
;

330 
b©adv_hashèbÀ
 *
hash
 = 
b©_¥iv
->
d©
.hash;

331 
u32
 
ödex
;

333 i‡(!
hash
)

334  
NULL
;

336 
to_föd
.
ù
 = ip;

337 
to_föd
.
vid
 = vid;

339 
ödex
 = 
	`b©adv_hash_d©
(&
to_föd
, 
hash
->
size
);

340 
hód
 = &
hash
->
èbÀ
[
ödex
];

342 
	`rcu_ªad_lock
();

343 
	`hli°_f‹_óch_íåy_rcu
(
d©_íåy
, 
hód
, 
hash_íåy
) {

344 i‡(
d©_íåy
->
ù
 != ip)

347 i‡(!
	`kªf_gë_u∆ess_zîo
(&
d©_íåy
->
ªfcou¡
))

350 
d©_íåy_tmp
 = 
d©_íåy
;

353 
	`rcu_ªad_u∆ock
();

355  
d©_íåy_tmp
;

356 
	}
}

365 
	$b©adv_d©_íåy_add
(
b©adv_¥iv
 *
b©_¥iv
, 
__be32
 
ù
,

366 
u8
 *
mac_addr
, 
vid
)

368 
b©adv_d©_íåy
 *
d©_íåy
;

369 
hash_added
;

371 
d©_íåy
 = 
	`b©adv_d©_íåy_hash_föd
(
b©_¥iv
, 
ù
, 
vid
);

373 i‡(
d©_íåy
) {

374 i‡(!
	`b©adv_com∑ª_ëh
(
d©_íåy
->
mac_addr
, mac_addr))

375 
	`ëhî_addr_c›y
(
d©_íåy
->
mac_addr
, mac_addr);

376 
d©_íåy
->
œ°_upd©e
 = 
jiffõs
;

377 
	`b©adv_dbg
(
BATADV_DBG_DAT
, 
b©_¥iv
,

379 &
d©_íåy
->
ù
, d©_íåy->
mac_addr
,

380 
	`b©adv_¥öt_vid
(
vid
));

381 
out
;

384 
d©_íåy
 = 
	`kmÆloc
((*d©_íåy), 
GFP_ATOMIC
);

385 i‡(!
d©_íåy
)

386 
out
;

388 
d©_íåy
->
ù
 = ip;

389 
d©_íåy
->
vid
 = vid;

390 
	`ëhî_addr_c›y
(
d©_íåy
->
mac_addr
, mac_addr);

391 
d©_íåy
->
œ°_upd©e
 = 
jiffõs
;

392 
	`kªf_öô
(&
d©_íåy
->
ªfcou¡
);

394 
	`kªf_gë
(&
d©_íåy
->
ªfcou¡
);

395 
hash_added
 = 
	`b©adv_hash_add
(
b©_¥iv
->
d©
.
hash
, 
b©adv_com∑ª_d©
,

396 
b©adv_hash_d©
, 
d©_íåy
,

397 &
d©_íåy
->
hash_íåy
);

399 i‡(
	`u∆ikñy
(
hash_added
 != 0)) {

401 
	`b©adv_d©_íåy_put
(
d©_íåy
);

402 
out
;

405 
	`b©adv_dbg
(
BATADV_DBG_DAT
, 
b©_¥iv
, "NewÉntryádded: %pI4 %pM (vid: %d)\n",

406 &
d©_íåy
->
ù
, d©_íåy->
mac_addr
, 
	`b©adv_¥öt_vid
(
vid
));

408 
out
:

409 
	`b©adv_d©_íåy_put
(
d©_íåy
);

410 
	}
}

412 #ifde‡
CONFIG_BATMAN_ADV_DEBUG


422 
	$b©adv_dbg_¨p
(
b©adv_¥iv
 *
b©_¥iv
, 
sk_buff
 *
skb
,

423 
hdr_size
, *
msg
)

425 
b©adv_uniˇ°_4addr_∑ckë
 *
uniˇ°_4addr_∑ckë
;

426 
b©adv_bˇ°_∑ckë
 *
bˇ°_pkt
;

427 
u8
 *
‹ig_addr
;

428 
__be32
 
ù_§c
, 
ù_d°
;

430 i‡(
msg
)

431 
	`b©adv_dbg
(
BATADV_DBG_DAT
, 
b©_¥iv
, "%s\n", 
msg
);

433 
ù_§c
 = 
	`b©adv_¨p_ù_§c
(
skb
, 
hdr_size
);

434 
ù_d°
 = 
	`b©adv_¨p_ù_d°
(
skb
, 
hdr_size
);

435 
	`b©adv_dbg
(
BATADV_DBG_DAT
, 
b©_¥iv
,

437 
	`b©adv_¨p_hw_§c
(
skb
, 
hdr_size
), &
ù_§c
,

438 
	`b©adv_¨p_hw_d°
(
skb
, 
hdr_size
), &
ù_d°
);

440 i‡(
hdr_size
 < (
b©adv_uniˇ°_∑ckë
))

443 
uniˇ°_4addr_∑ckë
 = (
b©adv_uniˇ°_4addr_∑ckë
 *)
skb
->
d©a
;

445 
uniˇ°_4addr_∑ckë
->
u
.
∑ckë_ty≥
) {

446 
BATADV_UNICAST
:

447 
	`b©adv_dbg
(
BATADV_DBG_DAT
, 
b©_¥iv
,

450 
BATADV_UNICAST_4ADDR
:

451 
	`b©adv_dbg
(
BATADV_DBG_DAT
, 
b©_¥iv
,

453 
uniˇ°_4addr_∑ckë
->
§c
);

454 
uniˇ°_4addr_∑ckë
->
subty≥
) {

455 
BATADV_P_DAT_DHT_PUT
:

456 
	`b©adv_dbg
(
BATADV_DBG_DAT
, 
b©_¥iv
, "*Åype: DAT_DHT_PUT\n");

458 
BATADV_P_DAT_DHT_GET
:

459 
	`b©adv_dbg
(
BATADV_DBG_DAT
, 
b©_¥iv
, "*Åype: DAT_DHT_GET\n");

461 
BATADV_P_DAT_CACHE_REPLY
:

462 
	`b©adv_dbg
(
BATADV_DBG_DAT
, 
b©_¥iv
,

465 
BATADV_P_DATA
:

466 
	`b©adv_dbg
(
BATADV_DBG_DAT
, 
b©_¥iv
, "*Åype: DATA\n");

469 
	`b©adv_dbg
(
BATADV_DBG_DAT
, 
b©_¥iv
, "*Åype: Unknown (%u)!\n",

470 
uniˇ°_4addr_∑ckë
->
u
.
∑ckë_ty≥
);

473 
BATADV_BCAST
:

474 
bˇ°_pkt
 = (
b©adv_bˇ°_∑ckë
 *)
uniˇ°_4addr_∑ckë
;

475 
‹ig_addr
 = 
bˇ°_pkt
->
‹ig
;

476 
	`b©adv_dbg
(
BATADV_DBG_DAT
, 
b©_¥iv
,

478 
‹ig_addr
);

481 
	`b©adv_dbg
(
BATADV_DBG_DAT
, 
b©_¥iv
,

483 
uniˇ°_4addr_∑ckë
->
u
.
∑ckë_ty≥
);

485 
	}
}

489 
	$b©adv_dbg_¨p
(
b©adv_¥iv
 *
b©_¥iv
, 
sk_buff
 *
skb
,

490 
hdr_size
, *
msg
)

492 
	}
}

509 
boﬁ
 
	$b©adv_is_‹ig_node_ñigibÀ
(
b©adv_d©_ˇndid©e
 *
ªs
,

510 
£À˘
, 
b©adv_d©_addr_t
 
tmp_max
,

511 
b©adv_d©_addr_t
 
max
,

512 
b©adv_d©_addr_t
 
œ°_max
,

513 
b©adv_‹ig_node
 *
ˇndid©e
,

514 
b©adv_‹ig_node
 *
max_‹ig_node
)

516 
boﬁ
 
ªt
 = 
Ál£
;

517 
j
;

520 i‡(!
	`ã°_bô
(
BATADV_ORIG_CAPA_HAS_DAT
, &
ˇndid©e
->
ˇ∑bûôõs
))

521 
out
;

524 
j
 = 0; j < 
£À˘
; j++)

525 i‡(
ªs
[
j
].
‹ig_node
 =
ˇndid©e
)

528 i‡(
j
 < 
£À˘
)

529 
out
;

531 i‡(
tmp_max
 > 
œ°_max
)

532 
out
;

536 i‡(
tmp_max
 < 
max
)

537 
out
;

541 i‡(
tmp_max
 =
max
 && 
max_‹ig_node
 &&

542 
	`b©adv_com∑ª_ëh
(
ˇndid©e
->
‹ig
, 
max_‹ig_node
->orig))

543 
out
;

545 
ªt
 = 
åue
;

546 
out
:

547  
ªt
;

548 
	}
}

558 
	$b©adv_choo£_√xt_ˇndid©e
(
b©adv_¥iv
 *
b©_¥iv
,

559 
b©adv_d©_ˇndid©e
 *
ˇnds
,

560 
£À˘
, 
b©adv_d©_addr_t
 
ù_key
,

561 
b©adv_d©_addr_t
 *
œ°_max
)

563 
b©adv_d©_addr_t
 
max
 = 0;

564 
b©adv_d©_addr_t
 
tmp_max
 = 0;

565 
b©adv_‹ig_node
 *
‹ig_node
, *
max_‹ig_node
 = 
NULL
;

566 
b©adv_hashèbÀ
 *
hash
 = 
b©_¥iv
->
‹ig_hash
;

567 
hli°_hód
 *
hód
;

568 
i
;

573 
ˇnds
[
£À˘
].
ty≥
 = 
BATADV_DAT_CANDIDATE_NOT_FOUND
;

578 
i
 = 0; i < 
hash
->
size
; i++) {

579 
hód
 = &
hash
->
èbÀ
[
i
];

581 
	`rcu_ªad_lock
();

582 
	`hli°_f‹_óch_íåy_rcu
(
‹ig_node
, 
hód
, 
hash_íåy
) {

584 
tmp_max
 = 
BATADV_DAT_ADDR_MAX
 - 
‹ig_node
->
d©_addr
 +

585 
ù_key
;

587 i‡(!
	`b©adv_is_‹ig_node_ñigibÀ
(
ˇnds
, 
£À˘
,

588 
tmp_max
, 
max
,

589 *
œ°_max
, 
‹ig_node
,

590 
max_‹ig_node
))

593 i‡(!
	`kªf_gë_u∆ess_zîo
(&
‹ig_node
->
ªfcou¡
))

596 
max
 = 
tmp_max
;

597 
	`b©adv_‹ig_node_put
(
max_‹ig_node
);

598 
max_‹ig_node
 = 
‹ig_node
;

600 
	`rcu_ªad_u∆ock
();

602 i‡(
max_‹ig_node
) {

603 
ˇnds
[
£À˘
].
ty≥
 = 
BATADV_DAT_CANDIDATE_ORIG
;

604 
ˇnds
[
£À˘
].
‹ig_node
 = 
max_‹ig_node
;

605 
	`b©adv_dbg
(
BATADV_DBG_DAT
, 
b©_¥iv
,

607 
£À˘
, 
max_‹ig_node
->
‹ig
, max_‹ig_node->
d©_addr
,

608 
max
);

610 *
œ°_max
 = 
max
;

611 
	}
}

626 
b©adv_d©_ˇndid©e
 *

627 
	$b©adv_d©_£À˘_ˇndid©es
(
b©adv_¥iv
 *
b©_¥iv
, 
__be32
 
ù_d°
,

628 
vid
)

630 
£À˘
;

631 
b©adv_d©_addr_t
 
œ°_max
 = 
BATADV_DAT_ADDR_MAX
, 
ù_key
;

632 
b©adv_d©_ˇndid©e
 *
ªs
;

633 
b©adv_d©_íåy
 
d©
;

635 i‡(!
b©_¥iv
->
‹ig_hash
)

636  
NULL
;

638 
ªs
 = 
	`kmÆloc_¨øy
(
BATADV_DAT_CANDIDATES_NUM
, (*res),

639 
GFP_ATOMIC
);

640 i‡(!
ªs
)

641  
NULL
;

643 
d©
.
ù
 = 
ù_d°
;

644 
d©
.
vid
 = vid;

645 
ù_key
 = (
b©adv_d©_addr_t
)
	`b©adv_hash_d©
(&
d©
,

646 
BATADV_DAT_ADDR_MAX
);

648 
	`b©adv_dbg
(
BATADV_DBG_DAT
, 
b©_¥iv
,

649 "%s(): IP=%pI4 hash(IP)=%u\n", 
__func__
, &
ù_d°
,

650 
ù_key
);

652 
£À˘
 = 0; sñe˘ < 
BATADV_DAT_CANDIDATES_NUM
; select++)

653 
	`b©adv_choo£_√xt_ˇndid©e
(
b©_¥iv
, 
ªs
, 
£À˘
, 
ù_key
,

654 &
œ°_max
);

656  
ªs
;

657 
	}
}

673 
boﬁ
 
	$b©adv_d©_f‹w¨d_d©a
(
b©adv_¥iv
 *
b©_¥iv
,

674 
sk_buff
 *
skb
, 
__be32
 
ù
,

675 
vid
, 
∑ckë_subty≥
)

677 
i
;

678 
boﬁ
 
ªt
 = 
Ál£
;

679 
£nd_°©us
;

680 
b©adv_√igh_node
 *
√igh_node
 = 
NULL
;

681 
sk_buff
 *
tmp_skb
;

682 
b©adv_d©_ˇndid©e
 *
ˇnd
;

684 
ˇnd
 = 
	`b©adv_d©_£À˘_ˇndid©es
(
b©_¥iv
, 
ù
, 
vid
);

685 i‡(!
ˇnd
)

686  
ªt
;

688 
	`b©adv_dbg
(
BATADV_DBG_DAT
, 
b©_¥iv
, "DHT_SEND f‹ %pI4\n", &
ù
);

690 
i
 = 0; i < 
BATADV_DAT_CANDIDATES_NUM
; i++) {

691 i‡(
ˇnd
[
i
].
ty≥
 =
BATADV_DAT_CANDIDATE_NOT_FOUND
)

694 
√igh_node
 = 
	`b©adv_‹ig_rouãr_gë
(
ˇnd
[
i
].
‹ig_node
,

695 
BATADV_IF_DEFAULT
);

696 i‡(!
√igh_node
)

697 
‰ì_‹ig
;

699 
tmp_skb
 = 
	`pskb_c›y_f‹_˛⁄e
(
skb
, 
GFP_ATOMIC
);

700 i‡(!
	`b©adv_£nd_skb_¥ï¨e_uniˇ°_4addr
(
b©_¥iv
, 
tmp_skb
,

701 
ˇnd
[
i
].
‹ig_node
,

702 
∑ckë_subty≥
)) {

703 
	`k‰ì_skb
(
tmp_skb
);

704 
‰ì_√igh
;

707 
£nd_°©us
 = 
	`b©adv_£nd_uniˇ°_skb
(
tmp_skb
, 
√igh_node
);

708 i‡(
£nd_°©us
 =
NET_XMIT_SUCCESS
) {

710 
∑ckë_subty≥
) {

711 
BATADV_P_DAT_DHT_GET
:

712 
	`b©adv_öc_cou¡î
(
b©_¥iv
,

713 
BATADV_CNT_DAT_GET_TX
);

715 
BATADV_P_DAT_DHT_PUT
:

716 
	`b©adv_öc_cou¡î
(
b©_¥iv
,

717 
BATADV_CNT_DAT_PUT_TX
);

722 
ªt
 = 
åue
;

724 
‰ì_√igh
:

725 
	`b©adv_√igh_node_put
(
√igh_node
);

726 
‰ì_‹ig
:

727 
	`b©adv_‹ig_node_put
(
ˇnd
[
i
].
‹ig_node
);

730 
	`k‰ì
(
ˇnd
);

731  
ªt
;

732 
	}
}

739 
	$b©adv_d©_tvlv_c⁄èöî_upd©e
(
b©adv_¥iv
 *
b©_¥iv
)

741 
d©_mode
;

743 
d©_mode
 = 
	`©omic_ªad
(&
b©_¥iv
->
di°ribuãd_¨p_èbÀ
);

745 
d©_mode
) {

747 
	`b©adv_tvlv_c⁄èöî_uƒegi°î
(
b©_¥iv
, 
BATADV_TVLV_DAT
, 1);

750 
	`b©adv_tvlv_c⁄èöî_ªgi°î
(
b©_¥iv
, 
BATADV_TVLV_DAT
, 1,

751 
NULL
, 0);

754 
	}
}

761 
	$b©adv_d©_°©us_upd©e
(
√t_devi˚
 *
√t_dev
)

763 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
√t_dev
);

765 
	`b©adv_d©_tvlv_c⁄èöî_upd©e
(
b©_¥iv
);

766 
	}
}

776 
	$b©adv_d©_tvlv_ogm_h™dÀr_v1
(
b©adv_¥iv
 *
b©_¥iv
,

777 
b©adv_‹ig_node
 *
‹ig
,

778 
u8
 
Êags
,

779 *
tvlv_vÆue
, 
u16
 
tvlv_vÆue_Àn
)

781 i‡(
Êags
 & 
BATADV_TVLV_HANDLER_OGM_CIFNOTFND
)

782 
	`˛ór_bô
(
BATADV_ORIG_CAPA_HAS_DAT
, &
‹ig
->
ˇ∑bûôõs
);

784 
	`£t_bô
(
BATADV_ORIG_CAPA_HAS_DAT
, &
‹ig
->
ˇ∑bûôõs
);

785 
	}
}

791 
	$b©adv_d©_hash_‰ì
(
b©adv_¥iv
 *
b©_¥iv
)

793 i‡(!
b©_¥iv
->
d©
.
hash
)

796 
	`__b©adv_d©_purge
(
b©_¥iv
, 
NULL
);

798 
	`b©adv_hash_de°roy
(
b©_¥iv
->
d©
.
hash
);

800 
b©_¥iv
->
d©
.
hash
 = 
NULL
;

801 
	}
}

809 
	$b©adv_d©_öô
(
b©adv_¥iv
 *
b©_¥iv
)

811 i‡(
b©_¥iv
->
d©
.
hash
)

814 
b©_¥iv
->
d©
.
hash
 = 
	`b©adv_hash_√w
(1024);

816 i‡(!
b©_¥iv
->
d©
.
hash
)

817  -
ENOMEM
;

819 
	`INIT_DELAYED_WORK
(&
b©_¥iv
->
d©
.
w‹k
, 
b©adv_d©_purge
);

820 
	`b©adv_d©_°¨t_timî
(
b©_¥iv
);

822 
	`b©adv_tvlv_h™dÀr_ªgi°î
(
b©_¥iv
, 
b©adv_d©_tvlv_ogm_h™dÀr_v1
,

823 
NULL
, NULL, 
BATADV_TVLV_DAT
, 1,

824 
BATADV_TVLV_HANDLER_OGM_CIFNOTFND
);

825 
	`b©adv_d©_tvlv_c⁄èöî_upd©e
(
b©_¥iv
);

827 
	}
}

833 
	$b©adv_d©_‰ì
(
b©adv_¥iv
 *
b©_¥iv
)

835 
	`b©adv_tvlv_c⁄èöî_uƒegi°î
(
b©_¥iv
, 
BATADV_TVLV_DAT
, 1);

836 
	`b©adv_tvlv_h™dÀr_uƒegi°î
(
b©_¥iv
, 
BATADV_TVLV_DAT
, 1);

838 
	`ˇn˚l_dñayed_w‹k_sync
(&
b©_¥iv
->
d©
.
w‹k
);

840 
	`b©adv_d©_hash_‰ì
(
b©_¥iv
);

841 
	}
}

854 
	$b©adv_d©_ˇche_dump_íåy
(
sk_buff
 *
msg
, 
u32
 
p‹tid
,

855 
√éök_ˇŒback
 *
cb
,

856 
b©adv_d©_íåy
 *
d©_íåy
)

858 
m£cs
;

859 *
hdr
;

861 
hdr
 = 
	`gílmsg_put
(
msg
, 
p‹tid
, 
cb
->
∆h
->
∆msg_£q
,

862 &
b©adv_√éök_Ámûy
, 
NLM_F_MULTI
,

863 
BATADV_CMD_GET_DAT_CACHE
);

864 i‡(!
hdr
)

865  -
ENOBUFS
;

867 
	`gíl_dump_check_c⁄si°ít
(
cb
, 
hdr
);

869 
m£cs
 = 
	`jiffõs_to_m£cs
(
jiffõs
 - 
d©_íåy
->
œ°_upd©e
);

871 i‡(
	`∆a_put_ö_addr
(
msg
, 
BATADV_ATTR_DAT_CACHE_IP4ADDRESS
,

872 
d©_íåy
->
ù
) ||

873 
	`∆a_put
(
msg
, 
BATADV_ATTR_DAT_CACHE_HWADDRESS
, 
ETH_ALEN
,

874 
d©_íåy
->
mac_addr
) ||

875 
	`∆a_put_u16
(
msg
, 
BATADV_ATTR_DAT_CACHE_VID
, 
d©_íåy
->
vid
) ||

876 
	`∆a_put_u32
(
msg
, 
BATADV_ATTR_LAST_SEEN_MSECS
, 
m£cs
)) {

877 
	`gílmsg_ˇn˚l
(
msg
, 
hdr
);

878  -
EMSGSIZE
;

881 
	`gílmsg_íd
(
msg
, 
hdr
);

883 
	}
}

898 
	$b©adv_d©_ˇche_dump_buckë
(
sk_buff
 *
msg
, 
u32
 
p‹tid
,

899 
√éök_ˇŒback
 *
cb
,

900 
b©adv_hashèbÀ
 *
hash
, 
buckë
,

901 *
idx_skù
)

903 
b©adv_d©_íåy
 *
d©_íåy
;

904 
idx
 = 0;

906 
	`•ö_lock_bh
(&
hash
->
li°_locks
[
buckë
]);

907 
cb
->
£q
 = 
	`©omic_ªad
(&
hash
->
gíî©i⁄
) << 1 | 1;

909 
	`hli°_f‹_óch_íåy
(
d©_íåy
, &
hash
->
èbÀ
[
buckë
], 
hash_íåy
) {

910 i‡(
idx
 < *
idx_skù
)

911 
skù
;

913 i‡(
	`b©adv_d©_ˇche_dump_íåy
(
msg
, 
p‹tid
, 
cb
, 
d©_íåy
)) {

914 
	`•ö_u∆ock_bh
(&
hash
->
li°_locks
[
buckë
]);

915 *
idx_skù
 = 
idx
;

917  -
EMSGSIZE
;

920 
skù
:

921 
idx
++;

923 
	`•ö_u∆ock_bh
(&
hash
->
li°_locks
[
buckë
]);

926 
	}
}

935 
	$b©adv_d©_ˇche_dump
(
sk_buff
 *
msg
, 
√éök_ˇŒback
 *
cb
)

937 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
 = 
NULL
;

938 
p‹tid
 = 
	`NETLINK_CB
(
cb
->
skb
).portid;

939 
√t_devi˚
 *
mesh_iÁ˚
;

940 
b©adv_hashèbÀ
 *
hash
;

941 
b©adv_¥iv
 *
b©_¥iv
;

942 
buckë
 = 
cb
->
¨gs
[0];

943 
idx
 = 
cb
->
¨gs
[1];

944 
ªt
 = 0;

946 
mesh_iÁ˚
 = 
	`b©adv_√éök_gë_meshif
(
cb
);

947 i‡(
	`IS_ERR
(
mesh_iÁ˚
))

948  
	`PTR_ERR
(
mesh_iÁ˚
);

950 
b©_¥iv
 = 
	`√tdev_¥iv
(
mesh_iÁ˚
);

951 
hash
 = 
b©_¥iv
->
d©
.hash;

953 
¥im¨y_if
 = 
	`b©adv_¥im¨y_if_gë_£À˘ed
(
b©_¥iv
);

954 i‡(!
¥im¨y_if
 ||Örim¨y_if->
if_°©us
 !
BATADV_IF_ACTIVE
) {

955 
ªt
 = -
ENOENT
;

956 
out
;

959 
buckë
 < 
hash
->
size
) {

960 i‡(
	`b©adv_d©_ˇche_dump_buckë
(
msg
, 
p‹tid
, 
cb
, 
hash
, 
buckë
,

961 &
idx
))

964 
buckë
++;

965 
idx
 = 0;

968 
cb
->
¨gs
[0] = 
buckë
;

969 
cb
->
¨gs
[1] = 
idx
;

971 
ªt
 = 
msg
->
Àn
;

973 
out
:

974 
	`b©adv_h¨dif_put
(
¥im¨y_if
);

976 
	`dev_put
(
mesh_iÁ˚
);

978  
ªt
;

979 
	}
}

989 
u16
 
	$b©adv_¨p_gë_ty≥
(
b©adv_¥iv
 *
b©_¥iv
,

990 
sk_buff
 *
skb
, 
hdr_size
)

992 
¨phdr
 *arphdr;

993 
ëhhdr
 *ethhdr;

994 
__be32
 
ù_§c
, 
ù_d°
;

995 
u8
 *
hw_§c
, *
hw_d°
;

996 
u16
 
ty≥
 = 0;

999 i‡(
	`u∆ikñy
(!
	`pskb_may_puŒ
(
skb
, 
hdr_size
 + 
ETH_HLEN
)))

1000 
out
;

1002 
ëhhdr
 = (ëhhd∏*)(
skb
->
d©a
 + 
hdr_size
);

1004 i‡(
ëhhdr
->
h_¥Ÿo
 !
	`ht⁄s
(
ETH_P_ARP
))

1005 
out
;

1008 i‡(
	`u∆ikñy
(!
	`pskb_may_puŒ
(
skb
, 
hdr_size
 + 
ETH_HLEN
 +

1009 
	`¨p_hdr_Àn
(
skb
->
dev
))))

1010 
out
;

1012 
¨phdr
 = (¨phd∏*)(
skb
->
d©a
 + 
hdr_size
 + 
ETH_HLEN
);

1015 i‡(
¨phdr
->
¨_hrd
 !
	`ht⁄s
(
ARPHRD_ETHER
))

1016 
out
;

1018 i‡(
¨phdr
->
¨_¥o
 !
	`ht⁄s
(
ETH_P_IP
))

1019 
out
;

1021 i‡(
¨phdr
->
¨_h 
 !
ETH_ALEN
)

1022 
out
;

1024 i‡(
¨phdr
->
¨_∂n
 != 4)

1025 
out
;

1030 
ù_§c
 = 
	`b©adv_¨p_ù_§c
(
skb
, 
hdr_size
);

1031 
ù_d°
 = 
	`b©adv_¨p_ù_d°
(
skb
, 
hdr_size
);

1032 i‡(
	`ùv4_is_lo›back
(
ù_§c
Ë|| 
	`ùv4_is_mu…iˇ°
(ip_src) ||

1033 
	`ùv4_is_lo›back
(
ù_d°
Ë|| 
	`ùv4_is_mu…iˇ°
(ip_dst) ||

1034 
	`ùv4_is_zî⁄ë
(
ù_§c
Ë|| 
	`ùv4_is_lbˇ°
(ip_src) ||

1035 
	`ùv4_is_zî⁄ë
(
ù_d°
Ë|| 
	`ùv4_is_lbˇ°
(ip_dst))

1036 
out
;

1038 
hw_§c
 = 
	`b©adv_¨p_hw_§c
(
skb
, 
hdr_size
);

1039 i‡(
	`is_zîo_ëhî_addr
(
hw_§c
Ë|| 
	`is_mu…iˇ°_ëhî_addr
(hw_src))

1040 
out
;

1043 i‡(
¨phdr
->
¨_›
 !
	`ht⁄s
(
ARPOP_REQUEST
)) {

1044 
hw_d°
 = 
	`b©adv_¨p_hw_d°
(
skb
, 
hdr_size
);

1045 i‡(
	`is_zîo_ëhî_addr
(
hw_d°
) ||

1046 
	`is_mu…iˇ°_ëhî_addr
(
hw_d°
))

1047 
out
;

1050 
ty≥
 = 
	`¡ohs
(
¨phdr
->
¨_›
);

1051 
out
:

1052  
ty≥
;

1053 
	}
}

1064 
	$b©adv_d©_gë_vid
(
sk_buff
 *
skb
, *
hdr_size
)

1066 
vid
;

1068 
vid
 = 
	`b©adv_gë_vid
(
skb
, *
hdr_size
);

1075 i‡(
vid
 & 
BATADV_VLAN_HAS_TAG
)

1076 *
hdr_size
 +
VLAN_HLEN
;

1078  
vid
;

1079 
	}
}

1095 
sk_buff
 *

1096 
	$b©adv_d©_¨p_¸óã_ª∂y
(
b©adv_¥iv
 *
b©_¥iv
, 
__be32
 
ù_§c
,

1097 
__be32
 
ù_d°
, 
u8
 *
hw_§c
, u8 *
hw_d°
,

1098 
vid
)

1100 
sk_buff
 *
skb
;

1102 
skb
 = 
	`¨p_¸óã
(
ARPOP_REPLY
, 
ETH_P_ARP
, 
ù_d°
, 
b©_¥iv
->
mesh_iÁ˚
,

1103 
ù_§c
, 
hw_d°
, 
hw_§c
, hw_dst);

1104 i‡(!
skb
)

1105  
NULL
;

1107 
	`skb_ª£t_mac_hódî
(
skb
);

1109 i‡(
vid
 & 
BATADV_VLAN_HAS_TAG
)

1110 
skb
 = 
	`vœn_ö£π_èg
(skb, 
	`ht⁄s
(
ETH_P_8021Q
),

1111 
vid
 & 
VLAN_VID_MASK
);

1113  
skb
;

1114 
	}
}

1126 
boﬁ
 
	$b©adv_d©_¢o›_outgoög_¨p_ªque°
(
b©adv_¥iv
 *
b©_¥iv
,

1127 
sk_buff
 *
skb
)

1129 
u16
 
ty≥
 = 0;

1130 
__be32
 
ù_d°
, 
ù_§c
;

1131 
u8
 *
hw_§c
;

1132 
boﬁ
 
ªt
 = 
Ál£
;

1133 
b©adv_d©_íåy
 *
d©_íåy
 = 
NULL
;

1134 
sk_buff
 *
skb_√w
;

1135 
√t_devi˚
 *
mesh_iÁ˚
 = 
b©_¥iv
->mesh_iface;

1136 
hdr_size
 = 0;

1137 
vid
;

1139 i‡(!
	`©omic_ªad
(&
b©_¥iv
->
di°ribuãd_¨p_èbÀ
))

1140 
out
;

1142 
vid
 = 
	`b©adv_d©_gë_vid
(
skb
, &
hdr_size
);

1144 
ty≥
 = 
	`b©adv_¨p_gë_ty≥
(
b©_¥iv
, 
skb
, 
hdr_size
);

1148 i‡(
ty≥
 !
ARPOP_REQUEST
)

1149 
out
;

1151 
	`b©adv_dbg_¨p
(
b©_¥iv
, 
skb
, 
hdr_size
, "Parsing outgoing ARP REQUEST");

1153 
ù_§c
 = 
	`b©adv_¨p_ù_§c
(
skb
, 
hdr_size
);

1154 
hw_§c
 = 
	`b©adv_¨p_hw_§c
(
skb
, 
hdr_size
);

1155 
ù_d°
 = 
	`b©adv_¨p_ù_d°
(
skb
, 
hdr_size
);

1157 
	`b©adv_d©_íåy_add
(
b©_¥iv
, 
ù_§c
, 
hw_§c
, 
vid
);

1159 
d©_íåy
 = 
	`b©adv_d©_íåy_hash_föd
(
b©_¥iv
, 
ù_d°
, 
vid
);

1160 i‡(
d©_íåy
) {

1169 i‡(
	`b©adv_is_my_˛õ¡
(
b©_¥iv
, 
d©_íåy
->
mac_addr
, 
vid
)) {

1170 
ªt
 = 
åue
;

1171 
out
;

1179 i‡(!
	`b©adv_bœ_check_˛aim
(
b©_¥iv
,

1180 
d©_íåy
->
mac_addr
, 
vid
)) {

1181 
	`b©adv_dbg
(
BATADV_DBG_DAT
, 
b©_¥iv
,

1183 
d©_íåy
->
mac_addr
);

1184 
ªt
 = 
åue
;

1185 
out
;

1188 
skb_√w
 = 
	`b©adv_d©_¨p_¸óã_ª∂y
(
b©_¥iv
, 
ù_d°
, 
ù_§c
,

1189 
d©_íåy
->
mac_addr
,

1190 
hw_§c
, 
vid
);

1191 i‡(!
skb_√w
)

1192 
out
;

1194 
skb_√w
->
¥Ÿocﬁ
 = 
	`ëh_ty≥_å™s
(skb_√w, 
mesh_iÁ˚
);

1196 
	`b©adv_öc_cou¡î
(
b©_¥iv
, 
BATADV_CNT_RX
);

1197 
	`b©adv_add_cou¡î
(
b©_¥iv
, 
BATADV_CNT_RX_BYTES
,

1198 
skb
->
Àn
 + 
ETH_HLEN
 + 
hdr_size
);

1200 
	`√tif_rx
(
skb_√w
);

1201 
	`b©adv_dbg
(
BATADV_DBG_DAT
, 
b©_¥iv
, "ARPÑequestÑepliedÜocally\n");

1202 
ªt
 = 
åue
;

1205 
ªt
 = 
	`b©adv_d©_f‹w¨d_d©a
(
b©_¥iv
, 
skb
, 
ù_d°
, 
vid
,

1206 
BATADV_P_DAT_DHT_GET
);

1208 
out
:

1209 
	`b©adv_d©_íåy_put
(
d©_íåy
);

1210  
ªt
;

1211 
	}
}

1222 
boﬁ
 
	$b©adv_d©_¢o›_öcomög_¨p_ªque°
(
b©adv_¥iv
 *
b©_¥iv
,

1223 
sk_buff
 *
skb
, 
hdr_size
)

1225 
u16
 
ty≥
;

1226 
__be32
 
ù_§c
, 
ù_d°
;

1227 
u8
 *
hw_§c
;

1228 
sk_buff
 *
skb_√w
;

1229 
b©adv_d©_íåy
 *
d©_íåy
 = 
NULL
;

1230 
boﬁ
 
ªt
 = 
Ál£
;

1231 
vid
;

1232 
îr
;

1234 i‡(!
	`©omic_ªad
(&
b©_¥iv
->
di°ribuãd_¨p_èbÀ
))

1235 
out
;

1237 
vid
 = 
	`b©adv_d©_gë_vid
(
skb
, &
hdr_size
);

1239 
ty≥
 = 
	`b©adv_¨p_gë_ty≥
(
b©_¥iv
, 
skb
, 
hdr_size
);

1240 i‡(
ty≥
 !
ARPOP_REQUEST
)

1241 
out
;

1243 
hw_§c
 = 
	`b©adv_¨p_hw_§c
(
skb
, 
hdr_size
);

1244 
ù_§c
 = 
	`b©adv_¨p_ù_§c
(
skb
, 
hdr_size
);

1245 
ù_d°
 = 
	`b©adv_¨p_ù_d°
(
skb
, 
hdr_size
);

1247 
	`b©adv_dbg_¨p
(
b©_¥iv
, 
skb
, 
hdr_size
, "Parsing incoming ARP REQUEST");

1249 
	`b©adv_d©_íåy_add
(
b©_¥iv
, 
ù_§c
, 
hw_§c
, 
vid
);

1251 
d©_íåy
 = 
	`b©adv_d©_íåy_hash_föd
(
b©_¥iv
, 
ù_d°
, 
vid
);

1252 i‡(!
d©_íåy
)

1253 
out
;

1255 
skb_√w
 = 
	`b©adv_d©_¨p_¸óã_ª∂y
(
b©_¥iv
, 
ù_d°
, 
ù_§c
,

1256 
d©_íåy
->
mac_addr
, 
hw_§c
, 
vid
);

1257 i‡(!
skb_√w
)

1258 
out
;

1264 i‡(
hdr_size
 =(
b©adv_uniˇ°_4addr_∑ckë
))

1265 
îr
 = 
	`b©adv_£nd_skb_vü_â_4addr
(
b©_¥iv
, 
skb_√w
,

1266 
BATADV_P_DAT_CACHE_REPLY
,

1267 
NULL
, 
vid
);

1269 
îr
 = 
	`b©adv_£nd_skb_vü_â
(
b©_¥iv
, 
skb_√w
, 
NULL
, 
vid
);

1271 i‡(
îr
 !
NET_XMIT_DROP
) {

1272 
	`b©adv_öc_cou¡î
(
b©_¥iv
, 
BATADV_CNT_DAT_CACHED_REPLY_TX
);

1273 
ªt
 = 
åue
;

1275 
out
:

1276 
	`b©adv_d©_íåy_put
(
d©_íåy
);

1277 i‡(
ªt
)

1278 
	`k‰ì_skb
(
skb
);

1279  
ªt
;

1280 
	}
}

1287 
	$b©adv_d©_¢o›_outgoög_¨p_ª∂y
(
b©adv_¥iv
 *
b©_¥iv
,

1288 
sk_buff
 *
skb
)

1290 
u16
 
ty≥
;

1291 
__be32
 
ù_§c
, 
ù_d°
;

1292 
u8
 *
hw_§c
, *
hw_d°
;

1293 
hdr_size
 = 0;

1294 
vid
;

1296 i‡(!
	`©omic_ªad
(&
b©_¥iv
->
di°ribuãd_¨p_èbÀ
))

1299 
vid
 = 
	`b©adv_d©_gë_vid
(
skb
, &
hdr_size
);

1301 
ty≥
 = 
	`b©adv_¨p_gë_ty≥
(
b©_¥iv
, 
skb
, 
hdr_size
);

1302 i‡(
ty≥
 !
ARPOP_REPLY
)

1305 
	`b©adv_dbg_¨p
(
b©_¥iv
, 
skb
, 
hdr_size
, "Parsing outgoing ARP REPLY");

1307 
hw_§c
 = 
	`b©adv_¨p_hw_§c
(
skb
, 
hdr_size
);

1308 
ù_§c
 = 
	`b©adv_¨p_ù_§c
(
skb
, 
hdr_size
);

1309 
hw_d°
 = 
	`b©adv_¨p_hw_d°
(
skb
, 
hdr_size
);

1310 
ù_d°
 = 
	`b©adv_¨p_ù_d°
(
skb
, 
hdr_size
);

1312 
	`b©adv_d©_íåy_add
(
b©_¥iv
, 
ù_§c
, 
hw_§c
, 
vid
);

1313 
	`b©adv_d©_íåy_add
(
b©_¥iv
, 
ù_d°
, 
hw_d°
, 
vid
);

1318 
	`b©adv_d©_f‹w¨d_d©a
(
b©_¥iv
, 
skb
, 
ù_§c
, 
vid
,

1319 
BATADV_P_DAT_DHT_PUT
);

1320 
	`b©adv_d©_f‹w¨d_d©a
(
b©_¥iv
, 
skb
, 
ù_d°
, 
vid
,

1321 
BATADV_P_DAT_DHT_PUT
);

1322 
	}
}

1334 
boﬁ
 
	$b©adv_d©_¢o›_öcomög_¨p_ª∂y
(
b©adv_¥iv
 *
b©_¥iv
,

1335 
sk_buff
 *
skb
, 
hdr_size
)

1337 
b©adv_d©_íåy
 *
d©_íåy
 = 
NULL
;

1338 
u16
 
ty≥
;

1339 
__be32
 
ù_§c
, 
ù_d°
;

1340 
u8
 *
hw_§c
, *
hw_d°
;

1341 
boﬁ
 
dr›≥d
 = 
Ál£
;

1342 
vid
;

1344 i‡(!
	`©omic_ªad
(&
b©_¥iv
->
di°ribuãd_¨p_èbÀ
))

1345 
out
;

1347 
vid
 = 
	`b©adv_d©_gë_vid
(
skb
, &
hdr_size
);

1349 
ty≥
 = 
	`b©adv_¨p_gë_ty≥
(
b©_¥iv
, 
skb
, 
hdr_size
);

1350 i‡(
ty≥
 !
ARPOP_REPLY
)

1351 
out
;

1353 
	`b©adv_dbg_¨p
(
b©_¥iv
, 
skb
, 
hdr_size
, "Parsing incoming ARP REPLY");

1355 
hw_§c
 = 
	`b©adv_¨p_hw_§c
(
skb
, 
hdr_size
);

1356 
ù_§c
 = 
	`b©adv_¨p_ù_§c
(
skb
, 
hdr_size
);

1357 
hw_d°
 = 
	`b©adv_¨p_hw_d°
(
skb
, 
hdr_size
);

1358 
ù_d°
 = 
	`b©adv_¨p_ù_d°
(
skb
, 
hdr_size
);

1366 
d©_íåy
 = 
	`b©adv_d©_íåy_hash_föd
(
b©_¥iv
, 
ù_§c
, 
vid
);

1367 i‡(
d©_íåy
 && 
	`b©adv_com∑ª_ëh
(
hw_§c
, d©_íåy->
mac_addr
)) {

1368 
	`b©adv_dbg
(
BATADV_DBG_DAT
, 
b©_¥iv
, "Doubled ARPÑeplyÑemoved: ARP MSG = [src: %pM-%pI4 dst: %pM-%pI4]; dat_entry: %pM-%pI4\n",

1369 
hw_§c
, &
ù_§c
, 
hw_d°
, &
ù_d°
,

1370 
d©_íåy
->
mac_addr
, &d©_íåy->
ù
);

1371 
dr›≥d
 = 
åue
;

1377 
	`b©adv_d©_íåy_add
(
b©_¥iv
, 
ù_§c
, 
hw_§c
, 
vid
);

1378 
	`b©adv_d©_íåy_add
(
b©_¥iv
, 
ù_d°
, 
hw_d°
, 
vid
);

1380 i‡(
dr›≥d
)

1381 
out
;

1389 i‡(!
	`b©adv_bœ_check_˛aim
(
b©_¥iv
, 
hw_§c
, 
vid
)) {

1390 
	`b©adv_dbg
(
BATADV_DBG_DAT
, 
b©_¥iv
,

1392 
hw_§c
);

1393 
dr›≥d
 = 
åue
;

1394 
out
;

1400 
dr›≥d
 = !
	`b©adv_is_my_˛õ¡
(
b©_¥iv
, 
hw_d°
, 
vid
);

1405 
dr›≥d
 |
	`b©adv_is_my_˛õ¡
(
b©_¥iv
, 
hw_§c
, 
vid
);

1406 
out
:

1407 i‡(
dr›≥d
)

1408 
	`k‰ì_skb
(
skb
);

1409 
	`b©adv_d©_íåy_put
(
d©_íåy
);

1411  
dr›≥d
;

1412 
	}
}

1425 
boﬁ


1426 
	$b©adv_d©_check_dh˝_ùudp
(
sk_buff
 *
skb
, 
__be32
 *
ù_§c
)

1428 
off£t
 = 
	`skb_√tw‹k_off£t
(
skb
);

1429 
udphdr
 *udphdr, 
_udphdr
;

1430 
ùhdr
 *ùhdr, 
_ùhdr
;

1432 
ùhdr
 = 
	`skb_hódî_poöãr
(
skb
, 
off£t
, (
_ùhdr
), &_iphdr);

1433 i‡(!
ùhdr
 || iphdr->
vîsi⁄
 !4 || iphdr->
ihl
 * 4 < (
_ùhdr
))

1434  
Ál£
;

1436 i‡(
ùhdr
->
¥Ÿocﬁ
 !
IPPROTO_UDP
)

1437  
Ál£
;

1439 
off£t
 +
ùhdr
->
ihl
 * 4;

1440 
	`skb_£t_å™•‹t_hódî
(
skb
, 
off£t
);

1442 
udphdr
 = 
	`skb_hódî_poöãr
(
skb
, 
off£t
, (
_udphdr
), &_udphdr);

1443 i‡(!
udphdr
 || udphdr->
sour˚
 !
	`ht⁄s
(67))

1444  
Ál£
;

1446 *
ù_§c
 = 
	`gë_u«lig√d
(&
ùhdr
->
ßddr
);

1448  
åue
;

1449 
	}
}

1466 
	$b©adv_d©_check_dh˝
(
sk_buff
 *
skb
, 
__be16
 
¥Ÿo
, 
__be32
 *
ù_§c
)

1468 
__be32
 *
magic
, 
_magic
;

1469 
off£t
;

1471 
__u8
 
›
;

1472 
__u8
 
hty≥
;

1473 
__u8
 
hÀn
;

1474 
__u8
 
h›s
;

1475 } *
dh˝_h
, 
_dh˝_h
;

1477 i‡(
¥Ÿo
 !
	`ht⁄s
(
ETH_P_IP
))

1478  -
EINVAL
;

1480 i‡(!
	`b©adv_d©_check_dh˝_ùudp
(
skb
, 
ù_§c
))

1481  -
EINVAL
;

1483 
off£t
 = 
	`skb_å™•‹t_off£t
(
skb
Ë+ (
udphdr
);

1484 i‡(
skb
->
Àn
 < 
off£t
 + (
b©adv_dh˝_∑ckë
))

1485  -
EINVAL
;

1487 
dh˝_h
 = 
	`skb_hódî_poöãr
(
skb
, 
off£t
, (
_dh˝_h
), &_dhcp_h);

1488 i‡(!
dh˝_h
 || dh˝_h->
hty≥
 !
BATADV_HTYPE_ETHERNET
 ||

1489 
dh˝_h
->
hÀn
 !
ETH_ALEN
)

1490  -
EINVAL
;

1492 
off£t
 +
	`off£tof
(
b©adv_dh˝_∑ckë
, 
magic
);

1494 
magic
 = 
	`skb_hódî_poöãr
(
skb
, 
off£t
, (
_magic
), &_magic);

1495 i‡(!
magic
 || 
	`gë_u«lig√d
(magicË!
	`ht⁄l
(
BATADV_DHCP_MAGIC
))

1496  -
EINVAL
;

1498  
dh˝_h
->
›
;

1499 
	}
}

1513 
	$b©adv_d©_gë_dh˝_mesßge_ty≥
(
sk_buff
 *
skb
)

1515 
off£t
 = 
	`skb_å™•‹t_off£t
(
skb
Ë+ (
udphdr
);

1516 
u8
 *
ty≥
, 
_ty≥
;

1518 
u8
 
ty≥
;

1519 
u8
 
Àn
;

1520 } *
é
, 
_é
;

1522 
off£t
 +(
b©adv_dh˝_∑ckë
);

1524 (
é
 = 
	`skb_hódî_poöãr
(
skb
, 
off£t
, (
_é
), &_tl))) {

1525 i‡(
é
->
ty≥
 =
BATADV_DHCP_OPT_MSG_TYPE
)

1528 i‡(
é
->
ty≥
 =
BATADV_DHCP_OPT_END
)

1531 i‡(
é
->
ty≥
 =
BATADV_DHCP_OPT_PAD
)

1532 
off£t
++;

1534 
off£t
 +
é
->
Àn
 + (
_é
);

1538 i‡(!
é
 ||Ål->
ty≥
 !
BATADV_DHCP_OPT_MSG_TYPE
 ||

1539 
é
->
Àn
 !(
_ty≥
))

1540  -
EINVAL
;

1542 
off£t
 +(
_é
);

1544 
ty≥
 = 
	`skb_hódî_poöãr
(
skb
, 
off£t
, (
_ty≥
), &_type);

1545 i‡(!
ty≥
)

1546  -
EINVAL
;

1548  *
ty≥
;

1549 
	}
}

1561 
boﬁ
 
	$b©adv_d©_dh˝_gë_yüddr
(
sk_buff
 *
skb
, 
__be32
 *
buf
)

1563 
off£t
 = 
	`skb_å™•‹t_off£t
(
skb
Ë+ (
udphdr
);

1564 
__be32
 *
yüddr
;

1566 
off£t
 +
	`off£tof
(
b©adv_dh˝_∑ckë
, 
yüddr
);

1567 
yüddr
 = 
	`skb_hódî_poöãr
(
skb
, 
off£t
, 
BATADV_DHCP_YIADDR_LEN
, 
buf
);

1569 i‡(!
yüddr
)

1570  
Ál£
;

1572 i‡(
yüddr
 !
buf
)

1573 *
buf
 = 
	`gë_u«lig√d
(
yüddr
);

1575  
åue
;

1576 
	}
}

1588 
boﬁ
 
	$b©adv_d©_gë_dh˝_chaddr
(
sk_buff
 *
skb
, 
u8
 *
buf
)

1590 
off£t
 = 
	`skb_å™•‹t_off£t
(
skb
Ë+ (
udphdr
);

1591 
u8
 *
chaddr
;

1593 
off£t
 +
	`off£tof
(
b©adv_dh˝_∑ckë
, 
chaddr
);

1594 
chaddr
 = 
	`skb_hódî_poöãr
(
skb
, 
off£t
, 
BATADV_DHCP_CHADDR_LEN
, 
buf
);

1596 i‡(!
chaddr
)

1597  
Ál£
;

1599 i‡(
chaddr
 !
buf
)

1600 
	`mem˝y
(
buf
, 
chaddr
, 
BATADV_DHCP_CHADDR_LEN
);

1602  
åue
;

1603 
	}
}

1621 
	$b©adv_d©_put_dh˝
(
b©adv_¥iv
 *
b©_¥iv
, 
u8
 *
chaddr
,

1622 
__be32
 
yüddr
, 
u8
 *
hw_d°
, __be32 
ù_d°
,

1623 
vid
)

1625 
sk_buff
 *
skb
;

1627 
skb
 = 
	`b©adv_d©_¨p_¸óã_ª∂y
(
b©_¥iv
, 
yüddr
, 
ù_d°
, 
chaddr
,

1628 
hw_d°
, 
vid
);

1629 i‡(!
skb
)

1632 
	`skb_£t_√tw‹k_hódî
(
skb
, 
ETH_HLEN
);

1634 
	`b©adv_d©_íåy_add
(
b©_¥iv
, 
yüddr
, 
chaddr
, 
vid
);

1635 
	`b©adv_d©_íåy_add
(
b©_¥iv
, 
ù_d°
, 
hw_d°
, 
vid
);

1637 
	`b©adv_d©_f‹w¨d_d©a
(
b©_¥iv
, 
skb
, 
yüddr
, 
vid
,

1638 
BATADV_P_DAT_DHT_PUT
);

1639 
	`b©adv_d©_f‹w¨d_d©a
(
b©_¥iv
, 
skb
, 
ù_d°
, 
vid
,

1640 
BATADV_P_DAT_DHT_PUT
);

1642 
	`c⁄sume_skb
(
skb
);

1644 
	`b©adv_dbg
(
BATADV_DBG_DAT
, 
b©_¥iv
,

1646 &
ù_d°
, 
hw_d°
, 
	`b©adv_¥öt_vid
(
vid
));

1647 
	`b©adv_dbg
(
BATADV_DBG_DAT
, 
b©_¥iv
,

1649 &
yüddr
, 
chaddr
, 
	`b©adv_¥öt_vid
(
vid
));

1650 
	}
}

1668 
boﬁ


1669 
	$b©adv_d©_check_dh˝_ack
(
sk_buff
 *
skb
, 
__be16
 
¥Ÿo
, 
__be32
 *
ù_§c
,

1670 
u8
 *
chaddr
, 
__be32
 *
yüddr
)

1672 
ty≥
;

1674 
ty≥
 = 
	`b©adv_d©_check_dh˝
(
skb
, 
¥Ÿo
, 
ù_§c
);

1675 i‡(
ty≥
 !
BATADV_BOOTREPLY
)

1676  
Ál£
;

1678 
ty≥
 = 
	`b©adv_d©_gë_dh˝_mesßge_ty≥
(
skb
);

1679 i‡(
ty≥
 !
BATADV_DHCPACK
)

1680  
Ál£
;

1682 i‡(!
	`b©adv_d©_dh˝_gë_yüddr
(
skb
, 
yüddr
))

1683  
Ál£
;

1685 i‡(!
	`b©adv_d©_gë_dh˝_chaddr
(
skb
, 
chaddr
))

1686  
Ál£
;

1688  
åue
;

1689 
	}
}

1706 
	$b©adv_d©_¢o›_outgoög_dh˝_ack
(
b©adv_¥iv
 *
b©_¥iv
,

1707 
sk_buff
 *
skb
,

1708 
__be16
 
¥Ÿo
,

1709 
vid
)

1711 
u8
 
chaddr
[
BATADV_DHCP_CHADDR_LEN
];

1712 
__be32
 
ù_§c
, 
yüddr
;

1714 i‡(!
	`©omic_ªad
(&
b©_¥iv
->
di°ribuãd_¨p_èbÀ
))

1717 i‡(!
	`b©adv_d©_check_dh˝_ack
(
skb
, 
¥Ÿo
, &
ù_§c
, 
chaddr
, &
yüddr
))

1720 
	`b©adv_d©_put_dh˝
(
b©_¥iv
, 
chaddr
, 
yüddr
, 
	`ëh_hdr
(
skb
)->
h_sour˚
,

1721 
ù_§c
, 
vid
);

1722 
	}
}

1734 
	$b©adv_d©_¢o›_öcomög_dh˝_ack
(
b©adv_¥iv
 *
b©_¥iv
,

1735 
sk_buff
 *
skb
, 
hdr_size
)

1737 
u8
 
chaddr
[
BATADV_DHCP_CHADDR_LEN
];

1738 
ëhhdr
 *ethhdr;

1739 
__be32
 
ù_§c
, 
yüddr
;

1740 
vid
;

1741 
__be16
 
¥Ÿo
;

1742 
u8
 *
hw_§c
;

1744 i‡(!
	`©omic_ªad
(&
b©_¥iv
->
di°ribuãd_¨p_èbÀ
))

1747 i‡(
	`u∆ikñy
(!
	`pskb_may_puŒ
(
skb
, 
hdr_size
 + 
ETH_HLEN
)))

1750 
ëhhdr
 = (ëhhd∏*)(
skb
->
d©a
 + 
hdr_size
);

1751 
	`skb_£t_√tw‹k_hódî
(
skb
, 
hdr_size
 + 
ETH_HLEN
);

1752 
¥Ÿo
 = 
ëhhdr
->
h_¥Ÿo
;

1754 i‡(!
	`b©adv_d©_check_dh˝_ack
(
skb
, 
¥Ÿo
, &
ù_§c
, 
chaddr
, &
yüddr
))

1757 
hw_§c
 = 
ëhhdr
->
h_sour˚
;

1758 
vid
 = 
	`b©adv_d©_gë_vid
(
skb
, &
hdr_size
);

1760 
	`b©adv_d©_íåy_add
(
b©_¥iv
, 
yüddr
, 
chaddr
, 
vid
);

1761 
	`b©adv_d©_íåy_add
(
b©_¥iv
, 
ù_§c
, 
hw_§c
, 
vid
);

1763 
	`b©adv_dbg
(
BATADV_DBG_DAT
, 
b©_¥iv
,

1765 &
ù_§c
, 
hw_§c
, 
	`b©adv_¥öt_vid
(
vid
));

1766 
	`b©adv_dbg
(
BATADV_DBG_DAT
, 
b©_¥iv
,

1768 &
yüddr
, 
chaddr
, 
	`b©adv_¥öt_vid
(
vid
));

1769 
	}
}

1779 
boﬁ
 
	$b©adv_d©_dr›_brﬂdˇ°_∑ckë
(
b©adv_¥iv
 *
b©_¥iv
,

1780 
b©adv_f‹w_∑ckë
 *
f‹w_∑ckë
)

1782 
u16
 
ty≥
;

1783 
__be32
 
ù_d°
;

1784 
b©adv_d©_íåy
 *
d©_íåy
 = 
NULL
;

1785 
boﬁ
 
ªt
 = 
Ál£
;

1786 
hdr_size
 = (
b©adv_bˇ°_∑ckë
);

1787 
vid
;

1789 i‡(!
	`©omic_ªad
(&
b©_¥iv
->
di°ribuãd_¨p_èbÀ
))

1790 
out
;

1795 i‡(
	`b©adv_f‹w_∑ckë_is_ªbrﬂdˇ°
(
f‹w_∑ckë
))

1796 
out
;

1798 
vid
 = 
	`b©adv_d©_gë_vid
(
f‹w_∑ckë
->
skb
, &
hdr_size
);

1800 
ty≥
 = 
	`b©adv_¨p_gë_ty≥
(
b©_¥iv
, 
f‹w_∑ckë
->
skb
, 
hdr_size
);

1801 i‡(
ty≥
 !
ARPOP_REQUEST
)

1802 
out
;

1804 
ù_d°
 = 
	`b©adv_¨p_ù_d°
(
f‹w_∑ckë
->
skb
, 
hdr_size
);

1805 
d©_íåy
 = 
	`b©adv_d©_íåy_hash_föd
(
b©_¥iv
, 
ù_d°
, 
vid
);

1807 i‡(!
d©_íåy
) {

1808 
	`b©adv_dbg
(
BATADV_DBG_DAT
, 
b©_¥iv
,

1809 "ARP Reque° f‹ %pI4: fÆlback\n", &
ù_d°
);

1810 
out
;

1813 
	`b©adv_dbg
(
BATADV_DBG_DAT
, 
b©_¥iv
,

1814 "ARP Reque° f‹ %pI4: fÆlbackÖªvíãd\n", &
ù_d°
);

1815 
ªt
 = 
åue
;

1817 
out
:

1818 
	`b©adv_d©_íåy_put
(
d©_íåy
);

1819  
ªt
;

1820 
	}
}

	@net/batman-adv/distributed-arp-table.h

7 #i‚de‡
_NET_BATMAN_ADV_DISTRIBUTED_ARP_TABLE_H_


8 
	#_NET_BATMAN_ADV_DISTRIBUTED_ARP_TABLE_H_


	)

10 
	~"maö.h
"

12 
	~<löux/compûî.h
>

13 
	~<löux/√tdevi˚.h
>

14 
	~<löux/√éök.h
>

15 
	~<löux/skbuff.h
>

16 
	~<löux/ty≥s.h
>

17 
	~<u≠i/löux/b©adv_∑ckë.h
>

19 
	~"‹igö©‹.h
"

21 #ifde‡
CONFIG_BATMAN_ADV_DAT


24 
	#BATADV_DAT_ADDR_MAX
 ((
b©adv_d©_addr_t
)~(b©adv_d©_addr_t)0)

	)

26 
b©adv_d©_°©us_upd©e
(
√t_devi˚
 *
√t_dev
);

27 
boﬁ
 
b©adv_d©_¢o›_outgoög_¨p_ªque°
(
b©adv_¥iv
 *
b©_¥iv
,

28 
sk_buff
 *
skb
);

29 
boﬁ
 
b©adv_d©_¢o›_öcomög_¨p_ªque°
(
b©adv_¥iv
 *
b©_¥iv
,

30 
sk_buff
 *
skb
, 
hdr_size
);

31 
b©adv_d©_¢o›_outgoög_¨p_ª∂y
(
b©adv_¥iv
 *
b©_¥iv
,

32 
sk_buff
 *
skb
);

33 
boﬁ
 
b©adv_d©_¢o›_öcomög_¨p_ª∂y
(
b©adv_¥iv
 *
b©_¥iv
,

34 
sk_buff
 *
skb
, 
hdr_size
);

35 
b©adv_d©_¢o›_outgoög_dh˝_ack
(
b©adv_¥iv
 *
b©_¥iv
,

36 
sk_buff
 *
skb
,

37 
__be16
 
¥Ÿo
,

38 
vid
);

39 
b©adv_d©_¢o›_öcomög_dh˝_ack
(
b©adv_¥iv
 *
b©_¥iv
,

40 
sk_buff
 *
skb
, 
hdr_size
);

41 
boﬁ
 
b©adv_d©_dr›_brﬂdˇ°_∑ckë
(
b©adv_¥iv
 *
b©_¥iv
,

42 
b©adv_f‹w_∑ckë
 *
f‹w_∑ckë
);

48 
ölöe
 

49 
	$b©adv_d©_öô_‹ig_node_addr
(
b©adv_‹ig_node
 *
‹ig_node
)

51 
u32
 
addr
;

53 
addr
 = 
	`b©adv_choo£_‹ig
(
‹ig_node
->
‹ig
, 
BATADV_DAT_ADDR_MAX
);

54 
‹ig_node
->
d©_addr
 = (
b©adv_d©_addr_t
)
addr
;

55 
	}
}

62 
ölöe
 

63 
	$b©adv_d©_öô_own_addr
(
b©adv_¥iv
 *
b©_¥iv
,

64 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
)

66 
u32
 
addr
;

68 
addr
 = 
	`b©adv_choo£_‹ig
(
¥im¨y_if
->
√t_dev
->
dev_addr
,

69 
BATADV_DAT_ADDR_MAX
);

71 
b©_¥iv
->
d©
.
addr
 = (
b©adv_d©_addr_t
)addr;

72 
	}
}

74 
b©adv_d©_öô
(
b©adv_¥iv
 *
b©_¥iv
);

75 
b©adv_d©_‰ì
(
b©adv_¥iv
 *
b©_¥iv
);

76 
b©adv_d©_ˇche_dump
(
sk_buff
 *
msg
, 
√éök_ˇŒback
 *
cb
);

85 
ölöe
 
	$b©adv_d©_öc_cou¡î
(
b©adv_¥iv
 *
b©_¥iv
,

86 
u8
 
subty≥
)

88 
subty≥
) {

89 
BATADV_P_DAT_DHT_GET
:

90 
	`b©adv_öc_cou¡î
(
b©_¥iv
,

91 
BATADV_CNT_DAT_GET_RX
);

93 
BATADV_P_DAT_DHT_PUT
:

94 
	`b©adv_öc_cou¡î
(
b©_¥iv
,

95 
BATADV_CNT_DAT_PUT_RX
);

98 
	}
}

102 
ölöe
 
	$b©adv_d©_°©us_upd©e
(
√t_devi˚
 *
√t_dev
)

104 
	}
}

106 
ölöe
 
boﬁ


107 
	$b©adv_d©_¢o›_outgoög_¨p_ªque°
(
b©adv_¥iv
 *
b©_¥iv
,

108 
sk_buff
 *
skb
)

110  
Ál£
;

111 
	}
}

113 
ölöe
 
boﬁ


114 
	$b©adv_d©_¢o›_öcomög_¨p_ªque°
(
b©adv_¥iv
 *
b©_¥iv
,

115 
sk_buff
 *
skb
, 
hdr_size
)

117  
Ál£
;

118 
	}
}

120 
ölöe
 
boﬁ


121 
	$b©adv_d©_¢o›_outgoög_¨p_ª∂y
(
b©adv_¥iv
 *
b©_¥iv
,

122 
sk_buff
 *
skb
)

124  
Ál£
;

125 
	}
}

127 
ölöe
 
boﬁ


128 
	$b©adv_d©_¢o›_öcomög_¨p_ª∂y
(
b©adv_¥iv
 *
b©_¥iv
,

129 
sk_buff
 *
skb
, 
hdr_size
)

131  
Ál£
;

132 
	}
}

134 
ölöe
 

135 
	$b©adv_d©_¢o›_outgoög_dh˝_ack
(
b©adv_¥iv
 *
b©_¥iv
,

136 
sk_buff
 *
skb
, 
__be16
 
¥Ÿo
,

137 
vid
)

139 
	}
}

141 
ölöe
 

142 
	$b©adv_d©_¢o›_öcomög_dh˝_ack
(
b©adv_¥iv
 *
b©_¥iv
,

143 
sk_buff
 *
skb
, 
hdr_size
)

145 
	}
}

147 
ölöe
 
boﬁ


148 
	$b©adv_d©_dr›_brﬂdˇ°_∑ckë
(
b©adv_¥iv
 *
b©_¥iv
,

149 
b©adv_f‹w_∑ckë
 *
f‹w_∑ckë
)

151  
Ál£
;

152 
	}
}

154 
ölöe
 

155 
	$b©adv_d©_öô_‹ig_node_addr
(
b©adv_‹ig_node
 *
‹ig_node
)

157 
	}
}

159 
ölöe
 
	$b©adv_d©_öô_own_addr
(
b©adv_¥iv
 *
b©_¥iv
,

160 
b©adv_h¨d_iÁ˚
 *
iÁ˚
)

162 
	}
}

164 
ölöe
 
	$b©adv_d©_öô
(
b©adv_¥iv
 *
b©_¥iv
)

167 
	}
}

169 
ölöe
 
	$b©adv_d©_‰ì
(
b©adv_¥iv
 *
b©_¥iv
)

171 
	}
}

173 
ölöe
 

174 
	$b©adv_d©_ˇche_dump
(
sk_buff
 *
msg
, 
√éök_ˇŒback
 *
cb
)

176  -
EOPNOTSUPP
;

177 
	}
}

179 
ölöe
 
	$b©adv_d©_öc_cou¡î
(
b©adv_¥iv
 *
b©_¥iv
,

180 
u8
 
subty≥
)

182 
	}
}

	@net/batman-adv/fragmentation.c

7 
	~"‰agmíèti⁄.h
"

8 
	~"maö.h
"

10 
	~<löux/©omic.h
>

11 
	~<löux/byã‹dî/gíîic.h
>

12 
	~<löux/î∫o.h
>

13 
	~<löux/ëhîdevi˚.h
>

14 
	~<löux/gÂ.h
>

15 
	~<löux/if_ëhî.h
>

16 
	~<löux/jiffõs.h
>

17 
	~<löux/lockdï.h
>

18 
	~<löux/mömax.h
>

19 
	~<löux/√tdevi˚.h
>

20 
	~<löux/skbuff.h
>

21 
	~<löux/¶ab.h
>

22 
	~<löux/•ölock.h
>

23 
	~<löux/°rög.h
>

24 
	~<u≠i/löux/b©adv_∑ckë.h
>

26 
	~"h¨d-öãrÁ˚.h
"

27 
	~"‹igö©‹.h
"

28 
	~"£nd.h
"

37 
	$b©adv_‰ag_˛ór_chaö
(
hli°_hód
 *
hód
, 
boﬁ
 
dr›≥d
)

39 
b©adv_‰ag_li°_íåy
 *
íåy
;

40 
hli°_node
 *
node
;

42 
	`hli°_f‹_óch_íåy_ß„
(
íåy
, 
node
, 
hód
, 
li°
) {

43 
	`hli°_dñ
(&
íåy
->
li°
);

45 i‡(
dr›≥d
)

46 
	`k‰ì_skb
(
íåy
->
skb
);

48 
	`c⁄sume_skb
(
íåy
->
skb
);

50 
	`k‰ì
(
íåy
);

52 
	}
}

59 
	$b©adv_‰ag_purge_‹ig
(
b©adv_‹ig_node
 *
‹ig_node
,

60 
	$boﬁ
 (*
check_cb
)(
b©adv_‰ag_èbÀ_íåy
 *))

62 
b©adv_‰ag_èbÀ_íåy
 *
chaö
;

63 
u8
 
i
;

65 
i
 = 0; i < 
BATADV_FRAG_BUFFER_COUNT
; i++) {

66 
chaö
 = &
‹ig_node
->
‰agmíts
[
i
];

67 
	`•ö_lock_bh
(&
chaö
->
lock
);

69 i‡(!
check_cb
 || 
	`check_cb
(
chaö
)) {

70 
	`b©adv_‰ag_˛ór_chaö
(&
chaö
->
‰agmít_li°
, 
åue
);

71 
chaö
->
size
 = 0;

74 
	`•ö_u∆ock_bh
(&
chaö
->
lock
);

76 
	}
}

83 
	$b©adv_‰ag_size_limô
()

85 
limô
 = 
BATADV_FRAG_MAX_FRAG_SIZE
;

87 
limô
 -(
b©adv_‰ag_∑ckë
);

88 
limô
 *
BATADV_FRAG_MAX_FRAGMENTS
;

90  
limô
;

91 
	}
}

106 
boﬁ
 
	$b©adv_‰ag_öô_chaö
(
b©adv_‰ag_èbÀ_íåy
 *
chaö
,

107 
u16
 
£qno
)

109 
	`lockdï_as£π_hñd
(&
chaö
->
lock
);

111 i‡(
chaö
->
£qno
 == seqno)

112  
Ál£
;

114 i‡(!
	`hli°_em±y
(&
chaö
->
‰agmít_li°
))

115 
	`b©adv_‰ag_˛ór_chaö
(&
chaö
->
‰agmít_li°
, 
åue
);

117 
chaö
->
size
 = 0;

118 
chaö
->
£qno
 = seqno;

120  
åue
;

121 
	}
}

136 
boﬁ
 
	$b©adv_‰ag_ö£π_∑ckë
(
b©adv_‹ig_node
 *
‹ig_node
,

137 
sk_buff
 *
skb
,

138 
hli°_hód
 *
chaö_out
)

140 
b©adv_‰ag_èbÀ_íåy
 *
chaö
;

141 
b©adv_‰ag_li°_íåy
 *
‰ag_íåy_√w
 = 
NULL
, *
‰ag_íåy_cuº
;

142 
b©adv_‰ag_li°_íåy
 *
‰ag_íåy_œ°
 = 
NULL
;

143 
b©adv_‰ag_∑ckë
 *
‰ag_∑ckë
;

144 
u8
 
buckë
;

145 
u16
 
£qno
, 
hdr_size
 = (
b©adv_‰ag_∑ckë
);

146 
boﬁ
 
ªt
 = 
Ál£
;

152 i‡(
	`skb_löórize
(
skb
) < 0)

153 
îr
;

155 
‰ag_∑ckë
 = (
b©adv_‰ag_∑ckë
 *)
skb
->
d©a
;

156 
£qno
 = 
	`¡ohs
(
‰ag_∑ckë
->seqno);

157 
buckë
 = 
£qno
 % 
BATADV_FRAG_BUFFER_COUNT
;

159 
‰ag_íåy_√w
 = 
	`kmÆloc
((*‰ag_íåy_√w), 
GFP_ATOMIC
);

160 i‡(!
‰ag_íåy_√w
)

161 
îr
;

163 
‰ag_íåy_√w
->
skb
 = skb;

164 
‰ag_íåy_√w
->
no
 = 
‰ag_∑ckë
->no;

170 
chaö
 = &
‹ig_node
->
‰agmíts
[
buckë
];

171 
	`•ö_lock_bh
(&
chaö
->
lock
);

172 i‡(
	`b©adv_‰ag_öô_chaö
(
chaö
, 
£qno
)) {

173 
	`hli°_add_hód
(&
‰ag_íåy_√w
->
li°
, &
chaö
->
‰agmít_li°
);

174 
chaö
->
size
 = 
skb
->
Àn
 - 
hdr_size
;

175 
chaö
->
time°amp
 = 
jiffõs
;

176 
chaö
->
tŸÆ_size
 = 
	`¡ohs
(
‰ag_∑ckë
->total_size);

177 
ªt
 = 
åue
;

178 
out
;

182 
	`hli°_f‹_óch_íåy
(
‰ag_íåy_cuº
, &
chaö
->
‰agmít_li°
, 
li°
) {

184 i‡(
‰ag_íåy_cuº
->
no
 =
‰ag_íåy_√w
->no)

185 
îr_u∆ock
;

188 i‡(
‰ag_íåy_cuº
->
no
 < 
‰ag_íåy_√w
->no) {

189 
	`hli°_add_bef‹e
(&
‰ag_íåy_√w
->
li°
,

190 &
‰ag_íåy_cuº
->
li°
);

191 
chaö
->
size
 +
skb
->
Àn
 - 
hdr_size
;

192 
chaö
->
time°amp
 = 
jiffõs
;

193 
ªt
 = 
åue
;

194 
out
;

198 
‰ag_íåy_œ°
 = 
‰ag_íåy_cuº
;

202 i‡(
	`likñy
(
‰ag_íåy_œ°
)) {

203 
	`hli°_add_behöd
(&
‰ag_íåy_√w
->
li°
, &
‰ag_íåy_œ°
->list);

204 
chaö
->
size
 +
skb
->
Àn
 - 
hdr_size
;

205 
chaö
->
time°amp
 = 
jiffõs
;

206 
ªt
 = 
åue
;

209 
out
:

210 i‡(
chaö
->
size
 > 
	`b©adv_‰ag_size_limô
() ||

211 
chaö
->
tŸÆ_size
 !
	`¡ohs
(
‰ag_∑ckë
->total_size) ||

212 
chaö
->
tŸÆ_size
 > 
	`b©adv_‰ag_size_limô
()) {

217 
	`b©adv_‰ag_˛ór_chaö
(&
chaö
->
‰agmít_li°
, 
åue
);

218 
chaö
->
size
 = 0;

219 } i‡(
	`¡ohs
(
‰ag_∑ckë
->
tŸÆ_size
Ë=
chaö
->
size
) {

221 
	`hli°_move_li°
(&
chaö
->
‰agmít_li°
, 
chaö_out
);

222 
chaö
->
size
 = 0;

225 
îr_u∆ock
:

226 
	`•ö_u∆ock_bh
(&
chaö
->
lock
);

228 
îr
:

229 i‡(!
ªt
) {

230 
	`k‰ì
(
‰ag_íåy_√w
);

231 
	`k‰ì_skb
(
skb
);

234  
ªt
;

235 
	}
}

246 
sk_buff
 *

247 
	$b©adv_‰ag_mîge_∑ckës
(
hli°_hód
 *
chaö
)

249 
b©adv_‰ag_∑ckë
 *
∑ckë
;

250 
b©adv_‰ag_li°_íåy
 *
íåy
;

251 
sk_buff
 *
skb_out
;

252 
size
, 
hdr_size
 = (
b©adv_‰ag_∑ckë
);

253 
boﬁ
 
dr›≥d
 = 
Ál£
;

258 
íåy
 = 
	`hli°_íåy
(
chaö
->
fú°
, 
b©adv_‰ag_li°_íåy
, 
li°
);

259 
	`hli°_dñ
(&
íåy
->
li°
);

260 
skb_out
 = 
íåy
->
skb
;

261 
	`k‰ì
(
íåy
);

263 
∑ckë
 = (
b©adv_‰ag_∑ckë
 *)
skb_out
->
d©a
;

264 
size
 = 
	`¡ohs
(
∑ckë
->
tŸÆ_size
Ë+ 
hdr_size
;

267 i‡(
	`pskb_ex∑nd_hód
(
skb_out
, 0, 
size
 - skb_out->
Àn
, 
GFP_ATOMIC
) < 0) {

268 
	`k‰ì_skb
(
skb_out
);

269 
skb_out
 = 
NULL
;

270 
dr›≥d
 = 
åue
;

271 
‰ì
;

277 
	`skb_puŒ
(
skb_out
, 
hdr_size
);

278 
skb_out
->
ù_summed
 = 
CHECKSUM_NONE
;

279 
	`memmove
(
skb_out
->
d©a
 - 
ETH_HLEN
, 
	`skb_mac_hódî
(skb_out), ETH_HLEN);

280 
	`skb_£t_mac_hódî
(
skb_out
, -
ETH_HLEN
);

281 
	`skb_ª£t_√tw‹k_hódî
(
skb_out
);

282 
	`skb_ª£t_å™•‹t_hódî
(
skb_out
);

285 
	`hli°_f‹_óch_íåy
(
íåy
, 
chaö
, 
li°
) {

286 
size
 = 
íåy
->
skb
->
Àn
 - 
hdr_size
;

287 
	`skb_put_d©a
(
skb_out
, 
íåy
->
skb
->
d©a
 + 
hdr_size
, 
size
);

290 
‰ì
:

292 
	`b©adv_‰ag_˛ór_chaö
(
chaö
, 
dr›≥d
);

293  
skb_out
;

294 
	}
}

310 
boﬁ
 
	$b©adv_‰ag_skb_buf„r
(
sk_buff
 **
skb
,

311 
b©adv_‹ig_node
 *
‹ig_node_§c
)

313 
sk_buff
 *
skb_out
 = 
NULL
;

314 
hli°_hód
 
hód
 = 
HLIST_HEAD_INIT
;

315 
boﬁ
 
ªt
 = 
Ál£
;

318 i‡(!
	`b©adv_‰ag_ö£π_∑ckë
(
‹ig_node_§c
, *
skb
, &
hód
))

319 
out_îr
;

322 i‡(
	`hli°_em±y
(&
hód
))

323 
out
;

325 
skb_out
 = 
	`b©adv_‰ag_mîge_∑ckës
(&
hód
);

326 i‡(!
skb_out
)

327 
out_îr
;

329 
out
:

330 
ªt
 = 
åue
;

331 
out_îr
:

332 *
skb
 = 
skb_out
;

333  
ªt
;

334 
	}
}

348 
boﬁ
 
	$b©adv_‰ag_skb_fwd
(
sk_buff
 *
skb
,

349 
b©adv_h¨d_iÁ˚
 *
ªcv_if
,

350 
b©adv_‹ig_node
 *
‹ig_node_§c
)

352 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
ªcv_if
->
mesh_iÁ˚
);

353 
b©adv_√igh_node
 *
√igh_node
 = 
NULL
;

354 
b©adv_‰ag_∑ckë
 *
∑ckë
;

355 
u16
 
tŸÆ_size
;

356 
boﬁ
 
ªt
 = 
Ál£
;

358 
∑ckë
 = (
b©adv_‰ag_∑ckë
 *)
skb
->
d©a
;

360 
√igh_node
 = 
	`b©adv_‹ig_to_rouãr
(
b©_¥iv
, 
∑ckë
->
de°
, 
ªcv_if
);

361 i‡(!
√igh_node
)

362 
out
;

367 
tŸÆ_size
 = 
	`¡ohs
(
∑ckë
->total_size);

368 i‡(
tŸÆ_size
 > 
√igh_node
->
if_öcomög
->
√t_dev
->
mtu
) {

369 
	`b©adv_öc_cou¡î
(
b©_¥iv
, 
BATADV_CNT_FRAG_FWD
);

370 
	`b©adv_add_cou¡î
(
b©_¥iv
, 
BATADV_CNT_FRAG_FWD_BYTES
,

371 
skb
->
Àn
 + 
ETH_HLEN
);

373 
∑ckë
->
âl
--;

374 
	`b©adv_£nd_uniˇ°_skb
(
skb
, 
√igh_node
);

375 
ªt
 = 
åue
;

378 
out
:

379 
	`b©adv_√igh_node_put
(
√igh_node
);

380  
ªt
;

381 
	}
}

396 
sk_buff
 *
	$b©adv_‰ag_¸óã
(
√t_devi˚
 *
√t_dev
,

397 
sk_buff
 *
skb
,

398 
b©adv_‰ag_∑ckë
 *
‰ag_hód
,

399 
‰agmít_size
)

401 
Œ_ª£rved
 = 
	`LL_RESERVED_SPACE
(
√t_dev
);

402 
èûroom
 = 
√t_dev
->
√eded_èûroom
;

403 
sk_buff
 *
skb_‰agmít
;

404 
hódî_size
 = (*
‰ag_hód
);

405 
mtu
 = 
‰agmít_size
 + 
hódî_size
;

407 
skb_‰agmít
 = 
	`dev_Æloc_skb
(
Œ_ª£rved
 + 
mtu
 + 
èûroom
);

408 i‡(!
skb_‰agmít
)

409 
îr
;

411 
skb_‰agmít
->
¥i‹ôy
 = 
skb
->priority;

414 
	`skb_ª£rve
(
skb_‰agmít
, 
Œ_ª£rved
 + 
hódî_size
);

415 
	`skb_•lô
(
skb
, 
skb_‰agmít
, skb->
Àn
 - 
‰agmít_size
);

418 
	`skb_push
(
skb_‰agmít
, 
hódî_size
);

419 
	`mem˝y
(
skb_‰agmít
->
d©a
, 
‰ag_hód
, 
hódî_size
);

421 
îr
:

422  
skb_‰agmít
;

423 
	}
}

433 
	$b©adv_‰ag_£nd_∑ckë
(
sk_buff
 *
skb
,

434 
b©adv_‹ig_node
 *
‹ig_node
,

435 
b©adv_√igh_node
 *
√igh_node
)

437 
√t_devi˚
 *
√t_dev
 = 
√igh_node
->
if_öcomög
->net_dev;

438 
b©adv_¥iv
 *
b©_¥iv
;

439 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
 = 
NULL
;

440 
b©adv_‰ag_∑ckë
 
‰ag_hódî
;

441 
sk_buff
 *
skb_‰agmít
;

442 
mtu
 = 
√t_dev
->mtu;

443 
hódî_size
 = (
‰ag_hódî
);

444 
max_‰agmít_size
, 
num_‰agmíts
;

445 
ªt
;

450 
mtu
 = 
	`mö_t
(, mtu, 
BATADV_FRAG_MAX_FRAG_SIZE
);

451 
max_‰agmít_size
 = 
mtu
 - 
hódî_size
;

453 i‡(
skb
->
Àn
 =0 || 
max_‰agmít_size
 == 0)

454  -
EINVAL
;

456 
num_‰agmíts
 = (
skb
->
Àn
 - 1Ë/ 
max_‰agmít_size
 + 1;

457 
max_‰agmít_size
 = (
skb
->
Àn
 - 1Ë/ 
num_‰agmíts
 + 1;

460 i‡(
num_‰agmíts
 > 
BATADV_FRAG_MAX_FRAGMENTS
) {

461 
ªt
 = -
EAGAIN
;

462 
‰ì_skb
;

465 
b©_¥iv
 = 
‹ig_node
->bat_priv;

466 
¥im¨y_if
 = 
	`b©adv_¥im¨y_if_gë_£À˘ed
(
b©_¥iv
);

467 i‡(!
¥im¨y_if
) {

468 
ªt
 = -
EINVAL
;

469 
‰ì_skb
;

478 i‡(
	`skb_has_‰ag_li°
(
skb
Ë&& 
	`__skb_löórize
(skb)) {

479 
ªt
 = -
ENOMEM
;

480 
‰ì_skb
;

484 
‰ag_hódî
.
∑ckë_ty≥
 = 
BATADV_UNICAST_FRAG
;

485 
‰ag_hódî
.
vîsi⁄
 = 
BATADV_COMPAT_VERSION
;

486 
‰ag_hódî
.
âl
 = 
BATADV_TTL
;

487 
‰ag_hódî
.
£qno
 = 
	`ht⁄s
(
	`©omic_öc_ªtu∫
(&
b©_¥iv
->
‰ag_£qno
));

488 
‰ag_hódî
.
ª£rved
 = 0;

489 
‰ag_hódî
.
no
 = 0;

490 
‰ag_hódî
.
tŸÆ_size
 = 
	`ht⁄s
(
skb
->
Àn
);

497 i‡(
skb
->
¥i‹ôy
 >= 256 && skb->priority <= 263)

498 
‰ag_hódî
.
¥i‹ôy
 = 
skb
->priority - 256;

500 
‰ag_hódî
.
¥i‹ôy
 = 0;

502 
	`ëhî_addr_c›y
(
‰ag_hódî
.
‹ig
, 
¥im¨y_if
->
√t_dev
->
dev_addr
);

503 
	`ëhî_addr_c›y
(
‰ag_hódî
.
de°
, 
‹ig_node
->
‹ig
);

506 
skb
->
Àn
 > 
max_‰agmít_size
) {

508 i‡(
	`u∆ikñy
(
‰ag_hódî
.
no
 =
BATADV_FRAG_MAX_FRAGMENTS
 - 1)) {

509 
ªt
 = -
EINVAL
;

510 
put_¥im¨y_if
;

513 
skb_‰agmít
 = 
	`b©adv_‰ag_¸óã
(
√t_dev
, 
skb
, &
‰ag_hódî
,

514 
max_‰agmít_size
);

515 i‡(!
skb_‰agmít
) {

516 
ªt
 = -
ENOMEM
;

517 
put_¥im¨y_if
;

520 
	`b©adv_öc_cou¡î
(
b©_¥iv
, 
BATADV_CNT_FRAG_TX
);

521 
	`b©adv_add_cou¡î
(
b©_¥iv
, 
BATADV_CNT_FRAG_TX_BYTES
,

522 
skb_‰agmít
->
Àn
 + 
ETH_HLEN
);

523 
ªt
 = 
	`b©adv_£nd_uniˇ°_skb
(
skb_‰agmít
, 
√igh_node
);

524 i‡(
ªt
 !
NET_XMIT_SUCCESS
) {

525 
ªt
 = 
NET_XMIT_DROP
;

526 
put_¥im¨y_if
;

529 
‰ag_hódî
.
no
++;

535 
ªt
 = 
	`skb_cow_hód
(
skb
, 
ETH_HLEN
 + 
hódî_size
);

536 i‡(
ªt
 < 0)

537 
put_¥im¨y_if
;

539 
	`skb_push
(
skb
, 
hódî_size
);

540 
	`mem˝y
(
skb
->
d©a
, &
‰ag_hódî
, 
hódî_size
);

543 
	`b©adv_öc_cou¡î
(
b©_¥iv
, 
BATADV_CNT_FRAG_TX
);

544 
	`b©adv_add_cou¡î
(
b©_¥iv
, 
BATADV_CNT_FRAG_TX_BYTES
,

545 
skb
->
Àn
 + 
ETH_HLEN
);

546 
ªt
 = 
	`b©adv_£nd_uniˇ°_skb
(
skb
, 
√igh_node
);

548 
skb
 = 
NULL
;

550 
put_¥im¨y_if
:

551 
	`b©adv_h¨dif_put
(
¥im¨y_if
);

552 
‰ì_skb
:

553 
	`k‰ì_skb
(
skb
);

555  
ªt
;

556 
	}
}

	@net/batman-adv/fragmentation.h

7 #i‚de‡
_NET_BATMAN_ADV_FRAGMENTATION_H_


8 
	#_NET_BATMAN_ADV_FRAGMENTATION_H_


	)

10 
	~"maö.h
"

12 
	~<löux/compûî.h
>

13 
	~<löux/li°.h
>

14 
	~<löux/skbuff.h
>

15 
	~<löux/°ddef.h
>

16 
	~<löux/ty≥s.h
>

18 
b©adv_‰ag_purge_‹ig
(
b©adv_‹ig_node
 *
‹ig
,

19 
	$boﬁ
 (*
check_cb
)(
b©adv_‰ag_èbÀ_íåy
 *));

20 
boﬁ
 
	`b©adv_‰ag_skb_fwd
(
sk_buff
 *
skb
,

21 
b©adv_h¨d_iÁ˚
 *
ªcv_if
,

22 
b©adv_‹ig_node
 *
‹ig_node_§c
);

23 
boﬁ
 
	`b©adv_‰ag_skb_buf„r
(
sk_buff
 **
skb
,

24 
b©adv_‹ig_node
 *
‹ig_node
);

25 
	`b©adv_‰ag_£nd_∑ckë
(
sk_buff
 *
skb
,

26 
b©adv_‹ig_node
 *
‹ig_node
,

27 
b©adv_√igh_node
 *
√igh_node
);

35 
ölöe
 
boﬁ


36 
	$b©adv_‰ag_check_íåy
(
b©adv_‰ag_èbÀ_íåy
 *
‰ags_íåy
)

38 i‡(!
	`hli°_em±y
(&
‰ags_íåy
->
‰agmít_li°
) &&

39 
	`b©adv_has_timed_out
(
‰ags_íåy
->
time°amp
, 
BATADV_FRAG_TIMEOUT
))

40  
åue
;

41  
Ál£
;

42 
	}
}

	@net/batman-adv/gateway_client.c

7 
	~"g©eway_˛õ¡.h
"

8 
	~"maö.h
"

10 
	~<löux/©omic.h
>

11 
	~<löux/byã‹dî/gíîic.h
>

12 
	~<löux/c⁄èöî_of.h
>

13 
	~<löux/îr.h
>

14 
	~<löux/î∫o.h
>

15 
	~<löux/ëhîdevi˚.h
>

16 
	~<löux/gÂ.h
>

17 
	~<löux/if_ëhî.h
>

18 
	~<löux/if_vœn.h
>

19 
	~<löux/ö.h
>

20 
	~<löux/ù.h
>

21 
	~<löux/ùv6.h
>

22 
	~<löux/kªf.h
>

23 
	~<löux/li°.h
>

24 
	~<löux/lockdï.h
>

25 
	~<löux/√tdevi˚.h
>

26 
	~<löux/√éök.h
>

27 
	~<löux/rculi°.h
>

28 
	~<löux/rcupd©e.h
>

29 
	~<löux/skbuff.h
>

30 
	~<löux/¶ab.h
>

31 
	~<löux/•ölock.h
>

32 
	~<löux/•rötf.h
>

33 
	~<löux/°ddef.h
>

34 
	~<löux/udp.h
>

35 
	~<u≠i/löux/b©adv_∑ckë.h
>

36 
	~<u≠i/löux/b©m™_adv.h
>

38 
	~"h¨d-öãrÁ˚.h
"

39 
	~"log.h
"

40 
	~"√éök.h
"

41 
	~"‹igö©‹.h
"

42 
	~"routög.h
"

43 
	~"å™¶©i⁄-èbÀ.h
"

48 
	#BATADV_DHCP_HTYPE_OFFSET
 1

	)

49 
	#BATADV_DHCP_HLEN_OFFSET
 2

	)

51 
	#BATADV_DHCP_HTYPE_ETHERNET
 0x01

	)

55 
	#BATADV_DHCP_CHADDR_OFFSET
 28

	)

62 
	$b©adv_gw_node_ªÀa£
(
kªf
 *
ªf
)

64 
b©adv_gw_node
 *
gw_node
;

66 
gw_node
 = 
	`c⁄èöî_of
(
ªf
, 
b©adv_gw_node
, 
ªfcou¡
);

68 
	`b©adv_‹ig_node_put
(
gw_node
->
‹ig_node
);

69 
	`k‰ì_rcu
(
gw_node
, 
rcu
);

70 
	}
}

78 
b©adv_gw_node
 *

79 
	$b©adv_gw_gë_£À˘ed_gw_node
(
b©adv_¥iv
 *
b©_¥iv
)

81 
b©adv_gw_node
 *
gw_node
;

83 
	`rcu_ªad_lock
();

84 
gw_node
 = 
	`rcu_dîe„ªn˚
(
b©_¥iv
->
gw
.
cuº_gw
);

85 i‡(!
gw_node
)

86 
out
;

88 i‡(!
	`kªf_gë_u∆ess_zîo
(&
gw_node
->
ªfcou¡
))

89 
gw_node
 = 
NULL
;

91 
out
:

92 
	`rcu_ªad_u∆ock
();

93  
gw_node
;

94 
	}
}

102 
b©adv_‹ig_node
 *

103 
	$b©adv_gw_gë_£À˘ed_‹ig
(
b©adv_¥iv
 *
b©_¥iv
)

105 
b©adv_gw_node
 *
gw_node
;

106 
b©adv_‹ig_node
 *
‹ig_node
 = 
NULL
;

108 
gw_node
 = 
	`b©adv_gw_gë_£À˘ed_gw_node
(
b©_¥iv
);

109 i‡(!
gw_node
)

110 
out
;

112 
	`rcu_ªad_lock
();

113 
‹ig_node
 = 
gw_node
->orig_node;

114 i‡(!
‹ig_node
)

115 
u∆ock
;

117 i‡(!
	`kªf_gë_u∆ess_zîo
(&
‹ig_node
->
ªfcou¡
))

118 
‹ig_node
 = 
NULL
;

120 
u∆ock
:

121 
	`rcu_ªad_u∆ock
();

122 
out
:

123 
	`b©adv_gw_node_put
(
gw_node
);

124  
‹ig_node
;

125 
	}
}

127 
	$b©adv_gw_£À˘
(
b©adv_¥iv
 *
b©_¥iv
,

128 
b©adv_gw_node
 *
√w_gw_node
)

130 
b©adv_gw_node
 *
cuº_gw_node
;

132 
	`•ö_lock_bh
(&
b©_¥iv
->
gw
.
li°_lock
);

134 i‡(
√w_gw_node
)

135 
	`kªf_gë
(&
√w_gw_node
->
ªfcou¡
);

137 
cuº_gw_node
 = 
	`rcu_ª∂a˚_poöãr
(
b©_¥iv
->
gw
.
cuº_gw
, 
√w_gw_node
,

138 
åue
);

140 
	`b©adv_gw_node_put
(
cuº_gw_node
);

142 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
gw
.
li°_lock
);

143 
	}
}

156 
	$b©adv_gw_ª£À˘
(
b©adv_¥iv
 *
b©_¥iv
)

158 
	`©omic_£t
(&
b©_¥iv
->
gw
.
ª£À˘
, 1);

159 
	}
}

169 
	$b©adv_gw_check_˛õ¡_°›
(
b©adv_¥iv
 *
b©_¥iv
)

171 
b©adv_gw_node
 *
cuº_gw
;

173 i‡(
	`©omic_ªad
(&
b©_¥iv
->
gw
.
mode
Ë!
BATADV_GW_MODE_CLIENT
)

176 
cuº_gw
 = 
	`b©adv_gw_gë_£À˘ed_gw_node
(
b©_¥iv
);

177 i‡(!
cuº_gw
)

183 
	`b©adv_gw_£À˘
(
b©_¥iv
, 
NULL
);

188 
	`b©adv_throw_uevít
(
b©_¥iv
, 
BATADV_UEV_GW
, 
BATADV_UEV_DEL
, 
NULL
);

190 
	`b©adv_gw_node_put
(
cuº_gw
);

191 
	}
}

197 
	$b©adv_gw_ñe˘i⁄
(
b©adv_¥iv
 *
b©_¥iv
)

199 
b©adv_gw_node
 *
cuº_gw
 = 
NULL
;

200 
b©adv_gw_node
 *
√xt_gw
 = 
NULL
;

201 
b©adv_√igh_node
 *
rouãr
 = 
NULL
;

202 
b©adv_√igh_iföfo
 *
rouãr_iföfo
 = 
NULL
;

203 
gw_addr
[18] = { '\0' };

205 i‡(
	`©omic_ªad
(&
b©_¥iv
->
gw
.
mode
Ë!
BATADV_GW_MODE_CLIENT
)

206 
out
;

208 i‡(!
b©_¥iv
->
Ægo_›s
->
gw
.
gë_be°_gw_node
)

209 
out
;

211 
cuº_gw
 = 
	`b©adv_gw_gë_£À˘ed_gw_node
(
b©_¥iv
);

213 i‡(!
	`b©adv_©omic_dec_nŸ_zîo
(&
b©_¥iv
->
gw
.
ª£À˘
Ë&& 
cuº_gw
)

214 
out
;

220 
√xt_gw
 = 
b©_¥iv
->
Ægo_›s
->
gw
.
	`gë_be°_gw_node
(bat_priv);

222 i‡(
cuº_gw
 =
√xt_gw
)

223 
out
;

225 i‡(
√xt_gw
) {

226 
	`•rötf
(
gw_addr
, "%pM", 
√xt_gw
->
‹ig_node
->
‹ig
);

228 
rouãr
 = 
	`b©adv_‹ig_rouãr_gë
(
√xt_gw
->
‹ig_node
,

229 
BATADV_IF_DEFAULT
);

230 i‡(!
rouãr
) {

231 
	`b©adv_gw_ª£À˘
(
b©_¥iv
);

232 
out
;

235 
rouãr_iföfo
 = 
	`b©adv_√igh_iföfo_gë
(
rouãr
,

236 
BATADV_IF_DEFAULT
);

237 i‡(!
rouãr_iföfo
) {

238 
	`b©adv_gw_ª£À˘
(
b©_¥iv
);

239 
out
;

243 i‡(
cuº_gw
 && !
√xt_gw
) {

244 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

246 
	`b©adv_throw_uevít
(
b©_¥iv
, 
BATADV_UEV_GW
, 
BATADV_UEV_DEL
,

247 
NULL
);

248 } i‡(!
cuº_gw
 && 
√xt_gw
) {

249 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

251 
√xt_gw
->
‹ig_node
->
‹ig
,

252 
√xt_gw
->
b™dwidth_down
 / 10,

253 
√xt_gw
->
b™dwidth_down
 % 10,

254 
√xt_gw
->
b™dwidth_up
 / 10,

255 
√xt_gw
->
b™dwidth_up
 % 10,

256 
rouãr_iföfo
->
b©_iv
.
tq_avg
);

257 
	`b©adv_throw_uevít
(
b©_¥iv
, 
BATADV_UEV_GW
, 
BATADV_UEV_ADD
,

258 
gw_addr
);

260 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

262 
√xt_gw
->
‹ig_node
->
‹ig
,

263 
√xt_gw
->
b™dwidth_down
 / 10,

264 
√xt_gw
->
b™dwidth_down
 % 10,

265 
√xt_gw
->
b™dwidth_up
 / 10,

266 
√xt_gw
->
b™dwidth_up
 % 10,

267 
rouãr_iföfo
->
b©_iv
.
tq_avg
);

268 
	`b©adv_throw_uevít
(
b©_¥iv
, 
BATADV_UEV_GW
, 
BATADV_UEV_CHANGE
,

269 
gw_addr
);

272 
	`b©adv_gw_£À˘
(
b©_¥iv
, 
√xt_gw
);

274 
out
:

275 
	`b©adv_gw_node_put
(
cuº_gw
);

276 
	`b©adv_gw_node_put
(
√xt_gw
);

277 
	`b©adv_√igh_node_put
(
rouãr
);

278 
	`b©adv_√igh_iföfo_put
(
rouãr_iföfo
);

279 
	}
}

286 
	$b©adv_gw_check_ñe˘i⁄
(
b©adv_¥iv
 *
b©_¥iv
,

287 
b©adv_‹ig_node
 *
‹ig_node
)

289 
b©adv_‹ig_node
 *
cuº_gw_‹ig
;

294 i‡(!
b©_¥iv
->
Ægo_›s
->
gw
.
is_ñigibÀ
)

297 
cuº_gw_‹ig
 = 
	`b©adv_gw_gë_£À˘ed_‹ig
(
b©_¥iv
);

298 i‡(!
cuº_gw_‹ig
)

299 
ª£À˘
;

302 i‡(
cuº_gw_‹ig
 =
‹ig_node
)

303 
out
;

305 i‡(!
b©_¥iv
->
Ægo_›s
->
gw
.
	`is_ñigibÀ
(b©_¥iv, 
cuº_gw_‹ig
,

306 
‹ig_node
))

307 
out
;

309 
ª£À˘
:

310 
	`b©adv_gw_ª£À˘
(
b©_¥iv
);

311 
out
:

312 
	`b©adv_‹ig_node_put
(
cuº_gw_‹ig
);

313 
	}
}

324 
	$b©adv_gw_node_add
(
b©adv_¥iv
 *
b©_¥iv
,

325 
b©adv_‹ig_node
 *
‹ig_node
,

326 
b©adv_tvlv_g©eway_d©a
 *
g©eway
)

328 
b©adv_gw_node
 *
gw_node
;

330 
	`lockdï_as£π_hñd
(&
b©_¥iv
->
gw
.
li°_lock
);

332 i‡(
g©eway
->
b™dwidth_down
 == 0)

335 
gw_node
 = 
	`kzÆloc
((*gw_node), 
GFP_ATOMIC
);

336 i‡(!
gw_node
)

339 
	`kªf_öô
(&
gw_node
->
ªfcou¡
);

340 
	`INIT_HLIST_NODE
(&
gw_node
->
li°
);

341 
	`kªf_gë
(&
‹ig_node
->
ªfcou¡
);

342 
gw_node
->
‹ig_node
 = orig_node;

343 
gw_node
->
b™dwidth_down
 = 
	`¡ohl
(
g©eway
->bandwidth_down);

344 
gw_node
->
b™dwidth_up
 = 
	`¡ohl
(
g©eway
->bandwidth_up);

346 
	`kªf_gë
(&
gw_node
->
ªfcou¡
);

347 
	`hli°_add_hód_rcu
(&
gw_node
->
li°
, &
b©_¥iv
->
gw
.
g©eway_li°
);

348 
b©_¥iv
->
gw
.
gíî©i⁄
++;

350 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

352 
‹ig_node
->
‹ig
,

353 
	`¡ohl
(
g©eway
->
b™dwidth_down
) / 10,

354 
	`¡ohl
(
g©eway
->
b™dwidth_down
) % 10,

355 
	`¡ohl
(
g©eway
->
b™dwidth_up
) / 10,

356 
	`¡ohl
(
g©eway
->
b™dwidth_up
) % 10);

359 
	`b©adv_gw_node_put
(
gw_node
);

360 
	}
}

369 
b©adv_gw_node
 *
	$b©adv_gw_node_gë
(
b©adv_¥iv
 *
b©_¥iv
,

370 
b©adv_‹ig_node
 *
‹ig_node
)

372 
b©adv_gw_node
 *
gw_node_tmp
, *
gw_node
 = 
NULL
;

374 
	`rcu_ªad_lock
();

375 
	`hli°_f‹_óch_íåy_rcu
(
gw_node_tmp
, &
b©_¥iv
->
gw
.
g©eway_li°
,

376 
li°
) {

377 i‡(
gw_node_tmp
->
‹ig_node
 != orig_node)

380 i‡(!
	`kªf_gë_u∆ess_zîo
(&
gw_node_tmp
->
ªfcou¡
))

383 
gw_node
 = 
gw_node_tmp
;

386 
	`rcu_ªad_u∆ock
();

388  
gw_node
;

389 
	}
}

398 
	$b©adv_gw_node_upd©e
(
b©adv_¥iv
 *
b©_¥iv
,

399 
b©adv_‹ig_node
 *
‹ig_node
,

400 
b©adv_tvlv_g©eway_d©a
 *
g©eway
)

402 
b©adv_gw_node
 *
gw_node
, *
cuº_gw
 = 
NULL
;

404 
	`•ö_lock_bh
(&
b©_¥iv
->
gw
.
li°_lock
);

405 
gw_node
 = 
	`b©adv_gw_node_gë
(
b©_¥iv
, 
‹ig_node
);

406 i‡(!
gw_node
) {

407 
	`b©adv_gw_node_add
(
b©_¥iv
, 
‹ig_node
, 
g©eway
);

408 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
gw
.
li°_lock
);

409 
out
;

411 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
gw
.
li°_lock
);

413 i‡(
gw_node
->
b™dwidth_down
 =
	`¡ohl
(
g©eway
->bandwidth_down) &&

414 
gw_node
->
b™dwidth_up
 =
	`¡ohl
(
g©eway
->bandwidth_up))

415 
out
;

417 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

419 
‹ig_node
->
‹ig
,

420 
gw_node
->
b™dwidth_down
 / 10,

421 
gw_node
->
b™dwidth_down
 % 10,

422 
gw_node
->
b™dwidth_up
 / 10,

423 
gw_node
->
b™dwidth_up
 % 10,

424 
	`¡ohl
(
g©eway
->
b™dwidth_down
) / 10,

425 
	`¡ohl
(
g©eway
->
b™dwidth_down
) % 10,

426 
	`¡ohl
(
g©eway
->
b™dwidth_up
) / 10,

427 
	`¡ohl
(
g©eway
->
b™dwidth_up
) % 10);

429 
gw_node
->
b™dwidth_down
 = 
	`¡ohl
(
g©eway
->bandwidth_down);

430 
gw_node
->
b™dwidth_up
 = 
	`¡ohl
(
g©eway
->bandwidth_up);

432 i‡(
	`¡ohl
(
g©eway
->
b™dwidth_down
) == 0) {

433 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

435 
‹ig_node
->
‹ig
);

440 
	`•ö_lock_bh
(&
b©_¥iv
->
gw
.
li°_lock
);

441 i‡(!
	`hli°_unhashed
(&
gw_node
->
li°
)) {

442 
	`hli°_dñ_öô_rcu
(&
gw_node
->
li°
);

443 
	`b©adv_gw_node_put
(
gw_node
);

444 
b©_¥iv
->
gw
.
gíî©i⁄
++;

446 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
gw
.
li°_lock
);

448 
cuº_gw
 = 
	`b©adv_gw_gë_£À˘ed_gw_node
(
b©_¥iv
);

449 i‡(
gw_node
 =
cuº_gw
)

450 
	`b©adv_gw_ª£À˘
(
b©_¥iv
);

452 
	`b©adv_gw_node_put
(
cuº_gw
);

455 
out
:

456 
	`b©adv_gw_node_put
(
gw_node
);

457 
	}
}

464 
	$b©adv_gw_node_dñëe
(
b©adv_¥iv
 *
b©_¥iv
,

465 
b©adv_‹ig_node
 *
‹ig_node
)

467 
b©adv_tvlv_g©eway_d©a
 
g©eway
;

469 
g©eway
.
b™dwidth_down
 = 0;

470 
g©eway
.
b™dwidth_up
 = 0;

472 
	`b©adv_gw_node_upd©e
(
b©_¥iv
, 
‹ig_node
, &
g©eway
);

473 
	}
}

479 
	$b©adv_gw_node_‰ì
(
b©adv_¥iv
 *
b©_¥iv
)

481 
b©adv_gw_node
 *
gw_node
;

482 
hli°_node
 *
node_tmp
;

484 
	`•ö_lock_bh
(&
b©_¥iv
->
gw
.
li°_lock
);

485 
	`hli°_f‹_óch_íåy_ß„
(
gw_node
, 
node_tmp
,

486 &
b©_¥iv
->
gw
.
g©eway_li°
, 
li°
) {

487 
	`hli°_dñ_öô_rcu
(&
gw_node
->
li°
);

488 
	`b©adv_gw_node_put
(
gw_node
);

489 
b©_¥iv
->
gw
.
gíî©i⁄
++;

491 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
gw
.
li°_lock
);

492 
	}
}

501 
	$b©adv_gw_dump
(
sk_buff
 *
msg
, 
√éök_ˇŒback
 *
cb
)

503 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
 = 
NULL
;

504 
√t_devi˚
 *
mesh_iÁ˚
;

505 
b©adv_¥iv
 *
b©_¥iv
;

506 
ªt
;

508 
mesh_iÁ˚
 = 
	`b©adv_√éök_gë_meshif
(
cb
);

509 i‡(
	`IS_ERR
(
mesh_iÁ˚
))

510  
	`PTR_ERR
(
mesh_iÁ˚
);

512 
b©_¥iv
 = 
	`√tdev_¥iv
(
mesh_iÁ˚
);

514 
¥im¨y_if
 = 
	`b©adv_¥im¨y_if_gë_£À˘ed
(
b©_¥iv
);

515 i‡(!
¥im¨y_if
 ||Örim¨y_if->
if_°©us
 !
BATADV_IF_ACTIVE
) {

516 
ªt
 = -
ENOENT
;

517 
out
;

520 i‡(!
b©_¥iv
->
Ægo_›s
->
gw
.
dump
) {

521 
ªt
 = -
EOPNOTSUPP
;

522 
out
;

525 
b©_¥iv
->
Ægo_›s
->
gw
.
	`dump
(
msg
, 
cb
, bat_priv);

527 
ªt
 = 
msg
->
Àn
;

529 
out
:

530 
	`b©adv_h¨dif_put
(
¥im¨y_if
);

531 
	`dev_put
(
mesh_iÁ˚
);

533  
ªt
;

534 
	}
}

551 
b©adv_dh˝_ªcùõ¡


552 
	$b©adv_gw_dh˝_ªcùõ¡_gë
(
sk_buff
 *
skb
, *
hódî_Àn
,

553 
u8
 *
chaddr
)

555 
b©adv_dh˝_ªcùõ¡
 
ªt
 = 
BATADV_DHCP_NO
;

556 
ëhhdr
 *ethhdr;

557 
ùhdr
 *iphdr;

558 
ùv6hdr
 *ipv6hdr;

559 
udphdr
 *udphdr;

560 
vœn_ëhhdr
 *
vhdr
;

561 
chaddr_off£t
;

562 
__be16
 
¥Ÿo
;

563 
u8
 *
p
;

566 i‡(!
	`pskb_may_puŒ
(
skb
, *
hódî_Àn
 + 
ETH_HLEN
))

567  
BATADV_DHCP_NO
;

569 
ëhhdr
 = 
	`ëh_hdr
(
skb
);

570 
¥Ÿo
 = 
ëhhdr
->
h_¥Ÿo
;

571 *
hódî_Àn
 +
ETH_HLEN
;

574 i‡(
¥Ÿo
 =
	`ht⁄s
(
ETH_P_8021Q
)) {

575 i‡(!
	`pskb_may_puŒ
(
skb
, *
hódî_Àn
 + 
VLAN_HLEN
))

576  
BATADV_DHCP_NO
;

578 
vhdr
 = 
	`vœn_ëh_hdr
(
skb
);

579 
¥Ÿo
 = 
vhdr
->
h_vœn_íˇpsuœãd_¥Ÿo
;

580 *
hódî_Àn
 +
VLAN_HLEN
;

584 
¥Ÿo
) {

585 
	`ht⁄s
(
ETH_P_IP
):

586 i‡(!
	`pskb_may_puŒ
(
skb
, *
hódî_Àn
 + (*
ùhdr
)))

587  
BATADV_DHCP_NO
;

589 
ùhdr
 = (ùhd∏*)(
skb
->
d©a
 + *
hódî_Àn
);

590 *
hódî_Àn
 +
ùhdr
->
ihl
 * 4;

593 i‡(
ùhdr
->
¥Ÿocﬁ
 !
IPPROTO_UDP
)

594  
BATADV_DHCP_NO
;

597 
	`ht⁄s
(
ETH_P_IPV6
):

598 i‡(!
	`pskb_may_puŒ
(
skb
, *
hódî_Àn
 + (*
ùv6hdr
)))

599  
BATADV_DHCP_NO
;

601 
ùv6hdr
 = (ùv6hd∏*)(
skb
->
d©a
 + *
hódî_Àn
);

602 *
hódî_Àn
 +(*
ùv6hdr
);

605 i‡(
ùv6hdr
->
√xthdr
 !
IPPROTO_UDP
)

606  
BATADV_DHCP_NO
;

610  
BATADV_DHCP_NO
;

613 i‡(!
	`pskb_may_puŒ
(
skb
, *
hódî_Àn
 + (*
udphdr
)))

614  
BATADV_DHCP_NO
;

616 
udphdr
 = (udphd∏*)(
skb
->
d©a
 + *
hódî_Àn
);

617 *
hódî_Àn
 +(*
udphdr
);

620 
¥Ÿo
) {

621 
	`ht⁄s
(
ETH_P_IP
):

622 i‡(
udphdr
->
de°
 =
	`ht⁄s
(67))

623 
ªt
 = 
BATADV_DHCP_TO_SERVER
;

624 i‡(
udphdr
->
sour˚
 =
	`ht⁄s
(67))

625 
ªt
 = 
BATADV_DHCP_TO_CLIENT
;

627 
	`ht⁄s
(
ETH_P_IPV6
):

628 i‡(
udphdr
->
de°
 =
	`ht⁄s
(547))

629 
ªt
 = 
BATADV_DHCP_TO_SERVER
;

630 i‡(
udphdr
->
sour˚
 =
	`ht⁄s
(547))

631 
ªt
 = 
BATADV_DHCP_TO_CLIENT
;

635 
chaddr_off£t
 = *
hódî_Àn
 + 
BATADV_DHCP_CHADDR_OFFSET
;

637 i‡(
ªt
 =
BATADV_DHCP_TO_CLIENT
) {

638 i‡(!
	`pskb_may_puŒ
(
skb
, 
chaddr_off£t
 + 
ETH_ALEN
))

639  
BATADV_DHCP_NO
;

642 
p
 = 
skb
->
d©a
 + *
hódî_Àn
 + 
BATADV_DHCP_HTYPE_OFFSET
;

643 i‡(*
p
 !
BATADV_DHCP_HTYPE_ETHERNET
)

644  
BATADV_DHCP_NO
;

647 
p
 = 
skb
->
d©a
 + *
hódî_Àn
 + 
BATADV_DHCP_HLEN_OFFSET
;

648 i‡(*
p
 !
ETH_ALEN
)

649  
BATADV_DHCP_NO
;

651 
	`ëhî_addr_c›y
(
chaddr
, 
skb
->
d©a
 + 
chaddr_off£t
);

654  
ªt
;

655 
	}
}

673 
boﬁ
 
	$b©adv_gw_out_of_ønge
(
b©adv_¥iv
 *
b©_¥iv
,

674 
sk_buff
 *
skb
)

676 
b©adv_√igh_node
 *
√igh_cuº
 = 
NULL
;

677 
b©adv_√igh_node
 *
√igh_ﬁd
 = 
NULL
;

678 
b©adv_‹ig_node
 *
‹ig_d°_node
 = 
NULL
;

679 
b©adv_gw_node
 *
gw_node
 = 
NULL
;

680 
b©adv_gw_node
 *
cuº_gw
 = 
NULL
;

681 
b©adv_√igh_iföfo
 *
cuº_iföfo
, *
ﬁd_iföfo
;

682 
ëhhdr
 *ëhhd∏(ëhhd∏*)
skb
->
d©a
;

683 
boﬁ
 
out_of_ønge
 = 
Ál£
;

684 
u8
 
cuº_tq_avg
;

685 
vid
;

687 
vid
 = 
	`b©adv_gë_vid
(
skb
, 0);

689 i‡(
	`is_mu…iˇ°_ëhî_addr
(
ëhhdr
->
h_de°
))

690 
out
;

692 
‹ig_d°_node
 = 
	`b©adv_å™°abÀ_£¨ch
(
b©_¥iv
, 
ëhhdr
->
h_sour˚
,

693 
ëhhdr
->
h_de°
, 
vid
);

694 i‡(!
‹ig_d°_node
)

695 
out
;

697 
gw_node
 = 
	`b©adv_gw_node_gë
(
b©_¥iv
, 
‹ig_d°_node
);

698 i‡(!
gw_node
)

699 
out
;

701 
	`©omic_ªad
(&
b©_¥iv
->
gw
.
mode
)) {

702 
BATADV_GW_MODE_SERVER
:

706 
cuº_tq_avg
 = 
BATADV_TQ_MAX_VALUE
;

708 
BATADV_GW_MODE_CLIENT
:

709 
cuº_gw
 = 
	`b©adv_gw_gë_£À˘ed_gw_node
(
b©_¥iv
);

710 i‡(!
cuº_gw
)

711 
out
;

714 i‡(
cuº_gw
->
‹ig_node
 =
‹ig_d°_node
)

715 
out
;

721 
√igh_cuº
 = 
	`b©adv_föd_rouãr
(
b©_¥iv
, 
cuº_gw
->
‹ig_node
,

722 
NULL
);

723 i‡(!
√igh_cuº
)

724 
out
;

726 
cuº_iföfo
 = 
	`b©adv_√igh_iföfo_gë
(
√igh_cuº
,

727 
BATADV_IF_DEFAULT
);

728 i‡(!
cuº_iföfo
)

729 
out
;

731 
cuº_tq_avg
 = 
cuº_iföfo
->
b©_iv
.
tq_avg
;

732 
	`b©adv_√igh_iföfo_put
(
cuº_iföfo
);

735 
BATADV_GW_MODE_OFF
:

737 
out
;

740 
√igh_ﬁd
 = 
	`b©adv_föd_rouãr
(
b©_¥iv
, 
‹ig_d°_node
, 
NULL
);

741 i‡(!
√igh_ﬁd
)

742 
out
;

744 
ﬁd_iföfo
 = 
	`b©adv_√igh_iföfo_gë
(
√igh_ﬁd
, 
BATADV_IF_DEFAULT
);

745 i‡(!
ﬁd_iföfo
)

746 
out
;

748 i‡((
cuº_tq_avg
 - 
ﬁd_iföfo
->
b©_iv
.
tq_avg
Ë> 
BATADV_GW_THRESHOLD
)

749 
out_of_ønge
 = 
åue
;

750 
	`b©adv_√igh_iföfo_put
(
ﬁd_iföfo
);

752 
out
:

753 
	`b©adv_‹ig_node_put
(
‹ig_d°_node
);

754 
	`b©adv_gw_node_put
(
cuº_gw
);

755 
	`b©adv_gw_node_put
(
gw_node
);

756 
	`b©adv_√igh_node_put
(
√igh_ﬁd
);

757 
	`b©adv_√igh_node_put
(
√igh_cuº
);

758  
out_of_ønge
;

759 
	}
}

	@net/batman-adv/gateway_client.h

7 #i‚de‡
_NET_BATMAN_ADV_GATEWAY_CLIENT_H_


8 
	#_NET_BATMAN_ADV_GATEWAY_CLIENT_H_


	)

10 
	~"maö.h
"

12 
	~<löux/kªf.h
>

13 
	~<löux/√éök.h
>

14 
	~<löux/skbuff.h
>

15 
	~<löux/ty≥s.h
>

16 
	~<u≠i/löux/b©adv_∑ckë.h
>

18 
b©adv_gw_check_˛õ¡_°›
(
b©adv_¥iv
 *
b©_¥iv
);

19 
b©adv_gw_ª£À˘
(
b©adv_¥iv
 *
b©_¥iv
);

20 
b©adv_gw_ñe˘i⁄
(
b©adv_¥iv
 *
b©_¥iv
);

21 
b©adv_‹ig_node
 *

22 
b©adv_gw_gë_£À˘ed_‹ig
(
b©adv_¥iv
 *
b©_¥iv
);

23 
b©adv_gw_check_ñe˘i⁄
(
b©adv_¥iv
 *
b©_¥iv
,

24 
b©adv_‹ig_node
 *
‹ig_node
);

25 
b©adv_gw_node_upd©e
(
b©adv_¥iv
 *
b©_¥iv
,

26 
b©adv_‹ig_node
 *
‹ig_node
,

27 
b©adv_tvlv_g©eway_d©a
 *
g©eway
);

28 
b©adv_gw_node_dñëe
(
b©adv_¥iv
 *
b©_¥iv
,

29 
b©adv_‹ig_node
 *
‹ig_node
);

30 
b©adv_gw_node_‰ì
(
b©adv_¥iv
 *
b©_¥iv
);

31 
b©adv_gw_node_ªÀa£
(
kªf
 *
ªf
);

32 
b©adv_gw_node
 *

33 
b©adv_gw_gë_£À˘ed_gw_node
(
b©adv_¥iv
 *
b©_¥iv
);

34 
b©adv_gw_dump
(
sk_buff
 *
msg
, 
√éök_ˇŒback
 *
cb
);

35 
boﬁ
 
b©adv_gw_out_of_ønge
(
b©adv_¥iv
 *
b©_¥iv
, 
sk_buff
 *
skb
);

36 
b©adv_dh˝_ªcùõ¡


37 
b©adv_gw_dh˝_ªcùõ¡_gë
(
sk_buff
 *
skb
, *
hódî_Àn
,

38 
u8
 *
chaddr
);

39 
b©adv_gw_node
 *
b©adv_gw_node_gë
(
b©adv_¥iv
 *
b©_¥iv
,

40 
b©adv_‹ig_node
 *
‹ig_node
);

47 
ölöe
 
	$b©adv_gw_node_put
(
b©adv_gw_node
 *
gw_node
)

49 i‡(!
gw_node
)

52 
	`kªf_put
(&
gw_node
->
ªfcou¡
, 
b©adv_gw_node_ªÀa£
);

53 
	}
}

	@net/batman-adv/gateway_common.c

7 
	~"g©eway_comm⁄.h
"

8 
	~"maö.h
"

10 
	~<löux/©omic.h
>

11 
	~<löux/byã‹dî/gíîic.h
>

12 
	~<löux/°ddef.h
>

13 
	~<löux/ty≥s.h
>

14 
	~<u≠i/löux/b©adv_∑ckë.h
>

15 
	~<u≠i/löux/b©m™_adv.h
>

17 
	~"g©eway_˛õ¡.h
"

18 
	~"tvlv.h
"

25 
	$b©adv_gw_tvlv_c⁄èöî_upd©e
(
b©adv_¥iv
 *
b©_¥iv
)

27 
b©adv_tvlv_g©eway_d©a
 
gw
;

28 
u32
 
down
, 
up
;

29 
gw_mode
;

31 
gw_mode
 = 
	`©omic_ªad
(&
b©_¥iv
->
gw
.
mode
);

33 
gw_mode
) {

34 
BATADV_GW_MODE_OFF
:

35 
BATADV_GW_MODE_CLIENT
:

36 
	`b©adv_tvlv_c⁄èöî_uƒegi°î
(
b©_¥iv
, 
BATADV_TVLV_GW
, 1);

38 
BATADV_GW_MODE_SERVER
:

39 
down
 = 
	`©omic_ªad
(&
b©_¥iv
->
gw
.
b™dwidth_down
);

40 
up
 = 
	`©omic_ªad
(&
b©_¥iv
->
gw
.
b™dwidth_up
);

41 
gw
.
b™dwidth_down
 = 
	`ht⁄l
(
down
);

42 
gw
.
b™dwidth_up
 = 
	`ht⁄l
(
up
);

43 
	`b©adv_tvlv_c⁄èöî_ªgi°î
(
b©_¥iv
, 
BATADV_TVLV_GW
, 1,

44 &
gw
, (gw));

47 
	}
}

57 
	$b©adv_gw_tvlv_ogm_h™dÀr_v1
(
b©adv_¥iv
 *
b©_¥iv
,

58 
b©adv_‹ig_node
 *
‹ig
,

59 
u8
 
Êags
,

60 *
tvlv_vÆue
, 
u16
 
tvlv_vÆue_Àn
)

62 
b©adv_tvlv_g©eway_d©a
 
g©eway
, *
g©eway_±r
;

67 i‡(
Êags
 & 
BATADV_TVLV_HANDLER_OGM_CIFNOTFND
 ||

68 
tvlv_vÆue_Àn
 < (
g©eway
)) {

69 
g©eway
.
b™dwidth_down
 = 0;

70 
g©eway
.
b™dwidth_up
 = 0;

72 
g©eway_±r
 = 
tvlv_vÆue
;

73 
g©eway
.
b™dwidth_down
 = 
g©eway_±r
->bandwidth_down;

74 
g©eway
.
b™dwidth_up
 = 
g©eway_±r
->bandwidth_up;

75 i‡(
g©eway
.
b™dwidth_down
 == 0 ||

76 
g©eway
.
b™dwidth_up
 == 0) {

77 
g©eway
.
b™dwidth_down
 = 0;

78 
g©eway
.
b™dwidth_up
 = 0;

82 
	`b©adv_gw_node_upd©e
(
b©_¥iv
, 
‹ig
, &
g©eway
);

85 i‡(
g©eway
.
b™dwidth_down
 != 0 &&

86 
	`©omic_ªad
(&
b©_¥iv
->
gw
.
mode
Ë=
BATADV_GW_MODE_CLIENT
)

87 
	`b©adv_gw_check_ñe˘i⁄
(
b©_¥iv
, 
‹ig
);

88 
	}
}

94 
	$b©adv_gw_öô
(
b©adv_¥iv
 *
b©_¥iv
)

96 i‡(
b©_¥iv
->
Ægo_›s
->
gw
.
öô_£l_˛ass
)

97 
b©_¥iv
->
Ægo_›s
->
gw
.
	`öô_£l_˛ass
(bat_priv);

99 
	`©omic_£t
(&
b©_¥iv
->
gw
.
£l_˛ass
, 1);

101 
	`b©adv_tvlv_h™dÀr_ªgi°î
(
b©_¥iv
, 
b©adv_gw_tvlv_ogm_h™dÀr_v1
,

102 
NULL
, NULL, 
BATADV_TVLV_GW
, 1,

103 
BATADV_TVLV_HANDLER_OGM_CIFNOTFND
);

104 
	}
}

110 
	$b©adv_gw_‰ì
(
b©adv_¥iv
 *
b©_¥iv
)

112 
	`b©adv_tvlv_c⁄èöî_uƒegi°î
(
b©_¥iv
, 
BATADV_TVLV_GW
, 1);

113 
	`b©adv_tvlv_h™dÀr_uƒegi°î
(
b©_¥iv
, 
BATADV_TVLV_GW
, 1);

114 
	}
}

	@net/batman-adv/gateway_common.h

7 #i‚de‡
_NET_BATMAN_ADV_GATEWAY_COMMON_H_


8 
	#_NET_BATMAN_ADV_GATEWAY_COMMON_H_


	)

10 
	~"maö.h
"

15 
	eb©adv_b™dwidth_unôs
 {

17 
	mBATADV_BW_UNIT_KBIT
,

20 
	mBATADV_BW_UNIT_MBIT
,

23 
	#BATADV_GW_MODE_OFF_NAME
 "off"

	)

24 
	#BATADV_GW_MODE_CLIENT_NAME
 "˛õ¡"

	)

25 
	#BATADV_GW_MODE_SERVER_NAME
 "£rvî"

	)

27 
b©adv_gw_tvlv_c⁄èöî_upd©e
(
b©adv_¥iv
 *
b©_¥iv
);

28 
b©adv_gw_öô
(
b©adv_¥iv
 *
b©_¥iv
);

29 
b©adv_gw_‰ì
(
b©adv_¥iv
 *
b©_¥iv
);

	@net/batman-adv/hard-interface.c

7 
	~"h¨d-öãrÁ˚.h
"

8 
	~"maö.h
"

10 
	~<löux/©omic.h
>

11 
	~<löux/byã‹dî/gíîic.h
>

12 
	~<löux/compûî.h
>

13 
	~<löux/c⁄èöî_of.h
>

14 
	~<löux/î∫o.h
>

15 
	~<löux/gÂ.h
>

16 
	~<löux/if.h
>

17 
	~<löux/if_¨p.h
>

18 
	~<löux/if_ëhî.h
>

19 
	~<löux/kªf.h
>

20 
	~<löux/limôs.h
>

21 
	~<löux/li°.h
>

22 
	~<löux/mömax.h
>

23 
	~<löux/muãx.h
>

24 
	~<löux/√tdevi˚.h
>

25 
	~<löux/¥ötk.h
>

26 
	~<löux/rculi°.h
>

27 
	~<löux/π√éök.h
>

28 
	~<löux/¶ab.h
>

29 
	~<löux/•ölock.h
>

30 
	~<√t/√t_«me•a˚.h
>

31 
	~<√t/π√éök.h
>

32 
	~<u≠i/löux/b©adv_∑ckë.h
>

34 
	~"b©_v.h
"

35 
	~"bridge_lo›_avoid™˚.h
"

36 
	~"di°ribuãd-¨p-èbÀ.h
"

37 
	~"g©eway_˛õ¡.h
"

38 
	~"log.h
"

39 
	~"mesh-öãrÁ˚.h
"

40 
	~"‹igö©‹.h
"

41 
	~"£nd.h
"

42 
	~"å™¶©i⁄-èbÀ.h
"

49 
	$b©adv_h¨dif_ªÀa£
(
kªf
 *
ªf
)

51 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
;

53 
h¨d_iÁ˚
 = 
	`c⁄èöî_of
(
ªf
, 
b©adv_h¨d_iÁ˚
, 
ªfcou¡
);

54 
	`√tdev_put
(
h¨d_iÁ˚
->
√t_dev
, &h¨d_iÁ˚->
dev_åackî
);

56 
	`k‰ì_rcu
(
h¨d_iÁ˚
, 
rcu
);

57 
	}
}

65 
b©adv_h¨d_iÁ˚
 *

66 
	$b©adv_h¨dif_gë_by_√tdev
(c⁄° 
√t_devi˚
 *
√t_dev
)

68 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
;

70 
	`rcu_ªad_lock
();

71 
	`li°_f‹_óch_íåy_rcu
(
h¨d_iÁ˚
, &
b©adv_h¨dif_li°
, 
li°
) {

72 i‡(
h¨d_iÁ˚
->
√t_dev
 ==Çet_dev &&

73 
	`kªf_gë_u∆ess_zîo
(&
h¨d_iÁ˚
->
ªfcou¡
))

74 
out
;

77 
h¨d_iÁ˚
 = 
NULL
;

79 
out
:

80 
	`rcu_ªad_u∆ock
();

81  
h¨d_iÁ˚
;

82 
	}
}

91 
√t
 *
	$b©adv_gëlök_√t
(c⁄° 
√t_devi˚
 *
√tdev
,

92 
√t
 *
ÁŒback_√t
)

94 i‡(!
√tdev
->
π∆_lök_›s
)

95  
ÁŒback_√t
;

97 i‡(!
√tdev
->
π∆_lök_›s
->
gë_lök_√t
)

98  
ÁŒback_√t
;

100  
√tdev
->
π∆_lök_›s
->
	`gë_lök_√t
(netdev);

101 
	}
}

114 
boﬁ
 
	$b©adv_mutuÆ_∑ª¡s
(c⁄° 
√t_devi˚
 *
dev1
,

115 
√t
 *
√t1
,

116 c⁄° 
√t_devi˚
 *
dev2
,

117 
√t
 *
√t2
)

119 
dev1_∑ª¡_iÊök
 = 
	`dev_gë_iÊök
(
dev1
);

120 
dev2_∑ª¡_iÊök
 = 
	`dev_gë_iÊök
(
dev2
);

121 c⁄° 
√t
 *
dev1_∑ª¡_√t
;

122 c⁄° 
√t
 *
dev2_∑ª¡_√t
;

124 
dev1_∑ª¡_√t
 = 
	`b©adv_gëlök_√t
(
dev1
, 
√t1
);

125 
dev2_∑ª¡_√t
 = 
	`b©adv_gëlök_√t
(
dev2
, 
√t2
);

127 i‡(!
dev1_∑ª¡_iÊök
 || !
dev2_∑ª¡_iÊök
)

128  
Ál£
;

130  (
dev1_∑ª¡_iÊök
 =
dev2
->
ifödex
) &&

131 (
dev2_∑ª¡_iÊök
 =
dev1
->
ifödex
) &&

132 
	`√t_eq
(
dev1_∑ª¡_√t
, 
√t2
) &&

133 
	`√t_eq
(
dev2_∑ª¡_√t
, 
√t1
);

134 
	}
}

149 
boﬁ
 
	$b©adv_is_⁄_b©m™_iÁ˚
(c⁄° 
√t_devi˚
 *
√t_dev
)

151 
√t
 *√à
	`dev_√t
(
√t_dev
);

152 
√t_devi˚
 *
∑ª¡_dev
;

153 
√t
 *
∑ª¡_√t
;

154 
iÊök
;

155 
boﬁ
 
ªt
;

158 i‡(
	`b©adv_meshif_is_vÆid
(
√t_dev
))

159  
åue
;

161 
iÊök
 = 
	`dev_gë_iÊök
(
√t_dev
);

162 i‡(
iÊök
 == 0)

163  
Ál£
;

165 
∑ª¡_√t
 = 
	`b©adv_gëlök_√t
(
√t_dev
, 
√t
);

168 i‡(
√t
 =
∑ª¡_√t
 && 
iÊök
 =
√t_dev
->
ifödex
)

169  
Ál£
;

172 
∑ª¡_dev
 = 
	`__dev_gë_by_ödex
((
√t
 *)
∑ª¡_√t
, 
iÊök
);

173 i‡(!
∑ª¡_dev
) {

174 
	`¥_w¨n
("Cannot findÖarent device. Skipping batadv-on-batadv check for %s\n",

175 
√t_dev
->
«me
);

176  
Ál£
;

179 i‡(
	`b©adv_mutuÆ_∑ª¡s
(
√t_dev
, 
√t
, 
∑ª¡_dev
, 
∑ª¡_√t
))

180  
Ál£
;

182 
ªt
 = 
	`b©adv_is_⁄_b©m™_iÁ˚
(
∑ª¡_dev
);

184  
ªt
;

185 
	}
}

187 
boﬁ
 
	$b©adv_is_vÆid_iÁ˚
(c⁄° 
√t_devi˚
 *
√t_dev
)

189 i‡(
√t_dev
->
Êags
 & 
IFF_LOOPBACK
)

190  
Ál£
;

192 i‡(
√t_dev
->
ty≥
 !
ARPHRD_ETHER
)

193  
Ál£
;

195 i‡(
√t_dev
->
addr_Àn
 !
ETH_ALEN
)

196  
Ál£
;

199 i‡(
	`b©adv_is_⁄_b©m™_iÁ˚
(
√t_dev
))

200  
Ál£
;

202  
åue
;

203 
	}
}

216 
√t_devi˚
 *
	$b©adv_gë_ªÆ_√tdevi˚
(
√t_devi˚
 *
√tdev
)

218 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
 = 
NULL
;

219 
√t_devi˚
 *
ªÆ_√tdev
 = 
NULL
;

220 
√t
 *
ªÆ_√t
;

221 
√t
 *net;

222 
iÊök
;

224 
	`ASSERT_RTNL
();

226 i‡(!
√tdev
)

227  
NULL
;

229 
iÊök
 = 
	`dev_gë_iÊök
(
√tdev
);

230 i‡(
iÊök
 == 0) {

231 
	`dev_hﬁd
(
√tdev
);

232  
√tdev
;

235 
h¨d_iÁ˚
 = 
	`b©adv_h¨dif_gë_by_√tdev
(
√tdev
);

236 i‡(!
h¨d_iÁ˚
 || !h¨d_iÁ˚->
mesh_iÁ˚
)

237 
out
;

239 
√t
 = 
	`dev_√t
(
h¨d_iÁ˚
->
mesh_iÁ˚
);

240 
ªÆ_√t
 = 
	`b©adv_gëlök_√t
(
√tdev
, 
√t
);

243 i‡(
√t
 =
ªÆ_√t
 && 
√tdev
->
ifödex
 =
iÊök
) {

244 
ªÆ_√tdev
 = 
√tdev
;

245 
	`dev_hﬁd
(
ªÆ_√tdev
);

246 
out
;

249 
ªÆ_√tdev
 = 
	`dev_gë_by_ödex
(
ªÆ_√t
, 
iÊök
);

251 
out
:

252 
	`b©adv_h¨dif_put
(
h¨d_iÁ˚
);

253  
ªÆ_√tdev
;

254 
	}
}

264 
√t_devi˚
 *
	$b©adv_gë_ªÆ_√tdev
(
√t_devi˚
 *net_device)

266 
√t_devi˚
 *
ªÆ_√tdev
;

268 
	`π∆_lock
();

269 
ªÆ_√tdev
 = 
	`b©adv_gë_ªÆ_√tdevi˚
(
√t_devi˚
);

270 
	`π∆_u∆ock
();

272  
ªÆ_√tdev
;

273 
	}
}

283 
boﬁ
 
	$b©adv_is_wext_√tdev
(
√t_devi˚
 *net_device)

285 i‡(!
√t_devi˚
)

286  
Ál£
;

288 #ifde‡
CONFIG_WIRELESS_EXT


292 i‡(
√t_devi˚
->
wúñess_h™dÀrs
)

293  
åue
;

296  
Ál£
;

297 
	}
}

307 
boﬁ
 
	$b©adv_is_cfg80211_√tdev
(
√t_devi˚
 *net_device)

309 i‡(!
√t_devi˚
)

310  
Ál£
;

312 #i‡
	`IS_ENABLED
(
CONFIG_CFG80211
)

314 i‡(
√t_devi˚
->
õì80211_±r
)

315  
åue
;

318  
Ál£
;

319 
	}
}

327 
u32
 
	$b©adv_wifi_Êags_evÆu©e
(
√t_devi˚
 *net_device)

329 
u32
 
wifi_Êags
 = 0;

330 
√t_devi˚
 *
ªÆ_√tdev
;

332 i‡(
	`b©adv_is_wext_√tdev
(
√t_devi˚
))

333 
wifi_Êags
 |
BATADV_HARDIF_WIFI_WEXT_DIRECT
;

335 i‡(
	`b©adv_is_cfg80211_√tdev
(
√t_devi˚
))

336 
wifi_Êags
 |
BATADV_HARDIF_WIFI_CFG80211_DIRECT
;

338 
ªÆ_√tdev
 = 
	`b©adv_gë_ªÆ_√tdevi˚
(
√t_devi˚
);

339 i‡(!
ªÆ_√tdev
)

340  
wifi_Êags
;

342 i‡(
ªÆ_√tdev
 =
√t_devi˚
)

343 
out
;

345 i‡(
	`b©adv_is_wext_√tdev
(
ªÆ_√tdev
))

346 
wifi_Êags
 |
BATADV_HARDIF_WIFI_WEXT_INDIRECT
;

348 i‡(
	`b©adv_is_cfg80211_√tdev
(
ªÆ_√tdev
))

349 
wifi_Êags
 |
BATADV_HARDIF_WIFI_CFG80211_INDIRECT
;

351 
out
:

352 
	`dev_put
(
ªÆ_√tdev
);

353  
wifi_Êags
;

354 
	}
}

364 
boﬁ
 
	$b©adv_is_cfg80211_h¨dif
(
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
)

366 
u32
 
Ælowed_Êags
 = 0;

368 
Ælowed_Êags
 |
BATADV_HARDIF_WIFI_CFG80211_DIRECT
;

369 
Ælowed_Êags
 |
BATADV_HARDIF_WIFI_CFG80211_INDIRECT
;

371  !!(
h¨d_iÁ˚
->
wifi_Êags
 & 
Ælowed_Êags
);

372 
	}
}

380 
boﬁ
 
	$b©adv_is_wifi_h¨dif
(
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
)

382 i‡(!
h¨d_iÁ˚
)

383  
Ál£
;

385  
h¨d_iÁ˚
->
wifi_Êags
 != 0;

386 
	}
}

403 
	$b©adv_h¨dif_no_brﬂdˇ°
(
b©adv_h¨d_iÁ˚
 *
if_outgoög
,

404 
u8
 *
‹ig_addr
, u8 *
‹ig_√igh
)

406 
b©adv_h¨dif_√igh_node
 *
h¨dif_√igh
;

407 
hli°_node
 *
fú°
;

408 
ªt
 = 
BATADV_HARDIF_BCAST_OK
;

410 
	`rcu_ªad_lock
();

413 
fú°
 = 
	`rcu_dîe„ªn˚
(
	`hli°_fú°_rcu
(&
if_outgoög
->
√igh_li°
));

414 i‡(!
fú°
) {

415 
ªt
 = 
BATADV_HARDIF_BCAST_NORECIPIENT
;

416 
out
;

420 i‡(
	`rcu_dîe„ªn˚
(
	`hli°_√xt_rcu
(
fú°
)))

421 
out
;

423 
h¨dif_√igh
 = 
	`hli°_íåy
(
fú°
, 
b©adv_h¨dif_√igh_node
,

424 
li°
);

427 i‡(
‹ig_addr
 && 
	`b©adv_com∑ª_ëh
(
h¨dif_√igh
->
‹ig
, orig_addr)) {

428 
ªt
 = 
BATADV_HARDIF_BCAST_DUPORIG
;

430 } i‡(
‹ig_√igh
 &&

431 
	`b©adv_com∑ª_ëh
(
h¨dif_√igh
->
‹ig
, 
‹ig_√igh
)) {

432 
ªt
 = 
BATADV_HARDIF_BCAST_DUPFWD
;

435 
out
:

436 
	`rcu_ªad_u∆ock
();

437  
ªt
;

438 
	}
}

440 
b©adv_h¨d_iÁ˚
 *

441 
	$b©adv_h¨dif_gë_a˘ive
(c⁄° 
√t_devi˚
 *
mesh_iÁ˚
)

443 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
;

445 
	`rcu_ªad_lock
();

446 
	`li°_f‹_óch_íåy_rcu
(
h¨d_iÁ˚
, &
b©adv_h¨dif_li°
, 
li°
) {

447 i‡(
h¨d_iÁ˚
->
mesh_iÁ˚
 != mesh_iface)

450 i‡(
h¨d_iÁ˚
->
if_°©us
 =
BATADV_IF_ACTIVE
 &&

451 
	`kªf_gë_u∆ess_zîo
(&
h¨d_iÁ˚
->
ªfcou¡
))

452 
out
;

455 
h¨d_iÁ˚
 = 
NULL
;

457 
out
:

458 
	`rcu_ªad_u∆ock
();

459  
h¨d_iÁ˚
;

460 
	}
}

462 
	$b©adv_¥im¨y_if_upd©e_addr
(
b©adv_¥iv
 *
b©_¥iv
,

463 
b©adv_h¨d_iÁ˚
 *
ﬁdif
)

465 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
;

467 
¥im¨y_if
 = 
	`b©adv_¥im¨y_if_gë_£À˘ed
(
b©_¥iv
);

468 i‡(!
¥im¨y_if
)

469 
out
;

471 
	`b©adv_d©_öô_own_addr
(
b©_¥iv
, 
¥im¨y_if
);

472 
	`b©adv_bœ_upd©e_‹ig_addªss
(
b©_¥iv
, 
¥im¨y_if
, 
ﬁdif
);

473 
out
:

474 
	`b©adv_h¨dif_put
(
¥im¨y_if
);

475 
	}
}

477 
	$b©adv_¥im¨y_if_£À˘
(
b©adv_¥iv
 *
b©_¥iv
,

478 
b©adv_h¨d_iÁ˚
 *
√w_h¨d_iÁ˚
)

480 
b©adv_h¨d_iÁ˚
 *
cuº_h¨d_iÁ˚
;

482 
	`ASSERT_RTNL
();

484 i‡(
√w_h¨d_iÁ˚
)

485 
	`kªf_gë
(&
√w_h¨d_iÁ˚
->
ªfcou¡
);

487 
cuº_h¨d_iÁ˚
 = 
	`rcu_ª∂a˚_poöãr
(
b©_¥iv
->
¥im¨y_if
,

488 
√w_h¨d_iÁ˚
, 1);

490 i‡(!
√w_h¨d_iÁ˚
)

491 
out
;

493 
b©_¥iv
->
Ægo_›s
->
iÁ˚
.
	`¥im¨y_£t
(
√w_h¨d_iÁ˚
);

494 
	`b©adv_¥im¨y_if_upd©e_addr
(
b©_¥iv
, 
cuº_h¨d_iÁ˚
);

496 
out
:

497 
	`b©adv_h¨dif_put
(
cuº_h¨d_iÁ˚
);

498 
	}
}

500 
boﬁ


501 
	$b©adv_h¨dif_is_iÁ˚_up
(c⁄° 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
)

503 i‡(
h¨d_iÁ˚
->
√t_dev
->
Êags
 & 
IFF_UP
)

504  
åue
;

506  
Ál£
;

507 
	}
}

509 
	$b©adv_check_known_mac_addr
(c⁄° 
√t_devi˚
 *
√t_dev
)

511 c⁄° 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
;

513 
	`rcu_ªad_lock
();

514 
	`li°_f‹_óch_íåy_rcu
(
h¨d_iÁ˚
, &
b©adv_h¨dif_li°
, 
li°
) {

515 i‡(
h¨d_iÁ˚
->
if_°©us
 !
BATADV_IF_ACTIVE
 &&

516 
h¨d_iÁ˚
->
if_°©us
 !
BATADV_IF_TO_BE_ACTIVATED
)

519 i‡(
h¨d_iÁ˚
->
√t_dev
 ==Çet_dev)

522 i‡(!
	`b©adv_com∑ª_ëh
(
h¨d_iÁ˚
->
√t_dev
->
dev_addr
,

523 
√t_dev
->
dev_addr
))

526 
	`¥_w¨n
("TheÇewlyádded macáddress (%pM)álreadyÉxists on: %s\n",

527 
√t_dev
->
dev_addr
, 
h¨d_iÁ˚
->√t_dev->
«me
);

528 
	`¥_w¨n
("It is stronglyÑecommendedÅo keep macáddresses uniqueÅoávoidÖroblems!\n");

530 
	`rcu_ªad_u∆ock
();

531 
	}
}

537 
	$b©adv_h¨dif_ªˇlc_exåa_skbroom
(
√t_devi˚
 *
mesh_iÁ˚
)

539 c⁄° 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
;

540 
lowî_hódî_Àn
 = 
ETH_HLEN
;

541 
lowî_hódroom
 = 0;

542 
lowî_èûroom
 = 0;

543 
√eded_hódroom
;

545 
	`rcu_ªad_lock
();

546 
	`li°_f‹_óch_íåy_rcu
(
h¨d_iÁ˚
, &
b©adv_h¨dif_li°
, 
li°
) {

547 i‡(
h¨d_iÁ˚
->
if_°©us
 =
BATADV_IF_NOT_IN_USE
)

550 i‡(
h¨d_iÁ˚
->
mesh_iÁ˚
 != mesh_iface)

553 
lowî_hódî_Àn
 = 
	`max_t
(,Üower_header_len,

554 
h¨d_iÁ˚
->
√t_dev
->
h¨d_hódî_Àn
);

556 
lowî_hódroom
 = 
	`max_t
(,Üower_headroom,

557 
h¨d_iÁ˚
->
√t_dev
->
√eded_hódroom
);

559 
lowî_èûroom
 = 
	`max_t
(,Üower_tailroom,

560 
h¨d_iÁ˚
->
√t_dev
->
√eded_èûroom
);

562 
	`rcu_ªad_u∆ock
();

564 
√eded_hódroom
 = 
lowî_hódroom
 + (
lowî_hódî_Àn
 - 
ETH_HLEN
);

565 
√eded_hódroom
 +
	`b©adv_max_hódî_Àn
();

568 
√eded_hódroom
 +(
b©adv_‰ag_∑ckë
);

570 
mesh_iÁ˚
->
√eded_hódroom
 =Çeeded_headroom;

571 
mesh_iÁ˚
->
√eded_èûroom
 = 
lowî_èûroom
;

572 
	}
}

581 
	$b©adv_h¨dif_mö_mtu
(
√t_devi˚
 *
mesh_iÁ˚
)

583 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
mesh_iÁ˚
);

584 c⁄° 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
;

585 
mö_mtu
 = 
INT_MAX
;

587 
	`rcu_ªad_lock
();

588 
	`li°_f‹_óch_íåy_rcu
(
h¨d_iÁ˚
, &
b©adv_h¨dif_li°
, 
li°
) {

589 i‡(
h¨d_iÁ˚
->
if_°©us
 !
BATADV_IF_ACTIVE
 &&

590 
h¨d_iÁ˚
->
if_°©us
 !
BATADV_IF_TO_BE_ACTIVATED
)

593 i‡(
h¨d_iÁ˚
->
mesh_iÁ˚
 != mesh_iface)

596 
mö_mtu
 = 
	`mö_t
(, 
h¨d_iÁ˚
->
√t_dev
->
mtu
, min_mtu);

598 
	`rcu_ªad_u∆ock
();

600 i‡(
	`©omic_ªad
(&
b©_¥iv
->
‰agmíèti⁄
) == 0)

601 
out
;

607 
mö_mtu
 = 
	`mö_t
(, mö_mtu, 
BATADV_FRAG_MAX_FRAG_SIZE
);

608 
mö_mtu
 -(
b©adv_‰ag_∑ckë
);

609 
mö_mtu
 *
BATADV_FRAG_MAX_FRAGMENTS
;

611 
out
:

617 
	`©omic_£t
(&
b©_¥iv
->
∑ckë_size_max
, 
mö_mtu
);

622  
	`mö_t
(, 
mö_mtu
 - 
	`b©adv_max_hódî_Àn
(), 
BATADV_MAX_MTU
);

623 
	}
}

630 
	$b©adv_upd©e_mö_mtu
(
√t_devi˚
 *
mesh_iÁ˚
)

632 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
mesh_iÁ˚
);

633 
limô_mtu
;

634 
mtu
;

636 
mtu
 = 
	`b©adv_h¨dif_mö_mtu
(
mesh_iÁ˚
);

638 i‡(
b©_¥iv
->
mtu_£t_by_u£r
)

639 
limô_mtu
 = 
b©_¥iv
->
mtu_£t_by_u£r
;

641 
limô_mtu
 = 
ETH_DATA_LEN
;

643 
mtu
 = 
	`mö
(mtu, 
limô_mtu
);

644 
	`dev_£t_mtu
(
mesh_iÁ˚
, 
mtu
);

649 
	`b©adv_â_loˇl_ªsize_to_mtu
(
mesh_iÁ˚
);

650 
	}
}

653 
	$b©adv_h¨dif_a˘iv©e_öãrÁ˚
(
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
)

655 
b©adv_¥iv
 *
b©_¥iv
;

656 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
 = 
NULL
;

658 i‡(
h¨d_iÁ˚
->
if_°©us
 !
BATADV_IF_INACTIVE
)

659 
out
;

661 
b©_¥iv
 = 
	`√tdev_¥iv
(
h¨d_iÁ˚
->
mesh_iÁ˚
);

663 
b©_¥iv
->
Ægo_›s
->
iÁ˚
.
	`upd©e_mac
(
h¨d_iÁ˚
);

664 
h¨d_iÁ˚
->
if_°©us
 = 
BATADV_IF_TO_BE_ACTIVATED
;

669 
¥im¨y_if
 = 
	`b©adv_¥im¨y_if_gë_£À˘ed
(
b©_¥iv
);

670 i‡(!
¥im¨y_if
)

671 
	`b©adv_¥im¨y_if_£À˘
(
b©_¥iv
, 
h¨d_iÁ˚
);

673 
	`b©adv_öfo
(
h¨d_iÁ˚
->
mesh_iÁ˚
, "Interfaceáctivated: %s\n",

674 
h¨d_iÁ˚
->
√t_dev
->
«me
);

676 
	`b©adv_upd©e_mö_mtu
(
h¨d_iÁ˚
->
mesh_iÁ˚
);

678 i‡(
b©_¥iv
->
Ægo_›s
->
iÁ˚
.
a˘iv©e
)

679 
b©_¥iv
->
Ægo_›s
->
iÁ˚
.
	`a˘iv©e
(
h¨d_iÁ˚
);

681 
out
:

682 
	`b©adv_h¨dif_put
(
¥im¨y_if
);

683 
	}
}

686 
	$b©adv_h¨dif_dó˘iv©e_öãrÁ˚
(
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
)

688 i‡(
h¨d_iÁ˚
->
if_°©us
 !
BATADV_IF_ACTIVE
 &&

689 
h¨d_iÁ˚
->
if_°©us
 !
BATADV_IF_TO_BE_ACTIVATED
)

692 
h¨d_iÁ˚
->
if_°©us
 = 
BATADV_IF_INACTIVE
;

694 
	`b©adv_öfo
(
h¨d_iÁ˚
->
mesh_iÁ˚
, "Interface deactivated: %s\n",

695 
h¨d_iÁ˚
->
√t_dev
->
«me
);

697 
	`b©adv_upd©e_mö_mtu
(
h¨d_iÁ˚
->
mesh_iÁ˚
);

698 
	}
}

707 
	$b©adv_h¨dif_íabÀ_öãrÁ˚
(
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
,

708 
√t_devi˚
 *
mesh_iÁ˚
)

710 
b©adv_¥iv
 *
b©_¥iv
;

711 
__be16
 
ëhîty≥
 = 
	`ht⁄s
(
ETH_P_BATMAN
);

712 
max_hódî_Àn
 = 
	`b©adv_max_hódî_Àn
();

713 
ªquúed_mtu
;

714 
h¨dif_mtu
;

715 
ªt
;

717 
h¨dif_mtu
 = 
	`READ_ONCE
(
h¨d_iÁ˚
->
√t_dev
->
mtu
);

718 
ªquúed_mtu
 = 
	`READ_ONCE
(
mesh_iÁ˚
->
mtu
Ë+ 
max_hódî_Àn
;

720 i‡(
h¨dif_mtu
 < 
ETH_MIN_MTU
 + 
max_hódî_Àn
)

721  -
EINVAL
;

723 i‡(
h¨d_iÁ˚
->
if_°©us
 !
BATADV_IF_NOT_IN_USE
)

724 
out
;

726 
	`kªf_gë
(&
h¨d_iÁ˚
->
ªfcou¡
);

728 
	`√tdev_hﬁd
(
mesh_iÁ˚
, &
h¨d_iÁ˚
->
meshif_dev_åackî
, 
GFP_ATOMIC
);

729 
h¨d_iÁ˚
->
mesh_iÁ˚
 = mesh_iface;

730 
b©_¥iv
 = 
	`√tdev_¥iv
(
h¨d_iÁ˚
->
mesh_iÁ˚
);

732 
ªt
 = 
	`√tdev_ma°î_uµî_dev_lök
(
h¨d_iÁ˚
->
√t_dev
,

733 
mesh_iÁ˚
, 
NULL
, NULL, NULL);

734 i‡(
ªt
)

735 
îr_dev
;

737 
ªt
 = 
b©_¥iv
->
Ægo_›s
->
iÁ˚
.
	`íabÀ
(
h¨d_iÁ˚
);

738 i‡(
ªt
 < 0)

739 
îr_uµî
;

741 
h¨d_iÁ˚
->
if_°©us
 = 
BATADV_IF_INACTIVE
;

743 
	`kªf_gë
(&
h¨d_iÁ˚
->
ªfcou¡
);

744 
h¨d_iÁ˚
->
b©m™_adv_±y≥
.
ty≥
 = 
ëhîty≥
;

745 
h¨d_iÁ˚
->
b©m™_adv_±y≥
.
func
 = 
b©adv_b©m™_skb_ªcv
;

746 
h¨d_iÁ˚
->
b©m™_adv_±y≥
.
dev
 = h¨d_iÁ˚->
√t_dev
;

747 
	`dev_add_∑ck
(&
h¨d_iÁ˚
->
b©m™_adv_±y≥
);

749 
	`b©adv_öfo
(
h¨d_iÁ˚
->
mesh_iÁ˚
, "Adding interface: %s\n",

750 
h¨d_iÁ˚
->
√t_dev
->
«me
);

752 i‡(
	`©omic_ªad
(&
b©_¥iv
->
‰agmíèti⁄
) &&

753 
h¨dif_mtu
 < 
ªquúed_mtu
)

754 
	`b©adv_öfo
(
h¨d_iÁ˚
->
mesh_iÁ˚
,

756 
h¨d_iÁ˚
->
√t_dev
->
«me
, 
h¨dif_mtu
,

757 
ªquúed_mtu
);

759 i‡(!
	`©omic_ªad
(&
b©_¥iv
->
‰agmíèti⁄
) &&

760 
h¨dif_mtu
 < 
ªquúed_mtu
)

761 
	`b©adv_öfo
(
h¨d_iÁ˚
->
mesh_iÁ˚
,

763 
h¨d_iÁ˚
->
√t_dev
->
«me
, 
h¨dif_mtu
,

764 
ªquúed_mtu
);

766 i‡(
	`b©adv_h¨dif_is_iÁ˚_up
(
h¨d_iÁ˚
))

767 
	`b©adv_h¨dif_a˘iv©e_öãrÁ˚
(
h¨d_iÁ˚
);

769 
	`b©adv_îr
(
h¨d_iÁ˚
->
mesh_iÁ˚
,

771 
h¨d_iÁ˚
->
√t_dev
->
«me
);

773 
	`b©adv_h¨dif_ªˇlc_exåa_skbroom
(
mesh_iÁ˚
);

775 i‡(
b©_¥iv
->
Ægo_›s
->
iÁ˚
.
íabÀd
)

776 
b©_¥iv
->
Ægo_›s
->
iÁ˚
.
	`íabÀd
(
h¨d_iÁ˚
);

778 
out
:

781 
îr_uµî
:

782 
	`√tdev_uµî_dev_u∆ök
(
h¨d_iÁ˚
->
√t_dev
, 
mesh_iÁ˚
);

783 
îr_dev
:

784 
h¨d_iÁ˚
->
mesh_iÁ˚
 = 
NULL
;

785 
	`√tdev_put
(
mesh_iÁ˚
, &
h¨d_iÁ˚
->
meshif_dev_åackî
);

786 
	`b©adv_h¨dif_put
(
h¨d_iÁ˚
);

787  
ªt
;

788 
	}
}

800 
size_t
 
	$b©adv_h¨dif_˙t
(c⁄° 
√t_devi˚
 *
mesh_iÁ˚
)

802 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
;

803 
size_t
 
cou¡
 = 0;

805 
	`rcu_ªad_lock
();

806 
	`li°_f‹_óch_íåy_rcu
(
h¨d_iÁ˚
, &
b©adv_h¨dif_li°
, 
li°
) {

807 i‡(
h¨d_iÁ˚
->
mesh_iÁ˚
 != mesh_iface)

810 
cou¡
++;

812 
	`rcu_ªad_u∆ock
();

814  
cou¡
;

815 
	}
}

821 
	$b©adv_h¨dif_dißbÀ_öãrÁ˚
(
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
)

823 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
h¨d_iÁ˚
->
mesh_iÁ˚
);

824 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
 = 
NULL
;

826 
	`b©adv_h¨dif_dó˘iv©e_öãrÁ˚
(
h¨d_iÁ˚
);

828 i‡(
h¨d_iÁ˚
->
if_°©us
 !
BATADV_IF_INACTIVE
)

829 
out
;

831 
	`b©adv_öfo
(
h¨d_iÁ˚
->
mesh_iÁ˚
, "Removing interface: %s\n",

832 
h¨d_iÁ˚
->
√t_dev
->
«me
);

833 
	`dev_ªmove_∑ck
(&
h¨d_iÁ˚
->
b©m™_adv_±y≥
);

834 
	`b©adv_h¨dif_put
(
h¨d_iÁ˚
);

836 
¥im¨y_if
 = 
	`b©adv_¥im¨y_if_gë_£À˘ed
(
b©_¥iv
);

837 i‡(
h¨d_iÁ˚
 =
¥im¨y_if
) {

838 
b©adv_h¨d_iÁ˚
 *
√w_if
;

840 
√w_if
 = 
	`b©adv_h¨dif_gë_a˘ive
(
h¨d_iÁ˚
->
mesh_iÁ˚
);

841 
	`b©adv_¥im¨y_if_£À˘
(
b©_¥iv
, 
√w_if
);

843 
	`b©adv_h¨dif_put
(
√w_if
);

846 
b©_¥iv
->
Ægo_›s
->
iÁ˚
.
	`dißbÀ
(
h¨d_iÁ˚
);

847 
h¨d_iÁ˚
->
if_°©us
 = 
BATADV_IF_NOT_IN_USE
;

850 
	`b©adv_purge_‹ig_ªf
(
b©_¥iv
);

851 
	`b©adv_purge_out°™dög_∑ckës
(
b©_¥iv
, 
h¨d_iÁ˚
);

852 
	`√tdev_put
(
h¨d_iÁ˚
->
mesh_iÁ˚
, &h¨d_iÁ˚->
meshif_dev_åackî
);

854 
	`√tdev_uµî_dev_u∆ök
(
h¨d_iÁ˚
->
√t_dev
, h¨d_iÁ˚->
mesh_iÁ˚
);

855 
	`b©adv_h¨dif_ªˇlc_exåa_skbroom
(
h¨d_iÁ˚
->
mesh_iÁ˚
);

858 i‡(
	`b©adv_h¨dif_˙t
(
h¨d_iÁ˚
->
mesh_iÁ˚
) <= 1)

859 
	`b©adv_gw_check_˛õ¡_°›
(
b©_¥iv
);

861 
h¨d_iÁ˚
->
mesh_iÁ˚
 = 
NULL
;

862 
	`b©adv_h¨dif_put
(
h¨d_iÁ˚
);

864 
out
:

865 
	`b©adv_h¨dif_put
(
¥im¨y_if
);

866 
	}
}

868 
b©adv_h¨d_iÁ˚
 *

869 
	$b©adv_h¨dif_add_öãrÁ˚
(
√t_devi˚
 *
√t_dev
)

871 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
;

873 
	`ASSERT_RTNL
();

875 i‡(!
	`b©adv_is_vÆid_iÁ˚
(
√t_dev
))

876  
NULL
;

878 
h¨d_iÁ˚
 = 
	`kzÆloc
((*h¨d_iÁ˚), 
GFP_ATOMIC
);

879 i‡(!
h¨d_iÁ˚
)

880  
NULL
;

882 
	`√tdev_hﬁd
(
√t_dev
, &
h¨d_iÁ˚
->
dev_åackî
, 
GFP_ATOMIC
);

883 
h¨d_iÁ˚
->
√t_dev
 =Çet_dev;

885 
h¨d_iÁ˚
->
mesh_iÁ˚
 = 
NULL
;

886 
h¨d_iÁ˚
->
if_°©us
 = 
BATADV_IF_NOT_IN_USE
;

888 
	`INIT_LIST_HEAD
(&
h¨d_iÁ˚
->
li°
);

889 
	`INIT_HLIST_HEAD
(&
h¨d_iÁ˚
->
√igh_li°
);

891 
	`muãx_öô
(&
h¨d_iÁ˚
->
b©_iv
.
ogm_buff_muãx
);

892 
	`•ö_lock_öô
(&
h¨d_iÁ˚
->
√igh_li°_lock
);

893 
	`kªf_öô
(&
h¨d_iÁ˚
->
ªfcou¡
);

895 
h¨d_iÁ˚
->
num_bˇ°s
 = 
BATADV_NUM_BCASTS_DEFAULT
;

896 
h¨d_iÁ˚
->
wifi_Êags
 = 
	`b©adv_wifi_Êags_evÆu©e
(
√t_dev
);

897 i‡(
	`b©adv_is_wifi_h¨dif
(
h¨d_iÁ˚
))

898 
h¨d_iÁ˚
->
num_bˇ°s
 = 
BATADV_NUM_BCASTS_WIRELESS
;

900 
	`©omic_£t
(&
h¨d_iÁ˚
->
h›_≥«…y
, 0);

902 
	`b©adv_v_h¨dif_öô
(
h¨d_iÁ˚
);

904 
	`b©adv_check_known_mac_addr
(
h¨d_iÁ˚
->
√t_dev
);

905 
	`kªf_gë
(&
h¨d_iÁ˚
->
ªfcou¡
);

906 
	`li°_add_èû_rcu
(&
h¨d_iÁ˚
->
li°
, &
b©adv_h¨dif_li°
);

907 
b©adv_h¨dif_gíî©i⁄
++;

909  
h¨d_iÁ˚
;

910 
	}
}

912 
	$b©adv_h¨dif_ªmove_öãrÁ˚
(
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
)

914 
	`ASSERT_RTNL
();

917 i‡(
h¨d_iÁ˚
->
if_°©us
 !
BATADV_IF_NOT_IN_USE
)

918 
	`b©adv_h¨dif_dißbÀ_öãrÁ˚
(
h¨d_iÁ˚
);

920 i‡(
h¨d_iÁ˚
->
if_°©us
 !
BATADV_IF_NOT_IN_USE
)

923 
h¨d_iÁ˚
->
if_°©us
 = 
BATADV_IF_TO_BE_REMOVED
;

924 
	`b©adv_h¨dif_put
(
h¨d_iÁ˚
);

925 
	}
}

934 
	$b©adv_h¨d_if_evít_meshif
(
evít
,

935 
√t_devi˚
 *
√t_dev
)

937 
b©adv_¥iv
 *
b©_¥iv
;

939 
evít
) {

940 
NETDEV_REGISTER
:

941 
b©_¥iv
 = 
	`√tdev_¥iv
(
√t_dev
);

942 
	`b©adv_meshif_¸óã_vœn
(
b©_¥iv
, 
BATADV_NO_FLAGS
);

946  
NOTIFY_DONE
;

947 
	}
}

949 
	$b©adv_h¨d_if_evít
(
nŸifõr_block
 *
this
,

950 
evít
, *
±r
)

952 
√t_devi˚
 *
√t_dev
 = 
	`√tdev_nŸifõr_öfo_to_dev
(
±r
);

953 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
;

954 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
 = 
NULL
;

955 
b©adv_¥iv
 *
b©_¥iv
;

957 i‡(
	`b©adv_meshif_is_vÆid
(
√t_dev
))

958  
	`b©adv_h¨d_if_evít_meshif
(
evít
, 
√t_dev
);

960 
h¨d_iÁ˚
 = 
	`b©adv_h¨dif_gë_by_√tdev
(
√t_dev
);

961 i‡(!
h¨d_iÁ˚
 && (
evít
 =
NETDEV_REGISTER
 ||

962 
evít
 =
NETDEV_POST_TYPE_CHANGE
))

963 
h¨d_iÁ˚
 = 
	`b©adv_h¨dif_add_öãrÁ˚
(
√t_dev
);

965 i‡(!
h¨d_iÁ˚
)

966 
out
;

968 
evít
) {

969 
NETDEV_UP
:

970 
	`b©adv_h¨dif_a˘iv©e_öãrÁ˚
(
h¨d_iÁ˚
);

972 
NETDEV_GOING_DOWN
:

973 
NETDEV_DOWN
:

974 
	`b©adv_h¨dif_dó˘iv©e_öãrÁ˚
(
h¨d_iÁ˚
);

976 
NETDEV_UNREGISTER
:

977 
NETDEV_PRE_TYPE_CHANGE
:

978 
	`li°_dñ_rcu
(&
h¨d_iÁ˚
->
li°
);

979 
b©adv_h¨dif_gíî©i⁄
++;

981 
	`b©adv_h¨dif_ªmove_öãrÁ˚
(
h¨d_iÁ˚
);

983 
NETDEV_CHANGEMTU
:

984 i‡(
h¨d_iÁ˚
->
mesh_iÁ˚
)

985 
	`b©adv_upd©e_mö_mtu
(
h¨d_iÁ˚
->
mesh_iÁ˚
);

987 
NETDEV_CHANGEADDR
:

988 i‡(
h¨d_iÁ˚
->
if_°©us
 =
BATADV_IF_NOT_IN_USE
)

989 
h¨dif_put
;

991 
	`b©adv_check_known_mac_addr
(
h¨d_iÁ˚
->
√t_dev
);

993 
b©_¥iv
 = 
	`√tdev_¥iv
(
h¨d_iÁ˚
->
mesh_iÁ˚
);

994 
b©_¥iv
->
Ægo_›s
->
iÁ˚
.
	`upd©e_mac
(
h¨d_iÁ˚
);

996 
¥im¨y_if
 = 
	`b©adv_¥im¨y_if_gë_£À˘ed
(
b©_¥iv
);

997 i‡(!
¥im¨y_if
)

998 
h¨dif_put
;

1000 i‡(
h¨d_iÁ˚
 =
¥im¨y_if
)

1001 
	`b©adv_¥im¨y_if_upd©e_addr
(
b©_¥iv
, 
NULL
);

1003 
NETDEV_CHANGEUPPER
:

1004 
h¨d_iÁ˚
->
wifi_Êags
 = 
	`b©adv_wifi_Êags_evÆu©e
(
√t_dev
);

1005 i‡(
	`b©adv_is_wifi_h¨dif
(
h¨d_iÁ˚
))

1006 
h¨d_iÁ˚
->
num_bˇ°s
 = 
BATADV_NUM_BCASTS_WIRELESS
;

1012 
h¨dif_put
:

1013 
	`b©adv_h¨dif_put
(
h¨d_iÁ˚
);

1014 
out
:

1015 
	`b©adv_h¨dif_put
(
¥im¨y_if
);

1016  
NOTIFY_DONE
;

1017 
	}
}

1019 
nŸifõr_block
 
	gb©adv_h¨d_if_nŸifõr
 = {

1020 .
nŸifõr_ˇŒ
 = 
b©adv_h¨d_if_evít
,

	@net/batman-adv/hard-interface.h

7 #i‚de‡
_NET_BATMAN_ADV_HARD_INTERFACE_H_


8 
	#_NET_BATMAN_ADV_HARD_INTERFACE_H_


	)

10 
	~"maö.h
"

12 
	~<löux/compûî.h
>

13 
	~<löux/kªf.h
>

14 
	~<löux/√tdevi˚.h
>

15 
	~<löux/nŸifõr.h
>

16 
	~<löux/rcupd©e.h
>

17 
	~<löux/°ddef.h
>

18 
	~<löux/ty≥s.h
>

23 
	eb©adv_h¨d_if_°©e
 {

28 
	mBATADV_IF_NOT_IN_USE
,

34 
	mBATADV_IF_TO_BE_REMOVED
,

37 
	mBATADV_IF_INACTIVE
,

40 
	mBATADV_IF_ACTIVE
,

43 
	mBATADV_IF_TO_BE_ACTIVATED
,

49 
	eb©adv_h¨d_if_bˇ°
 {

51 
	mBATADV_HARDIF_BCAST_OK
 = 0,

57 
	mBATADV_HARDIF_BCAST_NORECIPIENT
,

63 
	mBATADV_HARDIF_BCAST_DUPFWD
,

66 
	mBATADV_HARDIF_BCAST_DUPORIG
,

69 
nŸifõr_block
 
b©adv_h¨d_if_nŸifõr
;

71 
√t_devi˚
 *
b©adv_gë_ªÆ_√tdev
(net_device *net_device);

72 
boﬁ
 
b©adv_is_cfg80211_h¨dif
(
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
);

73 
boﬁ
 
b©adv_is_wifi_h¨dif
(
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
);

74 
b©adv_h¨d_iÁ˚
*

75 
b©adv_h¨dif_gë_by_√tdev
(c⁄° 
√t_devi˚
 *
√t_dev
);

76 
b©adv_h¨dif_íabÀ_öãrÁ˚
(
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
,

77 
√t_devi˚
 *
mesh_iÁ˚
);

78 
b©adv_h¨dif_dißbÀ_öãrÁ˚
(
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
);

79 
b©adv_h¨dif_mö_mtu
(
√t_devi˚
 *
mesh_iÁ˚
);

80 
b©adv_upd©e_mö_mtu
(
√t_devi˚
 *
mesh_iÁ˚
);

81 
b©adv_h¨dif_ªÀa£
(
kªf
 *
ªf
);

82 
b©adv_h¨dif_no_brﬂdˇ°
(
b©adv_h¨d_iÁ˚
 *
if_outgoög
,

83 
u8
 *
‹ig_addr
, u8 *
‹ig_√igh
);

90 
ölöe
 
	$b©adv_h¨dif_put
(
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
)

92 i‡(!
h¨d_iÁ˚
)

95 
	`kªf_put
(&
h¨d_iÁ˚
->
ªfcou¡
, 
b©adv_h¨dif_ªÀa£
);

96 
	}
}

104 
ölöe
 
b©adv_h¨d_iÁ˚
 *

105 
	$b©adv_¥im¨y_if_gë_£À˘ed
(
b©adv_¥iv
 *
b©_¥iv
)

107 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
;

109 
	`rcu_ªad_lock
();

110 
h¨d_iÁ˚
 = 
	`rcu_dîe„ªn˚
(
b©_¥iv
->
¥im¨y_if
);

111 i‡(!
h¨d_iÁ˚
)

112 
out
;

114 i‡(!
	`kªf_gë_u∆ess_zîo
(&
h¨d_iÁ˚
->
ªfcou¡
))

115 
h¨d_iÁ˚
 = 
NULL
;

117 
out
:

118 
	`rcu_ªad_u∆ock
();

119  
h¨d_iÁ˚
;

120 
	}
}

	@net/batman-adv/hash.c

7 
	~"hash.h
"

8 
	~"maö.h
"

10 
	~<löux/gÂ.h
>

11 
	~<löux/lockdï.h
>

12 
	~<löux/¶ab.h
>

15 
	$b©adv_hash_öô
(
b©adv_hashèbÀ
 *
hash
)

17 
u32
 
i
;

19 
i
 = 0; i < 
hash
->
size
; i++) {

20 
	`INIT_HLIST_HEAD
(&
hash
->
èbÀ
[
i
]);

21 
	`•ö_lock_öô
(&
hash
->
li°_locks
[
i
]);

24 
	`©omic_£t
(&
hash
->
gíî©i⁄
, 0);

25 
	}
}

31 
	$b©adv_hash_de°roy
(
b©adv_hashèbÀ
 *
hash
)

33 
	`k‰ì
(
hash
->
li°_locks
);

34 
	`k‰ì
(
hash
->
èbÀ
);

35 
	`k‰ì
(
hash
);

36 
	}
}

44 
b©adv_hashèbÀ
 *
	$b©adv_hash_√w
(
u32
 
size
)

46 
b©adv_hashèbÀ
 *
hash
;

48 
hash
 = 
	`kmÆloc
((*hash), 
GFP_ATOMIC
);

49 i‡(!
hash
)

50  
NULL
;

52 
hash
->
èbÀ
 = 
	`kmÆloc_¨øy
(
size
, (*hash->èbÀ), 
GFP_ATOMIC
);

53 i‡(!
hash
->
èbÀ
)

54 
‰ì_hash
;

56 
hash
->
li°_locks
 = 
	`kmÆloc_¨øy
(
size
, (*hash->list_locks),

57 
GFP_ATOMIC
);

58 i‡(!
hash
->
li°_locks
)

59 
‰ì_èbÀ
;

61 
hash
->
size
 = size;

62 
	`b©adv_hash_öô
(
hash
);

63  
hash
;

65 
‰ì_èbÀ
:

66 
	`k‰ì
(
hash
->
èbÀ
);

67 
‰ì_hash
:

68 
	`k‰ì
(
hash
);

69  
NULL
;

70 
	}
}

77 
	$b©adv_hash_£t_lock_˛ass
(
b©adv_hashèbÀ
 *
hash
,

78 
lock_˛ass_key
 *
key
)

80 
u32
 
i
;

82 
i
 = 0; i < 
hash
->
size
; i++)

83 
	`lockdï_£t_˛ass
(&
hash
->
li°_locks
[
i
], 
key
);

84 
	}
}

	@net/batman-adv/hash.h

7 #i‚de‡
_NET_BATMAN_ADV_HASH_H_


8 
	#_NET_BATMAN_ADV_HASH_H_


	)

10 
	~"maö.h
"

12 
	~<löux/©omic.h
>

13 
	~<löux/compûî.h
>

14 
	~<löux/li°.h
>

15 
	~<löux/lockdï.h
>

16 
	~<löux/rculi°.h
>

17 
	~<löux/•ölock.h
>

18 
	~<löux/°ddef.h
>

19 
	~<löux/ty≥s.h
>

26 
	$boﬁ
 (*
	tb©adv_hashd©a_com∑ª_cb
)(c⁄° 
	thli°_node
 *,

34 
	$u32
 (*
	tb©adv_hashd©a_choo£_cb
)(c⁄° *, 
	tu32
);

35 (*
	tb©adv_hashd©a_‰ì_cb
)(
	thli°_node
 *, *);

40 
	sb©adv_hashèbÀ
 {

42 
hli°_hód
 *
èbÀ
;

45 
•ölock_t
 *
li°_locks
;

48 
u32
 
size
;

51 
©omic_t
 
gíî©i⁄
;

55 
b©adv_hashèbÀ
 *
	`b©adv_hash_√w
(
u32
 
size
);

58 
	`b©adv_hash_£t_lock_˛ass
(
b©adv_hashèbÀ
 *
hash
,

59 
lock_˛ass_key
 *
key
);

62 
	`b©adv_hash_de°roy
(
b©adv_hashèbÀ
 *
hash
);

75 
ölöe
 
	$b©adv_hash_add
(
b©adv_hashèbÀ
 *
hash
,

76 
b©adv_hashd©a_com∑ª_cb
 
com∑ª
,

77 
b©adv_hashd©a_choo£_cb
 
choo£
,

78 c⁄° *
d©a
,

79 
hli°_node
 *
d©a_node
)

81 
u32
 
ödex
;

82 
ªt
 = -1;

83 
hli°_hód
 *
hód
;

84 
hli°_node
 *
node
;

85 
•ölock_t
 *
li°_lock
;

87 i‡(!
hash
)

88 
out
;

90 
ödex
 = 
	`choo£
(
d©a
, 
hash
->
size
);

91 
hód
 = &
hash
->
èbÀ
[
ödex
];

92 
li°_lock
 = &
hash
->
li°_locks
[
ödex
];

94 
	`•ö_lock_bh
(
li°_lock
);

96 
	`hli°_f‹_óch
(
node
, 
hód
) {

97 i‡(!
	`com∑ª
(
node
, 
d©a
))

100 
ªt
 = 1;

101 
u∆ock
;

105 
	`hli°_add_hód_rcu
(
d©a_node
, 
hód
);

106 
	`©omic_öc
(&
hash
->
gíî©i⁄
);

108 
ªt
 = 0;

110 
u∆ock
:

111 
	`•ö_u∆ock_bh
(
li°_lock
);

112 
out
:

113  
ªt
;

114 
	}
}

129 
ölöe
 *
	$b©adv_hash_ªmove
(
b©adv_hashèbÀ
 *
hash
,

130 
b©adv_hashd©a_com∑ª_cb
 
com∑ª
,

131 
b©adv_hashd©a_choo£_cb
 
choo£
,

132 *
d©a
)

134 
u32
 
ödex
;

135 
hli°_node
 *
node
;

136 
hli°_hód
 *
hód
;

137 *
d©a_ßve
 = 
NULL
;

139 
ödex
 = 
	`choo£
(
d©a
, 
hash
->
size
);

140 
hód
 = &
hash
->
èbÀ
[
ödex
];

142 
	`•ö_lock_bh
(&
hash
->
li°_locks
[
ödex
]);

143 
	`hli°_f‹_óch
(
node
, 
hód
) {

144 i‡(!
	`com∑ª
(
node
, 
d©a
))

147 
d©a_ßve
 = 
node
;

148 
	`hli°_dñ_rcu
(
node
);

149 
	`©omic_öc
(&
hash
->
gíî©i⁄
);

152 
	`•ö_u∆ock_bh
(&
hash
->
li°_locks
[
ödex
]);

154  
d©a_ßve
;

155 
	}
}

	@net/batman-adv/log.c

7 
	~"log.h
"

8 
	~"maö.h
"

10 
	~<löux/°d¨g.h
>

12 
	~"åa˚.h
"

21 
	$b©adv_debug_log
(
b©adv_¥iv
 *
b©_¥iv
, c⁄° *
fmt
, ...)

23 
va_f‹m©
 
vaf
;

24 
va_li°
 
¨gs
;

26 
	`va_°¨t
(
¨gs
, 
fmt
);

28 
vaf
.
fmt
 = fmt;

29 
vaf
.
va
 = &
¨gs
;

31 
	`åa˚_b©adv_dbg
(
b©_¥iv
, &
vaf
);

33 
	`va_íd
(
¨gs
);

36 
	}
}

	@net/batman-adv/log.h

7 #i‚de‡
_NET_BATMAN_ADV_LOG_H_


8 
	#_NET_BATMAN_ADV_LOG_H_


	)

10 
	~"maö.h
"

12 
	~<löux/©omic.h
>

13 
	~<löux/bô›s.h
>

14 
	~<löux/compûî.h
>

15 
	~<löux/¥ötk.h
>

17 #ifde‡
CONFIG_BATMAN_ADV_DEBUG


19 
b©adv_debug_log_£tup
(
b©adv_¥iv
 *
b©_¥iv
);

20 
b©adv_debug_log_˛ónup
(
b©adv_¥iv
 *
b©_¥iv
);

24 
ölöe
 
	$b©adv_debug_log_£tup
(
b©adv_¥iv
 *
b©_¥iv
)

27 
	}
}

29 
ölöe
 
	$b©adv_debug_log_˛ónup
(
b©adv_¥iv
 *
b©_¥iv
)

31 
	}
}

38 
	eb©adv_dbg_Àvñ
 {

40 
	mBATADV_DBG_BATMAN
 = 
BIT
(0),

43 
	mBATADV_DBG_ROUTES
 = 
BIT
(1),

46 
	mBATADV_DBG_TT
 = 
BIT
(2),

49 
	mBATADV_DBG_BLA
 = 
BIT
(3),

52 
	mBATADV_DBG_DAT
 = 
BIT
(4),

55 
	mBATADV_DBG_NC
 = 
BIT
(5),

58 
	mBATADV_DBG_MCAST
 = 
BIT
(6),

61 
	mBATADV_DBG_TP_METER
 = 
BIT
(7),

64 
	mBATADV_DBG_ALL
 = 255,

67 #ifde‡
CONFIG_BATMAN_ADV_DEBUG


68 
	$b©adv_debug_log
(
b©adv_¥iv
 *
b©_¥iv
, c⁄° *
fmt
, ...)

69 
	`__¥ötf
(2, 3);

79 
	#_b©adv_dbg
(
ty≥
, 
b©_¥iv
, 
øãlimôed
, 
fmt
, 
¨g
...) \

81 
b©adv_¥iv
 *
__b©¥iv
 = (
b©_¥iv
); \

82 i‡(
	`©omic_ªad
(&
__b©¥iv
->
log_Àvñ
Ë& (
ty≥
) && \

83 (!(
øãlimôed
Ë|| 
	`√t_øãlimô
())) \

84 
	`b©adv_debug_log
(
__b©¥iv
, 
fmt
, ## 
¨g
); \

85 
	}
} \

86 0)

	)

88 
	$__¥ötf
(4, 5)

89 
ölöe
 
	$_b©adv_dbg
(
ty≥
 
__Æways_unu£d
,

90 
b©adv_¥iv
 *
b©_¥iv
 
__Æways_unu£d
,

91 
øãlimôed
 
__Æways_unu£d
,

92 c⁄° *
fmt
 
__Æways_unu£d
, ...)

94 
	}
}

103 
	#b©adv_dbg
(
ty≥
, 
b©_¥iv
, 
¨g
...) \

104 
	`_b©adv_dbg
(
ty≥
, 
b©_¥iv
, 0, ## 
¨g
)

	)

112 
	#b©adv_dbg_øãlimôed
(
ty≥
, 
b©_¥iv
, 
¨g
...) \

113 
	`_b©adv_dbg
(
ty≥
, 
b©_¥iv
, 1, ## 
¨g
)

	)

121 
	#b©adv_öfo
(
√t_dev
, 
fmt
, 
¨g
...) \

123 
√t_devi˚
 *
_√tdev
 = (
√t_dev
); \

124 
b©adv_¥iv
 *
_b©¥iv
 = 
	`√tdev_¥iv
(
_√tdev
); \

125 
	`b©adv_dbg
(
BATADV_DBG_ALL
, 
_b©¥iv
, 
fmt
, ## 
¨g
); \

126 
	`¥_öfo
("%s: " 
fmt
, 
_√tdev
->
«me
, ## 
¨g
); \

127 } 0)

	)

135 
	#b©adv_îr
(
√t_dev
, 
fmt
, 
¨g
...) \

137 
√t_devi˚
 *
_√tdev
 = (
√t_dev
); \

138 
b©adv_¥iv
 *
_b©¥iv
 = 
	`√tdev_¥iv
(
_√tdev
); \

139 
	`b©adv_dbg
(
BATADV_DBG_ALL
, 
_b©¥iv
, 
fmt
, ## 
¨g
); \

140 
	`¥_îr
("%s: " 
fmt
, 
_√tdev
->
«me
, ## 
¨g
); \

141 } 0)

	)

	@net/batman-adv/main.c

7 
	~"maö.h
"

9 
	~<löux/¨øy_size.h
>

10 
	~<löux/©omic.h
>

11 
	~<löux/buûd_bug.h
>

12 
	~<löux/byã‹dî/gíîic.h
>

13 
	~<löux/c⁄èöî_of.h
>

14 
	~<löux/¸c32c.h
>

15 
	~<löux/devi˚.h
>

16 
	~<löux/î∫o.h
>

17 
	~<löux/gÂ.h
>

18 
	~<löux/if_ëhî.h
>

19 
	~<löux/if_vœn.h
>

20 
	~<löux/öô.h
>

21 
	~<löux/ù.h
>

22 
	~<löux/ùv6.h
>

23 
	~<löux/kobje˘.h
>

24 
	~<löux/kªf.h
>

25 
	~<löux/li°.h
>

26 
	~<löux/mömax.h
>

27 
	~<löux/moduÀ.h
>

28 
	~<löux/√tdevi˚.h
>

29 
	~<löux/¥ötk.h
>

30 
	~<löux/rculi°.h
>

31 
	~<löux/rcupd©e.h
>

32 
	~<löux/skbuff.h
>

33 
	~<löux/¶ab.h
>

34 
	~<löux/•ölock.h
>

35 
	~<löux/•rötf.h
>

36 
	~<löux/°ddef.h
>

37 
	~<löux/°rög.h
>

38 
	~<löux/w‹kqueue.h
>

39 
	~<√t/dsfõld.h
>

40 
	~<√t/gíëlök.h
>

41 
	~<√t/π√éök.h
>

42 
	~<u≠i/löux/b©adv_∑ckë.h
>

43 
	~<u≠i/löux/b©m™_adv.h
>

45 
	~"b©_Ægo.h
"

46 
	~"b©_iv_ogm.h
"

47 
	~"b©_v.h
"

48 
	~"bridge_lo›_avoid™˚.h
"

49 
	~"di°ribuãd-¨p-èbÀ.h
"

50 
	~"g©eway_˛õ¡.h
"

51 
	~"g©eway_comm⁄.h
"

52 
	~"h¨d-öãrÁ˚.h
"

53 
	~"log.h
"

54 
	~"mesh-öãrÁ˚.h
"

55 
	~"mu…iˇ°.h
"

56 
	~"√éök.h
"

57 
	~"√tw‹k-codög.h
"

58 
	~"‹igö©‹.h
"

59 
	~"routög.h
"

60 
	~"£nd.h
"

61 
	~"ç_mëî.h
"

62 
	~"å™¶©i⁄-èbÀ.h
"

67 
li°_hód
 
	gb©adv_h¨dif_li°
;

68 
	gb©adv_h¨dif_gíî©i⁄
;

69 (*
b©adv_rx_h™dÀr
[256])(
sk_buff
 *
skb
,

70 
b©adv_h¨d_iÁ˚
 *
ªcv_if
);

72 
b©adv_brﬂdˇ°_addr
[] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff
	}
};

74 
w‹kqueue_°ru˘
 *
	gb©adv_evít_w‹kqueue
;

76 
b©adv_ªcv_h™dÀr_öô
();

78 
	#BATADV_UEV_TYPE_VAR
 "BATTYPE="

	)

79 
	#BATADV_UEV_ACTION_VAR
 "BATACTION="

	)

80 
	#BATADV_UEV_DATA_VAR
 "BATDATA="

	)

82 *
	gb©adv_uev_a˘i⁄_°r
[] = {

89 *
	gb©adv_uev_ty≥_°r
[] = {

94 
__öô
 
	$b©adv_öô
()

96 
ªt
;

98 
ªt
 = 
	`b©adv_â_ˇche_öô
();

99 i‡(
ªt
 < 0)

100  
ªt
;

102 
	`INIT_LIST_HEAD
(&
b©adv_h¨dif_li°
);

103 
	`b©adv_Ægo_öô
();

105 
	`b©adv_ªcv_h™dÀr_öô
();

107 
	`b©adv_v_öô
();

108 
	`b©adv_iv_öô
();

109 
	`b©adv_nc_öô
();

110 
	`b©adv_ç_mëî_öô
();

112 
b©adv_evít_w‹kqueue
 = 
	`¸óã_sögÀthªad_w‹kqueue
("bat_events");

113 i‡(!
b©adv_evít_w‹kqueue
)

114 
îr_¸óã_wq
;

116 
	`ªgi°î_√tdevi˚_nŸifõr
(&
b©adv_h¨d_if_nŸifõr
);

117 
	`π∆_lök_ªgi°î
(&
b©adv_lök_›s
);

118 
	`b©adv_√éök_ªgi°î
();

120 
	`¥_öfo
("B.A.T.M.A.N.ádvanced %s (compatibility version %i)Üoaded\n",

121 
BATADV_SOURCE_VERSION
, 
BATADV_COMPAT_VERSION
);

125 
îr_¸óã_wq
:

126 
	`b©adv_â_ˇche_de°roy
();

128  -
ENOMEM
;

129 
	}
}

131 
__exô
 
	$b©adv_exô
()

133 
	`b©adv_√éök_uƒegi°î
();

134 
	`π∆_lök_uƒegi°î
(&
b©adv_lök_›s
);

135 
	`uƒegi°î_√tdevi˚_nŸifõr
(&
b©adv_h¨d_if_nŸifõr
);

137 
	`de°roy_w‹kqueue
(
b©adv_evít_w‹kqueue
);

138 
b©adv_evít_w‹kqueue
 = 
NULL
;

140 
	`rcu_b¨rõr
();

142 
	`b©adv_â_ˇche_de°roy
();

143 
	}
}

151 
	$b©adv_mesh_öô
(
√t_devi˚
 *
mesh_iÁ˚
)

153 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
mesh_iÁ˚
);

154 
ªt
;

156 
	`•ö_lock_öô
(&
b©_¥iv
->
f‹w_b©_li°_lock
);

157 
	`•ö_lock_öô
(&
b©_¥iv
->
f‹w_bˇ°_li°_lock
);

158 
	`•ö_lock_öô
(&
b©_¥iv
->
â
.
ch™ges_li°_lock
);

159 
	`•ö_lock_öô
(&
b©_¥iv
->
â
.
ªq_li°_lock
);

160 
	`•ö_lock_öô
(&
b©_¥iv
->
â
.
rﬂm_li°_lock
);

161 
	`•ö_lock_öô
(&
b©_¥iv
->
â
.
œ°_ch™ge£t_lock
);

162 
	`•ö_lock_öô
(&
b©_¥iv
->
â
.
commô_lock
);

163 
	`•ö_lock_öô
(&
b©_¥iv
->
gw
.
li°_lock
);

164 #ifde‡
CONFIG_BATMAN_ADV_MCAST


165 
	`•ö_lock_öô
(&
b©_¥iv
->
mˇ°
.
mœ_lock
);

166 
	`•ö_lock_öô
(&
b©_¥iv
->
mˇ°
.
w™t_li°s_lock
);

168 
	`•ö_lock_öô
(&
b©_¥iv
->
tvlv
.
c⁄èöî_li°_lock
);

169 
	`•ö_lock_öô
(&
b©_¥iv
->
tvlv
.
h™dÀr_li°_lock
);

170 
	`•ö_lock_öô
(&
b©_¥iv
->
meshif_vœn_li°_lock
);

171 
	`•ö_lock_öô
(&
b©_¥iv
->
ç_li°_lock
);

173 
	`INIT_HLIST_HEAD
(&
b©_¥iv
->
f‹w_b©_li°
);

174 
	`INIT_HLIST_HEAD
(&
b©_¥iv
->
f‹w_bˇ°_li°
);

175 
	`INIT_HLIST_HEAD
(&
b©_¥iv
->
gw
.
g©eway_li°
);

176 #ifde‡
CONFIG_BATMAN_ADV_MCAST


177 
	`INIT_HLIST_HEAD
(&
b©_¥iv
->
mˇ°
.
w™t_Æl_un¢o›abÀs_li°
);

178 
	`INIT_HLIST_HEAD
(&
b©_¥iv
->
mˇ°
.
w™t_Æl_ùv4_li°
);

179 
	`INIT_HLIST_HEAD
(&
b©_¥iv
->
mˇ°
.
w™t_Æl_ùv6_li°
);

181 
	`INIT_LIST_HEAD
(&
b©_¥iv
->
â
.
ch™ges_li°
);

182 
	`INIT_HLIST_HEAD
(&
b©_¥iv
->
â
.
ªq_li°
);

183 
	`INIT_LIST_HEAD
(&
b©_¥iv
->
â
.
rﬂm_li°
);

184 #ifde‡
CONFIG_BATMAN_ADV_MCAST


185 
	`INIT_HLIST_HEAD
(&
b©_¥iv
->
mˇ°
.
mœ_li°
);

187 
	`INIT_HLIST_HEAD
(&
b©_¥iv
->
tvlv
.
c⁄èöî_li°
);

188 
	`INIT_HLIST_HEAD
(&
b©_¥iv
->
tvlv
.
h™dÀr_li°
);

189 
	`INIT_HLIST_HEAD
(&
b©_¥iv
->
meshif_vœn_li°
);

190 
	`INIT_HLIST_HEAD
(&
b©_¥iv
->
ç_li°
);

192 
b©_¥iv
->
gw
.
gíî©i⁄
 = 0;

194 
ªt
 = 
	`b©adv_‹igö©‹_öô
(
b©_¥iv
);

195 i‡(
ªt
 < 0) {

196 
	`©omic_£t
(&
b©_¥iv
->
mesh_°©e
, 
BATADV_MESH_DEACTIVATING
);

197 
îr_‹ig
;

200 
ªt
 = 
	`b©adv_â_öô
(
b©_¥iv
);

201 i‡(
ªt
 < 0) {

202 
	`©omic_£t
(&
b©_¥iv
->
mesh_°©e
, 
BATADV_MESH_DEACTIVATING
);

203 
îr_â
;

206 
ªt
 = 
	`b©adv_v_mesh_öô
(
b©_¥iv
);

207 i‡(
ªt
 < 0) {

208 
	`©omic_£t
(&
b©_¥iv
->
mesh_°©e
, 
BATADV_MESH_DEACTIVATING
);

209 
îr_v
;

212 
ªt
 = 
	`b©adv_bœ_öô
(
b©_¥iv
);

213 i‡(
ªt
 < 0) {

214 
	`©omic_£t
(&
b©_¥iv
->
mesh_°©e
, 
BATADV_MESH_DEACTIVATING
);

215 
îr_bœ
;

218 
ªt
 = 
	`b©adv_d©_öô
(
b©_¥iv
);

219 i‡(
ªt
 < 0) {

220 
	`©omic_£t
(&
b©_¥iv
->
mesh_°©e
, 
BATADV_MESH_DEACTIVATING
);

221 
îr_d©
;

224 
ªt
 = 
	`b©adv_nc_mesh_öô
(
b©_¥iv
);

225 i‡(
ªt
 < 0) {

226 
	`©omic_£t
(&
b©_¥iv
->
mesh_°©e
, 
BATADV_MESH_DEACTIVATING
);

227 
îr_nc
;

230 
	`b©adv_gw_öô
(
b©_¥iv
);

231 
	`b©adv_mˇ°_öô
(
b©_¥iv
);

233 
	`©omic_£t
(&
b©_¥iv
->
gw
.
ª£À˘
, 0);

234 
	`©omic_£t
(&
b©_¥iv
->
mesh_°©e
, 
BATADV_MESH_ACTIVE
);

238 
îr_nc
:

239 
	`b©adv_d©_‰ì
(
b©_¥iv
);

240 
îr_d©
:

241 
	`b©adv_bœ_‰ì
(
b©_¥iv
);

242 
îr_bœ
:

243 
	`b©adv_v_mesh_‰ì
(
b©_¥iv
);

244 
îr_v
:

245 
	`b©adv_â_‰ì
(
b©_¥iv
);

246 
îr_â
:

247 
	`b©adv_‹igö©‹_‰ì
(
b©_¥iv
);

248 
îr_‹ig
:

249 
	`b©adv_purge_out°™dög_∑ckës
(
b©_¥iv
, 
NULL
);

250 
	`©omic_£t
(&
b©_¥iv
->
mesh_°©e
, 
BATADV_MESH_INACTIVE
);

252  
ªt
;

253 
	}
}

259 
	$b©adv_mesh_‰ì
(
√t_devi˚
 *
mesh_iÁ˚
)

261 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
mesh_iÁ˚
);

263 
	`©omic_£t
(&
b©_¥iv
->
mesh_°©e
, 
BATADV_MESH_DEACTIVATING
);

265 
	`b©adv_purge_out°™dög_∑ckës
(
b©_¥iv
, 
NULL
);

267 
	`b©adv_gw_node_‰ì
(
b©_¥iv
);

269 
	`b©adv_v_mesh_‰ì
(
b©_¥iv
);

270 
	`b©adv_nc_mesh_‰ì
(
b©_¥iv
);

271 
	`b©adv_d©_‰ì
(
b©_¥iv
);

272 
	`b©adv_bœ_‰ì
(
b©_¥iv
);

274 
	`b©adv_mˇ°_‰ì
(
b©_¥iv
);

280 
	`b©adv_â_‰ì
(
b©_¥iv
);

287 
	`b©adv_‹igö©‹_‰ì
(
b©_¥iv
);

289 
	`b©adv_gw_‰ì
(
b©_¥iv
);

291 
	`‰ì_≥r˝u
(
b©_¥iv
->
b©_cou¡îs
);

292 
b©_¥iv
->
b©_cou¡îs
 = 
NULL
;

294 
	`©omic_£t
(&
b©_¥iv
->
mesh_°©e
, 
BATADV_MESH_INACTIVE
);

295 
	}
}

305 
boﬁ
 
	$b©adv_is_my_mac
(
b©adv_¥iv
 *
b©_¥iv
, c⁄° 
u8
 *
addr
)

307 c⁄° 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
;

308 
boﬁ
 
is_my_mac
 = 
Ál£
;

310 
	`rcu_ªad_lock
();

311 
	`li°_f‹_óch_íåy_rcu
(
h¨d_iÁ˚
, &
b©adv_h¨dif_li°
, 
li°
) {

312 i‡(
h¨d_iÁ˚
->
if_°©us
 !
BATADV_IF_ACTIVE
)

315 i‡(
h¨d_iÁ˚
->
mesh_iÁ˚
 !
b©_¥iv
->mesh_iface)

318 i‡(
	`b©adv_com∑ª_ëh
(
h¨d_iÁ˚
->
√t_dev
->
dev_addr
, 
addr
)) {

319 
is_my_mac
 = 
åue
;

323 
	`rcu_ªad_u∆ock
();

324  
is_my_mac
;

325 
	}
}

333 
	$b©adv_max_hódî_Àn
()

335 
hódî_Àn
 = 0;

337 
hódî_Àn
 = 
	`max_t
(, header_len,

338 (
b©adv_uniˇ°_∑ckë
));

339 
hódî_Àn
 = 
	`max_t
(, header_len,

340 (
b©adv_uniˇ°_4addr_∑ckë
));

341 
hódî_Àn
 = 
	`max_t
(, header_len,

342 (
b©adv_bˇ°_∑ckë
));

344 #ifde‡
CONFIG_BATMAN_ADV_NC


345 
hódî_Àn
 = 
	`max_t
(, header_len,

346 (
b©adv_coded_∑ckë
));

349  
hódî_Àn
 + 
ETH_HLEN
;

350 
	}
}

360 
	$b©adv_skb_£t_¥i‹ôy
(
sk_buff
 *
skb
, 
off£t
)

362 
ùhdr
 
ù_hdr_tmp
, *
ù_hdr
;

363 
ùv6hdr
 
ù6_hdr_tmp
, *
ù6_hdr
;

364 
ëhhdr
 
ëhhdr_tmp
, *ethhdr;

365 
vœn_ëhhdr
 *
vhdr
, 
vhdr_tmp
;

366 
u32
 
¥io
;

369 i‡(
skb
->
¥i‹ôy
 >= 256 && skb->priority <= 263)

372 
ëhhdr
 = 
	`skb_hódî_poöãr
(
skb
, 
off£t
, (*ëhhdr), &
ëhhdr_tmp
);

373 i‡(!
ëhhdr
)

376 
ëhhdr
->
h_¥Ÿo
) {

377 
	`ht⁄s
(
ETH_P_8021Q
):

378 
vhdr
 = 
	`skb_hódî_poöãr
(
skb
, 
off£t
 + (*vhdr),

379 (*
vhdr
), &
vhdr_tmp
);

380 i‡(!
vhdr
)

382 
¥io
 = 
	`¡ohs
(
vhdr
->
h_vœn_TCI
Ë& 
VLAN_PRIO_MASK
;

383 
¥io
 =Öriÿ>> 
VLAN_PRIO_SHIFT
;

385 
	`ht⁄s
(
ETH_P_IP
):

386 
ù_hdr
 = 
	`skb_hódî_poöãr
(
skb
, 
off£t
 + (*
ëhhdr
),

387 (*
ù_hdr
), &
ù_hdr_tmp
);

388 i‡(!
ù_hdr
)

390 
¥io
 = (
	`ùv4_gë_dsfõld
(
ù_hdr
) & 0xfc) >> 5;

392 
	`ht⁄s
(
ETH_P_IPV6
):

393 
ù6_hdr
 = 
	`skb_hódî_poöãr
(
skb
, 
off£t
 + (*
ëhhdr
),

394 (*
ù6_hdr
), &
ù6_hdr_tmp
);

395 i‡(!
ù6_hdr
)

397 
¥io
 = (
	`ùv6_gë_dsfõld
(
ù6_hdr
) & 0xfc) >> 5;

403 
skb
->
¥i‹ôy
 = 
¥io
 + 256;

404 
	}
}

406 
	$b©adv_ªcv_unh™dÀd_∑ckë
(
sk_buff
 *
skb
,

407 
b©adv_h¨d_iÁ˚
 *
ªcv_if
)

409 
	`k‰ì_skb
(
skb
);

411  
NET_RX_DROP
;

412 
	}
}

427 
	$b©adv_b©m™_skb_ªcv
(
sk_buff
 *
skb
, 
√t_devi˚
 *
dev
,

428 
∑ckë_ty≥
 *
±y≥
,

429 
√t_devi˚
 *
‹ig_dev
)

431 
b©adv_¥iv
 *
b©_¥iv
;

432 
b©adv_ogm_∑ckë
 *batadv_ogm_packet;

433 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
;

434 
u8
 
idx
;

436 
h¨d_iÁ˚
 = 
	`c⁄èöî_of
(
±y≥
, 
b©adv_h¨d_iÁ˚
,

437 
b©m™_adv_±y≥
);

443 i‡(!
	`kªf_gë_u∆ess_zîo
(&
h¨d_iÁ˚
->
ªfcou¡
))

444 
îr_out
;

446 
skb
 = 
	`skb_sh¨e_check
(skb, 
GFP_ATOMIC
);

449 i‡(!
skb
)

450 
îr_put
;

453 i‡(
	`u∆ikñy
(!
	`pskb_may_puŒ
(
skb
, 2)))

454 
îr_‰ì
;

457 i‡(
	`u∆ikñy
(
skb
->
mac_Àn
 !
ETH_HLEN
 || !
	`skb_mac_hódî
(skb)))

458 
îr_‰ì
;

460 i‡(!
h¨d_iÁ˚
->
mesh_iÁ˚
)

461 
îr_‰ì
;

463 
b©_¥iv
 = 
	`√tdev_¥iv
(
h¨d_iÁ˚
->
mesh_iÁ˚
);

465 i‡(
	`©omic_ªad
(&
b©_¥iv
->
mesh_°©e
Ë!
BATADV_MESH_ACTIVE
)

466 
îr_‰ì
;

469 i‡(
h¨d_iÁ˚
->
if_°©us
 !
BATADV_IF_ACTIVE
)

470 
îr_‰ì
;

472 
b©adv_ogm_∑ckë
 = (b©adv_ogm_∑ckë *)
skb
->
d©a
;

474 i‡(
b©adv_ogm_∑ckë
->
vîsi⁄
 !
BATADV_COMPAT_VERSION
) {

475 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

477 
b©adv_ogm_∑ckë
->
vîsi⁄
);

478 
îr_‰ì
;

482 
	`mem£t
(
skb
->
cb
, 0, (
b©adv_skb_cb
));

484 
idx
 = 
b©adv_ogm_∑ckë
->
∑ckë_ty≥
;

485 (*
b©adv_rx_h™dÀr
[
idx
])(
skb
, 
h¨d_iÁ˚
);

487 
	`b©adv_h¨dif_put
(
h¨d_iÁ˚
);

493  
NET_RX_SUCCESS
;

495 
îr_‰ì
:

496 
	`k‰ì_skb
(
skb
);

497 
îr_put
:

498 
	`b©adv_h¨dif_put
(
h¨d_iÁ˚
);

499 
îr_out
:

500  
NET_RX_DROP
;

501 
	}
}

503 
	$b©adv_ªcv_h™dÀr_öô
()

505 
i
;

507 
i
 = 0; i < 
	`ARRAY_SIZE
(
b©adv_rx_h™dÀr
); i++)

508 
b©adv_rx_h™dÀr
[
i
] = 
b©adv_ªcv_unh™dÀd_∑ckë
;

510 
i
 = 
BATADV_UNICAST_MIN
; i <
BATADV_UNICAST_MAX
; i++)

511 
b©adv_rx_h™dÀr
[
i
] = 
b©adv_ªcv_unh™dÀd_uniˇ°_∑ckë
;

514 
	`BUILD_BUG_ON
((
b©adv_bœ_˛aim_d°
) != 6);

515 
	`BUILD_BUG_ON
((
b©adv_ogm_∑ckë
) != 24);

516 
	`BUILD_BUG_ON
((
b©adv_icmp_hódî
) != 20);

517 
	`BUILD_BUG_ON
((
b©adv_icmp_∑ckë
) != 20);

518 
	`BUILD_BUG_ON
((
b©adv_icmp_∑ckë_º
) != 116);

519 
	`BUILD_BUG_ON
((
b©adv_uniˇ°_∑ckë
) != 10);

520 
	`BUILD_BUG_ON
((
b©adv_uniˇ°_4addr_∑ckë
) != 18);

521 
	`BUILD_BUG_ON
((
b©adv_‰ag_∑ckë
) != 20);

522 
	`BUILD_BUG_ON
((
b©adv_bˇ°_∑ckë
) != 14);

523 
	`BUILD_BUG_ON
((
b©adv_coded_∑ckë
) != 46);

524 
	`BUILD_BUG_ON
((
b©adv_uniˇ°_tvlv_∑ckë
) != 20);

525 
	`BUILD_BUG_ON
((
b©adv_tvlv_hdr
) != 4);

526 
	`BUILD_BUG_ON
((
b©adv_tvlv_g©eway_d©a
) != 8);

527 
	`BUILD_BUG_ON
((
b©adv_tvlv_â_vœn_d©a
) != 8);

528 
	`BUILD_BUG_ON
((
b©adv_tvlv_â_ch™ge
) != 12);

529 
	`BUILD_BUG_ON
((
b©adv_tvlv_rﬂm_adv
) != 8);

531 
i
 = 
	`sizeof_fõld
(
sk_buff
, 
cb
);

532 
	`BUILD_BUG_ON
((
b©adv_skb_cb
Ë> 
i
);

535 
b©adv_rx_h™dÀr
[
BATADV_BCAST
] = 
b©adv_ªcv_bˇ°_∑ckë
;

537 
b©adv_rx_h™dÀr
[
BATADV_MCAST
] = 
b©adv_ªcv_mˇ°_∑ckë
;

541 
b©adv_rx_h™dÀr
[
BATADV_UNICAST_4ADDR
] = 
b©adv_ªcv_uniˇ°_∑ckë
;

543 
b©adv_rx_h™dÀr
[
BATADV_UNICAST
] = 
b©adv_ªcv_uniˇ°_∑ckë
;

545 
b©adv_rx_h™dÀr
[
BATADV_UNICAST_TVLV
] = 
b©adv_ªcv_uniˇ°_tvlv
;

547 
b©adv_rx_h™dÀr
[
BATADV_ICMP
] = 
b©adv_ªcv_icmp_∑ckë
;

549 
b©adv_rx_h™dÀr
[
BATADV_UNICAST_FRAG
] = 
b©adv_ªcv_‰ag_∑ckë
;

550 
	}
}

560 
	$b©adv_ªcv_h™dÀr_ªgi°î
(
u8
 
∑ckë_ty≥
,

561 (*
ªcv_h™dÀr
)(
sk_buff
 *,

562 
b©adv_h¨d_iÁ˚
 *))

564 (*
cuº
)(
sk_buff
 *
skb
,

565 
b©adv_h¨d_iÁ˚
 *
ªcv_if
);

566 
cuº
 = 
b©adv_rx_h™dÀr
[
∑ckë_ty≥
];

568 i‡(
cuº
 !
b©adv_ªcv_unh™dÀd_∑ckë
 &&

569 
cuº
 !
b©adv_ªcv_unh™dÀd_uniˇ°_∑ckë
)

570  -
EBUSY
;

572 
b©adv_rx_h™dÀr
[
∑ckë_ty≥
] = 
ªcv_h™dÀr
;

574 
	}
}

580 
	$b©adv_ªcv_h™dÀr_uƒegi°î
(
u8
 
∑ckë_ty≥
)

582 
b©adv_rx_h™dÀr
[
∑ckë_ty≥
] = 
b©adv_ªcv_unh™dÀd_∑ckë
;

583 
	}
}

597 
__be32
 
	$b©adv_skb_¸c32
(
sk_buff
 *
skb
, 
u8
 *
∑ylﬂd_±r
)

599 
u32
 
¸c
 = 0;

600 
‰om
;

601 
to
 = 
skb
->
Àn
;

602 
skb_£q_°©e
 
°
;

603 c⁄° 
u8
 *
d©a
;

604 
Àn
;

605 
c⁄sumed
 = 0;

607 
‰om
 = ()(
∑ylﬂd_±r
 - 
skb
->
d©a
);

609 
	`skb_¥ï¨e_£q_ªad
(
skb
, 
‰om
, 
to
, &
°
);

610 (
Àn
 = 
	`skb_£q_ªad
(
c⁄sumed
, &
d©a
, &
°
)) != 0) {

611 
¸c
 = 
	`¸c32c
(¸c, 
d©a
, 
Àn
);

612 
c⁄sumed
 +
Àn
;

615  
	`ht⁄l
(
¸c
);

616 
	}
}

626 
	$b©adv_gë_vid
(
sk_buff
 *
skb
, 
size_t
 
hódî_Àn
)

628 
ëhhdr
 *ëhhd∏(ëhhd∏*)(
skb
->
d©a
 + 
hódî_Àn
);

629 
vœn_ëhhdr
 *
vhdr
;

630 
vid
;

632 i‡(
ëhhdr
->
h_¥Ÿo
 !
	`ht⁄s
(
ETH_P_8021Q
))

633  
BATADV_NO_FLAGS
;

635 i‡(!
	`pskb_may_puŒ
(
skb
, 
hódî_Àn
 + 
VLAN_ETH_HLEN
))

636  
BATADV_NO_FLAGS
;

638 
vhdr
 = (
vœn_ëhhdr
 *)(
skb
->
d©a
 + 
hódî_Àn
);

639 
vid
 = 
	`¡ohs
(
vhdr
->
h_vœn_TCI
Ë& 
VLAN_VID_MASK
;

644 i‡(
vid
 == 0)

645  
BATADV_NO_FLAGS
;

647 
vid
 |
BATADV_VLAN_HAS_TAG
;

649  
vid
;

650 
	}
}

661 
boﬁ
 
	$b©adv_vœn_≠_isﬁa_gë
(
b©adv_¥iv
 *
b©_¥iv
, 
vid
)

663 
boﬁ
 
≠_isﬁ©i⁄_íabÀd
 = 
Ál£
;

664 
b©adv_meshif_vœn
 *
vœn
;

669 
vœn
 = 
	`b©adv_meshif_vœn_gë
(
b©_¥iv
, 
vid
);

670 i‡(
vœn
) {

671 
≠_isﬁ©i⁄_íabÀd
 = 
	`©omic_ªad
(&
vœn
->
≠_isﬁ©i⁄
);

672 
	`b©adv_meshif_vœn_put
(
vœn
);

675  
≠_isﬁ©i⁄_íabÀd
;

676 
	}
}

688 
	$b©adv_throw_uevít
(
b©adv_¥iv
 *
b©_¥iv
, 
b©adv_uev_ty≥
 
ty≥
,

689 
b©adv_uev_a˘i⁄
 
a˘i⁄
, c⁄° *
d©a
)

691 
ªt
 = -
ENOMEM
;

692 
kobje˘
 *
b©_kobj
;

693 *
uevít_ív
[4] = { 
NULL
, NULL, NULL, NULL };

695 
b©_kobj
 = &
b©_¥iv
->
mesh_iÁ˚
->
dev
.
kobj
;

697 
uevít_ív
[0] = 
	`ka•rötf
(
GFP_ATOMIC
,

698 "%s%s", 
BATADV_UEV_TYPE_VAR
,

699 
b©adv_uev_ty≥_°r
[
ty≥
]);

700 i‡(!
uevít_ív
[0])

701 
ªp‹t_îr‹
;

703 
uevít_ív
[1] = 
	`ka•rötf
(
GFP_ATOMIC
,

704 "%s%s", 
BATADV_UEV_ACTION_VAR
,

705 
b©adv_uev_a˘i⁄_°r
[
a˘i⁄
]);

706 i‡(!
uevít_ív
[1])

707 
‰ì_fú°_ív
;

710 i‡(
a˘i⁄
 !
BATADV_UEV_DEL
) {

711 
uevít_ív
[2] = 
	`ka•rötf
(
GFP_ATOMIC
,

712 "%s%s", 
BATADV_UEV_DATA_VAR
, 
d©a
);

713 i‡(!
uevít_ív
[2])

714 
‰ì_£c⁄d_ív
;

717 
ªt
 = 
	`kobje˘_uevít_ív
(
b©_kobj
, 
KOBJ_CHANGE
, 
uevít_ív
);

718 
	`k‰ì
(
uevít_ív
[2]);

719 
‰ì_£c⁄d_ív
:

720 
	`k‰ì
(
uevít_ív
[1]);

721 
‰ì_fú°_ív
:

722 
	`k‰ì
(
uevít_ív
[0]);

724 i‡(
ªt
)

725 
ªp‹t_îr‹
:

726 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

728 
b©adv_uev_ty≥_°r
[
ty≥
],

729 
b©adv_uev_a˘i⁄_°r
[
a˘i⁄
],

730 (
a˘i⁄
 =
BATADV_UEV_DEL
 ? "NULL" : 
d©a
), 
ªt
);

731  
ªt
;

732 
	}
}

734 
moduÀ_öô
(
b©adv_öô
);

735 
moduÀ_exô
(
b©adv_exô
);

737 
MODULE_LICENSE
("GPL");

739 
MODULE_AUTHOR
(
BATADV_DRIVER_AUTHOR
);

740 
MODULE_DESCRIPTION
(
BATADV_DRIVER_DESC
);

741 
MODULE_VERSION
(
BATADV_SOURCE_VERSION
);

742 
MODULE_ALIAS_RTNL_LINK
("batadv");

743 
MODULE_ALIAS_GENL_FAMILY
(
BATADV_NL_NAME
);

	@net/batman-adv/main.h

7 #i‚de‡
_NET_BATMAN_ADV_MAIN_H_


8 
	#_NET_BATMAN_ADV_MAIN_H_


	)

10 
	#BATADV_DRIVER_AUTHOR
 "Marek Lindner <marek.lindner@mailbox.org>, " \

11 "Sim⁄ Wundîlich <sw@sim⁄wundîlich.de>"

	)

12 
	#BATADV_DRIVER_DESC
 "B.A.T.M.A.N.ádv™˚d"

	)

13 
	#BATADV_DRIVER_DEVICE
 "b©m™-adv"

	)

15 #i‚de‡
BATADV_SOURCE_VERSION


16 
	#BATADV_SOURCE_VERSION
 "2025.1"

	)

21 
	#BATADV_TQ_MAX_VALUE
 255

	)

22 
	#BATADV_THROUGHPUT_MAX_VALUE
 0xFFFFFFFF

	)

23 
	#BATADV_JITTER
 20

	)

25 
	#BATADV_MAX_MTU
 (
ETH_MAX_MTU
 - 
	`b©adv_max_hódî_Àn
())

	)

28 
	#BATADV_TTL
 50

	)

31 
	#BATADV_BCAST_MAX_AGE
 64

	)

36 
	#BATADV_PURGE_TIMEOUT
 200000

	)

37 
	#BATADV_TT_LOCAL_TIMEOUT
 600000

	)

38 
	#BATADV_TT_CLIENT_ROAM_TIMEOUT
 600000

	)

39 
	#BATADV_TT_CLIENT_TEMP_TIMEOUT
 600000

	)

40 
	#BATADV_TT_WORK_PERIOD
 5000

	)

41 
	#BATADV_ORIG_WORK_PERIOD
 1000

	)

42 
	#BATADV_MCAST_WORK_PERIOD
 500

	)

43 
	#BATADV_DAT_ENTRY_TIMEOUT
 (5 * 60000Ë

	)

47 
	#BATADV_TQ_LOCAL_WINDOW_SIZE
 64

	)

49 
	#BATADV_TT_REQUEST_TIMEOUT
 3000

	)

51 
	#BATADV_TQ_GLOBAL_WINDOW_SIZE
 5

	)

52 
	#BATADV_TQ_LOCAL_BIDRECT_SEND_MINIMUM
 1

	)

53 
	#BATADV_TQ_LOCAL_BIDRECT_RECV_MINIMUM
 1

	)

54 
	#BATADV_TQ_TOTAL_BIDRECT_LIMIT
 1

	)

57 
	#BATADV_THROUGHPUT_DEFAULT_VALUE
 10

	)

58 
	#BATADV_ELP_PROBES_PER_NODE
 2

	)

59 
	#BATADV_ELP_MIN_PROBE_SIZE
 200

	)

60 
	#BATADV_ELP_PROBE_MAX_TX_DIFF
 100

	)

61 
	#BATADV_ELP_MAX_AGE
 64

	)

62 
	#BATADV_OGM_MAX_ORIGDIFF
 5

	)

63 
	#BATADV_OGM_MAX_AGE
 64

	)

66 
	#BATADV_TT_OGM_APPEND_MAX
 3

	)

71 
	#BATADV_ROAMING_MAX_TIME
 20000

	)

72 
	#BATADV_ROAMING_MAX_COUNT
 5

	)

74 
	#BATADV_NO_FLAGS
 0

	)

76 
	#BATADV_NULL_IFINDEX
 0

	)

78 
	#BATADV_NO_MARK
 0

	)

84 
	#BATADV_IF_DEFAULT
 ((
b©adv_h¨d_iÁ˚
 *)
NULL
)

	)

86 
	#BATADV_NUM_WORDS
 
	`BITS_TO_LONGS
(
BATADV_TQ_LOCAL_WINDOW_SIZE
)

	)

88 
	#BATADV_LOG_BUF_LEN
 8192

	)

91 
	#BATADV_NUM_BCASTS_DEFAULT
 1

	)

92 
	#BATADV_NUM_BCASTS_WIRELESS
 3

	)

95 
	#BATADV_TP_PACKET_LEN
 
ETH_DATA_LEN


	)

98 
	#ARP_REQ_DELAY
 250

	)

100 
	#BATADV_DAT_CANDIDATES_NUM
 3

	)

105 
	#BATADV_TQ_SIMILARITY_THRESHOLD
 50

	)

107 
	#BATADV_MAX_AGGREGATION_PACKETS
 32

	)

108 
	#BATADV_MAX_AGGREGATION_BYTES
 512

	)

109 
	#BATADV_MAX_AGGREGATION_MS
 100

	)

111 
	#BATADV_BLA_PERIOD_LENGTH
 10000

	)

112 
	#BATADV_BLA_BACKBONE_TIMEOUT
 (
BATADV_BLA_PERIOD_LENGTH
 * 6)

	)

113 
	#BATADV_BLA_CLAIM_TIMEOUT
 (
BATADV_BLA_PERIOD_LENGTH
 * 10)

	)

114 
	#BATADV_BLA_WAIT_PERIODS
 3

	)

115 
	#BATADV_BLA_LOOPDETECT_PERIODS
 6

	)

116 
	#BATADV_BLA_LOOPDETECT_TIMEOUT
 3000

	)

118 
	#BATADV_DUPLIST_SIZE
 16

	)

119 
	#BATADV_DUPLIST_TIMEOUT
 500

	)

121 
	#BATADV_RESET_PROTECTION_MS
 30000

	)

122 
	#BATADV_EXPECTED_SEQNO_RANGE
 65536

	)

124 
	#BATADV_NC_NODE_TIMEOUT
 10000

	)

129 
	#BATADV_TP_MAX_NUM
 5

	)

134 
	eb©adv_mesh_°©e
 {

136 
	mBATADV_MESH_INACTIVE
,

139 
	mBATADV_MESH_ACTIVE
,

142 
	mBATADV_MESH_DEACTIVATING
,

145 
	#BATADV_BCAST_QUEUE_LEN
 256

	)

146 
	#BATADV_BATMAN_QUEUE_LEN
 256

	)

151 
	eb©adv_uev_a˘i⁄
 {

153 
	mBATADV_UEV_ADD
 = 0,

159 
	mBATADV_UEV_DEL
,

164 
	mBATADV_UEV_CHANGE
,

170 
	mBATADV_UEV_LOOPDETECT
,

176 
	eb©adv_uev_ty≥
 {

178 
	mBATADV_UEV_GW
 = 0,

181 
	mBATADV_UEV_BLA
,

184 
	#BATADV_GW_THRESHOLD
 50

	)

187 
	#BATADV_FRAG_BUFFER_COUNT
 8

	)

189 
	#BATADV_FRAG_MAX_FRAGMENTS
 16

	)

191 
	#BATADV_FRAG_MAX_FRAG_SIZE
 1280

	)

193 
	#BATADV_FRAG_TIMEOUT
 10000

	)

195 
	#BATADV_DAT_CANDIDATE_NOT_FOUND
 0

	)

196 
	#BATADV_DAT_CANDIDATE_ORIG
 1

	)

199 #ifde‡
¥_fmt


200 #unde‡
¥_fmt


203 
	#¥_fmt
(
fmt
Ë
KBUILD_MODNAME
 ": " 
	)
fmt

207 
	~<löux/©omic.h
>

208 
	~<löux/compûî.h
>

209 
	~<löux/ëhîdevi˚.h
>

210 
	~<löux/if_vœn.h
>

211 
	~<löux/jiffõs.h
>

212 
	~<löux/√tdevi˚.h
>

213 
	~<löux/≥r˝u.h
>

214 
	~<löux/skbuff.h
>

215 
	~<löux/ty≥s.h
>

216 
	~<u≠i/löux/b©adv_∑ckë.h
>

218 
	~"ty≥s.h
"

219 
	~"maö.h
"

227 
ölöe
 
	$b©adv_¥öt_vid
(
vid
)

229 i‡(
vid
 & 
BATADV_VLAN_HAS_TAG
)

230  ()(
vid
 & 
VLAN_VID_MASK
);

233 
	}
}

235 
li°_hód
 
b©adv_h¨dif_li°
;

236 
b©adv_h¨dif_gíî©i⁄
;

238 
b©adv_brﬂdˇ°_addr
[];

239 
w‹kqueue_°ru˘
 *
b©adv_evít_w‹kqueue
;

241 
b©adv_mesh_öô
(
√t_devi˚
 *
mesh_iÁ˚
);

242 
b©adv_mesh_‰ì
(
√t_devi˚
 *
mesh_iÁ˚
);

243 
boﬁ
 
b©adv_is_my_mac
(
b©adv_¥iv
 *
b©_¥iv
, c⁄° 
u8
 *
addr
);

244 
b©adv_max_hódî_Àn
();

245 
b©adv_skb_£t_¥i‹ôy
(
sk_buff
 *
skb
, 
off£t
);

246 
b©adv_b©m™_skb_ªcv
(
sk_buff
 *
skb
, 
√t_devi˚
 *
dev
,

247 
∑ckë_ty≥
 *
±y≥
,

248 
√t_devi˚
 *
‹ig_dev
);

250 
b©adv_ªcv_h™dÀr_ªgi°î
(
u8
 
∑ckë_ty≥
,

251 (*
ªcv_h™dÀr
)(
sk_buff
 *,

252 
b©adv_h¨d_iÁ˚
 *));

253 
	`b©adv_ªcv_h™dÀr_uƒegi°î
(
u8
 
∑ckë_ty≥
);

254 
__be32
 
	`b©adv_skb_¸c32
(
sk_buff
 *
skb
, 
u8
 *
∑ylﬂd_±r
);

265 
ölöe
 
boﬁ
 
	$b©adv_com∑ª_ëh
(c⁄° *
d©a1
, c⁄° *
d©a2
)

267  
	`ëhî_addr_equÆ_u«lig√d
(
d©a1
, 
d©a2
);

268 
	}
}

278 
ölöe
 
boﬁ
 
	$b©adv_has_timed_out
(
time°amp
,

279 
timeout
)

281  
	`time_is_bef‹e_jiffõs
(
time°amp
 + 
	`m£cs_to_jiffõs
(
timeout
));

282 
	}
}

290 
	#b©adv_©omic_dec_nŸ_zîo
(
v
Ë
	`©omic_add_u∆ess
((v), -1, 0)

	)

299 
	#b©adv_smÆÀ°_sig√d_öt
(
x
Ë(1u << (7u + 8u * ((xË- 1u)))

	)

319 
	#b©adv_£q_bef‹e
(
x
, 
y
) ({ \

320 
	`ty≥of
(
x
)
_d1
 = (x); \

321 
	`ty≥of
(
y
)
_d2
 = (y); \

322 
	`ty≥of
(
x
)
_dummy
 = (
_d1
 - 
_d2
); \

323 ()(&
_d1
 =&
_d2
); \

324 
_dummy
 > 
	`b©adv_smÆÀ°_sig√d_öt
(_dummy); \

325 })

	)

345 
	#b©adv_£q_a·î
(
x
, 
y
Ë
	`b©adv_£q_bef‹e
(y, x)

	)

355 
ölöe
 
	$b©adv_add_cou¡î
(
b©adv_¥iv
 *
b©_¥iv
, 
size_t
 
idx
,

356 
size_t
 
cou¡
)

358 
	`this_˝u_add
(
b©_¥iv
->
b©_cou¡îs
[
idx
], 
cou¡
);

359 
	}
}

366 
	#b©adv_öc_cou¡î
(
b
, 
i
Ë
	`b©adv_add_cou¡î
(b, i, 1)

	)

377 
	#BATADV_SKB_CB
(
__skb
Ë((
b©adv_skb_cb
 *)&((__skb)->
cb
[0]))

	)

379 
b©adv_gë_vid
(
sk_buff
 *
skb
, 
size_t
 
hódî_Àn
);

380 
boﬁ
 
b©adv_vœn_≠_isﬁa_gë
(
b©adv_¥iv
 *
b©_¥iv
, 
vid
);

381 
b©adv_throw_uevít
(
b©adv_¥iv
 *
b©_¥iv
, 
b©adv_uev_ty≥
 
ty≥
,

382 
b©adv_uev_a˘i⁄
 
a˘i⁄
, c⁄° *
d©a
);

	@net/batman-adv/mesh-interface.c

7 
	~"mesh-öãrÁ˚.h
"

8 
	~"maö.h
"

10 
	~<löux/©omic.h
>

11 
	~<löux/byã‹dî/gíîic.h
>

12 
	~<löux/ˇche.h
>

13 
	~<löux/compûî.h
>

14 
	~<löux/c⁄èöî_of.h
>

15 
	~<löux/˝umask.h
>

16 
	~<löux/î∫o.h
>

17 
	~<löux/ëhîdevi˚.h
>

18 
	~<löux/ëhtoﬁ.h
>

19 
	~<löux/gÂ.h
>

20 
	~<löux/if_ëhî.h
>

21 
	~<löux/if_vœn.h
>

22 
	~<löux/jiffõs.h
>

23 
	~<löux/kªf.h
>

24 
	~<löux/li°.h
>

25 
	~<löux/lockdï.h
>

26 
	~<löux/√tdevi˚.h
>

27 
	~<löux/√éök.h
>

28 
	~<löux/≥r˝u.h
>

29 
	~<löux/øndom.h
>

30 
	~<löux/rculi°.h
>

31 
	~<löux/rcupd©e.h
>

32 
	~<löux/skbuff.h
>

33 
	~<löux/¶ab.h
>

34 
	~<löux/sockë.h
>

35 
	~<löux/•ölock.h
>

36 
	~<löux/°ddef.h
>

37 
	~<löux/°rög.h
>

38 
	~<löux/ty≥s.h
>

39 
	~<√t/√t_«me•a˚.h
>

40 
	~<√t/√éök.h
>

41 
	~<u≠i/löux/b©adv_∑ckë.h
>

42 
	~<u≠i/löux/b©m™_adv.h
>

44 
	~"b©_Ægo.h
"

45 
	~"bridge_lo›_avoid™˚.h
"

46 
	~"di°ribuãd-¨p-èbÀ.h
"

47 
	~"g©eway_˛õ¡.h
"

48 
	~"h¨d-öãrÁ˚.h
"

49 
	~"mu…iˇ°.h
"

50 
	~"√tw‹k-codög.h
"

51 
	~"£nd.h
"

52 
	~"å™¶©i⁄-èbÀ.h
"

61 
	$b©adv_skb_hód_push
(
sk_buff
 *
skb
, 
Àn
)

63 
ªsu…
;

72 
ªsu…
 = 
	`skb_cow_hód
(
skb
, 
Àn
);

73 i‡(
ªsu…
 < 0)

74  
ªsu…
;

76 
	`skb_push
(
skb
, 
Àn
);

78 
	}
}

80 
	$b©adv_öãrÁ˚_›í
(
√t_devi˚
 *
dev
)

82 
	`√tif_°¨t_queue
(
dev
);

84 
	}
}

86 
	$b©adv_öãrÁ˚_ªÀa£
(
√t_devi˚
 *
dev
)

88 
	`√tif_°›_queue
(
dev
);

90 
	}
}

99 
u64
 
	$b©adv_sum_cou¡î
(
b©adv_¥iv
 *
b©_¥iv
, 
size_t
 
idx
)

101 
u64
 *
cou¡îs
, 
sum
 = 0;

102 
˝u
;

104 
	`f‹_óch_possibÀ_˝u
(
˝u
) {

105 
cou¡îs
 = 
	`≥r_˝u_±r
(
b©_¥iv
->
b©_cou¡îs
, 
˝u
);

106 
sum
 +
cou¡îs
[
idx
];

109  
sum
;

110 
	}
}

112 
√t_devi˚_°©s
 *
	$b©adv_öãrÁ˚_°©s
(
√t_devi˚
 *
dev
)

114 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
dev
);

115 
√t_devi˚_°©s
 *
°©s
 = &
dev
->stats;

117 
°©s
->
tx_∑ckës
 = 
	`b©adv_sum_cou¡î
(
b©_¥iv
, 
BATADV_CNT_TX
);

118 
°©s
->
tx_byãs
 = 
	`b©adv_sum_cou¡î
(
b©_¥iv
, 
BATADV_CNT_TX_BYTES
);

119 
°©s
->
tx_dr›≥d
 = 
	`b©adv_sum_cou¡î
(
b©_¥iv
, 
BATADV_CNT_TX_DROPPED
);

120 
°©s
->
rx_∑ckës
 = 
	`b©adv_sum_cou¡î
(
b©_¥iv
, 
BATADV_CNT_RX
);

121 
°©s
->
rx_byãs
 = 
	`b©adv_sum_cou¡î
(
b©_¥iv
, 
BATADV_CNT_RX_BYTES
);

122  
°©s
;

123 
	}
}

125 
	$b©adv_öãrÁ˚_£t_mac_addr
(
√t_devi˚
 *
dev
, *
p
)

127 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
dev
);

128 
b©adv_meshif_vœn
 *
vœn
;

129 
sockaddr
 *
addr
 = 
p
;

130 
u8
 
ﬁd_addr
[
ETH_ALEN
];

132 i‡(!
	`is_vÆid_ëhî_addr
(
addr
->
ß_d©a
))

133  -
EADDRNOTAVAIL
;

135 
	`ëhî_addr_c›y
(
ﬁd_addr
, 
dev
->
dev_addr
);

136 
	`ëh_hw_addr_£t
(
dev
, 
addr
->
ß_d©a
);

139 i‡(
	`©omic_ªad
(&
b©_¥iv
->
mesh_°©e
Ë!
BATADV_MESH_ACTIVE
)

142 
	`rcu_ªad_lock
();

143 
	`hli°_f‹_óch_íåy_rcu
(
vœn
, &
b©_¥iv
->
meshif_vœn_li°
, 
li°
) {

144 
	`b©adv_â_loˇl_ªmove
(
b©_¥iv
, 
ﬁd_addr
, 
vœn
->
vid
,

145 "ma¯addªs†ch™ged", 
Ál£
);

146 
	`b©adv_â_loˇl_add
(
dev
, 
addr
->
ß_d©a
, 
vœn
->
vid
,

147 
BATADV_NULL_IFINDEX
, 
BATADV_NO_MARK
);

149 
	`rcu_ªad_u∆ock
();

152 
	}
}

154 
	$b©adv_öãrÁ˚_ch™ge_mtu
(
√t_devi˚
 *
dev
, 
√w_mtu
)

156 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
dev
);

159 i‡(
√w_mtu
 < 
ETH_MIN_MTU
 ||Çew_mtu > 
	`b©adv_h¨dif_mö_mtu
(
dev
))

160  -
EINVAL
;

162 
	`WRITE_ONCE
(
dev
->
mtu
, 
√w_mtu
);

163 
b©_¥iv
->
mtu_£t_by_u£r
 = 
√w_mtu
;

166 
	}
}

176 
	$b©adv_öãrÁ˚_£t_rx_mode
(
√t_devi˚
 *
dev
)

178 
	}
}

180 
√tdev_tx_t
 
	$b©adv_öãrÁ˚_tx
(
sk_buff
 *
skb
,

181 
√t_devi˚
 *
mesh_iÁ˚
)

183 
ëhhdr
 *ethhdr;

184 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
mesh_iÁ˚
);

185 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
 = 
NULL
;

186 
b©adv_bˇ°_∑ckë
 *
bˇ°_∑ckë
;

187 c⁄° 
u8
 
°p_addr
[
ETH_ALEN
] = {0x01, 0x80, 0xC2, 0x00,

189 c⁄° 
u8
 
e˘p_addr
[
ETH_ALEN
] = {0xCF, 0x00, 0x00, 0x00,

191 
b©adv_dh˝_ªcùõ¡
 
dh˝_r˝
 = 
BATADV_DHCP_NO
;

192 
u8
 *
d°_höt
 = 
NULL
, 
chaddr
[
ETH_ALEN
];

193 
vœn_ëhhdr
 *
vhdr
;

194 
hódî_Àn
 = 0;

195 
d©a_Àn
 = 
skb
->
Àn
, 
ªt
;

196 
brd_dñay
 = 0;

197 
boﬁ
 
do_bˇ°
 = 
Ál£
, 
˛õ¡_added
;

198 
vid
;

199 
u32
 
£qno
;

200 
gw_mode
;

201 
b©adv_f‹w_mode
 
f‹w_mode
 = 
BATADV_FORW_BCAST
;

202 
mˇ°_is_rouèbÀ
 = 0;

203 
√tw‹k_off£t
 = 
ETH_HLEN
;

204 
__be16
 
¥Ÿo
;

206 i‡(
	`©omic_ªad
(&
b©_¥iv
->
mesh_°©e
Ë!
BATADV_MESH_ACTIVE
)

207 
dr›≥d
;

210 
	`mem£t
(
skb
->
cb
, 0, (
b©adv_skb_cb
));

212 
	`√tif_å™s_upd©e
(
mesh_iÁ˚
);

213 
vid
 = 
	`b©adv_gë_vid
(
skb
, 0);

215 
	`skb_ª£t_mac_hódî
(
skb
);

216 
ëhhdr
 = 
	`ëh_hdr
(
skb
);

218 
¥Ÿo
 = 
ëhhdr
->
h_¥Ÿo
;

220 
	`¡ohs
(
¥Ÿo
)) {

221 
ETH_P_8021Q
:

222 i‡(!
	`pskb_may_puŒ
(
skb
, (*
vhdr
)))

223 
dr›≥d
;

224 
vhdr
 = 
	`vœn_ëh_hdr
(
skb
);

225 
¥Ÿo
 = 
vhdr
->
h_vœn_íˇpsuœãd_¥Ÿo
;

228 i‡(
¥Ÿo
 !
	`ht⁄s
(
ETH_P_BATMAN
)) {

229 
√tw‹k_off£t
 +
VLAN_HLEN
;

233 
ÁŒthrough
;

234 
ETH_P_BATMAN
:

235 
dr›≥d
;

238 
	`skb_£t_√tw‹k_hódî
(
skb
, 
√tw‹k_off£t
);

240 i‡(
	`b©adv_bœ_tx
(
b©_¥iv
, 
skb
, 
vid
))

241 
dr›≥d
;

244 
ëhhdr
 = 
	`ëh_hdr
(
skb
);

247 i‡(!
	`is_mu…iˇ°_ëhî_addr
(
ëhhdr
->
h_sour˚
) &&

248 !
	`b©adv_bœ_is_lo›dëe˘_mac
(
ëhhdr
->
h_sour˚
)) {

249 
˛õ¡_added
 = 
	`b©adv_â_loˇl_add
(
mesh_iÁ˚
, 
ëhhdr
->
h_sour˚
,

250 
vid
, 
skb
->
skb_iif
,

251 
skb
->
m¨k
);

252 i‡(!
˛õ¡_added
)

253 
dr›≥d
;

257 
	`b©adv_d©_¢o›_outgoög_dh˝_ack
(
b©_¥iv
, 
skb
, 
¥Ÿo
, 
vid
);

265 i‡(
	`b©adv_com∑ª_ëh
(
ëhhdr
->
h_de°
, 
°p_addr
))

266 
dr›≥d
;

268 i‡(
	`b©adv_com∑ª_ëh
(
ëhhdr
->
h_de°
, 
e˘p_addr
))

269 
dr›≥d
;

271 
gw_mode
 = 
	`©omic_ªad
(&
b©_¥iv
->
gw
.
mode
);

272 i‡(
	`is_mu…iˇ°_ëhî_addr
(
ëhhdr
->
h_de°
)) {

274 i‡(
gw_mode
 =
BATADV_GW_MODE_OFF
) {

275 
do_bˇ°
 = 
åue
;

276 
£nd
;

279 
dh˝_r˝
 = 
	`b©adv_gw_dh˝_ªcùõ¡_gë
(
skb
, &
hódî_Àn
,

280 
chaddr
);

284 
ëhhdr
 = 
	`ëh_hdr
(
skb
);

288 i‡(
dh˝_r˝
 =
BATADV_DHCP_NO
) {

289 
do_bˇ°
 = 
åue
;

290 
£nd
;

293 i‡(
dh˝_r˝
 =
BATADV_DHCP_TO_CLIENT
)

294 
d°_höt
 = 
chaddr
;

295 i‡((
gw_mode
 =
BATADV_GW_MODE_SERVER
) &&

296 (
dh˝_r˝
 =
BATADV_DHCP_TO_SERVER
))

300 
dr›≥d
;

302 
£nd
:

303 i‡(
do_bˇ°
 && !
	`is_brﬂdˇ°_ëhî_addr
(
ëhhdr
->
h_de°
)) {

304 
f‹w_mode
 = 
	`b©adv_mˇ°_f‹w_mode
(
b©_¥iv
, 
skb
, 
vid
,

305 &
mˇ°_is_rouèbÀ
);

306 
f‹w_mode
) {

307 
BATADV_FORW_BCAST
:

309 
BATADV_FORW_UCASTS
:

310 
BATADV_FORW_MCAST
:

311 
do_bˇ°
 = 
Ál£
;

313 
BATADV_FORW_NONE
:

314 
ÁŒthrough
;

316 
dr›≥d
;

321 
	`b©adv_skb_£t_¥i‹ôy
(
skb
, 0);

324 i‡(
do_bˇ°
) {

325 
¥im¨y_if
 = 
	`b©adv_¥im¨y_if_gë_£À˘ed
(
b©_¥iv
);

326 i‡(!
¥im¨y_if
)

327 
dr›≥d
;

333 i‡(
	`b©adv_d©_¢o›_outgoög_¨p_ªque°
(
b©_¥iv
, 
skb
))

334 
brd_dñay
 = 
	`m£cs_to_jiffõs
(
ARP_REQ_DELAY
);

336 i‡(
	`b©adv_skb_hód_push
(
skb
, (*
bˇ°_∑ckë
)) < 0)

337 
dr›≥d
;

339 
bˇ°_∑ckë
 = (
b©adv_bˇ°_∑ckë
 *)
skb
->
d©a
;

340 
bˇ°_∑ckë
->
vîsi⁄
 = 
BATADV_COMPAT_VERSION
;

341 
bˇ°_∑ckë
->
âl
 = 
BATADV_TTL
 - 1;

344 
bˇ°_∑ckë
->
∑ckë_ty≥
 = 
BATADV_BCAST
;

345 
bˇ°_∑ckë
->
ª£rved
 = 0;

350 
	`ëhî_addr_c›y
(
bˇ°_∑ckë
->
‹ig
,

351 
¥im¨y_if
->
√t_dev
->
dev_addr
);

354 
£qno
 = 
	`©omic_öc_ªtu∫
(&
b©_¥iv
->
bˇ°_£qno
);

355 
bˇ°_∑ckë
->
£qno
 = 
	`ht⁄l
(seqno);

357 
	`b©adv_£nd_bˇ°_∑ckë
(
b©_¥iv
, 
skb
, 
brd_dñay
, 
åue
);

361 i‡(
dh˝_r˝
 =
BATADV_DHCP_TO_SERVER
) {

362 
ªt
 = 
	`b©adv_gw_out_of_ønge
(
b©_¥iv
, 
skb
);

363 i‡(
ªt
)

364 
dr›≥d
;

365 
ªt
 = 
	`b©adv_£nd_skb_vü_gw
(
b©_¥iv
, 
skb
, 
vid
);

366 } i‡(
f‹w_mode
 =
BATADV_FORW_UCASTS
) {

367 
ªt
 = 
	`b©adv_mˇ°_f‹w_£nd
(
b©_¥iv
, 
skb
, 
vid
,

368 
mˇ°_is_rouèbÀ
);

369 } i‡(
f‹w_mode
 =
BATADV_FORW_MCAST
) {

370 
ªt
 = 
	`b©adv_mˇ°_f‹w_mc£nd
(
b©_¥iv
, 
skb
);

372 i‡(
	`b©adv_d©_¢o›_outgoög_¨p_ªque°
(
b©_¥iv
,

373 
skb
))

374 
dr›≥d
;

376 
	`b©adv_d©_¢o›_outgoög_¨p_ª∂y
(
b©_¥iv
, 
skb
);

378 
ªt
 = 
	`b©adv_£nd_skb_vü_â
(
b©_¥iv
, 
skb
, 
d°_höt
,

379 
vid
);

381 i‡(
ªt
 !
NET_XMIT_SUCCESS
)

382 
dr›≥d_‰ìd
;

385 
	`b©adv_öc_cou¡î
(
b©_¥iv
, 
BATADV_CNT_TX
);

386 
	`b©adv_add_cou¡î
(
b©_¥iv
, 
BATADV_CNT_TX_BYTES
, 
d©a_Àn
);

387 
íd
;

389 
dr›≥d
:

390 
	`k‰ì_skb
(
skb
);

391 
dr›≥d_‰ìd
:

392 
	`b©adv_öc_cou¡î
(
b©_¥iv
, 
BATADV_CNT_TX_DROPPED
);

393 
íd
:

394 
	`b©adv_h¨dif_put
(
¥im¨y_if
);

395  
NETDEV_TX_OK
;

396 
	}
}

415 
	$b©adv_öãrÁ˚_rx
(
√t_devi˚
 *
mesh_iÁ˚
,

416 
sk_buff
 *
skb
, 
hdr_size
,

417 
b©adv_‹ig_node
 *
‹ig_node
)

419 
b©adv_bˇ°_∑ckë
 *batadv_bcast_packet;

420 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
mesh_iÁ˚
);

421 
vœn_ëhhdr
 *
vhdr
;

422 
ëhhdr
 *ethhdr;

423 
vid
;

424 
∑ckë_ty≥
;

426 
b©adv_bˇ°_∑ckë
 = (b©adv_bˇ°_∑ckë *)
skb
->
d©a
;

427 
∑ckë_ty≥
 = 
b©adv_bˇ°_∑ckë
->packet_type;

429 
	`skb_puŒ_rcsum
(
skb
, 
hdr_size
);

430 
	`skb_ª£t_mac_hódî
(
skb
);

435 
	`nf_ª£t_˘
(
skb
);

437 i‡(
	`u∆ikñy
(!
	`pskb_may_puŒ
(
skb
, 
ETH_HLEN
)))

438 
dr›≥d
;

440 
vid
 = 
	`b©adv_gë_vid
(
skb
, 0);

441 
ëhhdr
 = 
	`ëh_hdr
(
skb
);

443 
	`¡ohs
(
ëhhdr
->
h_¥Ÿo
)) {

444 
ETH_P_8021Q
:

445 i‡(!
	`pskb_may_puŒ
(
skb
, 
VLAN_ETH_HLEN
))

446 
dr›≥d
;

448 
vhdr
 = 
	`skb_vœn_ëh_hdr
(
skb
);

451 i‡(
vhdr
->
h_vœn_íˇpsuœãd_¥Ÿo
 !
	`ht⁄s
(
ETH_P_BATMAN
))

454 
ÁŒthrough
;

455 
ETH_P_BATMAN
:

456 
dr›≥d
;

460 
skb
->
¥Ÿocﬁ
 = 
	`ëh_ty≥_å™s
(skb, 
mesh_iÁ˚
);

461 
	`skb_po°puŒ_rcsum
(
skb
, 
	`ëh_hdr
(skb), 
ETH_HLEN
);

463 
	`b©adv_öc_cou¡î
(
b©_¥iv
, 
BATADV_CNT_RX
);

464 
	`b©adv_add_cou¡î
(
b©_¥iv
, 
BATADV_CNT_RX_BYTES
,

465 
skb
->
Àn
 + 
ETH_HLEN
);

470 i‡(
	`b©adv_bœ_rx
(
b©_¥iv
, 
skb
, 
vid
, 
∑ckë_ty≥
))

471 
out
;

473 i‡(
‹ig_node
)

474 
	`b©adv_â_add_ãmp‹¨y_globÆ_íåy
(
b©_¥iv
, 
‹ig_node
,

475 
ëhhdr
->
h_sour˚
, 
vid
);

477 i‡(
	`is_mu…iˇ°_ëhî_addr
(
ëhhdr
->
h_de°
)) {

481 i‡(
	`b©adv_vœn_≠_isﬁa_gë
(
b©_¥iv
, 
vid
) &&

482 
	`b©adv_â_globÆ_is_isﬁ©ed
(
b©_¥iv
, 
ëhhdr
->
h_sour˚
,

483 
vid
)) {

487 
skb
->
m¨k
 &~
b©_¥iv
->
isﬁ©i⁄_m¨k_mask
;

488 
skb
->
m¨k
 |
b©_¥iv
->
isﬁ©i⁄_m¨k
;

490 } i‡(
	`b©adv_is_≠_isﬁ©ed
(
b©_¥iv
, 
ëhhdr
->
h_sour˚
,

491 
ëhhdr
->
h_de°
, 
vid
)) {

492 
dr›≥d
;

495 
	`√tif_rx
(
skb
);

496 
out
;

498 
dr›≥d
:

499 
	`k‰ì_skb
(
skb
);

500 
out
:

502 
	}
}

509 
	$b©adv_meshif_vœn_ªÀa£
(
kªf
 *
ªf
)

511 
b©adv_meshif_vœn
 *
vœn
;

513 
vœn
 = 
	`c⁄èöî_of
(
ªf
, 
b©adv_meshif_vœn
, 
ªfcou¡
);

515 
	`•ö_lock_bh
(&
vœn
->
b©_¥iv
->
meshif_vœn_li°_lock
);

516 
	`hli°_dñ_rcu
(&
vœn
->
li°
);

517 
	`•ö_u∆ock_bh
(&
vœn
->
b©_¥iv
->
meshif_vœn_li°_lock
);

519 
	`k‰ì_rcu
(
vœn
, 
rcu
);

520 
	}
}

530 
b©adv_meshif_vœn
 *
	$b©adv_meshif_vœn_gë
(
b©adv_¥iv
 *
b©_¥iv
,

531 
vid
)

533 
b©adv_meshif_vœn
 *
vœn_tmp
, *
vœn
 = 
NULL
;

535 
	`rcu_ªad_lock
();

536 
	`hli°_f‹_óch_íåy_rcu
(
vœn_tmp
, &
b©_¥iv
->
meshif_vœn_li°
, 
li°
) {

537 i‡(
vœn_tmp
->
vid
 != vid)

540 i‡(!
	`kªf_gë_u∆ess_zîo
(&
vœn_tmp
->
ªfcou¡
))

543 
vœn
 = 
vœn_tmp
;

546 
	`rcu_ªad_u∆ock
();

548  
vœn
;

549 
	}
}

558 
	$b©adv_meshif_¸óã_vœn
(
b©adv_¥iv
 *
b©_¥iv
, 
vid
)

560 
b©adv_meshif_vœn
 *
vœn
;

562 
	`•ö_lock_bh
(&
b©_¥iv
->
meshif_vœn_li°_lock
);

564 
vœn
 = 
	`b©adv_meshif_vœn_gë
(
b©_¥iv
, 
vid
);

565 i‡(
vœn
) {

566 
	`b©adv_meshif_vœn_put
(
vœn
);

567 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
meshif_vœn_li°_lock
);

568  -
EEXIST
;

571 
vœn
 = 
	`kzÆloc
((*vœn), 
GFP_ATOMIC
);

572 i‡(!
vœn
) {

573 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
meshif_vœn_li°_lock
);

574  -
ENOMEM
;

577 
vœn
->
b©_¥iv
 = bat_priv;

578 
vœn
->
vid
 = vid;

579 
	`kªf_öô
(&
vœn
->
ªfcou¡
);

581 
	`©omic_£t
(&
vœn
->
≠_isﬁ©i⁄
, 0);

583 
	`kªf_gë
(&
vœn
->
ªfcou¡
);

584 
	`hli°_add_hód_rcu
(&
vœn
->
li°
, &
b©_¥iv
->
meshif_vœn_li°
);

585 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
meshif_vœn_li°_lock
);

590 
	`b©adv_â_loˇl_add
(
b©_¥iv
->
mesh_iÁ˚
,

591 
b©_¥iv
->
mesh_iÁ˚
->
dev_addr
, 
vid
,

592 
BATADV_NULL_IFINDEX
, 
BATADV_NO_MARK
);

595 
	`b©adv_meshif_vœn_put
(
vœn
);

598 
	}
}

605 
	$b©adv_meshif_de°roy_vœn
(
b©adv_¥iv
 *
b©_¥iv
,

606 
b©adv_meshif_vœn
 *
vœn
)

611 
	`b©adv_â_loˇl_ªmove
(
b©_¥iv
, b©_¥iv->
mesh_iÁ˚
->
dev_addr
,

612 
vœn
->
vid
, "vœ¿öãrÁ˚ de°royed", 
Ál£
);

614 
	`b©adv_meshif_vœn_put
(
vœn
);

615 
	}
}

628 
	$b©adv_öãrÁ˚_add_vid
(
√t_devi˚
 *
dev
, 
__be16
 
¥Ÿo
,

629 
vid
)

631 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
dev
);

632 
b©adv_meshif_vœn
 *
vœn
;

637 i‡(
¥Ÿo
 !
	`ht⁄s
(
ETH_P_8021Q
))

638  -
EINVAL
;

645 i‡(
vid
 == 0)

648 
vid
 |
BATADV_VLAN_HAS_TAG
;

656 
vœn
 = 
	`b©adv_meshif_vœn_gë
(
b©_¥iv
, 
vid
);

657 i‡(!
vœn
)

658  
	`b©adv_meshif_¸óã_vœn
(
b©_¥iv
, 
vid
);

664 
	`b©adv_â_loˇl_add
(
b©_¥iv
->
mesh_iÁ˚
,

665 
b©_¥iv
->
mesh_iÁ˚
->
dev_addr
, 
vid
,

666 
BATADV_NULL_IFINDEX
, 
BATADV_NO_MARK
);

669 
	}
}

683 
	$b©adv_öãrÁ˚_kûl_vid
(
√t_devi˚
 *
dev
, 
__be16
 
¥Ÿo
,

684 
vid
)

686 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
dev
);

687 
b©adv_meshif_vœn
 *
vœn
;

692 i‡(
¥Ÿo
 !
	`ht⁄s
(
ETH_P_8021Q
))

693  -
EINVAL
;

698 i‡(
vid
 == 0)

701 
vœn
 = 
	`b©adv_meshif_vœn_gë
(
b©_¥iv
, 
vid
 | 
BATADV_VLAN_HAS_TAG
);

702 i‡(!
vœn
)

703  -
ENOENT
;

705 
	`b©adv_meshif_de°roy_vœn
(
b©_¥iv
, 
vœn
);

708 
	`b©adv_meshif_vœn_put
(
vœn
);

711 
	}
}

717 
lock_˛ass_key
 
	gb©adv_√tdev_xmô_lock_key
;

718 
lock_˛ass_key
 
	gb©adv_√tdev_addr_lock_key
;

726 
	$b©adv_£t_lockdï_˛ass_⁄e
(
√t_devi˚
 *
dev
,

727 
√tdev_queue
 *
txq
,

728 *
_unu£d
)

730 
	`lockdï_£t_˛ass
(&
txq
->
_xmô_lock
, &
b©adv_√tdev_xmô_lock_key
);

731 
	}
}

737 
	$b©adv_£t_lockdï_˛ass
(
√t_devi˚
 *
dev
)

739 
	`lockdï_£t_˛ass
(&
dev
->
addr_li°_lock
, &
b©adv_√tdev_addr_lock_key
);

740 
	`√tdev_f‹_óch_tx_queue
(
dev
, 
b©adv_£t_lockdï_˛ass_⁄e
, 
NULL
);

741 
	}
}

749 
	$b©adv_meshif_öô_œã
(
√t_devi˚
 *
dev
)

751 
b©adv_¥iv
 *
b©_¥iv
;

752 
u32
 
øndom_£qno
;

753 
ªt
;

754 
size_t
 
˙t_Àn
 = (
u64
Ë* 
BATADV_CNT_NUM
;

756 
	`b©adv_£t_lockdï_˛ass
(
dev
);

758 
b©_¥iv
 = 
	`√tdev_¥iv
(
dev
);

759 
b©_¥iv
->
mesh_iÁ˚
 = 
dev
;

764 
b©_¥iv
->
b©_cou¡îs
 = 
	`__Æloc_≥r˝u
(
˙t_Àn
, 
	`__Æignof__
(
u64
));

765 i‡(!
b©_¥iv
->
b©_cou¡îs
)

766  -
ENOMEM
;

768 
	`©omic_£t
(&
b©_¥iv
->
aggªg©ed_ogms
, 1);

769 
	`©omic_£t
(&
b©_¥iv
->
b⁄dög
, 0);

770 #ifde‡
CONFIG_BATMAN_ADV_BLA


771 
	`©omic_£t
(&
b©_¥iv
->
bridge_lo›_avoid™˚
, 1);

773 #ifde‡
CONFIG_BATMAN_ADV_DAT


774 
	`©omic_£t
(&
b©_¥iv
->
di°ribuãd_¨p_èbÀ
, 1);

776 #ifde‡
CONFIG_BATMAN_ADV_MCAST


777 
	`©omic_£t
(&
b©_¥iv
->
mu…iˇ°_mode
, 1);

778 
	`©omic_£t
(&
b©_¥iv
->
mu…iˇ°_Ánout
, 16);

779 
	`©omic_£t
(&
b©_¥iv
->
mˇ°
.
num_w™t_Æl_un¢o›abÀs
, 0);

780 
	`©omic_£t
(&
b©_¥iv
->
mˇ°
.
num_w™t_Æl_ùv4
, 0);

781 
	`©omic_£t
(&
b©_¥iv
->
mˇ°
.
num_w™t_Æl_ùv6
, 0);

782 
	`©omic_£t
(&
b©_¥iv
->
mˇ°
.
num_no_mc_±y≥_ˇ∑
, 0);

784 
	`©omic_£t
(&
b©_¥iv
->
gw
.
mode
, 
BATADV_GW_MODE_OFF
);

785 
	`©omic_£t
(&
b©_¥iv
->
gw
.
b™dwidth_down
, 100);

786 
	`©omic_£t
(&
b©_¥iv
->
gw
.
b™dwidth_up
, 20);

787 
	`©omic_£t
(&
b©_¥iv
->
‹ig_öãrvÆ
, 1000);

788 
	`©omic_£t
(&
b©_¥iv
->
h›_≥«…y
, 30);

789 #ifde‡
CONFIG_BATMAN_ADV_DEBUG


790 
	`©omic_£t
(&
b©_¥iv
->
log_Àvñ
, 0);

792 
	`©omic_£t
(&
b©_¥iv
->
‰agmíèti⁄
, 1);

793 
	`©omic_£t
(&
b©_¥iv
->
∑ckë_size_max
, 
BATADV_MAX_MTU
);

794 
	`©omic_£t
(&
b©_¥iv
->
bˇ°_queue_À·
, 
BATADV_BCAST_QUEUE_LEN
);

795 
	`©omic_£t
(&
b©_¥iv
->
b©m™_queue_À·
, 
BATADV_BATMAN_QUEUE_LEN
);

797 
	`©omic_£t
(&
b©_¥iv
->
mesh_°©e
, 
BATADV_MESH_INACTIVE
);

798 
	`©omic_£t
(&
b©_¥iv
->
bˇ°_£qno
, 1);

799 
	`©omic_£t
(&
b©_¥iv
->
â
.
vn
, 0);

800 
	`©omic_£t
(&
b©_¥iv
->
â
.
ogm_≠≥nd_˙t
, 0);

801 #ifde‡
CONFIG_BATMAN_ADV_BLA


802 
	`©omic_£t
(&
b©_¥iv
->
bœ
.
num_ªque°s
, 0);

804 
	`©omic_£t
(&
b©_¥iv
->
ç_num
, 0);

806 
	`WRITE_ONCE
(
b©_¥iv
->
â
.
loˇl_ch™ges
, 0);

807 
b©_¥iv
->
â
.
œ°_ch™ge£t
 = 
NULL
;

808 
b©_¥iv
->
â
.
œ°_ch™ge£t_Àn
 = 0;

809 
b©_¥iv
->
isﬁ©i⁄_m¨k
 = 0;

810 
b©_¥iv
->
isﬁ©i⁄_m¨k_mask
 = 0;

813 
	`gë_øndom_byãs
(&
øndom_£qno
, (random_seqno));

814 
	`©omic_£t
(&
b©_¥iv
->
‰ag_£qno
, 
øndom_£qno
);

816 
b©_¥iv
->
¥im¨y_if
 = 
NULL
;

818 
	`b©adv_nc_öô_b©_¥iv
(
b©_¥iv
);

820 i‡(!
b©_¥iv
->
Ægo_›s
) {

821 
ªt
 = 
	`b©adv_Ægo_£À˘
(
b©_¥iv
, 
b©adv_routög_Ægo
);

822 i‡(
ªt
 < 0)

823 
‰ì_b©_cou¡îs
;

826 
ªt
 = 
	`b©adv_mesh_öô
(
dev
);

827 i‡(
ªt
 < 0)

828 
‰ì_b©_cou¡îs
;

832 
‰ì_b©_cou¡îs
:

833 
	`‰ì_≥r˝u
(
b©_¥iv
->
b©_cou¡îs
);

834 
b©_¥iv
->
b©_cou¡îs
 = 
NULL
;

836  
ªt
;

837 
	}
}

847 
	$b©adv_meshif_¶ave_add
(
√t_devi˚
 *
dev
,

848 
√t_devi˚
 *
¶ave_dev
,

849 
√éök_ext_ack
 *
exèck
)

851 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
;

852 
ªt
 = -
EINVAL
;

854 
h¨d_iÁ˚
 = 
	`b©adv_h¨dif_gë_by_√tdev
(
¶ave_dev
);

855 i‡(!
h¨d_iÁ˚
 || h¨d_iÁ˚->
mesh_iÁ˚
)

856 
out
;

858 
ªt
 = 
	`b©adv_h¨dif_íabÀ_öãrÁ˚
(
h¨d_iÁ˚
, 
dev
);

860 
out
:

861 
	`b©adv_h¨dif_put
(
h¨d_iÁ˚
);

862  
ªt
;

863 
	}
}

872 
	$b©adv_meshif_¶ave_dñ
(
√t_devi˚
 *
dev
,

873 
√t_devi˚
 *
¶ave_dev
)

875 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
;

876 
ªt
 = -
EINVAL
;

878 
h¨d_iÁ˚
 = 
	`b©adv_h¨dif_gë_by_√tdev
(
¶ave_dev
);

880 i‡(!
h¨d_iÁ˚
 || h¨d_iÁ˚->
mesh_iÁ˚
 !
dev
)

881 
out
;

883 
	`b©adv_h¨dif_dißbÀ_öãrÁ˚
(
h¨d_iÁ˚
);

884 
ªt
 = 0;

886 
out
:

887 
	`b©adv_h¨dif_put
(
h¨d_iÁ˚
);

888  
ªt
;

889 
	}
}

891 c⁄° 
√t_devi˚_›s
 
	gb©adv_√tdev_›s
 = {

892 .
ndo_öô
 = 
b©adv_meshif_öô_œã
,

893 .
	gndo_›í
 = 
b©adv_öãrÁ˚_›í
,

894 .
	gndo_°›
 = 
b©adv_öãrÁ˚_ªÀa£
,

895 .
	gndo_gë_°©s
 = 
b©adv_öãrÁ˚_°©s
,

896 .
	gndo_vœn_rx_add_vid
 = 
b©adv_öãrÁ˚_add_vid
,

897 .
	gndo_vœn_rx_kûl_vid
 = 
b©adv_öãrÁ˚_kûl_vid
,

898 .
	gndo_£t_mac_addªss
 = 
b©adv_öãrÁ˚_£t_mac_addr
,

899 .
	gndo_ch™ge_mtu
 = 
b©adv_öãrÁ˚_ch™ge_mtu
,

900 .
	gndo_£t_rx_mode
 = 
b©adv_öãrÁ˚_£t_rx_mode
,

901 .
	gndo_°¨t_xmô
 = 
b©adv_öãrÁ˚_tx
,

902 .
	gndo_vÆid©e_addr
 = 
ëh_vÆid©e_addr
,

903 .
	gndo_add_¶ave
 = 
b©adv_meshif_¶ave_add
,

904 .
	gndo_dñ_¶ave
 = 
b©adv_meshif_¶ave_dñ
,

907 
	$b©adv_gë_drvöfo
(
√t_devi˚
 *
dev
,

908 
ëhtoﬁ_drvöfo
 *
öfo
)

910 
	`°rs˝y
(
öfo
->
drivî
, "B.A.T.M.A.N.ádvanced", (info->driver));

911 
	`°rs˝y
(
öfo
->
vîsi⁄
, 
BATADV_SOURCE_VERSION
, (info->version));

912 
	`°rs˝y
(
öfo
->
fw_vîsi⁄
, "N/A", (info->fw_version));

913 
	`°rs˝y
(
öfo
->
bus_öfo
, "batman", (info->bus_info));

914 
	}
}

921 c⁄° 
	m«me
[
ETH_GSTRING_LEN
];

922 } 
	gb©adv_cou¡îs_°rögs
[] = {

946 #ifde‡
CONFIG_BATMAN_ADV_MCAST


958 #ifde‡
CONFIG_BATMAN_ADV_DAT


965 #ifde‡
CONFIG_BATMAN_ADV_NC


978 
	$b©adv_gë_°rögs
(
√t_devi˚
 *
dev
, 
u32
 
°rög£t
, 
u8
 *
d©a
)

980 i‡(
°rög£t
 =
ETH_SS_STATS
)

981 
	`mem˝y
(
d©a
, 
b©adv_cou¡îs_°rögs
,

982 (
b©adv_cou¡îs_°rögs
));

983 
	}
}

985 
	$b©adv_gë_ëhtoﬁ_°©s
(
√t_devi˚
 *
dev
,

986 
ëhtoﬁ_°©s
 *
°©s
, 
u64
 *
d©a
)

988 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
dev
);

989 
i
;

991 
i
 = 0; i < 
BATADV_CNT_NUM
; i++)

992 
d©a
[
i
] = 
	`b©adv_sum_cou¡î
(
b©_¥iv
, i);

993 
	}
}

995 
	$b©adv_gë_s£t_cou¡
(
√t_devi˚
 *
dev
, 
°rög£t
)

997 i‡(
°rög£t
 =
ETH_SS_STATS
)

998  
BATADV_CNT_NUM
;

1000  -
EOPNOTSUPP
;

1001 
	}
}

1003 c⁄° 
ëhtoﬁ_›s
 
	gb©adv_ëhtoﬁ_›s
 = {

1004 .
gë_drvöfo
 = 
b©adv_gë_drvöfo
,

1005 .
	ggë_lök
 = 
ëhtoﬁ_›_gë_lök
,

1006 .
	ggë_°rögs
 = 
b©adv_gë_°rögs
,

1007 .
	ggë_ëhtoﬁ_°©s
 = 
b©adv_gë_ëhtoﬁ_°©s
,

1008 .
	ggë_s£t_cou¡
 = 
b©adv_gë_s£t_cou¡
,

1015 
	$b©adv_meshif_‰ì
(
√t_devi˚
 *
dev
)

1017 
	`b©adv_mesh_‰ì
(
dev
);

1023 
	`rcu_b¨rõr
();

1024 
	}
}

1030 
	$b©adv_meshif_öô_óæy
(
√t_devi˚
 *
dev
)

1032 
	`ëhî_£tup
(
dev
);

1034 
dev
->
√tdev_›s
 = &
b©adv_√tdev_›s
;

1035 
dev
->
√eds_‰ì_√tdev
 = 
åue
;

1036 
dev
->
¥iv_de°ru˘‹
 = 
b©adv_meshif_‰ì
;

1037 
dev
->
„©uªs
 |
NETIF_F_HW_VLAN_CTAG_FILTER
;

1038 
dev
->
¥iv_Êags
 |
IFF_NO_QUEUE
;

1039 #i‡
	`LINUX_VERSION_IS_GEQ
(6, 15, 0)

1040 
dev
->
Œtx
 = 
åue
;

1041 
dev
->
√äs_immuèbÀ
 = 
åue
;

1042 #ñi‡
	`LINUX_VERSION_IS_GEQ
(6, 12, 0)

1043 
dev
->
Œtx
 = 
åue
;

1044 
dev
->
√äs_loˇl
 = 
åue
;

1046 
dev
->
„©uªs
 |
NETIF_F_LLTX
 | 
NETIF_F_NETNS_LOCAL
;

1052 
dev
->
mtu
 = 
ETH_DATA_LEN
;

1053 
dev
->
max_mtu
 = 
BATADV_MAX_MTU
;

1056 
	`ëh_hw_addr_øndom
(
dev
);

1058 
dev
->
ëhtoﬁ_›s
 = &
b©adv_ëhtoﬁ_›s
;

1059 
	}
}

1069 
	$b©adv_meshif_vÆid©e
(
∆©å
 *
tb
[], ∆©å *
d©a
[],

1070 
√éök_ext_ack
 *
exèck
)

1072 
b©adv_Ægo_›s
 *
Ægo_›s
;

1074 i‡(!
d©a
)

1077 i‡(
d©a
[
IFLA_BATADV_ALGO_NAME
]) {

1078 
Ægo_›s
 = 
	`b©adv_Ægo_gë
(
	`∆a_d©a
(
d©a
[
IFLA_BATADV_ALGO_NAME
]));

1079 i‡(!
Ægo_›s
)

1080  -
EINVAL
;

1084 
	}
}

1094 #i‡
LINUX_VERSION_IS_GEQ
(6, 15, 0)

1095 
b©adv_meshif_√wlök
(
√t_devi˚
 *
dev
,

1096 
π∆_√wlök_∑øms
 *
∑øms
,

1098 
b©adv_meshif_√wlök
(
√t
 *
§c_√t
, 
√t_devi˚
 *
dev
,

1099 
∆©å
 *
tb
[], ∆©å *
d©a
[],

1101 
√éök_ext_ack
 *
exèck
)

1103 
b©adv_¥iv
 *
b©_¥iv
 = 
√tdev_¥iv
(
dev
);

1104 #i‡
LINUX_VERSION_IS_GEQ
(6, 15, 0)

1105 
∆©å
 **
d©a
 = 
∑øms
->data;

1107 c⁄° *
Ægo_«me
;

1108 
îr
;

1110 i‡(
d©a
 && d©a[
IFLA_BATADV_ALGO_NAME
]) {

1111 
Ægo_«me
 = 
∆a_d©a
(
d©a
[
IFLA_BATADV_ALGO_NAME
]);

1112 
îr
 = 
b©adv_Ægo_£À˘
(
b©_¥iv
, 
Ægo_«me
);

1113 i‡(
îr
)

1114  -
EINVAL
;

1117  
ªgi°î_√tdevi˚
(
dev
);

1126 
	$b©adv_meshif_de°roy_√éök
(
√t_devi˚
 *
mesh_iÁ˚
,

1127 
li°_hód
 *
hód
)

1129 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
mesh_iÁ˚
);

1130 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
;

1131 
b©adv_meshif_vœn
 *
vœn
;

1133 
	`li°_f‹_óch_íåy
(
h¨d_iÁ˚
, &
b©adv_h¨dif_li°
, 
li°
) {

1134 i‡(
h¨d_iÁ˚
->
mesh_iÁ˚
 == mesh_iface)

1135 
	`b©adv_h¨dif_dißbÀ_öãrÁ˚
(
h¨d_iÁ˚
);

1139 
vœn
 = 
	`b©adv_meshif_vœn_gë
(
b©_¥iv
, 
BATADV_NO_FLAGS
);

1140 i‡(
vœn
) {

1141 
	`b©adv_meshif_de°roy_vœn
(
b©_¥iv
, 
vœn
);

1142 
	`b©adv_meshif_vœn_put
(
vœn
);

1145 
	`uƒegi°î_√tdevi˚_queue
(
mesh_iÁ˚
, 
hód
);

1146 
	}
}

1154 
boﬁ
 
	$b©adv_meshif_is_vÆid
(c⁄° 
√t_devi˚
 *
√t_dev
)

1156 i‡(
√t_dev
->
√tdev_›s
->
ndo_°¨t_xmô
 =
b©adv_öãrÁ˚_tx
)

1157  
åue
;

1159  
Ál£
;

1160 
	}
}

1162 c⁄° 
∆a_pﬁicy
 
b©adv_iÊa_pﬁicy
[
IFLA_BATADV_MAX
 + 1] = {

1163 [
IFLA_BATADV_ALGO_NAME
] = { .
ty≥
 = 
NLA_NUL_STRING
 },

1166 
π∆_lök_›s
 
b©adv_lök_›s
 
__ªad_mo°ly
 = {

1167 .
köd
 = "batadv",

1168 .
¥iv_size
 = (
b©adv_¥iv
),

1169 .
£tup
 = 
b©adv_meshif_öô_óæy
,

1170 .
maxty≥
 = 
IFLA_BATADV_MAX
,

1171 .
pﬁicy
 = 
b©adv_iÊa_pﬁicy
,

1172 .
vÆid©e
 = 
b©adv_meshif_vÆid©e
,

1173 .
√wlök
 = 
b©adv_meshif_√wlök
,

1174 .
dñlök
 = 
b©adv_meshif_de°roy_√éök
,

	@net/batman-adv/mesh-interface.h

7 #i‚de‡
_NET_BATMAN_ADV_MESH_INTERFACE_H_


8 
	#_NET_BATMAN_ADV_MESH_INTERFACE_H_


	)

10 
	~"maö.h
"

12 
	~<löux/kªf.h
>

13 
	~<löux/√tdevi˚.h
>

14 
	~<löux/skbuff.h
>

15 
	~<löux/ty≥s.h
>

16 
	~<√t/π√éök.h
>

18 
b©adv_skb_hód_push
(
sk_buff
 *
skb
, 
Àn
);

19 
b©adv_öãrÁ˚_rx
(
√t_devi˚
 *
mesh_iÁ˚
,

20 
sk_buff
 *
skb
, 
hdr_size
,

21 
b©adv_‹ig_node
 *
‹ig_node
);

22 
boﬁ
 
b©adv_meshif_is_vÆid
(c⁄° 
√t_devi˚
 *
√t_dev
);

23 
π∆_lök_›s
 
b©adv_lök_›s
;

24 
b©adv_meshif_¸óã_vœn
(
b©adv_¥iv
 *
b©_¥iv
, 
vid
);

25 
b©adv_meshif_vœn_ªÀa£
(
kªf
 *
ªf
);

26 
b©adv_meshif_vœn
 *
b©adv_meshif_vœn_gë
(
b©adv_¥iv
 *
b©_¥iv
,

27 
vid
);

34 
ölöe
 
	$b©adv_meshif_vœn_put
(
b©adv_meshif_vœn
 *
vœn
)

36 i‡(!
vœn
)

39 
	`kªf_put
(&
vœn
->
ªfcou¡
, 
b©adv_meshif_vœn_ªÀa£
);

40 
	}
}

	@net/batman-adv/multicast.c

7 
	~"mu…iˇ°.h
"

8 
	~"maö.h
"

10 
	~<löux/©omic.h
>

11 
	~<löux/bô›s.h
>

12 
	~<löux/bug.h
>

13 
	~<löux/byã‹dî/gíîic.h
>

14 
	~<löux/c⁄èöî_of.h
>

15 
	~<löux/îr.h
>

16 
	~<löux/î∫o.h
>

17 
	~<löux/ëhîdevi˚.h
>

18 
	~<löux/gÂ.h
>

19 
	~<löux/icmpv6.h
>

20 
	~<löux/if_bridge.h
>

21 
	~<löux/if_ëhî.h
>

22 
	~<löux/igmp.h
>

23 
	~<löux/ö.h
>

24 
	~<löux/ö6.h
>

25 
	~<löux/öëdevi˚.h
>

26 
	~<löux/ù.h
>

27 
	~<löux/ùv6.h
>

28 
	~<löux/jiffõs.h
>

29 
	~<löux/li°.h
>

30 
	~<löux/lockdï.h
>

31 
	~<löux/√tdevi˚.h
>

32 
	~<löux/√éök.h
>

33 
	~<löux/¥ötk.h
>

34 
	~<löux/rculi°.h
>

35 
	~<löux/rcupd©e.h
>

36 
	~<löux/skbuff.h
>

37 
	~<löux/¶ab.h
>

38 
	~<löux/•ölock.h
>

39 
	~<löux/•rötf.h
>

40 
	~<löux/°ddef.h
>

41 
	~<löux/°rög.h
>

42 
	~<löux/ty≥s.h
>

43 
	~<löux/w‹kqueue.h
>

44 
	~<√t/addrc⁄f.h
>

45 
	~<√t/gíëlök.h
>

46 
	~<√t/if_öë6.h
>

47 
	~<√t/ù.h
>

48 
	~<√t/ùv6.h
>

49 
	~<√t/√éök.h
>

50 
	~<u≠i/löux/b©adv_∑ckë.h
>

51 
	~<u≠i/löux/b©m™_adv.h
>

53 
	~"bridge_lo›_avoid™˚.h
"

54 
	~"h¨d-öãrÁ˚.h
"

55 
	~"hash.h
"

56 
	~"log.h
"

57 
	~"√éök.h
"

58 
	~"£nd.h
"

59 
	~"å™¶©i⁄-èbÀ.h
"

60 
	~"tvlv.h
"

62 
b©adv_mˇ°_mœ_upd©e
(
w‹k_°ru˘
 *
w‹k
);

68 
	$b©adv_mˇ°_°¨t_timî
(
b©adv_¥iv
 *
b©_¥iv
)

70 
	`queue_dñayed_w‹k
(
b©adv_evít_w‹kqueue
, &
b©_¥iv
->
mˇ°
.
w‹k
,

71 
	`m£cs_to_jiffõs
(
BATADV_MCAST_WORK_PERIOD
));

72 
	}
}

84 
√t_devi˚
 *
	$b©adv_mˇ°_gë_bridge
(
√t_devi˚
 *
mesh_iÁ˚
)

86 
√t_devi˚
 *
uµî
 = 
mesh_iÁ˚
;

88 
	`rcu_ªad_lock
();

90 
uµî
 = 
	`√tdev_ma°î_uµî_dev_gë_rcu
(upper);

91 } 
uµî
 && !
	`√tif_is_bridge_ma°î
(upper));

93 
	`dev_hﬁd
(
uµî
);

94 
	`rcu_ªad_u∆ock
();

96  
uµî
;

97 
	}
}

110 
u8
 
	$b©adv_mˇ°_mœ_πr_Êags_meshif_gë_ùv4
(
√t_devi˚
 *
dev
)

112 
ö_devi˚
 *
ö_dev
 = 
	`__ö_dev_gë_rcu
(
dev
);

114 i‡(
ö_dev
 && 
	`IN_DEV_MFORWARD
(in_dev))

115  
BATADV_NO_FLAGS
;

117  
BATADV_MCAST_WANT_NO_RTR4
;

118 
	}
}

131 #i‡
IS_ENABLED
(
CONFIG_IPV6_MROUTE
)

132 
u8
 
	$b©adv_mˇ°_mœ_πr_Êags_meshif_gë_ùv6
(
√t_devi˚
 *
dev
)

134 
öë6_dev
 *
ö6_dev
 = 
	`__ö6_dev_gë
(
dev
);

136 #i‡(
	`LINUX_VERSION_IS_GEQ
(5, 4, 189Ë&& 
	`LINUX_VERSION_IS_LESS
(5, 5, 0)) || \

137 (
	`LINUX_VERSION_IS_GEQ
(5, 10, 111Ë&& 
	`LINUX_VERSION_IS_LESS
(5, 11, 0)) || \

138 (
	`LINUX_VERSION_IS_GEQ
(5, 15, 34Ë&& 
	`LINUX_VERSION_IS_LESS
(5, 16, 0)) || \

139 (
	`LINUX_VERSION_IS_GEQ
(5, 16, 20Ë&& 
	`LINUX_VERSION_IS_LESS
(5, 17, 0)) || \

140 
	`LINUX_VERSION_IS_GEQ
(5, 17, 3)

141 i‡(
ö6_dev
 && 
	`©omic_ªad
(&ö6_dev->
˙f
.
mc_f‹w¨dög
))

143 i‡(
ö6_dev
 && in6_dev->
˙f
.
mc_f‹w¨dög
)

145  
BATADV_NO_FLAGS
;

147  
BATADV_MCAST_WANT_NO_RTR6
;

148 
	}
}

150 
ölöe
 
u8


151 
	$b©adv_mˇ°_mœ_πr_Êags_meshif_gë_ùv6
(
√t_devi˚
 *
dev
)

153  
BATADV_MCAST_WANT_NO_RTR6
;

154 
	}
}

172 
u8
 
	$b©adv_mˇ°_mœ_πr_Êags_meshif_gë
(
b©adv_¥iv
 *
b©_¥iv
,

173 
√t_devi˚
 *
bridge
)

175 
√t_devi˚
 *
dev
 = 
bridge
 ? bridgê: 
b©_¥iv
->
mesh_iÁ˚
;

176 
u8
 
Êags
 = 
BATADV_NO_FLAGS
;

178 
	`rcu_ªad_lock
();

180 
Êags
 |
	`b©adv_mˇ°_mœ_πr_Êags_meshif_gë_ùv4
(
dev
);

181 
Êags
 |
	`b©adv_mˇ°_mœ_πr_Êags_meshif_gë_ùv6
(
dev
);

183 
	`rcu_ªad_u∆ock
();

185  
Êags
;

186 
	}
}

202 
u8
 
	$b©adv_mˇ°_mœ_πr_Êags_bridge_gë
(
b©adv_¥iv
 *
b©_¥iv
,

203 
√t_devi˚
 *
bridge
)

205 
√t_devi˚
 *
dev
 = 
b©_¥iv
->
mesh_iÁ˚
;

206 
u8
 
Êags
 = 
BATADV_NO_FLAGS
;

208 i‡(!
bridge
)

209  
BATADV_MCAST_WANT_NO_RTR4
 | 
BATADV_MCAST_WANT_NO_RTR6
;

211 i‡(!
	`br_mu…iˇ°_has_rouãr_adja˚¡
(
dev
, 
ETH_P_IP
))

212 
Êags
 |
BATADV_MCAST_WANT_NO_RTR4
;

213 i‡(!
	`br_mu…iˇ°_has_rouãr_adja˚¡
(
dev
, 
ETH_P_IPV6
))

214 
Êags
 |
BATADV_MCAST_WANT_NO_RTR6
;

216  
Êags
;

217 
	}
}

234 
u8
 
	$b©adv_mˇ°_mœ_πr_Êags_gë
(
b©adv_¥iv
 *
b©_¥iv
,

235 
√t_devi˚
 *
bridge
)

237 
u8
 
Êags
 = 
BATADV_MCAST_WANT_NO_RTR4
 | 
BATADV_MCAST_WANT_NO_RTR6
;

239 
Êags
 &
	`b©adv_mˇ°_mœ_πr_Êags_meshif_gë
(
b©_¥iv
, 
bridge
);

240 
Êags
 &
	`b©adv_mˇ°_mœ_πr_Êags_bridge_gë
(
b©_¥iv
, 
bridge
);

242  
Êags
;

243 
	}
}

254 
u8
 
	$b©adv_mˇ°_mœ_f‹w_Êags_gë
(
b©adv_¥iv
 *
b©_¥iv
)

256 c⁄° 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
;

258 
	`rcu_ªad_lock
();

259 
	`li°_f‹_óch_íåy_rcu
(
h¨d_iÁ˚
, &
b©adv_h¨dif_li°
, 
li°
) {

260 i‡(
h¨d_iÁ˚
->
if_°©us
 !
BATADV_IF_ACTIVE
)

263 i‡(
h¨d_iÁ˚
->
mesh_iÁ˚
 !
b©_¥iv
->mesh_iface)

266 i‡(
h¨d_iÁ˚
->
√t_dev
->
mtu
 < 
IPV6_MIN_MTU
) {

267 
	`rcu_ªad_u∆ock
();

268  
BATADV_NO_FLAGS
;

271 
	`rcu_ªad_u∆ock
();

273  
BATADV_MCAST_HAVE_MC_PTYPE_CAPA
;

274 
	}
}

283 
b©adv_mˇ°_mœ_Êags


284 
	$b©adv_mˇ°_mœ_Êags_gë
(
b©adv_¥iv
 *
b©_¥iv
)

286 
√t_devi˚
 *
dev
 = 
b©_¥iv
->
mesh_iÁ˚
;

287 
b©adv_mˇ°_quîõr_°©e
 *
qr4
, *
qr6
;

288 
b©adv_mˇ°_mœ_Êags
 
mœ_Êags
;

289 
√t_devi˚
 *
bridge
;

291 
bridge
 = 
	`b©adv_mˇ°_gë_bridge
(
dev
);

293 
	`mem£t
(&
mœ_Êags
, 0, (mla_flags));

294 
mœ_Êags
.
íabÀd
 = 1;

295 
mœ_Êags
.
tvlv_Êags
 |
	`b©adv_mˇ°_mœ_πr_Êags_gë
(
b©_¥iv
,

296 
bridge
);

297 
mœ_Êags
.
tvlv_Êags
 |
	`b©adv_mˇ°_mœ_f‹w_Êags_gë
(
b©_¥iv
);

299 i‡(!
bridge
)

300  
mœ_Êags
;

302 
	`dev_put
(
bridge
);

304 
mœ_Êags
.
bridged
 = 1;

305 
qr4
 = &
mœ_Êags
.
quîõr_ùv4
;

306 
qr6
 = &
mœ_Êags
.
quîõr_ùv6
;

308 i‡(!
	`IS_ENABLED
(
CONFIG_BRIDGE_IGMP_SNOOPING
))

309 
	`¥_w¨n_⁄˚
("No bridge IGMP snooping compiled - multicast optimizations disabled\n");

311 
qr4
->
exi°s
 = 
	`br_mu…iˇ°_has_quîõr_™ywhîe
(
dev
, 
ETH_P_IP
);

312 
qr4
->
shadowög
 = 
	`br_mu…iˇ°_has_quîõr_adja˚¡
(
dev
, 
ETH_P_IP
);

314 
qr6
->
exi°s
 = 
	`br_mu…iˇ°_has_quîõr_™ywhîe
(
dev
, 
ETH_P_IPV6
);

315 
qr6
->
shadowög
 = 
	`br_mu…iˇ°_has_quîõr_adja˚¡
(
dev
, 
ETH_P_IPV6
);

317 
mœ_Êags
.
tvlv_Êags
 |
BATADV_MCAST_WANT_ALL_UNSNOOPABLES
;

328 i‡(!
qr4
->
exi°s
 || qr4->
shadowög
) {

329 
mœ_Êags
.
tvlv_Êags
 |
BATADV_MCAST_WANT_ALL_IPV4
;

330 
mœ_Êags
.
tvlv_Êags
 &~
BATADV_MCAST_WANT_NO_RTR4
;

333 i‡(!
qr6
->
exi°s
 || qr6->
shadowög
) {

334 
mœ_Êags
.
tvlv_Êags
 |
BATADV_MCAST_WANT_ALL_IPV6
;

335 
mœ_Êags
.
tvlv_Êags
 &~
BATADV_MCAST_WANT_NO_RTR6
;

338  
mœ_Êags
;

339 
	}
}

349 
boﬁ
 
	$b©adv_mˇ°_mœ_is_du∂iˇã
(
u8
 *
mˇ°_addr
,

350 
hli°_hód
 *
mˇ°_li°
)

352 
b©adv_hw_addr
 *
mˇ°_íåy
;

354 
	`hli°_f‹_óch_íåy
(
mˇ°_íåy
, 
mˇ°_li°
, 
li°
)

355 i‡(
	`b©adv_com∑ª_ëh
(
mˇ°_íåy
->
addr
, 
mˇ°_addr
))

356  
åue
;

358  
Ál£
;

359 
	}
}

376 
	$b©adv_mˇ°_mœ_meshif_gë_ùv4
(
√t_devi˚
 *
dev
,

377 
hli°_hód
 *
mˇ°_li°
,

378 
b©adv_mˇ°_mœ_Êags
 *
Êags
)

380 
b©adv_hw_addr
 *
√w
;

381 
ö_devi˚
 *
ö_dev
;

382 
u8
 
mˇ°_addr
[
ETH_ALEN
];

383 
ù_mc_li°
 *
pmc
;

384 
ªt
 = 0;

386 i‡(
Êags
->
tvlv_Êags
 & 
BATADV_MCAST_WANT_ALL_IPV4
)

389 
	`rcu_ªad_lock
();

391 
ö_dev
 = 
	`__ö_dev_gë_rcu
(
dev
);

392 i‡(!
ö_dev
) {

393 
	`rcu_ªad_u∆ock
();

397 
pmc
 = 
	`rcu_dîe„ªn˚
(
ö_dev
->
mc_li°
);Ömc;

398 
pmc
 = 
	`rcu_dîe„ªn˚
’mc->
√xt_rcu
)) {

399 i‡(
Êags
->
tvlv_Êags
 & 
BATADV_MCAST_WANT_ALL_UNSNOOPABLES
 &&

400 
	`ùv4_is_loˇl_mu…iˇ°
(
pmc
->
mu…üddr
))

403 i‡(!(
Êags
->
tvlv_Êags
 & 
BATADV_MCAST_WANT_NO_RTR4
) &&

404 !
	`ùv4_is_loˇl_mu…iˇ°
(
pmc
->
mu…üddr
))

407 
	`ù_ëh_mc_m≠
(
pmc
->
mu…üddr
, 
mˇ°_addr
);

409 i‡(
	`b©adv_mˇ°_mœ_is_du∂iˇã
(
mˇ°_addr
, 
mˇ°_li°
))

412 
√w
 = 
	`kmÆloc
((*√w), 
GFP_ATOMIC
);

413 i‡(!
√w
) {

414 
ªt
 = -
ENOMEM
;

418 
	`ëhî_addr_c›y
(
√w
->
addr
, 
mˇ°_addr
);

419 
	`hli°_add_hód
(&
√w
->
li°
, 
mˇ°_li°
);

420 
ªt
++;

422 
	`rcu_ªad_u∆ock
();

424  
ªt
;

425 
	}
}

441 #i‡
IS_ENABLED
(
CONFIG_IPV6
)

443 
	$b©adv_mˇ°_mœ_meshif_gë_ùv6
(
√t_devi˚
 *
dev
,

444 
hli°_hód
 *
mˇ°_li°
,

445 
b©adv_mˇ°_mœ_Êags
 *
Êags
)

447 
b©adv_hw_addr
 *
√w
;

448 
öë6_dev
 *
ö6_dev
;

449 
u8
 
mˇ°_addr
[
ETH_ALEN
];

450 
ifmˇddr6
 *
pmc6
;

451 
ªt
 = 0;

453 i‡(
Êags
->
tvlv_Êags
 & 
BATADV_MCAST_WANT_ALL_IPV6
)

456 
	`rcu_ªad_lock
();

458 
ö6_dev
 = 
	`__ö6_dev_gë
(
dev
);

459 i‡(!
ö6_dev
) {

460 
	`rcu_ªad_u∆ock
();

464 
pmc6
 = 
	`rcu_dîe„ªn˚
(
ö6_dev
->
mc_li°
);

465 
pmc6
;

466 
pmc6
 = 
	`rcu_dîe„ªn˚
’mc6->
√xt
)) {

467 i‡(
	`IPV6_ADDR_MC_SCOPE
(&
pmc6
->
mˇ_addr
) <

468 
IPV6_ADDR_SCOPE_LINKLOCAL
)

471 i‡(
Êags
->
tvlv_Êags
 & 
BATADV_MCAST_WANT_ALL_UNSNOOPABLES
 &&

472 
	`ùv6_addr_is_Œ_Æl_nodes
(&
pmc6
->
mˇ_addr
))

475 i‡(!(
Êags
->
tvlv_Êags
 & 
BATADV_MCAST_WANT_NO_RTR6
) &&

476 
	`IPV6_ADDR_MC_SCOPE
(&
pmc6
->
mˇ_addr
) >

477 
IPV6_ADDR_SCOPE_LINKLOCAL
)

480 
	`ùv6_ëh_mc_m≠
(&
pmc6
->
mˇ_addr
, 
mˇ°_addr
);

482 i‡(
	`b©adv_mˇ°_mœ_is_du∂iˇã
(
mˇ°_addr
, 
mˇ°_li°
))

485 
√w
 = 
	`kmÆloc
((*√w), 
GFP_ATOMIC
);

486 i‡(!
√w
) {

487 
ªt
 = -
ENOMEM
;

491 
	`ëhî_addr_c›y
(
√w
->
addr
, 
mˇ°_addr
);

492 
	`hli°_add_hód
(&
√w
->
li°
, 
mˇ°_li°
);

493 
ªt
++;

495 
	`rcu_ªad_u∆ock
();

497  
ªt
;

498 
	}
}

500 
ölöe
 

501 
	$b©adv_mˇ°_mœ_meshif_gë_ùv6
(
√t_devi˚
 *
dev
,

502 
hli°_hód
 *
mˇ°_li°
,

503 
b©adv_mˇ°_mœ_Êags
 *
Êags
)

506 
	}
}

529 
	$b©adv_mˇ°_mœ_meshif_gë
(
√t_devi˚
 *
dev
,

530 
hli°_hód
 *
mˇ°_li°
,

531 
b©adv_mˇ°_mœ_Êags
 *
Êags
)

533 
√t_devi˚
 *
bridge
 = 
	`b©adv_mˇ°_gë_bridge
(
dev
);

534 
ªt4
, 
ªt6
 = 0;

536 i‡(
bridge
)

537 
dev
 = 
bridge
;

539 
ªt4
 = 
	`b©adv_mˇ°_mœ_meshif_gë_ùv4
(
dev
, 
mˇ°_li°
, 
Êags
);

540 i‡(
ªt4
 < 0)

541 
out
;

543 
ªt6
 = 
	`b©adv_mˇ°_mœ_meshif_gë_ùv6
(
dev
, 
mˇ°_li°
, 
Êags
);

544 i‡(
ªt6
 < 0) {

545 
ªt4
 = 0;

546 
out
;

549 
out
:

550 
	`dev_put
(
bridge
);

552  
ªt4
 + 
ªt6
;

553 
	}
}

567 
	$b©adv_mˇ°_mœ_br_addr_˝y
(*
d°
, c⁄° 
br_ù
 *
§c
)

569 i‡(
§c
->
¥Ÿo
 =
	`ht⁄s
(
ETH_P_IP
))

570 
	`ù_ëh_mc_m≠
(
§c
->
d°
.
ù4
, dst);

571 #i‡
	`IS_ENABLED
(
CONFIG_IPV6
)

572 i‡(
§c
->
¥Ÿo
 =
	`ht⁄s
(
ETH_P_IPV6
))

573 
	`ùv6_ëh_mc_m≠
(&
§c
->
d°
.
ù6
, dst);

576 
	`ëh_zîo_addr
(
d°
);

577 
	}
}

593 
	$b©adv_mˇ°_mœ_bridge_gë
(
√t_devi˚
 *
dev
,

594 
hli°_hód
 *
mˇ°_li°
,

595 
b©adv_mˇ°_mœ_Êags
 *
Êags
)

597 
li°_hód
 
bridge_mˇ°_li°
 = 
	`LIST_HEAD_INIT
(bridge_mcast_list);

598 
br_ù_li°
 *
br_ù_íåy
, *
tmp
;

599 
u8
 
tvlv_Êags
 = 
Êags
->tvlv_flags;

600 
b©adv_hw_addr
 *
√w
;

601 
u8
 
mˇ°_addr
[
ETH_ALEN
];

602 
ªt
;

607 
ªt
 = 
	`br_mu…iˇ°_li°_adja˚¡
(
dev
, &
bridge_mˇ°_li°
);

608 i‡(
ªt
 < 0)

609 
out
;

611 
	`li°_f‹_óch_íåy
(
br_ù_íåy
, &
bridge_mˇ°_li°
, 
li°
) {

612 i‡(
br_ù_íåy
->
addr
.
¥Ÿo
 =
	`ht⁄s
(
ETH_P_IP
)) {

613 i‡(
tvlv_Êags
 & 
BATADV_MCAST_WANT_ALL_IPV4
)

616 i‡(
tvlv_Êags
 & 
BATADV_MCAST_WANT_ALL_UNSNOOPABLES
 &&

617 
	`ùv4_is_loˇl_mu…iˇ°
(
br_ù_íåy
->
addr
.
d°
.
ù4
))

620 i‡(!(
tvlv_Êags
 & 
BATADV_MCAST_WANT_NO_RTR4
) &&

621 !
	`ùv4_is_loˇl_mu…iˇ°
(
br_ù_íåy
->
addr
.
d°
.
ù4
))

625 #i‡
	`IS_ENABLED
(
CONFIG_IPV6
)

626 i‡(
br_ù_íåy
->
addr
.
¥Ÿo
 =
	`ht⁄s
(
ETH_P_IPV6
)) {

627 i‡(
tvlv_Êags
 & 
BATADV_MCAST_WANT_ALL_IPV6
)

630 i‡(
tvlv_Êags
 & 
BATADV_MCAST_WANT_ALL_UNSNOOPABLES
 &&

631 
	`ùv6_addr_is_Œ_Æl_nodes
(&
br_ù_íåy
->
addr
.
d°
.
ù6
))

634 i‡(!(
tvlv_Êags
 & 
BATADV_MCAST_WANT_NO_RTR6
) &&

635 
	`IPV6_ADDR_MC_SCOPE
(&
br_ù_íåy
->
addr
.
d°
.
ù6
) >

636 
IPV6_ADDR_SCOPE_LINKLOCAL
)

641 
	`b©adv_mˇ°_mœ_br_addr_˝y
(
mˇ°_addr
, &
br_ù_íåy
->
addr
);

642 i‡(
	`b©adv_mˇ°_mœ_is_du∂iˇã
(
mˇ°_addr
, 
mˇ°_li°
))

645 
√w
 = 
	`kmÆloc
((*√w), 
GFP_ATOMIC
);

646 i‡(!
√w
) {

647 
ªt
 = -
ENOMEM
;

651 
	`ëhî_addr_c›y
(
√w
->
addr
, 
mˇ°_addr
);

652 
	`hli°_add_hód
(&
√w
->
li°
, 
mˇ°_li°
);

655 
out
:

656 
	`li°_f‹_óch_íåy_ß„
(
br_ù_íåy
, 
tmp
, &
bridge_mˇ°_li°
, 
li°
) {

657 
	`li°_dñ
(&
br_ù_íåy
->
li°
);

658 
	`k‰ì
(
br_ù_íåy
);

661  
ªt
;

662 
	}
}

670 
	$b©adv_mˇ°_mœ_li°_‰ì
(
hli°_hód
 *
mˇ°_li°
)

672 
b©adv_hw_addr
 *
mˇ°_íåy
;

673 
hli°_node
 *
tmp
;

675 
	`hli°_f‹_óch_íåy_ß„
(
mˇ°_íåy
, 
tmp
, 
mˇ°_li°
, 
li°
) {

676 
	`hli°_dñ
(&
mˇ°_íåy
->
li°
);

677 
	`k‰ì
(
mˇ°_íåy
);

679 
	}
}

691 
	$b©adv_mˇ°_mœ_â_ªåa˘
(
b©adv_¥iv
 *
b©_¥iv
,

692 
hli°_hód
 *
mˇ°_li°
)

694 
b©adv_hw_addr
 *
mˇ°_íåy
;

695 
hli°_node
 *
tmp
;

697 
	`hli°_f‹_óch_íåy_ß„
(
mˇ°_íåy
, 
tmp
, &
b©_¥iv
->
mˇ°
.
mœ_li°
,

698 
li°
) {

699 i‡(
mˇ°_li°
 &&

700 
	`b©adv_mˇ°_mœ_is_du∂iˇã
(
mˇ°_íåy
->
addr
,

701 
mˇ°_li°
))

704 
	`b©adv_â_loˇl_ªmove
(
b©_¥iv
, 
mˇ°_íåy
->
addr
,

705 
BATADV_NO_FLAGS
,

706 "mˇ° TT outd©ed", 
Ál£
);

708 
	`hli°_dñ
(&
mˇ°_íåy
->
li°
);

709 
	`k‰ì
(
mˇ°_íåy
);

711 
	}
}

721 
	$b©adv_mˇ°_mœ_â_add
(
b©adv_¥iv
 *
b©_¥iv
,

722 
hli°_hód
 *
mˇ°_li°
)

724 
b©adv_hw_addr
 *
mˇ°_íåy
;

725 
hli°_node
 *
tmp
;

727 i‡(!
mˇ°_li°
)

730 
	`hli°_f‹_óch_íåy_ß„
(
mˇ°_íåy
, 
tmp
, 
mˇ°_li°
, 
li°
) {

731 i‡(
	`b©adv_mˇ°_mœ_is_du∂iˇã
(
mˇ°_íåy
->
addr
,

732 &
b©_¥iv
->
mˇ°
.
mœ_li°
))

735 i‡(!
	`b©adv_â_loˇl_add
(
b©_¥iv
->
mesh_iÁ˚
,

736 
mˇ°_íåy
->
addr
, 
BATADV_NO_FLAGS
,

737 
BATADV_NULL_IFINDEX
, 
BATADV_NO_MARK
))

740 
	`hli°_dñ
(&
mˇ°_íåy
->
li°
);

741 
	`hli°_add_hód
(&
mˇ°_íåy
->
li°
, &
b©_¥iv
->
mˇ°
.
mœ_li°
);

743 
	}
}

768 
	$b©adv_mˇ°_quîõr_log
(
b©adv_¥iv
 *
b©_¥iv
, *
°r_¥Ÿo
,

769 
b©adv_mˇ°_quîõr_°©e
 *
ﬁd_°©e
,

770 
b©adv_mˇ°_quîõr_°©e
 *
√w_°©e
)

772 i‡(!
ﬁd_°©e
->
exi°s
 && 
√w_°©e
->exists)

773 
	`b©adv_öfo
(
b©_¥iv
->
mesh_iÁ˚
, "%s Querieráppeared\n",

774 
°r_¥Ÿo
);

775 i‡(
ﬁd_°©e
->
exi°s
 && !
√w_°©e
->exists)

776 
	`b©adv_öfo
(
b©_¥iv
->
mesh_iÁ˚
,

778 
°r_¥Ÿo
);

779 i‡(!
b©_¥iv
->
mˇ°
.
mœ_Êags
.
bridged
 && !
√w_°©e
->
exi°s
)

780 
	`b©adv_öfo
(
b©_¥iv
->
mesh_iÁ˚
,

782 
°r_¥Ÿo
);

784 i‡(
√w_°©e
->
exi°s
) {

785 i‡((!
ﬁd_°©e
->
shadowög
 && 
√w_°©e
->shadowing) ||

786 (!
ﬁd_°©e
->
exi°s
 && 
√w_°©e
->
shadowög
))

787 
	`b©adv_dbg
(
BATADV_DBG_MCAST
, 
b©_¥iv
,

789 
°r_¥Ÿo
);

790 i‡(
ﬁd_°©e
->
shadowög
 && !
√w_°©e
->shadowing)

791 
	`b©adv_dbg
(
BATADV_DBG_MCAST
, 
b©_¥iv
,

793 
°r_¥Ÿo
);

795 
	}
}

814 
	$b©adv_mˇ°_bridge_log
(
b©adv_¥iv
 *
b©_¥iv
,

815 
b©adv_mˇ°_mœ_Êags
 *
√w_Êags
)

817 
b©adv_mˇ°_mœ_Êags
 *
ﬁd_Êags
 = &
b©_¥iv
->
mˇ°
.
mœ_Êags
;

819 i‡(!
ﬁd_Êags
->
bridged
 && 
√w_Êags
->bridged)

820 
	`b©adv_dbg
(
BATADV_DBG_MCAST
, 
b©_¥iv
,

822 i‡(
ﬁd_Êags
->
bridged
 && !
√w_Êags
->bridged)

823 
	`b©adv_dbg
(
BATADV_DBG_MCAST
, 
b©_¥iv
,

826 i‡(
√w_Êags
->
bridged
) {

827 
	`b©adv_mˇ°_quîõr_log
(
b©_¥iv
, "IGMP",

828 &
ﬁd_Êags
->
quîõr_ùv4
,

829 &
√w_Êags
->
quîõr_ùv4
);

830 
	`b©adv_mˇ°_quîõr_log
(
b©_¥iv
, "MLD",

831 &
ﬁd_Êags
->
quîõr_ùv6
,

832 &
√w_Êags
->
quîõr_ùv6
);

834 
	}
}

844 
	$b©adv_mˇ°_Êags_log
(
b©adv_¥iv
 *
b©_¥iv
, 
u8
 
Êags
)

846 
boﬁ
 
ﬁd_íabÀd
 = 
b©_¥iv
->
mˇ°
.
mœ_Êags
.
íabÀd
;

847 
u8
 
ﬁd_Êags
 = 
b©_¥iv
->
mˇ°
.
mœ_Êags
.
tvlv_Êags
;

848 
°r_ﬁd_Êags
[] = "[.... . .]";

850 
	`•rötf
(
°r_ﬁd_Êags
, "[%c%c%c%s%s%c]",

851 (
ﬁd_Êags
 & 
BATADV_MCAST_WANT_ALL_UNSNOOPABLES
) ? 'U' : '.',

852 (
ﬁd_Êags
 & 
BATADV_MCAST_WANT_ALL_IPV4
) ? '4' : '.',

853 (
ﬁd_Êags
 & 
BATADV_MCAST_WANT_ALL_IPV6
) ? '6' : '.',

854 !(
ﬁd_Êags
 & 
BATADV_MCAST_WANT_NO_RTR4
) ? "R4" : ". ",

855 !(
ﬁd_Êags
 & 
BATADV_MCAST_WANT_NO_RTR6
) ? "R6" : ". ",

856 !(
ﬁd_Êags
 & 
BATADV_MCAST_HAVE_MC_PTYPE_CAPA
) ? 'P' : '.');

858 
	`b©adv_dbg
(
BATADV_DBG_MCAST
, 
b©_¥iv
,

860 
ﬁd_íabÀd
 ? 
°r_ﬁd_Êags
 : "<undefined>",

861 (
Êags
 & 
BATADV_MCAST_WANT_ALL_UNSNOOPABLES
) ? 'U' : '.',

862 (
Êags
 & 
BATADV_MCAST_WANT_ALL_IPV4
) ? '4' : '.',

863 (
Êags
 & 
BATADV_MCAST_WANT_ALL_IPV6
) ? '6' : '.',

864 !(
Êags
 & 
BATADV_MCAST_WANT_NO_RTR4
) ? "R4" : ". ",

865 !(
Êags
 & 
BATADV_MCAST_WANT_NO_RTR6
) ? "R6" : ". ",

866 !(
Êags
 & 
BATADV_MCAST_HAVE_MC_PTYPE_CAPA
) ? 'P' : '.');

867 
	}
}

878 
	$b©adv_mˇ°_mœ_Êags_upd©e
(
b©adv_¥iv
 *
b©_¥iv
,

879 
b©adv_mˇ°_mœ_Êags
 *
Êags
)

881 
b©adv_tvlv_mˇ°_d©a
 
mˇ°_d©a
;

883 i‡(!
	`memcmp
(
Êags
, &
b©_¥iv
->
mˇ°
.
mœ_Êags
, (*flags)))

886 
	`b©adv_mˇ°_bridge_log
(
b©_¥iv
, 
Êags
);

887 
	`b©adv_mˇ°_Êags_log
(
b©_¥iv
, 
Êags
->
tvlv_Êags
);

889 
mˇ°_d©a
.
Êags
 = fœgs->
tvlv_Êags
;

890 
	`mem£t
(
mˇ°_d©a
.
ª£rved
, 0, (mcast_data.reserved));

892 
	`b©adv_tvlv_c⁄èöî_ªgi°î
(
b©_¥iv
, 
BATADV_TVLV_MCAST
, 2,

893 &
mˇ°_d©a
, (mcast_data));

895 
b©_¥iv
->
mˇ°
.
mœ_Êags
 = *
Êags
;

896 
	}
}

910 
	$__b©adv_mˇ°_mœ_upd©e
(
b©adv_¥iv
 *
b©_¥iv
)

912 
√t_devi˚
 *
mesh_iÁ˚
 = 
b©_¥iv
->mesh_iface;

913 
hli°_hód
 
mˇ°_li°
 = 
HLIST_HEAD_INIT
;

914 
b©adv_mˇ°_mœ_Êags
 
Êags
;

915 
ªt
;

917 
Êags
 = 
	`b©adv_mˇ°_mœ_Êags_gë
(
b©_¥iv
);

919 
ªt
 = 
	`b©adv_mˇ°_mœ_meshif_gë
(
mesh_iÁ˚
, &
mˇ°_li°
, &
Êags
);

920 i‡(
ªt
 < 0)

921 
out
;

923 
ªt
 = 
	`b©adv_mˇ°_mœ_bridge_gë
(
mesh_iÁ˚
, &
mˇ°_li°
, &
Êags
);

924 i‡(
ªt
 < 0)

925 
out
;

927 
	`•ö_lock
(&
b©_¥iv
->
mˇ°
.
mœ_lock
);

928 
	`b©adv_mˇ°_mœ_â_ªåa˘
(
b©_¥iv
, &
mˇ°_li°
);

929 
	`b©adv_mˇ°_mœ_â_add
(
b©_¥iv
, &
mˇ°_li°
);

930 
	`b©adv_mˇ°_mœ_Êags_upd©e
(
b©_¥iv
, &
Êags
);

931 
	`•ö_u∆ock
(&
b©_¥iv
->
mˇ°
.
mœ_lock
);

933 
out
:

934 
	`b©adv_mˇ°_mœ_li°_‰ì
(&
mˇ°_li°
);

935 
	}
}

946 
	$b©adv_mˇ°_mœ_upd©e
(
w‹k_°ru˘
 *
w‹k
)

948 
dñayed_w‹k
 *delayed_work;

949 
b©adv_¥iv_mˇ°
 *
¥iv_mˇ°
;

950 
b©adv_¥iv
 *
b©_¥iv
;

952 
dñayed_w‹k
 = 
	`to_dñayed_w‹k
(
w‹k
);

953 
¥iv_mˇ°
 = 
	`c⁄èöî_of
(
dñayed_w‹k
, 
b©adv_¥iv_mˇ°
, 
w‹k
);

954 
b©_¥iv
 = 
	`c⁄èöî_of
(
¥iv_mˇ°
, 
b©adv_¥iv
, 
mˇ°
);

956 
	`__b©adv_mˇ°_mœ_upd©e
(
b©_¥iv
);

957 
	`b©adv_mˇ°_°¨t_timî
(
b©_¥iv
);

958 
	}
}

970 
boﬁ
 
	$b©adv_mˇ°_is_ªp‹t_ùv4
(
sk_buff
 *
skb
)

972 i‡(
	`ù_mc_check_igmp
(
skb
) < 0)

973  
Ál£
;

975 
	`igmp_hdr
(
skb
)->
ty≥
) {

976 
IGMP_HOST_MEMBERSHIP_REPORT
:

977 
IGMPV2_HOST_MEMBERSHIP_REPORT
:

978 
IGMPV3_HOST_MEMBERSHIP_REPORT
:

979  
åue
;

982  
Ál£
;

983 
	}
}

999 
	$b©adv_mˇ°_f‹w_mode_check_ùv4
(
b©adv_¥iv
 *
b©_¥iv
,

1000 
sk_buff
 *
skb
,

1001 
boﬁ
 *
is_un¢o›abÀ
,

1002 *
is_rouèbÀ
)

1004 
ùhdr
 *iphdr;

1007 i‡(!
	`pskb_may_puŒ
(
skb
, (
ëhhdr
Ë+ (*
ùhdr
)))

1008  -
ENOMEM
;

1010 i‡(
	`b©adv_mˇ°_is_ªp‹t_ùv4
(
skb
))

1011  -
EINVAL
;

1013 
ùhdr
 = 
	`ù_hdr
(
skb
);

1018 i‡(
	`ùv4_is_loˇl_mu…iˇ°
(
ùhdr
->
daddr
))

1019 *
is_un¢o›abÀ
 = 
åue
;

1021 *
is_rouèbÀ
 = 
ETH_P_IP
;

1024 
	}
}

1036 
boﬁ
 
	$b©adv_mˇ°_is_ªp‹t_ùv6
(
sk_buff
 *
skb
)

1038 i‡(
	`ùv6_mc_check_mld
(
skb
) < 0)

1039  
Ál£
;

1041 
	`icmp6_hdr
(
skb
)->
icmp6_ty≥
) {

1042 
ICMPV6_MGM_REPORT
:

1043 
ICMPV6_MLD2_REPORT
:

1044  
åue
;

1047  
Ál£
;

1048 
	}
}

1063 
	$b©adv_mˇ°_f‹w_mode_check_ùv6
(
b©adv_¥iv
 *
b©_¥iv
,

1064 
sk_buff
 *
skb
,

1065 
boﬁ
 *
is_un¢o›abÀ
,

1066 *
is_rouèbÀ
)

1068 
ùv6hdr
 *
ù6hdr
;

1071 i‡(!
	`pskb_may_puŒ
(
skb
, (
ëhhdr
Ë+ (*
ù6hdr
)))

1072  -
ENOMEM
;

1074 i‡(
	`b©adv_mˇ°_is_ªp‹t_ùv6
(
skb
))

1075  -
EINVAL
;

1077 
ù6hdr
 = 
	`ùv6_hdr
(
skb
);

1079 i‡(
	`IPV6_ADDR_MC_SCOPE
(&
ù6hdr
->
daddr
Ë< 
IPV6_ADDR_SCOPE_LINKLOCAL
)

1080  -
EINVAL
;

1085 i‡(
	`ùv6_addr_is_Œ_Æl_nodes
(&
ù6hdr
->
daddr
))

1086 *
is_un¢o›abÀ
 = 
åue
;

1087 i‡(
	`IPV6_ADDR_MC_SCOPE
(&
ù6hdr
->
daddr
Ë> 
IPV6_ADDR_SCOPE_LINKLOCAL
)

1088 *
is_rouèbÀ
 = 
ETH_P_IPV6
;

1091 
	}
}

1105 
	$b©adv_mˇ°_f‹w_mode_check
(
b©adv_¥iv
 *
b©_¥iv
,

1106 
sk_buff
 *
skb
,

1107 
boﬁ
 *
is_un¢o›abÀ
,

1108 *
is_rouèbÀ
)

1110 
ëhhdr
 *ëhhd∏
	`ëh_hdr
(
skb
);

1112 i‡(!
	`©omic_ªad
(&
b©_¥iv
->
mu…iˇ°_mode
))

1113  -
EINVAL
;

1115 
	`¡ohs
(
ëhhdr
->
h_¥Ÿo
)) {

1116 
ETH_P_IP
:

1117  
	`b©adv_mˇ°_f‹w_mode_check_ùv4
(
b©_¥iv
, 
skb
,

1118 
is_un¢o›abÀ
,

1119 
is_rouèbÀ
);

1120 
ETH_P_IPV6
:

1121 i‡(!
	`IS_ENABLED
(
CONFIG_IPV6
))

1122  -
EINVAL
;

1124  
	`b©adv_mˇ°_f‹w_mode_check_ùv6
(
b©_¥iv
, 
skb
,

1125 
is_un¢o›abÀ
,

1126 
is_rouèbÀ
);

1128  -
EINVAL
;

1130 
	}
}

1142 
	$b©adv_mˇ°_f‹w_w™t_Æl_ù_cou¡
(
b©adv_¥iv
 *
b©_¥iv
,

1143 
ëhhdr
 *ethhdr)

1145 
	`¡ohs
(
ëhhdr
->
h_¥Ÿo
)) {

1146 
ETH_P_IP
:

1147  
	`©omic_ªad
(&
b©_¥iv
->
mˇ°
.
num_w™t_Æl_ùv4
);

1148 
ETH_P_IPV6
:

1149  
	`©omic_ªad
(&
b©_¥iv
->
mˇ°
.
num_w™t_Æl_ùv6
);

1154 
	}
}

1166 
	$b©adv_mˇ°_f‹w_πr_cou¡
(
b©adv_¥iv
 *
b©_¥iv
,

1167 
¥Ÿocﬁ
)

1169 
¥Ÿocﬁ
) {

1170 
ETH_P_IP
:

1171  
	`©omic_ªad
(&
b©_¥iv
->
mˇ°
.
num_w™t_Æl_πr4
);

1172 
ETH_P_IPV6
:

1173  
	`©omic_ªad
(&
b©_¥iv
->
mˇ°
.
num_w™t_Æl_πr6
);

1177 
	}
}

1203 
b©adv_f‹w_mode


1204 
	$b©adv_mˇ°_f‹w_mode_by_cou¡
(
b©adv_¥iv
 *
b©_¥iv
,

1205 
sk_buff
 *
skb
, 
vid
,

1206 
is_rouèbÀ
, 
cou¡
)

1208 
mˇ°_hdæí
 = 
	`b©adv_mˇ°_f‹w_∑ckë_hdæí
(
cou¡
);

1209 
u8
 
own_tvlv_Êags
 = 
b©_¥iv
->
mˇ°
.
mœ_Êags
.
tvlv_Êags
;

1211 i‡(!
	`©omic_ªad
(&
b©_¥iv
->
mˇ°
.
num_no_mc_±y≥_ˇ∑
) &&

1212 
own_tvlv_Êags
 & 
BATADV_MCAST_HAVE_MC_PTYPE_CAPA
 &&

1213 
skb
->
Àn
 + 
mˇ°_hdæí
 <
IPV6_MIN_MTU
 &&

1214 
	`b©adv_mˇ°_f‹w_push
(
b©_¥iv
, 
skb
, 
vid
, 
is_rouèbÀ
, 
cou¡
))

1215  
BATADV_FORW_MCAST
;

1217 i‡(
cou¡
 <
	`©omic_ªad
(&
b©_¥iv
->
mu…iˇ°_Ánout
))

1218  
BATADV_FORW_UCASTS
;

1220  
BATADV_FORW_BCAST
;

1221 
	}
}

1232 
b©adv_f‹w_mode


1233 
	$b©adv_mˇ°_f‹w_mode
(
b©adv_¥iv
 *
b©_¥iv
, 
sk_buff
 *
skb
,

1234 
vid
, *
is_rouèbÀ
)

1236 
ªt
, 
â_cou¡
, 
ù_cou¡
, 
un¢o›_cou¡
, 
tŸÆ_cou¡
;

1237 
boﬁ
 
is_un¢o›abÀ
 = 
Ál£
;

1238 
ëhhdr
 *ethhdr;

1239 
πr_cou¡
 = 0;

1241 
ªt
 = 
	`b©adv_mˇ°_f‹w_mode_check
(
b©_¥iv
, 
skb
, &
is_un¢o›abÀ
,

1242 
is_rouèbÀ
);

1243 i‡(
ªt
 =-
ENOMEM
)

1244  
BATADV_FORW_NONE
;

1245 i‡(
ªt
 < 0)

1246  
BATADV_FORW_BCAST
;

1248 
ëhhdr
 = 
	`ëh_hdr
(
skb
);

1250 
â_cou¡
 = 
	`b©adv_â_globÆ_hash_cou¡
(
b©_¥iv
, 
ëhhdr
->
h_de°
,

1251 
BATADV_NO_FLAGS
);

1252 
ù_cou¡
 = 
	`b©adv_mˇ°_f‹w_w™t_Æl_ù_cou¡
(
b©_¥iv
, 
ëhhdr
);

1253 
un¢o›_cou¡
 = !
is_un¢o›abÀ
 ? 0 :

1254 
	`©omic_ªad
(&
b©_¥iv
->
mˇ°
.
num_w™t_Æl_un¢o›abÀs
);

1255 
πr_cou¡
 = 
	`b©adv_mˇ°_f‹w_πr_cou¡
(
b©_¥iv
, *
is_rouèbÀ
);

1257 
tŸÆ_cou¡
 = 
â_cou¡
 + 
ù_cou¡
 + 
un¢o›_cou¡
 + 
πr_cou¡
;

1259 i‡(!
tŸÆ_cou¡
)

1260  
BATADV_FORW_NONE
;

1261 i‡(
un¢o›_cou¡
)

1262  
BATADV_FORW_BCAST
;

1264  
	`b©adv_mˇ°_f‹w_mode_by_cou¡
(
b©_¥iv
, 
skb
, 
vid
, *
is_rouèbÀ
,

1265 
tŸÆ_cou¡
);

1266 
	}
}

1277 
	$b©adv_mˇ°_f‹w_£nd_‹ig
(
b©adv_¥iv
 *
b©_¥iv
,

1278 
sk_buff
 *
skb
,

1279 
vid
,

1280 
b©adv_‹ig_node
 *
‹ig_node
)

1288 i‡(
	`b©adv_bœ_is_backb⁄e_gw_‹ig
(
b©_¥iv
, 
‹ig_node
->
‹ig
, 
vid
)) {

1289 
	`dev_k‰ì_skb
(
skb
);

1290  
NET_XMIT_SUCCESS
;

1293  
	`b©adv_£nd_skb_uniˇ°
(
b©_¥iv
, 
skb
, 
BATADV_UNICAST
, 0,

1294 
‹ig_node
, 
vid
);

1295 
	}
}

1311 
	$b©adv_mˇ°_f‹w_â
(
b©adv_¥iv
 *
b©_¥iv
, 
sk_buff
 *
skb
,

1312 
vid
)

1314 
ªt
 = 
NET_XMIT_SUCCESS
;

1315 
sk_buff
 *
√wskb
;

1317 
b©adv_â_‹ig_li°_íåy
 *
‹ig_íåy
;

1319 
b©adv_â_globÆ_íåy
 *
â_globÆ
;

1320 c⁄° 
u8
 *
addr
 = 
	`ëh_hdr
(
skb
)->
h_de°
;

1322 
â_globÆ
 = 
	`b©adv_â_globÆ_hash_föd
(
b©_¥iv
, 
addr
, 
vid
);

1323 i‡(!
â_globÆ
)

1324 
out
;

1326 
	`rcu_ªad_lock
();

1327 
	`hli°_f‹_óch_íåy_rcu
(
‹ig_íåy
, &
â_globÆ
->
‹ig_li°
, 
li°
) {

1328 
√wskb
 = 
	`skb_c›y
(
skb
, 
GFP_ATOMIC
);

1329 i‡(!
√wskb
) {

1330 
ªt
 = 
NET_XMIT_DROP
;

1334 
	`b©adv_mˇ°_f‹w_£nd_‹ig
(
b©_¥iv
, 
√wskb
, 
vid
,

1335 
‹ig_íåy
->
‹ig_node
);

1337 
	`rcu_ªad_u∆ock
();

1339 
	`b©adv_â_globÆ_íåy_put
(
â_globÆ
);

1341 
out
:

1342  
ªt
;

1343 
	}
}

1359 
	$b©adv_mˇ°_f‹w_w™t_Æl_ùv4
(
b©adv_¥iv
 *
b©_¥iv
,

1360 
sk_buff
 *
skb
, 
vid
)

1362 
b©adv_‹ig_node
 *
‹ig_node
;

1363 
ªt
 = 
NET_XMIT_SUCCESS
;

1364 
sk_buff
 *
√wskb
;

1366 
	`rcu_ªad_lock
();

1367 
	`hli°_f‹_óch_íåy_rcu
(
‹ig_node
,

1368 &
b©_¥iv
->
mˇ°
.
w™t_Æl_ùv4_li°
,

1369 
mˇ°_w™t_Æl_ùv4_node
) {

1370 
√wskb
 = 
	`skb_c›y
(
skb
, 
GFP_ATOMIC
);

1371 i‡(!
√wskb
) {

1372 
ªt
 = 
NET_XMIT_DROP
;

1376 
	`b©adv_mˇ°_f‹w_£nd_‹ig
(
b©_¥iv
, 
√wskb
, 
vid
, 
‹ig_node
);

1378 
	`rcu_ªad_u∆ock
();

1379  
ªt
;

1380 
	}
}

1396 
	$b©adv_mˇ°_f‹w_w™t_Æl_ùv6
(
b©adv_¥iv
 *
b©_¥iv
,

1397 
sk_buff
 *
skb
, 
vid
)

1399 
b©adv_‹ig_node
 *
‹ig_node
;

1400 
ªt
 = 
NET_XMIT_SUCCESS
;

1401 
sk_buff
 *
√wskb
;

1403 
	`rcu_ªad_lock
();

1404 
	`hli°_f‹_óch_íåy_rcu
(
‹ig_node
,

1405 &
b©_¥iv
->
mˇ°
.
w™t_Æl_ùv6_li°
,

1406 
mˇ°_w™t_Æl_ùv6_node
) {

1407 
√wskb
 = 
	`skb_c›y
(
skb
, 
GFP_ATOMIC
);

1408 i‡(!
√wskb
) {

1409 
ªt
 = 
NET_XMIT_DROP
;

1413 
	`b©adv_mˇ°_f‹w_£nd_‹ig
(
b©_¥iv
, 
√wskb
, 
vid
, 
‹ig_node
);

1415 
	`rcu_ªad_u∆ock
();

1416  
ªt
;

1417 
	}
}

1434 
	$b©adv_mˇ°_f‹w_w™t_Æl
(
b©adv_¥iv
 *
b©_¥iv
,

1435 
sk_buff
 *
skb
, 
vid
)

1437 
	`¡ohs
(
	`ëh_hdr
(
skb
)->
h_¥Ÿo
)) {

1438 
ETH_P_IP
:

1439  
	`b©adv_mˇ°_f‹w_w™t_Æl_ùv4
(
b©_¥iv
, 
skb
, 
vid
);

1440 
ETH_P_IPV6
:

1441  
	`b©adv_mˇ°_f‹w_w™t_Æl_ùv6
(
b©_¥iv
, 
skb
, 
vid
);

1444  
NET_XMIT_DROP
;

1446 
	}
}

1462 
	$b©adv_mˇ°_f‹w_w™t_Æl_πr4
(
b©adv_¥iv
 *
b©_¥iv
,

1463 
sk_buff
 *
skb
, 
vid
)

1465 
b©adv_‹ig_node
 *
‹ig_node
;

1466 
ªt
 = 
NET_XMIT_SUCCESS
;

1467 
sk_buff
 *
√wskb
;

1469 
	`rcu_ªad_lock
();

1470 
	`hli°_f‹_óch_íåy_rcu
(
‹ig_node
,

1471 &
b©_¥iv
->
mˇ°
.
w™t_Æl_πr4_li°
,

1472 
mˇ°_w™t_Æl_πr4_node
) {

1473 
√wskb
 = 
	`skb_c›y
(
skb
, 
GFP_ATOMIC
);

1474 i‡(!
√wskb
) {

1475 
ªt
 = 
NET_XMIT_DROP
;

1479 
	`b©adv_mˇ°_f‹w_£nd_‹ig
(
b©_¥iv
, 
√wskb
, 
vid
, 
‹ig_node
);

1481 
	`rcu_ªad_u∆ock
();

1482  
ªt
;

1483 
	}
}

1499 
	$b©adv_mˇ°_f‹w_w™t_Æl_πr6
(
b©adv_¥iv
 *
b©_¥iv
,

1500 
sk_buff
 *
skb
, 
vid
)

1502 
b©adv_‹ig_node
 *
‹ig_node
;

1503 
ªt
 = 
NET_XMIT_SUCCESS
;

1504 
sk_buff
 *
√wskb
;

1506 
	`rcu_ªad_lock
();

1507 
	`hli°_f‹_óch_íåy_rcu
(
‹ig_node
,

1508 &
b©_¥iv
->
mˇ°
.
w™t_Æl_πr6_li°
,

1509 
mˇ°_w™t_Æl_πr6_node
) {

1510 
√wskb
 = 
	`skb_c›y
(
skb
, 
GFP_ATOMIC
);

1511 i‡(!
√wskb
) {

1512 
ªt
 = 
NET_XMIT_DROP
;

1516 
	`b©adv_mˇ°_f‹w_£nd_‹ig
(
b©_¥iv
, 
√wskb
, 
vid
, 
‹ig_node
);

1518 
	`rcu_ªad_u∆ock
();

1519  
ªt
;

1520 
	}
}

1537 
	$b©adv_mˇ°_f‹w_w™t_πr
(
b©adv_¥iv
 *
b©_¥iv
,

1538 
sk_buff
 *
skb
, 
vid
)

1540 
	`¡ohs
(
	`ëh_hdr
(
skb
)->
h_¥Ÿo
)) {

1541 
ETH_P_IP
:

1542  
	`b©adv_mˇ°_f‹w_w™t_Æl_πr4
(
b©_¥iv
, 
skb
, 
vid
);

1543 
ETH_P_IPV6
:

1544  
	`b©adv_mˇ°_f‹w_w™t_Æl_πr6
(
b©_¥iv
, 
skb
, 
vid
);

1547  
NET_XMIT_DROP
;

1549 
	}
}

1568 
	$b©adv_mˇ°_f‹w_£nd
(
b©adv_¥iv
 *
b©_¥iv
, 
sk_buff
 *
skb
,

1569 
vid
, 
is_rouèbÀ
)

1571 
ªt
;

1573 
ªt
 = 
	`b©adv_mˇ°_f‹w_â
(
b©_¥iv
, 
skb
, 
vid
);

1574 i‡(
ªt
 !
NET_XMIT_SUCCESS
) {

1575 
	`k‰ì_skb
(
skb
);

1576  
ªt
;

1579 
ªt
 = 
	`b©adv_mˇ°_f‹w_w™t_Æl
(
b©_¥iv
, 
skb
, 
vid
);

1580 i‡(
ªt
 !
NET_XMIT_SUCCESS
) {

1581 
	`k‰ì_skb
(
skb
);

1582  
ªt
;

1585 i‡(!
is_rouèbÀ
)

1586 
skù_mc_rouãr
;

1588 
ªt
 = 
	`b©adv_mˇ°_f‹w_w™t_πr
(
b©_¥iv
, 
skb
, 
vid
);

1589 i‡(
ªt
 !
NET_XMIT_SUCCESS
) {

1590 
	`k‰ì_skb
(
skb
);

1591  
ªt
;

1594 
skù_mc_rouãr
:

1595 
	`c⁄sume_skb
(
skb
);

1596  
ªt
;

1597 
	}
}

1611 
	$b©adv_mˇ°_w™t_un¢o›_upd©e
(
b©adv_¥iv
 *
b©_¥iv
,

1612 
b©adv_‹ig_node
 *
‹ig
,

1613 
u8
 
mˇ°_Êags
)

1615 
hli°_node
 *
node
 = &
‹ig
->
mˇ°_w™t_Æl_un¢o›abÀs_node
;

1616 
hli°_hód
 *
hód
 = &
b©_¥iv
->
mˇ°
.
w™t_Æl_un¢o›abÀs_li°
;

1618 
	`lockdï_as£π_hñd
(&
‹ig
->
mˇ°_h™dÀr_lock
);

1621 i‡(
mˇ°_Êags
 & 
BATADV_MCAST_WANT_ALL_UNSNOOPABLES
 &&

1622 !(
‹ig
->
mˇ°_Êags
 & 
BATADV_MCAST_WANT_ALL_UNSNOOPABLES
)) {

1623 
	`©omic_öc
(&
b©_¥iv
->
mˇ°
.
num_w™t_Æl_un¢o›abÀs
);

1625 
	`•ö_lock_bh
(&
b©_¥iv
->
mˇ°
.
w™t_li°s_lock
);

1627 
	`WARN_ON
(!
	`hli°_unhashed
(
node
));

1629 
	`hli°_add_hód_rcu
(
node
, 
hód
);

1630 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
mˇ°
.
w™t_li°s_lock
);

1632 } i‡(!(
mˇ°_Êags
 & 
BATADV_MCAST_WANT_ALL_UNSNOOPABLES
) &&

1633 
‹ig
->
mˇ°_Êags
 & 
BATADV_MCAST_WANT_ALL_UNSNOOPABLES
) {

1634 
	`©omic_dec
(&
b©_¥iv
->
mˇ°
.
num_w™t_Æl_un¢o›abÀs
);

1636 
	`•ö_lock_bh
(&
b©_¥iv
->
mˇ°
.
w™t_li°s_lock
);

1638 
	`WARN_ON
(
	`hli°_unhashed
(
node
));

1640 
	`hli°_dñ_öô_rcu
(
node
);

1641 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
mˇ°
.
w™t_li°s_lock
);

1643 
	}
}

1656 
	$b©adv_mˇ°_w™t_ùv4_upd©e
(
b©adv_¥iv
 *
b©_¥iv
,

1657 
b©adv_‹ig_node
 *
‹ig
,

1658 
u8
 
mˇ°_Êags
)

1660 
hli°_node
 *
node
 = &
‹ig
->
mˇ°_w™t_Æl_ùv4_node
;

1661 
hli°_hód
 *
hód
 = &
b©_¥iv
->
mˇ°
.
w™t_Æl_ùv4_li°
;

1663 
	`lockdï_as£π_hñd
(&
‹ig
->
mˇ°_h™dÀr_lock
);

1666 i‡(
mˇ°_Êags
 & 
BATADV_MCAST_WANT_ALL_IPV4
 &&

1667 !(
‹ig
->
mˇ°_Êags
 & 
BATADV_MCAST_WANT_ALL_IPV4
)) {

1668 
	`©omic_öc
(&
b©_¥iv
->
mˇ°
.
num_w™t_Æl_ùv4
);

1670 
	`•ö_lock_bh
(&
b©_¥iv
->
mˇ°
.
w™t_li°s_lock
);

1672 
	`WARN_ON
(!
	`hli°_unhashed
(
node
));

1674 
	`hli°_add_hód_rcu
(
node
, 
hód
);

1675 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
mˇ°
.
w™t_li°s_lock
);

1677 } i‡(!(
mˇ°_Êags
 & 
BATADV_MCAST_WANT_ALL_IPV4
) &&

1678 
‹ig
->
mˇ°_Êags
 & 
BATADV_MCAST_WANT_ALL_IPV4
) {

1679 
	`©omic_dec
(&
b©_¥iv
->
mˇ°
.
num_w™t_Æl_ùv4
);

1681 
	`•ö_lock_bh
(&
b©_¥iv
->
mˇ°
.
w™t_li°s_lock
);

1683 
	`WARN_ON
(
	`hli°_unhashed
(
node
));

1685 
	`hli°_dñ_öô_rcu
(
node
);

1686 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
mˇ°
.
w™t_li°s_lock
);

1688 
	}
}

1701 
	$b©adv_mˇ°_w™t_ùv6_upd©e
(
b©adv_¥iv
 *
b©_¥iv
,

1702 
b©adv_‹ig_node
 *
‹ig
,

1703 
u8
 
mˇ°_Êags
)

1705 
hli°_node
 *
node
 = &
‹ig
->
mˇ°_w™t_Æl_ùv6_node
;

1706 
hli°_hód
 *
hód
 = &
b©_¥iv
->
mˇ°
.
w™t_Æl_ùv6_li°
;

1708 
	`lockdï_as£π_hñd
(&
‹ig
->
mˇ°_h™dÀr_lock
);

1711 i‡(
mˇ°_Êags
 & 
BATADV_MCAST_WANT_ALL_IPV6
 &&

1712 !(
‹ig
->
mˇ°_Êags
 & 
BATADV_MCAST_WANT_ALL_IPV6
)) {

1713 
	`©omic_öc
(&
b©_¥iv
->
mˇ°
.
num_w™t_Æl_ùv6
);

1715 
	`•ö_lock_bh
(&
b©_¥iv
->
mˇ°
.
w™t_li°s_lock
);

1717 
	`WARN_ON
(!
	`hli°_unhashed
(
node
));

1719 
	`hli°_add_hód_rcu
(
node
, 
hód
);

1720 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
mˇ°
.
w™t_li°s_lock
);

1722 } i‡(!(
mˇ°_Êags
 & 
BATADV_MCAST_WANT_ALL_IPV6
) &&

1723 
‹ig
->
mˇ°_Êags
 & 
BATADV_MCAST_WANT_ALL_IPV6
) {

1724 
	`©omic_dec
(&
b©_¥iv
->
mˇ°
.
num_w™t_Æl_ùv6
);

1726 
	`•ö_lock_bh
(&
b©_¥iv
->
mˇ°
.
w™t_li°s_lock
);

1728 
	`WARN_ON
(
	`hli°_unhashed
(
node
));

1730 
	`hli°_dñ_öô_rcu
(
node
);

1731 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
mˇ°
.
w™t_li°s_lock
);

1733 
	}
}

1746 
	$b©adv_mˇ°_w™t_πr4_upd©e
(
b©adv_¥iv
 *
b©_¥iv
,

1747 
b©adv_‹ig_node
 *
‹ig
,

1748 
u8
 
mˇ°_Êags
)

1750 
hli°_node
 *
node
 = &
‹ig
->
mˇ°_w™t_Æl_πr4_node
;

1751 
hli°_hód
 *
hód
 = &
b©_¥iv
->
mˇ°
.
w™t_Æl_πr4_li°
;

1753 
	`lockdï_as£π_hñd
(&
‹ig
->
mˇ°_h™dÀr_lock
);

1756 i‡(!(
mˇ°_Êags
 & 
BATADV_MCAST_WANT_NO_RTR4
) &&

1757 
‹ig
->
mˇ°_Êags
 & 
BATADV_MCAST_WANT_NO_RTR4
) {

1758 
	`©omic_öc
(&
b©_¥iv
->
mˇ°
.
num_w™t_Æl_πr4
);

1760 
	`•ö_lock_bh
(&
b©_¥iv
->
mˇ°
.
w™t_li°s_lock
);

1762 
	`WARN_ON
(!
	`hli°_unhashed
(
node
));

1764 
	`hli°_add_hód_rcu
(
node
, 
hód
);

1765 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
mˇ°
.
w™t_li°s_lock
);

1767 } i‡(
mˇ°_Êags
 & 
BATADV_MCAST_WANT_NO_RTR4
 &&

1768 !(
‹ig
->
mˇ°_Êags
 & 
BATADV_MCAST_WANT_NO_RTR4
)) {

1769 
	`©omic_dec
(&
b©_¥iv
->
mˇ°
.
num_w™t_Æl_πr4
);

1771 
	`•ö_lock_bh
(&
b©_¥iv
->
mˇ°
.
w™t_li°s_lock
);

1773 
	`WARN_ON
(
	`hli°_unhashed
(
node
));

1775 
	`hli°_dñ_öô_rcu
(
node
);

1776 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
mˇ°
.
w™t_li°s_lock
);

1778 
	}
}

1791 
	$b©adv_mˇ°_w™t_πr6_upd©e
(
b©adv_¥iv
 *
b©_¥iv
,

1792 
b©adv_‹ig_node
 *
‹ig
,

1793 
u8
 
mˇ°_Êags
)

1795 
hli°_node
 *
node
 = &
‹ig
->
mˇ°_w™t_Æl_πr6_node
;

1796 
hli°_hód
 *
hód
 = &
b©_¥iv
->
mˇ°
.
w™t_Æl_πr6_li°
;

1798 
	`lockdï_as£π_hñd
(&
‹ig
->
mˇ°_h™dÀr_lock
);

1801 i‡(!(
mˇ°_Êags
 & 
BATADV_MCAST_WANT_NO_RTR6
) &&

1802 
‹ig
->
mˇ°_Êags
 & 
BATADV_MCAST_WANT_NO_RTR6
) {

1803 
	`©omic_öc
(&
b©_¥iv
->
mˇ°
.
num_w™t_Æl_πr6
);

1805 
	`•ö_lock_bh
(&
b©_¥iv
->
mˇ°
.
w™t_li°s_lock
);

1807 
	`WARN_ON
(!
	`hli°_unhashed
(
node
));

1809 
	`hli°_add_hód_rcu
(
node
, 
hód
);

1810 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
mˇ°
.
w™t_li°s_lock
);

1812 } i‡(
mˇ°_Êags
 & 
BATADV_MCAST_WANT_NO_RTR6
 &&

1813 !(
‹ig
->
mˇ°_Êags
 & 
BATADV_MCAST_WANT_NO_RTR6
)) {

1814 
	`©omic_dec
(&
b©_¥iv
->
mˇ°
.
num_w™t_Æl_πr6
);

1816 
	`•ö_lock_bh
(&
b©_¥iv
->
mˇ°
.
w™t_li°s_lock
);

1818 
	`WARN_ON
(
	`hli°_unhashed
(
node
));

1820 
	`hli°_dñ_öô_rcu
(
node
);

1821 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
mˇ°
.
w™t_li°s_lock
);

1823 
	}
}

1834 
	$b©adv_mˇ°_have_mc_±y≥_upd©e
(
b©adv_¥iv
 *
b©_¥iv
,

1835 
b©adv_‹ig_node
 *
‹ig
,

1836 
u8
 
mˇ°_Êags
)

1838 
	`lockdï_as£π_hñd
(&
‹ig
->
mˇ°_h™dÀr_lock
);

1841 i‡(!(
mˇ°_Êags
 & 
BATADV_MCAST_HAVE_MC_PTYPE_CAPA
) &&

1842 
‹ig
->
mˇ°_Êags
 & 
BATADV_MCAST_HAVE_MC_PTYPE_CAPA
)

1843 
	`©omic_öc
(&
b©_¥iv
->
mˇ°
.
num_no_mc_±y≥_ˇ∑
);

1845 i‡(
mˇ°_Êags
 & 
BATADV_MCAST_HAVE_MC_PTYPE_CAPA
 &&

1846 !(
‹ig
->
mˇ°_Êags
 & 
BATADV_MCAST_HAVE_MC_PTYPE_CAPA
))

1847 
	`©omic_dec
(&
b©_¥iv
->
mˇ°
.
num_no_mc_±y≥_ˇ∑
);

1848 
	}
}

1858 
u8


1859 
	$b©adv_mˇ°_tvlv_Êags_gë
(
boﬁ
 
íabÀd
, *
tvlv_vÆue
, 
u16
 
tvlv_vÆue_Àn
)

1861 
u8
 
mˇ°_Êags
 = 
BATADV_NO_FLAGS
;

1863 i‡(
íabÀd
 && 
tvlv_vÆue
 && 
tvlv_vÆue_Àn
 >(
mˇ°_Êags
))

1864 
mˇ°_Êags
 = *(
u8
 *)
tvlv_vÆue
;

1866 i‡(!
íabÀd
) {

1867 
mˇ°_Êags
 |
BATADV_MCAST_WANT_ALL_IPV4
;

1868 
mˇ°_Êags
 |
BATADV_MCAST_WANT_ALL_IPV6
;

1872 i‡(
mˇ°_Êags
 & 
BATADV_MCAST_WANT_ALL_IPV4
)

1873 
mˇ°_Êags
 |
BATADV_MCAST_WANT_NO_RTR4
;

1875 i‡(
mˇ°_Êags
 & 
BATADV_MCAST_WANT_ALL_IPV6
)

1876 
mˇ°_Êags
 |
BATADV_MCAST_WANT_NO_RTR6
;

1878  
mˇ°_Êags
;

1879 
	}
}

1889 
	$b©adv_mˇ°_tvlv_ogm_h™dÀr
(
b©adv_¥iv
 *
b©_¥iv
,

1890 
b©adv_‹ig_node
 *
‹ig
,

1891 
u8
 
Êags
,

1892 *
tvlv_vÆue
,

1893 
u16
 
tvlv_vÆue_Àn
)

1895 
boﬁ
 
‹ig_mˇ°_íabÀd
 = !(
Êags
 & 
BATADV_TVLV_HANDLER_OGM_CIFNOTFND
);

1896 
u8
 
mˇ°_Êags
;

1898 
mˇ°_Êags
 = 
	`b©adv_mˇ°_tvlv_Êags_gë
(
‹ig_mˇ°_íabÀd
,

1899 
tvlv_vÆue
, 
tvlv_vÆue_Àn
);

1901 
	`•ö_lock_bh
(&
‹ig
->
mˇ°_h™dÀr_lock
);

1903 i‡(
‹ig_mˇ°_íabÀd
 &&

1904 !
	`ã°_bô
(
BATADV_ORIG_CAPA_HAS_MCAST
, &
‹ig
->
ˇ∑bûôõs
)) {

1905 
	`£t_bô
(
BATADV_ORIG_CAPA_HAS_MCAST
, &
‹ig
->
ˇ∑bûôõs
);

1906 } i‡(!
‹ig_mˇ°_íabÀd
 &&

1907 
	`ã°_bô
(
BATADV_ORIG_CAPA_HAS_MCAST
, &
‹ig
->
ˇ∑bûôõs
)) {

1908 
	`˛ór_bô
(
BATADV_ORIG_CAPA_HAS_MCAST
, &
‹ig
->
ˇ∑bûôõs
);

1911 
	`£t_bô
(
BATADV_ORIG_CAPA_HAS_MCAST
, &
‹ig
->
ˇ∑_öôülized
);

1913 
	`b©adv_mˇ°_w™t_un¢o›_upd©e
(
b©_¥iv
, 
‹ig
, 
mˇ°_Êags
);

1914 
	`b©adv_mˇ°_w™t_ùv4_upd©e
(
b©_¥iv
, 
‹ig
, 
mˇ°_Êags
);

1915 
	`b©adv_mˇ°_w™t_ùv6_upd©e
(
b©_¥iv
, 
‹ig
, 
mˇ°_Êags
);

1916 
	`b©adv_mˇ°_w™t_πr4_upd©e
(
b©_¥iv
, 
‹ig
, 
mˇ°_Êags
);

1917 
	`b©adv_mˇ°_w™t_πr6_upd©e
(
b©_¥iv
, 
‹ig
, 
mˇ°_Êags
);

1918 
	`b©adv_mˇ°_have_mc_±y≥_upd©e
(
b©_¥iv
, 
‹ig
, 
mˇ°_Êags
);

1920 
‹ig
->
mˇ°_Êags
 = mcast_flags;

1921 
	`•ö_u∆ock_bh
(&
‹ig
->
mˇ°_h™dÀr_lock
);

1922 
	}
}

1928 
	$b©adv_mˇ°_öô
(
b©adv_¥iv
 *
b©_¥iv
)

1930 
	`b©adv_tvlv_h™dÀr_ªgi°î
(
b©_¥iv
, 
b©adv_mˇ°_tvlv_ogm_h™dÀr
,

1931 
NULL
, NULL, 
BATADV_TVLV_MCAST
, 2,

1932 
BATADV_TVLV_HANDLER_OGM_CIFNOTFND
);

1933 
	`b©adv_tvlv_h™dÀr_ªgi°î
(
b©_¥iv
, 
NULL
, NULL,

1934 
b©adv_mˇ°_f‹w_åackî_tvlv_h™dÀr
,

1935 
BATADV_TVLV_MCAST_TRACKER
, 1,

1936 
BATADV_TVLV_HANDLER_OGM_CIFNOTFND
);

1938 
	`INIT_DELAYED_WORK
(&
b©_¥iv
->
mˇ°
.
w‹k
, 
b©adv_mˇ°_mœ_upd©e
);

1939 
	`b©adv_mˇ°_°¨t_timî
(
b©_¥iv
);

1940 
	}
}

1949 
	$b©adv_mˇ°_mesh_öfo_put
(
sk_buff
 *
msg
,

1950 
b©adv_¥iv
 *
b©_¥iv
)

1952 
u32
 
Êags
 = 
b©_¥iv
->
mˇ°
.
mœ_Êags
.
tvlv_Êags
;

1953 
u32
 
Êags_¥iv
 = 
BATADV_NO_FLAGS
;

1955 i‡(
b©_¥iv
->
mˇ°
.
mœ_Êags
.
bridged
) {

1956 
Êags_¥iv
 |
BATADV_MCAST_FLAGS_BRIDGED
;

1958 i‡(
b©_¥iv
->
mˇ°
.
mœ_Êags
.
quîõr_ùv4
.
exi°s
)

1959 
Êags_¥iv
 |
BATADV_MCAST_FLAGS_QUERIER_IPV4_EXISTS
;

1960 i‡(
b©_¥iv
->
mˇ°
.
mœ_Êags
.
quîõr_ùv6
.
exi°s
)

1961 
Êags_¥iv
 |
BATADV_MCAST_FLAGS_QUERIER_IPV6_EXISTS
;

1962 i‡(
b©_¥iv
->
mˇ°
.
mœ_Êags
.
quîõr_ùv4
.
shadowög
)

1963 
Êags_¥iv
 |
BATADV_MCAST_FLAGS_QUERIER_IPV4_SHADOWING
;

1964 i‡(
b©_¥iv
->
mˇ°
.
mœ_Êags
.
quîõr_ùv6
.
shadowög
)

1965 
Êags_¥iv
 |
BATADV_MCAST_FLAGS_QUERIER_IPV6_SHADOWING
;

1968 i‡(
	`∆a_put_u32
(
msg
, 
BATADV_ATTR_MCAST_FLAGS
, 
Êags
) ||

1969 
	`∆a_put_u32
(
msg
, 
BATADV_ATTR_MCAST_FLAGS_PRIV
, 
Êags_¥iv
))

1970  -
EMSGSIZE
;

1973 
	}
}

1986 
	$b©adv_mˇ°_Êags_dump_íåy
(
sk_buff
 *
msg
, 
u32
 
p‹tid
,

1987 
√éök_ˇŒback
 *
cb
,

1988 
b©adv_‹ig_node
 *
‹ig_node
)

1990 *
hdr
;

1992 
hdr
 = 
	`gílmsg_put
(
msg
, 
p‹tid
, 
cb
->
∆h
->
∆msg_£q
,

1993 &
b©adv_√éök_Ámûy
, 
NLM_F_MULTI
,

1994 
BATADV_CMD_GET_MCAST_FLAGS
);

1995 i‡(!
hdr
)

1996  -
ENOBUFS
;

1998 
	`gíl_dump_check_c⁄si°ít
(
cb
, 
hdr
);

2000 i‡(
	`∆a_put
(
msg
, 
BATADV_ATTR_ORIG_ADDRESS
, 
ETH_ALEN
,

2001 
‹ig_node
->
‹ig
)) {

2002 
	`gílmsg_ˇn˚l
(
msg
, 
hdr
);

2003  -
EMSGSIZE
;

2006 i‡(
	`ã°_bô
(
BATADV_ORIG_CAPA_HAS_MCAST
,

2007 &
‹ig_node
->
ˇ∑bûôõs
)) {

2008 i‡(
	`∆a_put_u32
(
msg
, 
BATADV_ATTR_MCAST_FLAGS
,

2009 
‹ig_node
->
mˇ°_Êags
)) {

2010 
	`gílmsg_ˇn˚l
(
msg
, 
hdr
);

2011  -
EMSGSIZE
;

2015 
	`gílmsg_íd
(
msg
, 
hdr
);

2017 
	}
}

2032 
	$b©adv_mˇ°_Êags_dump_buckë
(
sk_buff
 *
msg
, 
u32
 
p‹tid
,

2033 
√éök_ˇŒback
 *
cb
,

2034 
b©adv_hashèbÀ
 *
hash
,

2035 
buckë
, *
idx_skù
)

2037 
b©adv_‹ig_node
 *
‹ig_node
;

2038 
idx
 = 0;

2040 
	`•ö_lock_bh
(&
hash
->
li°_locks
[
buckë
]);

2041 
cb
->
£q
 = 
	`©omic_ªad
(&
hash
->
gíî©i⁄
) << 1 | 1;

2043 
	`hli°_f‹_óch_íåy
(
‹ig_node
, &
hash
->
èbÀ
[
buckë
], 
hash_íåy
) {

2044 i‡(!
	`ã°_bô
(
BATADV_ORIG_CAPA_HAS_MCAST
,

2045 &
‹ig_node
->
ˇ∑_öôülized
))

2048 i‡(
idx
 < *
idx_skù
)

2049 
skù
;

2051 i‡(
	`b©adv_mˇ°_Êags_dump_íåy
(
msg
, 
p‹tid
, 
cb
, 
‹ig_node
)) {

2052 
	`•ö_u∆ock_bh
(&
hash
->
li°_locks
[
buckë
]);

2053 *
idx_skù
 = 
idx
;

2055  -
EMSGSIZE
;

2058 
skù
:

2059 
idx
++;

2061 
	`•ö_u∆ock_bh
(&
hash
->
li°_locks
[
buckë
]);

2064 
	}
}

2078 
	$__b©adv_mˇ°_Êags_dump
(
sk_buff
 *
msg
, 
u32
 
p‹tid
,

2079 
√éök_ˇŒback
 *
cb
,

2080 
b©adv_¥iv
 *
b©_¥iv
, *
buckë
, *
idx
)

2082 
b©adv_hashèbÀ
 *
hash
 = 
b©_¥iv
->
‹ig_hash
;

2083 
buckë_tmp
 = *
buckë
;

2084 
idx_tmp
 = *
idx
;

2086 
buckë_tmp
 < 
hash
->
size
) {

2087 i‡(
	`b©adv_mˇ°_Êags_dump_buckë
(
msg
, 
p‹tid
, 
cb
, 
hash
,

2088 
buckë_tmp
, &
idx_tmp
))

2091 
buckë_tmp
++;

2092 
idx_tmp
 = 0;

2095 *
buckë
 = 
buckë_tmp
;

2096 *
idx
 = 
idx_tmp
;

2098  
msg
->
Àn
;

2099 
	}
}

2110 
	$b©adv_mˇ°_√éök_gë_¥im¨y
(
√éök_ˇŒback
 *
cb
,

2111 
b©adv_h¨d_iÁ˚
 **
¥im¨y_if
)

2113 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
 = 
NULL
;

2114 
√t_devi˚
 *
mesh_iÁ˚
;

2115 
b©adv_¥iv
 *
b©_¥iv
;

2116 
ªt
 = 0;

2118 
mesh_iÁ˚
 = 
	`b©adv_√éök_gë_meshif
(
cb
);

2119 i‡(
	`IS_ERR
(
mesh_iÁ˚
))

2120  
	`PTR_ERR
(
mesh_iÁ˚
);

2122 
b©_¥iv
 = 
	`√tdev_¥iv
(
mesh_iÁ˚
);

2124 
h¨d_iÁ˚
 = 
	`b©adv_¥im¨y_if_gë_£À˘ed
(
b©_¥iv
);

2125 i‡(!
h¨d_iÁ˚
 || h¨d_iÁ˚->
if_°©us
 !
BATADV_IF_ACTIVE
) {

2126 
ªt
 = -
ENOENT
;

2127 
out
;

2130 
out
:

2131 
	`dev_put
(
mesh_iÁ˚
);

2133 i‡(!
ªt
 && 
¥im¨y_if
)

2134 *
¥im¨y_if
 = 
h¨d_iÁ˚
;

2136 
	`b©adv_h¨dif_put
(
h¨d_iÁ˚
);

2138  
ªt
;

2139 
	}
}

2148 
	$b©adv_mˇ°_Êags_dump
(
sk_buff
 *
msg
, 
√éök_ˇŒback
 *
cb
)

2150 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
 = 
NULL
;

2151 
p‹tid
 = 
	`NETLINK_CB
(
cb
->
skb
).portid;

2152 
b©adv_¥iv
 *
b©_¥iv
;

2153 *
buckë
 = &
cb
->
¨gs
[0];

2154 *
idx
 = &
cb
->
¨gs
[1];

2155 
ªt
;

2157 
ªt
 = 
	`b©adv_mˇ°_√éök_gë_¥im¨y
(
cb
, &
¥im¨y_if
);

2158 i‡(
ªt
)

2159  
ªt
;

2161 
b©_¥iv
 = 
	`√tdev_¥iv
(
¥im¨y_if
->
mesh_iÁ˚
);

2162 
ªt
 = 
	`__b©adv_mˇ°_Êags_dump
(
msg
, 
p‹tid
, 
cb
, 
b©_¥iv
, 
buckë
, 
idx
);

2164 
	`b©adv_h¨dif_put
(
¥im¨y_if
);

2165  
ªt
;

2166 
	}
}

2172 
	$b©adv_mˇ°_‰ì
(
b©adv_¥iv
 *
b©_¥iv
)

2174 
	`ˇn˚l_dñayed_w‹k_sync
(&
b©_¥iv
->
mˇ°
.
w‹k
);

2176 
	`b©adv_tvlv_c⁄èöî_uƒegi°î
(
b©_¥iv
, 
BATADV_TVLV_MCAST
, 2);

2177 
	`b©adv_tvlv_h™dÀr_uƒegi°î
(
b©_¥iv
, 
BATADV_TVLV_MCAST_TRACKER
, 1);

2178 
	`b©adv_tvlv_h™dÀr_uƒegi°î
(
b©_¥iv
, 
BATADV_TVLV_MCAST
, 2);

2181 
	`b©adv_mˇ°_mœ_â_ªåa˘
(
b©_¥iv
, 
NULL
);

2182 
	}
}

2188 
	$b©adv_mˇ°_purge_‹ig
(
b©adv_‹ig_node
 *
‹ig
)

2190 
b©adv_¥iv
 *
b©_¥iv
 = 
‹ig
->bat_priv;

2192 
	`•ö_lock_bh
(&
‹ig
->
mˇ°_h™dÀr_lock
);

2194 
	`b©adv_mˇ°_w™t_un¢o›_upd©e
(
b©_¥iv
, 
‹ig
, 
BATADV_NO_FLAGS
);

2195 
	`b©adv_mˇ°_w™t_ùv4_upd©e
(
b©_¥iv
, 
‹ig
, 
BATADV_NO_FLAGS
);

2196 
	`b©adv_mˇ°_w™t_ùv6_upd©e
(
b©_¥iv
, 
‹ig
, 
BATADV_NO_FLAGS
);

2197 
	`b©adv_mˇ°_w™t_πr4_upd©e
(
b©_¥iv
, 
‹ig
,

2198 
BATADV_MCAST_WANT_NO_RTR4
);

2199 
	`b©adv_mˇ°_w™t_πr6_upd©e
(
b©_¥iv
, 
‹ig
,

2200 
BATADV_MCAST_WANT_NO_RTR6
);

2201 
	`b©adv_mˇ°_have_mc_±y≥_upd©e
(
b©_¥iv
, 
‹ig
,

2202 
BATADV_MCAST_HAVE_MC_PTYPE_CAPA
);

2204 
	`•ö_u∆ock_bh
(&
‹ig
->
mˇ°_h™dÀr_lock
);

2205 
	}
}

	@net/batman-adv/multicast.h

7 #i‚de‡
_NET_BATMAN_ADV_MULTICAST_H_


8 
	#_NET_BATMAN_ADV_MULTICAST_H_


	)

10 
	~"maö.h
"

12 
	~<löux/√éök.h
>

13 
	~<löux/skbuff.h
>

14 
	~<löux/ty≥s.h
>

19 
	eb©adv_f‹w_mode
 {

24 
	mBATADV_FORW_BCAST
,

30 
	mBATADV_FORW_UCASTS
,

36 
	mBATADV_FORW_MCAST
,

39 
	mBATADV_FORW_NONE
,

42 #ifde‡
CONFIG_BATMAN_ADV_MCAST


44 
b©adv_f‹w_mode


45 
b©adv_mˇ°_f‹w_mode
(
b©adv_¥iv
 *
b©_¥iv
, 
sk_buff
 *
skb
,

46 
vid
, *
is_rouèbÀ
);

48 
b©adv_mˇ°_f‹w_£nd
(
b©adv_¥iv
 *
b©_¥iv
, 
sk_buff
 *
skb
,

49 
vid
, 
is_rouèbÀ
);

51 
b©adv_mˇ°_öô
(
b©adv_¥iv
 *
b©_¥iv
);

53 
b©adv_mˇ°_mesh_öfo_put
(
sk_buff
 *
msg
,

54 
b©adv_¥iv
 *
b©_¥iv
);

56 
b©adv_mˇ°_Êags_dump
(
sk_buff
 *
msg
, 
√éök_ˇŒback
 *
cb
);

58 
b©adv_mˇ°_‰ì
(
b©adv_¥iv
 *
b©_¥iv
);

60 
b©adv_mˇ°_purge_‹ig
(
b©adv_‹ig_node
 *
‹ig_node
);

64 
b©adv_mˇ°_f‹w_åackî_tvlv_h™dÀr
(
b©adv_¥iv
 *
b©_¥iv
,

65 
sk_buff
 *
skb
);

67 
b©adv_mˇ°_f‹w_∑ckë_hdæí
(
num_de°s
);

69 
boﬁ
 
b©adv_mˇ°_f‹w_push
(
b©adv_¥iv
 *
b©_¥iv
, 
sk_buff
 *
skb
,

70 
vid
, 
is_rouèbÀ
, 
cou¡
);

72 
b©adv_mˇ°_f‹w_mc£nd
(
b©adv_¥iv
 *
b©_¥iv
, 
sk_buff
 *
skb
);

76 
ölöe
 
b©adv_f‹w_mode


77 
	$b©adv_mˇ°_f‹w_mode
(
b©adv_¥iv
 *
b©_¥iv
, 
sk_buff
 *
skb
,

78 
vid
, *
is_rouèbÀ
)

80  
BATADV_FORW_BCAST
;

81 
	}
}

83 
ölöe
 

84 
	$b©adv_mˇ°_f‹w_£nd
(
b©adv_¥iv
 *
b©_¥iv
, 
sk_buff
 *
skb
,

85 
vid
, 
is_rouèbÀ
)

87 
	`k‰ì_skb
(
skb
);

88  
NET_XMIT_DROP
;

89 
	}
}

91 
ölöe
 
	$b©adv_mˇ°_öô
(
b©adv_¥iv
 *
b©_¥iv
)

94 
	}
}

96 
ölöe
 

97 
	$b©adv_mˇ°_mesh_öfo_put
(
sk_buff
 *
msg
, 
b©adv_¥iv
 *
b©_¥iv
)

100 
	}
}

102 
ölöe
 
	$b©adv_mˇ°_Êags_dump
(
sk_buff
 *
msg
,

103 
√éök_ˇŒback
 *
cb
)

105  -
EOPNOTSUPP
;

106 
	}
}

108 
ölöe
 
	$b©adv_mˇ°_‰ì
(
b©adv_¥iv
 *
b©_¥iv
)

110 
	}
}

112 
ölöe
 
	$b©adv_mˇ°_purge_‹ig
(
b©adv_‹ig_node
 *
‹ig_node
)

114 
	}
}

116 
ölöe
 
	$b©adv_mˇ°_f‹w_mc£nd
(
b©adv_¥iv
 *
b©_¥iv
,

117 
sk_buff
 *
skb
)

119 
	`k‰ì_skb
(
skb
);

120  
NET_XMIT_DROP
;

121 
	}
}

	@net/batman-adv/multicast_forw.c

7 
	~"mu…iˇ°.h
"

8 
	~"maö.h
"

10 
	~<löux/bug.h
>

11 
	~<löux/buûd_bug.h
>

12 
	~<löux/byã‹dî/gíîic.h
>

13 
	~<löux/compûî.h
>

14 
	~<löux/î∫o.h
>

15 
	~<löux/ëhîdevi˚.h
>

16 
	~<löux/gÂ.h
>

17 
	~<löux/if_ëhî.h
>

18 
	~<löux/if_vœn.h
>

19 
	~<löux/ùv6.h
>

20 
	~<löux/limôs.h
>

21 
	~<löux/√tdevi˚.h
>

22 
	~<löux/rculi°.h
>

23 
	~<löux/rcupd©e.h
>

24 
	~<löux/skbuff.h
>

25 
	~<löux/°ddef.h
>

26 
	~<löux/°rög.h
>

27 
	~<löux/ty≥s.h
>

28 
	~<u≠i/löux/b©adv_∑ckë.h
>

30 
	~"bridge_lo›_avoid™˚.h
"

31 
	~"‹igö©‹.h
"

32 
	~"£nd.h
"

33 
	~"å™¶©i⁄-èbÀ.h
"

35 
	#b©adv_mˇ°_f‹w_åackî_f‹_óch_de°
(
de°
, 
num_de°s
) \

36 ; 
num_de°s
;Çum_de°s--, (
de°
Ë+
ETH_ALEN
)

	)

38 
	#b©adv_mˇ°_f‹w_åackî_f‹_óch_de°2
(
de°1
, 
de°2
, 
num_de°s
) \

39 ; 
num_de°s
;Çum_de°s--, (
de°1
Ë+
ETH_ALEN
, (
de°2
Ë+ETH_ALEN)

	)

52 *
	$b©adv_mˇ°_f‹w_skb_push
(
sk_buff
 *
skb
, 
size_t
 
size
,

53 *
Àn
)

55 *
Àn
 +
size
;

56  
	`skb_push
(
skb
, 
size
);

57 
	}
}

70 
	$b©adv_mˇ°_f‹w_push_∑ddög
(
sk_buff
 *
skb
, *
tvlv_Àn
)

72 c⁄° 
∑d_Àn
 = 2;

73 *
∑ddög
;

75 i‡(
	`skb_hódroom
(
skb
Ë< 
∑d_Àn
)

76  
NULL
;

78 
∑ddög
 = 
	`b©adv_mˇ°_f‹w_skb_push
(
skb
, 
∑d_Àn
, 
tvlv_Àn
);

79 
	`mem£t
(
∑ddög
, 0, 
∑d_Àn
);

81  
∑ddög
;

82 
	}
}

96 
boﬁ


97 
	$b©adv_mˇ°_f‹w_push_e°_∑ddög
(
sk_buff
 *
skb
, 
cou¡
,

98 *
tvlv_Àn
)

100 i‡(!(
cou¡
 % 2Ë&& !
	`b©adv_mˇ°_f‹w_push_∑ddög
(
skb
, 
tvlv_Àn
))

101  
Ál£
;

103  
åue
;

104 
	}
}

113 
b©adv_‹ig_node
 *

114 
	$b©adv_mˇ°_f‹w_‹ig_íåy
(
hli°_node
 *
node
,

115 
size_t
 
íåy_off£t
)

118 
íåy_off£t
) {

119 
	`off£tof
(
b©adv_‹ig_node
, 
mˇ°_w™t_Æl_ùv4_node
):

120 
	`off£tof
(
b©adv_‹ig_node
, 
mˇ°_w™t_Æl_ùv6_node
):

121 
	`off£tof
(
b©adv_‹ig_node
, 
mˇ°_w™t_Æl_πr4_node
):

122 
	`off£tof
(
b©adv_‹ig_node
, 
mˇ°_w™t_Æl_πr6_node
):

125 
	`WARN_ON
(1);

126  
NULL
;

129  (
b©adv_‹ig_node
 *)((*)
node
 - 
íåy_off£t
);

130 
	}
}

149 
boﬁ
 
	$b©adv_mˇ°_f‹w_push_de°
(
b©adv_¥iv
 *
b©_¥iv
,

150 
sk_buff
 *
skb
, 
vid
,

151 
b©adv_‹ig_node
 *
‹ig_node
,

152 *
num_de°s
,

153 *
tvlv_Àn
)

155 
	`BUILD_BUG_ON
(
	`sizeof_fõld
(
b©adv_tvlv_mˇ°_åackî
, 
num_de°s
)

156 !(
__be16
));

162 i‡(
	`b©adv_bœ_is_backb⁄e_gw_‹ig
(
b©_¥iv
, 
‹ig_node
->
‹ig
, 
vid
))

163  
åue
;

165 i‡(
	`skb_hódroom
(
skb
Ë< 
ETH_ALEN
 || *
num_de°s
 =
U16_MAX
)

166  
Ál£
;

168 
	`b©adv_mˇ°_f‹w_skb_push
(
skb
, 
ETH_ALEN
, 
tvlv_Àn
);

169 
	`ëhî_addr_c›y
(
skb
->
d©a
, 
‹ig_node
->
‹ig
);

170 (*
num_de°s
)++;

172  
åue
;

173 
	}
}

190 
	$b©adv_mˇ°_f‹w_push_de°s_li°
(
b©adv_¥iv
 *
b©_¥iv
,

191 
sk_buff
 *
skb
,

192 
vid
,

193 
hli°_hód
 *
hód
,

194 
size_t
 
íåy_off£t
,

195 *
num_de°s
,

196 *
tvlv_Àn
)

198 
hli°_node
 *
node
;

199 
b©adv_‹ig_node
 *
‹ig_node
;

201 
	`rcu_ªad_lock
();

202 
	`__hli°_f‹_óch_rcu
(
node
, 
hód
) {

203 
‹ig_node
 = 
	`b©adv_mˇ°_f‹w_‹ig_íåy
(
node
, 
íåy_off£t
);

204 i‡(!
‹ig_node
 ||

205 !
	`b©adv_mˇ°_f‹w_push_de°
(
b©_¥iv
, 
skb
, 
vid
, 
‹ig_node
,

206 
num_de°s
, 
tvlv_Àn
)) {

207 
	`rcu_ªad_u∆ock
();

208  
Ál£
;

211 
	`rcu_ªad_u∆ock
();

213  
åue
;

214 
	}
}

229 
boﬁ


230 
	$b©adv_mˇ°_f‹w_push_â
(
b©adv_¥iv
 *
b©_¥iv
, 
sk_buff
 *
skb
,

231 
vid
, *
num_de°s
,

232 *
tvlv_Àn
)

234 
b©adv_â_‹ig_li°_íåy
 *
‹ig_íåy
;

236 
b©adv_â_globÆ_íåy
 *
â_globÆ
;

237 c⁄° 
u8
 *
addr
 = 
	`ëh_hdr
(
skb
)->
h_de°
;

240 
ªt
 = 
åue
;

242 
â_globÆ
 = 
	`b©adv_â_globÆ_hash_föd
(
b©_¥iv
, 
addr
, 
vid
);

243 i‡(!
â_globÆ
)

244 
out
;

246 
	`rcu_ªad_lock
();

247 
	`hli°_f‹_óch_íåy_rcu
(
‹ig_íåy
, &
â_globÆ
->
‹ig_li°
, 
li°
) {

248 i‡(!
	`b©adv_mˇ°_f‹w_push_de°
(
b©_¥iv
, 
skb
, 
vid
,

249 
‹ig_íåy
->
‹ig_node
,

250 
num_de°s
, 
tvlv_Àn
)) {

251 
ªt
 = 
Ál£
;

255 
	`rcu_ªad_u∆ock
();

257 
	`b©adv_â_globÆ_íåy_put
(
â_globÆ
);

259 
out
:

260  
ªt
;

261 
	}
}

276 
boﬁ
 
	$b©adv_mˇ°_f‹w_push_w™t_Æl
(
b©adv_¥iv
 *
b©_¥iv
,

277 
sk_buff
 *
skb
,

278 
vid
,

279 *
num_de°s
,

280 *
tvlv_Àn
)

282 
hli°_hód
 *
hód
 = 
NULL
;

283 
size_t
 
off£t
;

284 
ªt
;

286 
	`ëh_hdr
(
skb
)->
h_¥Ÿo
) {

287 
	`ht⁄s
(
ETH_P_IP
):

288 
hód
 = &
b©_¥iv
->
mˇ°
.
w™t_Æl_ùv4_li°
;

289 
off£t
 = 
	`off£tof
(
b©adv_‹ig_node
,

290 
mˇ°_w™t_Æl_ùv4_node
);

292 
	`ht⁄s
(
ETH_P_IPV6
):

293 
hód
 = &
b©_¥iv
->
mˇ°
.
w™t_Æl_ùv6_li°
;

294 
off£t
 = 
	`off£tof
(
b©adv_‹ig_node
,

295 
mˇ°_w™t_Æl_ùv6_node
);

298  
Ál£
;

301 
ªt
 = 
	`b©adv_mˇ°_f‹w_push_de°s_li°
(
b©_¥iv
, 
skb
, 
vid
, 
hód
,

302 
off£t
, 
num_de°s
, 
tvlv_Àn
);

303 i‡(!
ªt
)

304  
Ál£
;

306  
åue
;

307 
	}
}

322 
boﬁ
 
	$b©adv_mˇ°_f‹w_push_w™t_πr
(
b©adv_¥iv
 *
b©_¥iv
,

323 
sk_buff
 *
skb
,

324 
vid
,

325 *
num_de°s
,

326 *
tvlv_Àn
)

328 
hli°_hód
 *
hód
 = 
NULL
;

329 
size_t
 
off£t
;

330 
ªt
;

332 
	`ëh_hdr
(
skb
)->
h_¥Ÿo
) {

333 
	`ht⁄s
(
ETH_P_IP
):

334 
hód
 = &
b©_¥iv
->
mˇ°
.
w™t_Æl_πr4_li°
;

335 
off£t
 = 
	`off£tof
(
b©adv_‹ig_node
,

336 
mˇ°_w™t_Æl_πr4_node
);

338 
	`ht⁄s
(
ETH_P_IPV6
):

339 
hód
 = &
b©_¥iv
->
mˇ°
.
w™t_Æl_πr6_li°
;

340 
off£t
 = 
	`off£tof
(
b©adv_‹ig_node
,

341 
mˇ°_w™t_Æl_πr6_node
);

344  
Ál£
;

347 
ªt
 = 
	`b©adv_mˇ°_f‹w_push_de°s_li°
(
b©_¥iv
, 
skb
, 
vid
, 
hód
,

348 
off£t
, 
num_de°s
, 
tvlv_Àn
);

349 i‡(!
ªt
)

350  
Ál£
;

352  
åue
;

353 
	}
}

367 
	$b©adv_mˇ°_f‹w_s¸≠e
(
sk_buff
 *
skb
,

368 
off£t
,

369 
Àn
)

371 *
to
, *
‰om
;

373 
	`SKB_LINEAR_ASSERT
(
skb
);

375 
to
 = 
	`skb_puŒ
(
skb
, 
Àn
);

376 
‰om
 = 
to
 - 
Àn
;

378 
	`memmove
(
to
, 
‰om
, 
off£t
);

379 
	}
}

391 
	$b©adv_mˇ°_f‹w_push_s¸≠e_∑ddög
(
sk_buff
 *
skb
,

392 *
tvlv_Àn
)

394 c⁄° 
∑d_Àn
 = 2;

396 
	`b©adv_mˇ°_f‹w_s¸≠e
(
skb
, *
tvlv_Àn
 - 
∑d_Àn
,Öad_len);

397 *
tvlv_Àn
 -
∑d_Àn
;

398 
	}
}

410 
boﬁ
 
	$b©adv_mˇ°_f‹w_push_ö£π_∑ddög
(
sk_buff
 *
skb
,

411 *
tvlv_Àn
)

413 
off£t
 = *
tvlv_Àn
;

414 *
to
, *
‰om
 = 
skb
->
d©a
;

416 
to
 = 
	`b©adv_mˇ°_f‹w_push_∑ddög
(
skb
, 
tvlv_Àn
);

417 i‡(!
to
)

418  
Ál£
;

420 
	`memmove
(
to
, 
‰om
, 
off£t
);

421 
	`mem£t
(
to
 + 
off£t
, 0, *
tvlv_Àn
 - offset);

422  
åue
;

423 
	}
}

448 
boﬁ


449 
	$b©adv_mˇ°_f‹w_push_adju°_∑ddög
(
sk_buff
 *
skb
, *
cou¡
,

450 
num_de°s_pushed
,

451 *
tvlv_Àn
)

453 
ªt
 = 
åue
;

455 i‡(
	`likñy
((
num_de°s_pushed
 % 2Ë=(*
cou¡
 % 2)))

456 
out
;

462 i‡(!(*
cou¡
 % 2Ë&& (
num_de°s_pushed
 % 2))

463 
	`b©adv_mˇ°_f‹w_push_s¸≠e_∑ddög
(
skb
, 
tvlv_Àn
);

468 i‡((*
cou¡
 % 2Ë&& (!(
num_de°s_pushed
 % 2)))

469 
ªt
 = 
	`b©adv_mˇ°_f‹w_push_ö£π_∑ddög
(
skb
, 
tvlv_Àn
);

471 
out
:

472 *
cou¡
 = 
num_de°s_pushed
;

473  
ªt
;

474 
	}
}

492 
	$b©adv_mˇ°_f‹w_push_de°s
(
b©adv_¥iv
 *
b©_¥iv
, 
sk_buff
 *
skb
,

493 
vid
, 
is_rouèbÀ
, *
cou¡
,

494 *
tvlv_Àn
)

496 
num_de°s
 = 0;

498 i‡(!
	`b©adv_mˇ°_f‹w_push_e°_∑ddög
(
skb
, *
cou¡
, 
tvlv_Àn
))

499 
îr
;

501 i‡(!
	`b©adv_mˇ°_f‹w_push_â
(
b©_¥iv
, 
skb
, 
vid
, &
num_de°s
,

502 
tvlv_Àn
))

503 
îr
;

505 i‡(!
	`b©adv_mˇ°_f‹w_push_w™t_Æl
(
b©_¥iv
, 
skb
, 
vid
, &
num_de°s
,

506 
tvlv_Àn
))

507 
îr
;

509 i‡(
is_rouèbÀ
 &&

510 !
	`b©adv_mˇ°_f‹w_push_w™t_πr
(
b©_¥iv
, 
skb
, 
vid
, &
num_de°s
,

511 
tvlv_Àn
))

512 
îr
;

514 i‡(!
	`b©adv_mˇ°_f‹w_push_adju°_∑ddög
(
skb
, 
cou¡
, 
num_de°s
,

515 
tvlv_Àn
))

516 
îr
;

519 
îr
:

520  -
ENOMEM
;

521 
	}
}

539 
	$b©adv_mˇ°_f‹w_push_åackî
(
sk_buff
 *
skb
, 
num_de°s
,

540 *
tvlv_Àn
)

542 
b©adv_tvlv_mˇ°_åackî
 *
mˇ°_åackî
;

543 
b©adv_tvlv_hdr
 *
tvlv_hdr
;

544 
tvlv_vÆue_Àn
;

546 i‡(
	`skb_hódroom
(
skb
Ë< (*
mˇ°_åackî
Ë+ (*
tvlv_hdr
))

547  -
ENOMEM
;

549 
tvlv_vÆue_Àn
 = (*
mˇ°_åackî
Ë+ *
tvlv_Àn
;

550 i‡(
tvlv_vÆue_Àn
 + (*
tvlv_hdr
Ë> 
U16_MAX
)

551  -
ENOMEM
;

553 
	`b©adv_mˇ°_f‹w_skb_push
(
skb
, (*
mˇ°_åackî
), 
tvlv_Àn
);

554 
mˇ°_åackî
 = (
b©adv_tvlv_mˇ°_åackî
 *)
skb
->
d©a
;

555 
mˇ°_åackî
->
num_de°s
 = 
	`ht⁄s
(num_dests);

557 
	`skb_ª£t_√tw‹k_hódî
(
skb
);

559 
	`b©adv_mˇ°_f‹w_skb_push
(
skb
, (*
tvlv_hdr
), 
tvlv_Àn
);

560 
tvlv_hdr
 = (
b©adv_tvlv_hdr
 *)
skb
->
d©a
;

561 
tvlv_hdr
->
ty≥
 = 
BATADV_TVLV_MCAST_TRACKER
;

562 
tvlv_hdr
->
vîsi⁄
 = 1;

563 
tvlv_hdr
->
Àn
 = 
	`ht⁄s
(
tvlv_vÆue_Àn
);

566 
	}
}

584 
	$b©adv_mˇ°_f‹w_push_tvlvs
(
b©adv_¥iv
 *
b©_¥iv
, 
sk_buff
 *
skb
,

585 
vid
, 
is_rouèbÀ
, 
cou¡
,

586 *
tvlv_Àn
)

588 
ªt
;

590 
ªt
 = 
	`b©adv_mˇ°_f‹w_push_de°s
(
b©_¥iv
, 
skb
, 
vid
, 
is_rouèbÀ
,

591 &
cou¡
, 
tvlv_Àn
);

592 i‡(
ªt
 < 0)

593  
ªt
;

595 
ªt
 = 
	`b©adv_mˇ°_f‹w_push_åackî
(
skb
, 
cou¡
, 
tvlv_Àn
);

596 i‡(
ªt
 < 0)

597  
ªt
;

600 
	}
}

616 
	$b©adv_mˇ°_f‹w_push_hdr
(
sk_buff
 *
skb
, 
tvlv_Àn
)

618 
b©adv_mˇ°_∑ckë
 *
mˇ°_∑ckë
;

620 i‡(
	`skb_hódroom
(
skb
Ë< (*
mˇ°_∑ckë
))

621  -
ENOMEM
;

623 
	`skb_push
(
skb
, (*
mˇ°_∑ckë
));

625 
mˇ°_∑ckë
 = (
b©adv_mˇ°_∑ckë
 *)
skb
->
d©a
;

626 
mˇ°_∑ckë
->
vîsi⁄
 = 
BATADV_COMPAT_VERSION
;

627 
mˇ°_∑ckë
->
âl
 = 
BATADV_TTL
;

628 
mˇ°_∑ckë
->
∑ckë_ty≥
 = 
BATADV_MCAST
;

629 
mˇ°_∑ckë
->
ª£rved
 = 0;

630 
mˇ°_∑ckë
->
tvlv_Àn
 = 
	`ht⁄s
(tvlv_len);

633 
	}
}

657 
	$b©adv_mˇ°_f‹w_s¸ub_de°s
(
b©adv_¥iv
 *
b©_¥iv
,

658 
b©adv_√igh_node
 *
comp_√igh
, 
u8
 *
de°
,

659 
u8
 *
√xt_de°
, 
u16
 
num_de°s
)

661 
b©adv_√igh_node
 *
√xt_√igh
;

664 
	`ëh_zîo_addr
(
de°
);

665 
de°
 +
ETH_ALEN
;

666 
√xt_de°
 +
ETH_ALEN
;

667 
num_de°s
--;

669 
	`b©adv_mˇ°_f‹w_åackî_f‹_óch_de°2
(
de°
, 
√xt_de°
, 
num_de°s
) {

670 i‡(
	`is_zîo_ëhî_addr
(
√xt_de°
))

674 i‡(
	`is_mu…iˇ°_ëhî_addr
(
√xt_de°
)) {

675 
	`ëh_zîo_addr
(
de°
);

676 
	`ëh_zîo_addr
(
√xt_de°
);

680 
√xt_√igh
 = 
	`b©adv_‹ig_to_rouãr
(
b©_¥iv
, 
√xt_de°
, 
NULL
);

681 i‡(!
√xt_√igh
) {

682 
	`ëh_zîo_addr
(
√xt_de°
);

686 i‡(!
	`b©adv_com∑ª_ëh
(
√xt_√igh
->
addr
, 
comp_√igh
->addr)) {

687 
	`ëh_zîo_addr
(
√xt_de°
);

688 
	`b©adv_√igh_node_put
(
√xt_√igh
);

695 
	`ëh_zîo_addr
(
de°
);

696 
	`b©adv_√igh_node_put
(
√xt_√igh
);

698 
	}
}

711 
boﬁ
 
	$b©adv_mˇ°_f‹w_shrök_fûl
(
u8
 *
¶Ÿ
, 
u16
 
num_de°s_¶Ÿ
)

713 
u16
 
num_de°s_fûÀr
;

714 
u8
 *
fûÀr
;

717 i‡(!
num_de°s_¶Ÿ
)

718  
Ál£
;

720 
num_de°s_fûÀr
 = 
num_de°s_¶Ÿ
 - 1;

721 
fûÀr
 = 
¶Ÿ
 + 
ETH_ALEN
;

724 
	`b©adv_mˇ°_f‹w_åackî_f‹_óch_de°
(
fûÀr
, 
num_de°s_fûÀr
) {

725 i‡(
	`is_zîo_ëhî_addr
(
fûÀr
))

728 
	`ëhî_addr_c›y
(
¶Ÿ
, 
fûÀr
);

729 
	`ëh_zîo_addr
(
fûÀr
);

730  
åue
;

733  
Ál£
;

734 
	}
}

748 
	$b©adv_mˇ°_f‹w_shrök_∑ck_de°s
(
sk_buff
 *
skb
)

750 
b©adv_tvlv_mˇ°_åackî
 *
mˇ°_åackî
;

751 *
skb_√t_hdr
;

752 
u16
 
num_de°s_¶Ÿ
;

753 
u8
 *
¶Ÿ
;

755 
skb_√t_hdr
 = 
	`skb_√tw‹k_hódî
(
skb
);

756 
mˇ°_åackî
 = (
b©adv_tvlv_mˇ°_åackî
 *)
skb_√t_hdr
;

757 
num_de°s_¶Ÿ
 = 
	`¡ohs
(
mˇ°_åackî
->
num_de°s
);

759 
¶Ÿ
 = (
u8
 *)
mˇ°_åackî
 + (*mcast_tracker);

761 
	`b©adv_mˇ°_f‹w_åackî_f‹_óch_de°
(
¶Ÿ
, 
num_de°s_¶Ÿ
) {

763 i‡(!
	`is_zîo_ëhî_addr
(
¶Ÿ
))

766 i‡(!
	`b©adv_mˇ°_f‹w_shrök_fûl
(
¶Ÿ
, 
num_de°s_¶Ÿ
))

776  
num_de°s_¶Ÿ
;

777 
	}
}

793 
	$b©adv_mˇ°_f‹w_shrök_Æign_off£t
(
num_de°s_ﬁd
,

794 
num_de°s_ªdu˚
)

797 i‡(!(
num_de°s_ªdu˚
 % 2))

801 i‡(!(
num_de°s_ﬁd
 % 2))

806 
	}
}

825 
	$b©adv_mˇ°_f‹w_shrök_upd©e_hódîs
(
sk_buff
 *
skb
,

826 
num_de°s_ªdu˚
)

828 
b©adv_tvlv_mˇ°_åackî
 *
mˇ°_åackî
;

829 
b©adv_mˇ°_∑ckë
 *
mˇ°_∑ckë
;

830 
b©adv_tvlv_hdr
 *
tvlv_hdr
;

831 *
skb_√t_hdr
;

832 
off£t
;

833 
Æign_off£t
;

834 
u16
 
num_de°s
;

836 
skb_√t_hdr
 = 
	`skb_√tw‹k_hódî
(
skb
);

837 
mˇ°_åackî
 = (
b©adv_tvlv_mˇ°_åackî
 *)
skb_√t_hdr
;

838 
num_de°s
 = 
	`¡ohs
(
mˇ°_åackî
->num_dests);

840 
Æign_off£t
 = 
	`b©adv_mˇ°_f‹w_shrök_Æign_off£t
(
num_de°s
,

841 
num_de°s_ªdu˚
);

842 
off£t
 = 
ETH_ALEN
 * 
num_de°s_ªdu˚
 + 
Æign_off£t
;

843 
num_de°s
 -
num_de°s_ªdu˚
;

846 
mˇ°_åackî
->
num_de°s
 = 
	`ht⁄s
(num_dests);

849 
tvlv_hdr
 = (
b©adv_tvlv_hdr
 *)(
	`skb_√tw‹k_hódî
(
skb
) -

850 (*
tvlv_hdr
));

851 
tvlv_hdr
->
Àn
 = 
	`ht⁄s
(
	`¡ohs
—vlv_hdr->ÀnË- 
off£t
);

854 
mˇ°_∑ckë
 = (
b©adv_mˇ°_∑ckë
 *)
skb
->
d©a
;

855 
mˇ°_∑ckë
->
tvlv_Àn
 = 
	`ht⁄s
(
	`¡ohs
(mˇ°_∑ckë->tvlv_ÀnË- 
off£t
);

857  
off£t
;

858 
	}
}

869 
	$b©adv_mˇ°_f‹w_shrök_move_hódîs
(
sk_buff
 *
skb
, 
off£t
)

871 
b©adv_tvlv_mˇ°_åackî
 *
mˇ°_åackî
;

872 *
skb_√t_hdr
;

873 
Àn
;

874 
u16
 
num_de°s
;

876 
skb_√t_hdr
 = 
	`skb_√tw‹k_hódî
(
skb
);

877 
mˇ°_åackî
 = (
b©adv_tvlv_mˇ°_åackî
 *)
skb_√t_hdr
;

878 
num_de°s
 = 
	`¡ohs
(
mˇ°_åackî
->num_dests);

879 
Àn
 = 
	`skb_√tw‹k_off£t
(
skb
Ë+ (*
mˇ°_åackî
);

880 
Àn
 +
num_de°s
 * 
ETH_ALEN
;

882 
	`b©adv_mˇ°_f‹w_s¸≠e
(
skb
, 
Àn
, 
off£t
);

883 
	}
}

893 
	$b©adv_mˇ°_f‹w_shrök_åackî
(
sk_buff
 *
skb
)

895 
off£t
;

896 
u16
 
de°s_ªdu˚d
;

898 
de°s_ªdu˚d
 = 
	`b©adv_mˇ°_f‹w_shrök_∑ck_de°s
(
skb
);

899 i‡(!
de°s_ªdu˚d
)

902 
off£t
 = 
	`b©adv_mˇ°_f‹w_shrök_upd©e_hódîs
(
skb
, 
de°s_ªdu˚d
);

903 
	`b©adv_mˇ°_f‹w_shrök_move_hódîs
(
skb
, 
off£t
);

904 
	}
}

925 
	$b©adv_mˇ°_f‹w_∑ckë
(
b©adv_¥iv
 *
b©_¥iv
,

926 
sk_buff
 *
skb
, 
boﬁ
 
loˇl_xmô
)

928 
b©adv_tvlv_mˇ°_åackî
 *
mˇ°_åackî
;

929 
b©adv_√igh_node
 *
√igh_node
;

930 
off£t
, 
num_de°s_off
;

931 
sk_buff
 *
√xth›_skb
;

932 *
skb_√t_hdr
;

933 
boﬁ
 
loˇl_ªcv
 = 
Ál£
;

934 
tvlv_Àn
;

935 
boﬁ
 
xmôãd
 = 
Ál£
;

936 
u8
 *
de°
, *
√xt_de°
;

937 
u16
 
num_de°s
;

938 
ªt
;

941 
	`SKB_LINEAR_ASSERT
(
skb
);

944 
num_de°s_off
 = 
	`off£tof
(
b©adv_tvlv_mˇ°_åackî
, 
num_de°s
);

945 i‡(
num_de°s_off
 > 
	`skb_√tw‹k_hódî_Àn
(
skb
))

946  -
EINVAL
;

948 
skb_√t_hdr
 = 
	`skb_√tw‹k_hódî
(
skb
);

949 
mˇ°_åackî
 = (
b©adv_tvlv_mˇ°_åackî
 *)
skb_√t_hdr
;

950 
num_de°s
 = 
	`¡ohs
(
mˇ°_åackî
->num_dests);

952 
de°
 = (
u8
 *)
mˇ°_åackî
 + (*mcast_tracker);

955 
tvlv_Àn
 = (*
mˇ°_åackî
Ë+ 
ETH_ALEN
 * 
num_de°s
;

956 i‡(
tvlv_Àn
 > 
	`skb_√tw‹k_hódî_Àn
(
skb
))

957  -
EINVAL
;

960 
skb
->
ù_summed
 = 
CHECKSUM_NONE
;

962 
	`b©adv_mˇ°_f‹w_åackî_f‹_óch_de°
(
de°
, 
num_de°s
) {

963 i‡(
	`is_zîo_ëhî_addr
(
de°
))

967 i‡(
	`is_mu…iˇ°_ëhî_addr
(
de°
)) {

968 
	`ëh_zîo_addr
(
de°
);

972 i‡(
	`b©adv_is_my_mac
(
b©_¥iv
, 
de°
)) {

973 
	`ëh_zîo_addr
(
de°
);

974 
loˇl_ªcv
 = 
åue
;

978 
√igh_node
 = 
	`b©adv_‹ig_to_rouãr
(
b©_¥iv
, 
de°
, 
NULL
);

979 i‡(!
√igh_node
) {

980 
	`ëh_zîo_addr
(
de°
);

984 
√xth›_skb
 = 
	`skb_c›y
(
skb
, 
GFP_ATOMIC
);

985 i‡(!
√xth›_skb
) {

986 
	`b©adv_√igh_node_put
(
√igh_node
);

987  -
ENOMEM
;

990 
off£t
 = 
de°
 - 
skb
->
d©a
;

991 
√xt_de°
 = 
√xth›_skb
->
d©a
 + 
off£t
;

993 
	`b©adv_mˇ°_f‹w_s¸ub_de°s
(
b©_¥iv
, 
√igh_node
, 
de°
,

994 
√xt_de°
, 
num_de°s
);

995 
	`b©adv_mˇ°_f‹w_shrök_åackî
(
√xth›_skb
);

997 
	`b©adv_öc_cou¡î
(
b©_¥iv
, 
BATADV_CNT_MCAST_TX
);

998 
	`b©adv_add_cou¡î
(
b©_¥iv
, 
BATADV_CNT_MCAST_TX_BYTES
,

999 
√xth›_skb
->
Àn
 + 
ETH_HLEN
);

1000 
xmôãd
 = 
åue
;

1001 
ªt
 = 
	`b©adv_£nd_uniˇ°_skb
(
√xth›_skb
, 
√igh_node
);

1003 
	`b©adv_√igh_node_put
(
√igh_node
);

1005 i‡(
ªt
 < 0)

1006  
ªt
;

1009 i‡(
xmôãd
) {

1010 i‡(
loˇl_xmô
) {

1011 
	`b©adv_öc_cou¡î
(
b©_¥iv
, 
BATADV_CNT_MCAST_TX_LOCAL
);

1012 
	`b©adv_add_cou¡î
(
b©_¥iv
,

1013 
BATADV_CNT_MCAST_TX_LOCAL_BYTES
,

1014 
skb
->
Àn
 -

1015 
	`skb_å™•‹t_off£t
(
skb
));

1017 
	`b©adv_öc_cou¡î
(
b©_¥iv
, 
BATADV_CNT_MCAST_FWD
);

1018 
	`b©adv_add_cou¡î
(
b©_¥iv
, 
BATADV_CNT_MCAST_FWD_BYTES
,

1019 
skb
->
Àn
 + 
ETH_HLEN
);

1023 i‡(
loˇl_ªcv
)

1024  
NET_RX_SUCCESS
;

1026  
NET_RX_DROP
;

1027 
	}
}

1047 
	$b©adv_mˇ°_f‹w_åackî_tvlv_h™dÀr
(
b©adv_¥iv
 *
b©_¥iv
,

1048 
sk_buff
 *
skb
)

1050  
	`b©adv_mˇ°_f‹w_∑ckë
(
b©_¥iv
, 
skb
, 
Ál£
);

1051 
	}
}

1062 
	$b©adv_mˇ°_f‹w_∑ckë_hdæí
(
num_de°s
)

1068 
∑ddög
 = (!(
num_de°s
 % 2)) ? 2 : 0;

1070  
∑ddög
 + 
num_de°s
 * 
ETH_ALEN
 +

1071 (
b©adv_tvlv_mˇ°_åackî
) +

1072 (
b©adv_tvlv_hdr
) +

1073 (
b©adv_mˇ°_∑ckë
);

1074 
	}
}

1087 
	$b©adv_mˇ°_f‹w_ex∑nd_hód
(
b©adv_¥iv
 *
b©_¥iv
,

1088 
sk_buff
 *
skb
)

1090 
hdr_size
 = 
VLAN_ETH_HLEN
 + 
IPV6_MIN_MTU
 - 
skb
->
Àn
;

1096 i‡(
hdr_size
 < 0) {

1100 
	`WARN_ON
(1);

1101  -
EINVAL
;

1104 i‡(
	`skb_hódroom
(
skb
Ë< 
hdr_size
 &&

1105 
	`pskb_ex∑nd_hód
(
skb
, 
hdr_size
, 0, 
GFP_ATOMIC
) < 0)

1106  -
ENOMEM
;

1109 
	}
}

1126 
boﬁ
 
	$b©adv_mˇ°_f‹w_push
(
b©adv_¥iv
 *
b©_¥iv
, 
sk_buff
 *
skb
,

1127 
vid
, 
is_rouèbÀ
, 
cou¡
)

1129 
tvlv_Àn
 = 0;

1130 
ªt
;

1132 i‡(
	`b©adv_mˇ°_f‹w_ex∑nd_hód
(
b©_¥iv
, 
skb
) < 0)

1133 
îr
;

1135 
	`skb_ª£t_å™•‹t_hódî
(
skb
);

1137 
ªt
 = 
	`b©adv_mˇ°_f‹w_push_tvlvs
(
b©_¥iv
, 
skb
, 
vid
, 
is_rouèbÀ
,

1138 
cou¡
, &
tvlv_Àn
);

1139 i‡(
ªt
 < 0)

1140 
îr
;

1142 
ªt
 = 
	`b©adv_mˇ°_f‹w_push_hdr
(
skb
, 
tvlv_Àn
);

1143 i‡(
ªt
 < 0)

1144 
îr
;

1146  
åue
;

1148 
îr
:

1149 i‡(
tvlv_Àn
)

1150 
	`skb_puŒ
(
skb
, 
tvlv_Àn
);

1152  
Ál£
;

1153 
	}
}

1166 
	$b©adv_mˇ°_f‹w_mc£nd
(
b©adv_¥iv
 *
b©_¥iv
,

1167 
sk_buff
 *
skb
)

1169 
ªt
 = 
	`b©adv_mˇ°_f‹w_∑ckë
(
b©_¥iv
, 
skb
, 
åue
);

1171 i‡(
ªt
 < 0) {

1172 
	`k‰ì_skb
(
skb
);

1173  
NET_XMIT_DROP
;

1176 
	`c⁄sume_skb
(
skb
);

1177  
NET_XMIT_SUCCESS
;

1178 
	}
}

	@net/batman-adv/netlink.c

7 
	~"√éök.h
"

8 
	~"maö.h
"

10 
	~<löux/¨øy_size.h
>

11 
	~<löux/©omic.h
>

12 
	~<löux/bô›s.h
>

13 
	~<löux/bug.h
>

14 
	~<löux/byã‹dî/gíîic.h
>

15 
	~<löux/ˇche.h
>

16 
	~<löux/îr.h
>

17 
	~<löux/î∫o.h
>

18 
	~<löux/gÂ.h
>

19 
	~<löux/if_ëhî.h
>

20 
	~<löux/if_vœn.h
>

21 
	~<löux/öô.h
>

22 
	~<löux/limôs.h
>

23 
	~<löux/li°.h
>

24 
	~<löux/mömax.h
>

25 
	~<löux/√tdevi˚.h
>

26 
	~<löux/√éök.h
>

27 
	~<löux/¥ötk.h
>

28 
	~<löux/π√éök.h
>

29 
	~<löux/skbuff.h
>

30 
	~<löux/°ddef.h
>

31 
	~<löux/ty≥s.h
>

32 
	~<√t/gíëlök.h
>

33 
	~<√t/√t_«me•a˚.h
>

34 
	~<√t/√éök.h
>

35 
	~<√t/sock.h
>

36 
	~<u≠i/löux/b©adv_∑ckë.h
>

37 
	~<u≠i/löux/b©m™_adv.h
>

39 
	~"b©_Ægo.h
"

40 
	~"bridge_lo›_avoid™˚.h
"

41 
	~"di°ribuãd-¨p-èbÀ.h
"

42 
	~"g©eway_˛õ¡.h
"

43 
	~"g©eway_comm⁄.h
"

44 
	~"h¨d-öãrÁ˚.h
"

45 
	~"log.h
"

46 
	~"mesh-öãrÁ˚.h
"

47 
	~"mu…iˇ°.h
"

48 
	~"√tw‹k-codög.h
"

49 
	~"‹igö©‹.h
"

50 
	~"ç_mëî.h
"

51 
	~"å™¶©i⁄-èbÀ.h
"

53 
gíl_Ámûy
 
	gb©adv_√éök_Ámûy
;

56 
	eb©adv_√éök_mu…iˇ°_groups
 {

57 
	mBATADV_NL_MCGRP_CONFIG
,

58 
	mBATADV_NL_MCGRP_TPMETER
,

64 
	eb©adv_gíl_›s_Êags
 {

70 
	mBATADV_FLAG_NEED_MESH
 = 
BIT
(0),

77 
	mBATADV_FLAG_NEED_HARDIF
 = 
BIT
(1),

84 
	mBATADV_FLAG_NEED_VLAN
 = 
BIT
(2),

87 c⁄° 
gíl_mu…iˇ°_group
 
	gb©adv_√éök_mcgΩs
[] = {

88 [
BATADV_NL_MCGRP_CONFIG
] = { .
«me
 = 
BATADV_NL_MCAST_GROUP_CONFIG
 },

89 [
BATADV_NL_MCGRP_TPMETER
] = { .
«me
 = 
BATADV_NL_MCAST_GROUP_TPMETER
 },

92 c⁄° 
∆a_pﬁicy
 
	gb©adv_√éök_pﬁicy
[
NUM_BATADV_ATTR
] = {

93 [
BATADV_ATTR_VERSION
] = { .
ty≥
 = 
NLA_STRING
 },

94 [
BATADV_ATTR_ALGO_NAME
] = { .
ty≥
 = 
NLA_STRING
 },

95 [
BATADV_ATTR_MESH_IFINDEX
] = { .
ty≥
 = 
NLA_U32
 },

96 [
BATADV_ATTR_MESH_IFNAME
] = { .
ty≥
 = 
NLA_STRING
 },

97 [
BATADV_ATTR_MESH_ADDRESS
] = { .
Àn
 = 
ETH_ALEN
 },

98 [
BATADV_ATTR_HARD_IFINDEX
] = { .
ty≥
 = 
NLA_U32
 },

99 [
BATADV_ATTR_HARD_IFNAME
] = { .
ty≥
 = 
NLA_STRING
 },

100 [
BATADV_ATTR_HARD_ADDRESS
] = { .
Àn
 = 
ETH_ALEN
 },

101 [
BATADV_ATTR_ORIG_ADDRESS
] = { .
Àn
 = 
ETH_ALEN
 },

102 [
BATADV_ATTR_TPMETER_RESULT
] = { .
ty≥
 = 
NLA_U8
 },

103 [
BATADV_ATTR_TPMETER_TEST_TIME
] = { .
ty≥
 = 
NLA_U32
 },

104 [
BATADV_ATTR_TPMETER_BYTES
] = { .
ty≥
 = 
NLA_U64
 },

105 [
BATADV_ATTR_TPMETER_COOKIE
] = { .
ty≥
 = 
NLA_U32
 },

106 [
BATADV_ATTR_ACTIVE
] = { .
ty≥
 = 
NLA_FLAG
 },

107 [
BATADV_ATTR_TT_ADDRESS
] = { .
Àn
 = 
ETH_ALEN
 },

108 [
BATADV_ATTR_TT_TTVN
] = { .
ty≥
 = 
NLA_U8
 },

109 [
BATADV_ATTR_TT_LAST_TTVN
] = { .
ty≥
 = 
NLA_U8
 },

110 [
BATADV_ATTR_TT_CRC32
] = { .
ty≥
 = 
NLA_U32
 },

111 [
BATADV_ATTR_TT_VID
] = { .
ty≥
 = 
NLA_U16
 },

112 [
BATADV_ATTR_TT_FLAGS
] = { .
ty≥
 = 
NLA_U32
 },

113 [
BATADV_ATTR_FLAG_BEST
] = { .
ty≥
 = 
NLA_FLAG
 },

114 [
BATADV_ATTR_LAST_SEEN_MSECS
] = { .
ty≥
 = 
NLA_U32
 },

115 [
BATADV_ATTR_NEIGH_ADDRESS
] = { .
Àn
 = 
ETH_ALEN
 },

116 [
BATADV_ATTR_TQ
] = { .
ty≥
 = 
NLA_U8
 },

117 [
BATADV_ATTR_THROUGHPUT
] = { .
ty≥
 = 
NLA_U32
 },

118 [
BATADV_ATTR_BANDWIDTH_UP
] = { .
ty≥
 = 
NLA_U32
 },

119 [
BATADV_ATTR_BANDWIDTH_DOWN
] = { .
ty≥
 = 
NLA_U32
 },

120 [
BATADV_ATTR_ROUTER
] = { .
Àn
 = 
ETH_ALEN
 },

121 [
BATADV_ATTR_BLA_OWN
] = { .
ty≥
 = 
NLA_FLAG
 },

122 [
BATADV_ATTR_BLA_ADDRESS
] = { .
Àn
 = 
ETH_ALEN
 },

123 [
BATADV_ATTR_BLA_VID
] = { .
ty≥
 = 
NLA_U16
 },

124 [
BATADV_ATTR_BLA_BACKBONE
] = { .
Àn
 = 
ETH_ALEN
 },

125 [
BATADV_ATTR_BLA_CRC
] = { .
ty≥
 = 
NLA_U16
 },

126 [
BATADV_ATTR_DAT_CACHE_IP4ADDRESS
] = { .
ty≥
 = 
NLA_U32
 },

127 [
BATADV_ATTR_DAT_CACHE_HWADDRESS
] = { .
Àn
 = 
ETH_ALEN
 },

128 [
BATADV_ATTR_DAT_CACHE_VID
] = { .
ty≥
 = 
NLA_U16
 },

129 [
BATADV_ATTR_MCAST_FLAGS
] = { .
ty≥
 = 
NLA_U32
 },

130 [
BATADV_ATTR_MCAST_FLAGS_PRIV
] = { .
ty≥
 = 
NLA_U32
 },

131 [
BATADV_ATTR_VLANID
] = { .
ty≥
 = 
NLA_U16
 },

132 [
BATADV_ATTR_AGGREGATED_OGMS_ENABLED
] = { .
ty≥
 = 
NLA_U8
 },

133 [
BATADV_ATTR_AP_ISOLATION_ENABLED
] = { .
ty≥
 = 
NLA_U8
 },

134 [
BATADV_ATTR_ISOLATION_MARK
] = { .
ty≥
 = 
NLA_U32
 },

135 [
BATADV_ATTR_ISOLATION_MASK
] = { .
ty≥
 = 
NLA_U32
 },

136 [
BATADV_ATTR_BONDING_ENABLED
] = { .
ty≥
 = 
NLA_U8
 },

137 [
BATADV_ATTR_BRIDGE_LOOP_AVOIDANCE_ENABLED
] = { .
ty≥
 = 
NLA_U8
 },

138 [
BATADV_ATTR_DISTRIBUTED_ARP_TABLE_ENABLED
] = { .
ty≥
 = 
NLA_U8
 },

139 [
BATADV_ATTR_FRAGMENTATION_ENABLED
] = { .
ty≥
 = 
NLA_U8
 },

140 [
BATADV_ATTR_GW_BANDWIDTH_DOWN
] = { .
ty≥
 = 
NLA_U32
 },

141 [
BATADV_ATTR_GW_BANDWIDTH_UP
] = { .
ty≥
 = 
NLA_U32
 },

142 [
BATADV_ATTR_GW_MODE
] = { .
ty≥
 = 
NLA_U8
 },

143 [
BATADV_ATTR_GW_SEL_CLASS
] = { .
ty≥
 = 
NLA_U32
 },

144 [
BATADV_ATTR_HOP_PENALTY
] = { .
ty≥
 = 
NLA_U8
 },

145 [
BATADV_ATTR_LOG_LEVEL
] = { .
ty≥
 = 
NLA_U32
 },

146 [
BATADV_ATTR_MULTICAST_FORCEFLOOD_ENABLED
] = { .
ty≥
 = 
NLA_U8
 },

147 [
BATADV_ATTR_MULTICAST_FANOUT
] = { .
ty≥
 = 
NLA_U32
 },

148 [
BATADV_ATTR_NETWORK_CODING_ENABLED
] = { .
ty≥
 = 
NLA_U8
 },

149 [
BATADV_ATTR_ORIG_INTERVAL
] = { .
ty≥
 = 
NLA_U32
 },

150 [
BATADV_ATTR_ELP_INTERVAL
] = { .
ty≥
 = 
NLA_U32
 },

151 [
BATADV_ATTR_THROUGHPUT_OVERRIDE
] = { .
ty≥
 = 
NLA_U32
 },

161 
	$b©adv_√éök_gë_ifödex
(c⁄° 
∆msghdr
 *
∆h
, 
©åty≥
)

163 
∆©å
 *
©å
 = 
	`∆msg_föd_©å
(
∆h
, 
GENL_HDRLEN
, 
©åty≥
);

165  (
©å
 && 
	`∆a_Àn
◊ârË=(
u32
)Ë? 
	`∆a_gë_u32
(attr) : 0;

166 
	}
}

175 
	$b©adv_√éök_mesh_fûl_≠_isﬁ©i⁄
(
sk_buff
 *
msg
,

176 
b©adv_¥iv
 *
b©_¥iv
)

178 
b©adv_meshif_vœn
 *
vœn
;

179 
u8
 
≠_isﬁ©i⁄
;

181 
vœn
 = 
	`b©adv_meshif_vœn_gë
(
b©_¥iv
, 
BATADV_NO_FLAGS
);

182 i‡(!
vœn
)

185 
≠_isﬁ©i⁄
 = 
	`©omic_ªad
(&
vœn
->ap_isolation);

186 
	`b©adv_meshif_vœn_put
(
vœn
);

188  
	`∆a_put_u8
(
msg
, 
BATADV_ATTR_AP_ISOLATION_ENABLED
,

189 !!
≠_isﬁ©i⁄
);

190 
	}
}

199 
	$b©adv_√éök_£t_mesh_≠_isﬁ©i⁄
(
∆©å
 *
©å
,

200 
b©adv_¥iv
 *
b©_¥iv
)

202 
b©adv_meshif_vœn
 *
vœn
;

204 
vœn
 = 
	`b©adv_meshif_vœn_gë
(
b©_¥iv
, 
BATADV_NO_FLAGS
);

205 i‡(!
vœn
)

206  -
ENOENT
;

208 
	`©omic_£t
(&
vœn
->
≠_isﬁ©i⁄
, !!
	`∆a_gë_u8
(
©å
));

209 
	`b©adv_meshif_vœn_put
(
vœn
);

212 
	}
}

225 
	$b©adv_√éök_mesh_fûl
(
sk_buff
 *
msg
,

226 
b©adv_¥iv
 *
b©_¥iv
,

227 
b©adv_∆_comm™ds
 
cmd
,

228 
u32
 
p‹tid
, u32 
£q
, 
Êags
)

230 
√t_devi˚
 *
mesh_iÁ˚
 = 
b©_¥iv
->mesh_iface;

231 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
 = 
NULL
;

232 
√t_devi˚
 *
h¨d_iÁ˚
;

233 *
hdr
;

235 
hdr
 = 
	`gílmsg_put
(
msg
, 
p‹tid
, 
£q
, &
b©adv_√éök_Ámûy
, 
Êags
, 
cmd
);

236 i‡(!
hdr
)

237  -
ENOBUFS
;

239 i‡(
	`∆a_put_°rög
(
msg
, 
BATADV_ATTR_VERSION
, 
BATADV_SOURCE_VERSION
) ||

240 
	`∆a_put_°rög
(
msg
, 
BATADV_ATTR_ALGO_NAME
,

241 
b©_¥iv
->
Ægo_›s
->
«me
) ||

242 
	`∆a_put_u32
(
msg
, 
BATADV_ATTR_MESH_IFINDEX
, 
mesh_iÁ˚
->
ifödex
) ||

243 
	`∆a_put_°rög
(
msg
, 
BATADV_ATTR_MESH_IFNAME
, 
mesh_iÁ˚
->
«me
) ||

244 
	`∆a_put
(
msg
, 
BATADV_ATTR_MESH_ADDRESS
, 
ETH_ALEN
,

245 
mesh_iÁ˚
->
dev_addr
) ||

246 
	`∆a_put_u8
(
msg
, 
BATADV_ATTR_TT_TTVN
,

247 (
u8
)
	`©omic_ªad
(&
b©_¥iv
->
â
.
vn
)))

248 
∆a_put_Áûuª
;

250 #ifde‡
CONFIG_BATMAN_ADV_BLA


251 i‡(
	`∆a_put_u16
(
msg
, 
BATADV_ATTR_BLA_CRC
,

252 
	`¡ohs
(
b©_¥iv
->
bœ
.
˛aim_de°
.
group
)))

253 
∆a_put_Áûuª
;

256 i‡(
	`b©adv_mˇ°_mesh_öfo_put
(
msg
, 
b©_¥iv
))

257 
∆a_put_Áûuª
;

259 
¥im¨y_if
 = 
	`b©adv_¥im¨y_if_gë_£À˘ed
(
b©_¥iv
);

260 i‡(
¥im¨y_if
 &&Örim¨y_if->
if_°©us
 =
BATADV_IF_ACTIVE
) {

261 
h¨d_iÁ˚
 = 
¥im¨y_if
->
√t_dev
;

263 i‡(
	`∆a_put_u32
(
msg
, 
BATADV_ATTR_HARD_IFINDEX
,

264 
h¨d_iÁ˚
->
ifödex
) ||

265 
	`∆a_put_°rög
(
msg
, 
BATADV_ATTR_HARD_IFNAME
,

266 
h¨d_iÁ˚
->
«me
) ||

267 
	`∆a_put
(
msg
, 
BATADV_ATTR_HARD_ADDRESS
, 
ETH_ALEN
,

268 
h¨d_iÁ˚
->
dev_addr
))

269 
∆a_put_Áûuª
;

272 i‡(
	`∆a_put_u8
(
msg
, 
BATADV_ATTR_AGGREGATED_OGMS_ENABLED
,

273 !!
	`©omic_ªad
(&
b©_¥iv
->
aggªg©ed_ogms
)))

274 
∆a_put_Áûuª
;

276 i‡(
	`b©adv_√éök_mesh_fûl_≠_isﬁ©i⁄
(
msg
, 
b©_¥iv
))

277 
∆a_put_Áûuª
;

279 i‡(
	`∆a_put_u32
(
msg
, 
BATADV_ATTR_ISOLATION_MARK
,

280 
b©_¥iv
->
isﬁ©i⁄_m¨k
))

281 
∆a_put_Áûuª
;

283 i‡(
	`∆a_put_u32
(
msg
, 
BATADV_ATTR_ISOLATION_MASK
,

284 
b©_¥iv
->
isﬁ©i⁄_m¨k_mask
))

285 
∆a_put_Áûuª
;

287 i‡(
	`∆a_put_u8
(
msg
, 
BATADV_ATTR_BONDING_ENABLED
,

288 !!
	`©omic_ªad
(&
b©_¥iv
->
b⁄dög
)))

289 
∆a_put_Áûuª
;

291 #ifde‡
CONFIG_BATMAN_ADV_BLA


292 i‡(
	`∆a_put_u8
(
msg
, 
BATADV_ATTR_BRIDGE_LOOP_AVOIDANCE_ENABLED
,

293 !!
	`©omic_ªad
(&
b©_¥iv
->
bridge_lo›_avoid™˚
)))

294 
∆a_put_Áûuª
;

297 #ifde‡
CONFIG_BATMAN_ADV_DAT


298 i‡(
	`∆a_put_u8
(
msg
, 
BATADV_ATTR_DISTRIBUTED_ARP_TABLE_ENABLED
,

299 !!
	`©omic_ªad
(&
b©_¥iv
->
di°ribuãd_¨p_èbÀ
)))

300 
∆a_put_Áûuª
;

303 i‡(
	`∆a_put_u8
(
msg
, 
BATADV_ATTR_FRAGMENTATION_ENABLED
,

304 !!
	`©omic_ªad
(&
b©_¥iv
->
‰agmíèti⁄
)))

305 
∆a_put_Áûuª
;

307 i‡(
	`∆a_put_u32
(
msg
, 
BATADV_ATTR_GW_BANDWIDTH_DOWN
,

308 
	`©omic_ªad
(&
b©_¥iv
->
gw
.
b™dwidth_down
)))

309 
∆a_put_Áûuª
;

311 i‡(
	`∆a_put_u32
(
msg
, 
BATADV_ATTR_GW_BANDWIDTH_UP
,

312 
	`©omic_ªad
(&
b©_¥iv
->
gw
.
b™dwidth_up
)))

313 
∆a_put_Áûuª
;

315 i‡(
	`∆a_put_u8
(
msg
, 
BATADV_ATTR_GW_MODE
,

316 
	`©omic_ªad
(&
b©_¥iv
->
gw
.
mode
)))

317 
∆a_put_Áûuª
;

319 i‡(
b©_¥iv
->
Ægo_›s
->
gw
.
gë_be°_gw_node
 &&

320 
b©_¥iv
->
Ægo_›s
->
gw
.
is_ñigibÀ
) {

324 i‡(
	`∆a_put_u32
(
msg
, 
BATADV_ATTR_GW_SEL_CLASS
,

325 
	`©omic_ªad
(&
b©_¥iv
->
gw
.
£l_˛ass
)))

326 
∆a_put_Áûuª
;

329 i‡(
	`∆a_put_u8
(
msg
, 
BATADV_ATTR_HOP_PENALTY
,

330 
	`©omic_ªad
(&
b©_¥iv
->
h›_≥«…y
)))

331 
∆a_put_Áûuª
;

333 #ifde‡
CONFIG_BATMAN_ADV_DEBUG


334 i‡(
	`∆a_put_u32
(
msg
, 
BATADV_ATTR_LOG_LEVEL
,

335 
	`©omic_ªad
(&
b©_¥iv
->
log_Àvñ
)))

336 
∆a_put_Áûuª
;

339 #ifde‡
CONFIG_BATMAN_ADV_MCAST


340 i‡(
	`∆a_put_u8
(
msg
, 
BATADV_ATTR_MULTICAST_FORCEFLOOD_ENABLED
,

341 !
	`©omic_ªad
(&
b©_¥iv
->
mu…iˇ°_mode
)))

342 
∆a_put_Áûuª
;

344 i‡(
	`∆a_put_u32
(
msg
, 
BATADV_ATTR_MULTICAST_FANOUT
,

345 
	`©omic_ªad
(&
b©_¥iv
->
mu…iˇ°_Ánout
)))

346 
∆a_put_Áûuª
;

349 #ifde‡
CONFIG_BATMAN_ADV_NC


350 i‡(
	`∆a_put_u8
(
msg
, 
BATADV_ATTR_NETWORK_CODING_ENABLED
,

351 !!
	`©omic_ªad
(&
b©_¥iv
->
√tw‹k_codög
)))

352 
∆a_put_Áûuª
;

355 i‡(
	`∆a_put_u32
(
msg
, 
BATADV_ATTR_ORIG_INTERVAL
,

356 
	`©omic_ªad
(&
b©_¥iv
->
‹ig_öãrvÆ
)))

357 
∆a_put_Áûuª
;

359 
	`b©adv_h¨dif_put
(
¥im¨y_if
);

361 
	`gílmsg_íd
(
msg
, 
hdr
);

364 
∆a_put_Áûuª
:

365 
	`b©adv_h¨dif_put
(
¥im¨y_if
);

367 
	`gílmsg_ˇn˚l
(
msg
, 
hdr
);

368  -
EMSGSIZE
;

369 
	}
}

377 
	$b©adv_√éök_nŸify_mesh
(
b©adv_¥iv
 *
b©_¥iv
)

379 
sk_buff
 *
msg
;

380 
ªt
;

382 
msg
 = 
	`∆msg_√w
(
NLMSG_DEFAULT_SIZE
, 
GFP_KERNEL
);

383 i‡(!
msg
)

384  -
ENOMEM
;

386 
ªt
 = 
	`b©adv_√éök_mesh_fûl
(
msg
, 
b©_¥iv
, 
BATADV_CMD_SET_MESH
,

388 i‡(
ªt
 < 0) {

389 
	`∆msg_‰ì
(
msg
);

390  
ªt
;

393 
	`gílmsg_mu…iˇ°_√äs
(&
b©adv_√éök_Ámûy
,

394 
	`dev_√t
(
b©_¥iv
->
mesh_iÁ˚
), 
msg
, 0,

395 
BATADV_NL_MCGRP_CONFIG
, 
GFP_KERNEL
);

398 
	}
}

407 
	$b©adv_√éök_gë_mesh
(
sk_buff
 *
skb
, 
gíl_öfo
 *
öfo
)

409 
b©adv_¥iv
 *
b©_¥iv
 = 
öfo
->
u£r_±r
[0];

410 
sk_buff
 *
msg
;

411 
ªt
;

413 
msg
 = 
	`∆msg_√w
(
NLMSG_DEFAULT_SIZE
, 
GFP_KERNEL
);

414 i‡(!
msg
)

415  -
ENOMEM
;

417 
ªt
 = 
	`b©adv_√éök_mesh_fûl
(
msg
, 
b©_¥iv
, 
BATADV_CMD_GET_MESH
,

418 
öfo
->
¢d_p‹tid
, info->
¢d_£q
, 0);

419 i‡(
ªt
 < 0) {

420 
	`∆msg_‰ì
(
msg
);

421  
ªt
;

424 
ªt
 = 
	`gílmsg_ª∂y
(
msg
, 
öfo
);

426  
ªt
;

427 
	}
}

436 
	$b©adv_√éök_£t_mesh
(
sk_buff
 *
skb
, 
gíl_öfo
 *
öfo
)

438 
b©adv_¥iv
 *
b©_¥iv
 = 
öfo
->
u£r_±r
[0];

439 
∆©å
 *
©å
;

441 i‡(
öfo
->
©ås
[
BATADV_ATTR_AGGREGATED_OGMS_ENABLED
]) {

442 
©å
 = 
öfo
->
©ås
[
BATADV_ATTR_AGGREGATED_OGMS_ENABLED
];

444 
	`©omic_£t
(&
b©_¥iv
->
aggªg©ed_ogms
, !!
	`∆a_gë_u8
(
©å
));

447 i‡(
öfo
->
©ås
[
BATADV_ATTR_AP_ISOLATION_ENABLED
]) {

448 
©å
 = 
öfo
->
©ås
[
BATADV_ATTR_AP_ISOLATION_ENABLED
];

450 
	`b©adv_√éök_£t_mesh_≠_isﬁ©i⁄
(
©å
, 
b©_¥iv
);

453 i‡(
öfo
->
©ås
[
BATADV_ATTR_ISOLATION_MARK
]) {

454 
©å
 = 
öfo
->
©ås
[
BATADV_ATTR_ISOLATION_MARK
];

456 
b©_¥iv
->
isﬁ©i⁄_m¨k
 = 
	`∆a_gë_u32
(
©å
);

459 i‡(
öfo
->
©ås
[
BATADV_ATTR_ISOLATION_MASK
]) {

460 
©å
 = 
öfo
->
©ås
[
BATADV_ATTR_ISOLATION_MASK
];

462 
b©_¥iv
->
isﬁ©i⁄_m¨k_mask
 = 
	`∆a_gë_u32
(
©å
);

465 i‡(
öfo
->
©ås
[
BATADV_ATTR_BONDING_ENABLED
]) {

466 
©å
 = 
öfo
->
©ås
[
BATADV_ATTR_BONDING_ENABLED
];

468 
	`©omic_£t
(&
b©_¥iv
->
b⁄dög
, !!
	`∆a_gë_u8
(
©å
));

471 #ifde‡
CONFIG_BATMAN_ADV_BLA


472 i‡(
öfo
->
©ås
[
BATADV_ATTR_BRIDGE_LOOP_AVOIDANCE_ENABLED
]) {

473 
©å
 = 
öfo
->
©ås
[
BATADV_ATTR_BRIDGE_LOOP_AVOIDANCE_ENABLED
];

475 
	`©omic_£t
(&
b©_¥iv
->
bridge_lo›_avoid™˚
,

476 !!
	`∆a_gë_u8
(
©å
));

477 
	`b©adv_bœ_°©us_upd©e
(
b©_¥iv
->
mesh_iÁ˚
);

481 #ifde‡
CONFIG_BATMAN_ADV_DAT


482 i‡(
öfo
->
©ås
[
BATADV_ATTR_DISTRIBUTED_ARP_TABLE_ENABLED
]) {

483 
©å
 = 
öfo
->
©ås
[
BATADV_ATTR_DISTRIBUTED_ARP_TABLE_ENABLED
];

485 
	`©omic_£t
(&
b©_¥iv
->
di°ribuãd_¨p_èbÀ
,

486 !!
	`∆a_gë_u8
(
©å
));

487 
	`b©adv_d©_°©us_upd©e
(
b©_¥iv
->
mesh_iÁ˚
);

491 i‡(
öfo
->
©ås
[
BATADV_ATTR_FRAGMENTATION_ENABLED
]) {

492 
©å
 = 
öfo
->
©ås
[
BATADV_ATTR_FRAGMENTATION_ENABLED
];

494 
	`©omic_£t
(&
b©_¥iv
->
‰agmíèti⁄
, !!
	`∆a_gë_u8
(
©å
));

496 
	`π∆_lock
();

497 
	`b©adv_upd©e_mö_mtu
(
b©_¥iv
->
mesh_iÁ˚
);

498 
	`π∆_u∆ock
();

501 i‡(
öfo
->
©ås
[
BATADV_ATTR_GW_BANDWIDTH_DOWN
]) {

502 
©å
 = 
öfo
->
©ås
[
BATADV_ATTR_GW_BANDWIDTH_DOWN
];

504 
	`©omic_£t
(&
b©_¥iv
->
gw
.
b™dwidth_down
, 
	`∆a_gë_u32
(
©å
));

505 
	`b©adv_gw_tvlv_c⁄èöî_upd©e
(
b©_¥iv
);

508 i‡(
öfo
->
©ås
[
BATADV_ATTR_GW_BANDWIDTH_UP
]) {

509 
©å
 = 
öfo
->
©ås
[
BATADV_ATTR_GW_BANDWIDTH_UP
];

511 
	`©omic_£t
(&
b©_¥iv
->
gw
.
b™dwidth_up
, 
	`∆a_gë_u32
(
©å
));

512 
	`b©adv_gw_tvlv_c⁄èöî_upd©e
(
b©_¥iv
);

515 i‡(
öfo
->
©ås
[
BATADV_ATTR_GW_MODE
]) {

516 
u8
 
gw_mode
;

518 
©å
 = 
öfo
->
©ås
[
BATADV_ATTR_GW_MODE
];

519 
gw_mode
 = 
	`∆a_gë_u8
(
©å
);

521 i‡(
gw_mode
 <
BATADV_GW_MODE_SERVER
) {

533 
	`b©adv_gw_ª£À˘
(
b©_¥iv
);

538 
	`b©adv_gw_check_˛õ¡_°›
(
b©_¥iv
);

539 
	`©omic_£t
(&
b©_¥iv
->
gw
.
mode
, 
gw_mode
);

540 
	`b©adv_gw_tvlv_c⁄èöî_upd©e
(
b©_¥iv
);

544 i‡(
öfo
->
©ås
[
BATADV_ATTR_GW_SEL_CLASS
] &&

545 
b©_¥iv
->
Ægo_›s
->
gw
.
gë_be°_gw_node
 &&

546 
b©_¥iv
->
Ægo_›s
->
gw
.
is_ñigibÀ
) {

551 
u32
 
£l_˛ass_max
 = 
b©_¥iv
->
Ægo_›s
->
gw
.sel_class_max;

552 
u32
 
£l_˛ass
;

554 
©å
 = 
öfo
->
©ås
[
BATADV_ATTR_GW_SEL_CLASS
];

555 
£l_˛ass
 = 
	`∆a_gë_u32
(
©å
);

557 i‡(
£l_˛ass
 >1 && sñ_˛as†<
£l_˛ass_max
) {

558 
	`©omic_£t
(&
b©_¥iv
->
gw
.
£l_˛ass
, sel_class);

559 
	`b©adv_gw_ª£À˘
(
b©_¥iv
);

563 i‡(
öfo
->
©ås
[
BATADV_ATTR_HOP_PENALTY
]) {

564 
©å
 = 
öfo
->
©ås
[
BATADV_ATTR_HOP_PENALTY
];

566 
	`©omic_£t
(&
b©_¥iv
->
h›_≥«…y
, 
	`∆a_gë_u8
(
©å
));

569 #ifde‡
CONFIG_BATMAN_ADV_DEBUG


570 i‡(
öfo
->
©ås
[
BATADV_ATTR_LOG_LEVEL
]) {

571 
©å
 = 
öfo
->
©ås
[
BATADV_ATTR_LOG_LEVEL
];

573 
	`©omic_£t
(&
b©_¥iv
->
log_Àvñ
,

574 
	`∆a_gë_u32
(
©å
Ë& 
BATADV_DBG_ALL
);

578 #ifde‡
CONFIG_BATMAN_ADV_MCAST


579 i‡(
öfo
->
©ås
[
BATADV_ATTR_MULTICAST_FORCEFLOOD_ENABLED
]) {

580 
©å
 = 
öfo
->
©ås
[
BATADV_ATTR_MULTICAST_FORCEFLOOD_ENABLED
];

582 
	`©omic_£t
(&
b©_¥iv
->
mu…iˇ°_mode
, !
	`∆a_gë_u8
(
©å
));

585 i‡(
öfo
->
©ås
[
BATADV_ATTR_MULTICAST_FANOUT
]) {

586 
©å
 = 
öfo
->
©ås
[
BATADV_ATTR_MULTICAST_FANOUT
];

588 
	`©omic_£t
(&
b©_¥iv
->
mu…iˇ°_Ánout
, 
	`∆a_gë_u32
(
©å
));

592 #ifde‡
CONFIG_BATMAN_ADV_NC


593 i‡(
öfo
->
©ås
[
BATADV_ATTR_NETWORK_CODING_ENABLED
]) {

594 
©å
 = 
öfo
->
©ås
[
BATADV_ATTR_NETWORK_CODING_ENABLED
];

596 
	`©omic_£t
(&
b©_¥iv
->
√tw‹k_codög
, !!
	`∆a_gë_u8
(
©å
));

597 
	`b©adv_nc_°©us_upd©e
(
b©_¥iv
->
mesh_iÁ˚
);

601 i‡(
öfo
->
©ås
[
BATADV_ATTR_ORIG_INTERVAL
]) {

602 
u32
 
‹ig_öãrvÆ
;

604 
©å
 = 
öfo
->
©ås
[
BATADV_ATTR_ORIG_INTERVAL
];

605 
‹ig_öãrvÆ
 = 
	`∆a_gë_u32
(
©å
);

607 
‹ig_öãrvÆ
 = 
	`mö_t
(
u32
, orig_öãrvÆ, 
INT_MAX
);

608 
‹ig_öãrvÆ
 = 
	`max_t
(
u32
, orig_öãrvÆ, 2 * 
BATADV_JITTER
);

610 
	`©omic_£t
(&
b©_¥iv
->
‹ig_öãrvÆ
, orig_interval);

613 
	`b©adv_√éök_nŸify_mesh
(
b©_¥iv
);

616 
	}
}

626 
	$b©adv_√éök_ç_mëî_put
(
sk_buff
 *
msg
, 
u32
 
cookõ
)

628 i‡(
	`∆a_put_u32
(
msg
, 
BATADV_ATTR_TPMETER_COOKIE
, 
cookõ
))

629  -
ENOBUFS
;

632 
	}
}

645 
	$b©adv_√éök_çmëî_nŸify
(
b©adv_¥iv
 *
b©_¥iv
, c⁄° 
u8
 *
d°
,

646 
u8
 
ªsu…
, 
u32
 
ã°_time
, 
u64
 
tŸÆ_byãs
,

647 
u32
 
cookõ
)

649 
sk_buff
 *
msg
;

650 *
hdr
;

651 
ªt
;

653 
msg
 = 
	`∆msg_√w
(
NLMSG_DEFAULT_SIZE
, 
GFP_KERNEL
);

654 i‡(!
msg
)

655  -
ENOMEM
;

657 
hdr
 = 
	`gílmsg_put
(
msg
, 0, 0, &
b©adv_√éök_Ámûy
, 0,

658 
BATADV_CMD_TP_METER
);

659 i‡(!
hdr
) {

660 
ªt
 = -
ENOBUFS
;

661 
îr_gílmsg
;

664 i‡(
	`∆a_put_u32
(
msg
, 
BATADV_ATTR_TPMETER_COOKIE
, 
cookõ
))

665 
∆a_put_Áûuª
;

667 i‡(
	`∆a_put_u32
(
msg
, 
BATADV_ATTR_TPMETER_TEST_TIME
, 
ã°_time
))

668 
∆a_put_Áûuª
;

670 i‡(
	`∆a_put_u64_64bô
(
msg
, 
BATADV_ATTR_TPMETER_BYTES
, 
tŸÆ_byãs
,

671 
BATADV_ATTR_PAD
))

672 
∆a_put_Áûuª
;

674 i‡(
	`∆a_put_u8
(
msg
, 
BATADV_ATTR_TPMETER_RESULT
, 
ªsu…
))

675 
∆a_put_Áûuª
;

677 i‡(
	`∆a_put
(
msg
, 
BATADV_ATTR_ORIG_ADDRESS
, 
ETH_ALEN
, 
d°
))

678 
∆a_put_Áûuª
;

680 
	`gílmsg_íd
(
msg
, 
hdr
);

682 
	`gílmsg_mu…iˇ°_√äs
(&
b©adv_√éök_Ámûy
,

683 
	`dev_√t
(
b©_¥iv
->
mesh_iÁ˚
), 
msg
, 0,

684 
BATADV_NL_MCGRP_TPMETER
, 
GFP_KERNEL
);

688 
∆a_put_Áûuª
:

689 
	`gílmsg_ˇn˚l
(
msg
, 
hdr
);

690 
ªt
 = -
EMSGSIZE
;

692 
îr_gílmsg
:

693 
	`∆msg_‰ì
(
msg
);

694  
ªt
;

695 
	}
}

705 
	$b©adv_√éök_ç_mëî_°¨t
(
sk_buff
 *
skb
, 
gíl_öfo
 *
öfo
)

707 
b©adv_¥iv
 *
b©_¥iv
 = 
öfo
->
u£r_±r
[0];

708 
sk_buff
 *
msg
 = 
NULL
;

709 
u32
 
ã°_Àngth
;

710 *
msg_hód
;

711 
u32
 
cookõ
;

712 
u8
 *
d°
;

713 
ªt
;

715 i‡(!
öfo
->
©ås
[
BATADV_ATTR_ORIG_ADDRESS
])

716  -
EINVAL
;

718 i‡(!
öfo
->
©ås
[
BATADV_ATTR_TPMETER_TEST_TIME
])

719  -
EINVAL
;

721 
d°
 = 
	`∆a_d©a
(
öfo
->
©ås
[
BATADV_ATTR_ORIG_ADDRESS
]);

723 
ã°_Àngth
 = 
	`∆a_gë_u32
(
öfo
->
©ås
[
BATADV_ATTR_TPMETER_TEST_TIME
]);

725 
msg
 = 
	`∆msg_√w
(
NLMSG_DEFAULT_SIZE
, 
GFP_KERNEL
);

726 i‡(!
msg
) {

727 
ªt
 = -
ENOMEM
;

728 
out
;

731 
msg_hód
 = 
	`gílmsg_put
(
msg
, 
öfo
->
¢d_p‹tid
, info->
¢d_£q
,

732 &
b©adv_√éök_Ámûy
, 0,

733 
BATADV_CMD_TP_METER
);

734 i‡(!
msg_hód
) {

735 
ªt
 = -
ENOBUFS
;

736 
out
;

739 
	`b©adv_ç_°¨t
(
b©_¥iv
, 
d°
, 
ã°_Àngth
, &
cookõ
);

741 
ªt
 = 
	`b©adv_√éök_ç_mëî_put
(
msg
, 
cookõ
);

743 
out
:

744 i‡(
ªt
) {

745 i‡(
msg
)

746 
	`∆msg_‰ì
(
msg
);

747  
ªt
;

750 
	`gílmsg_íd
(
msg
, 
msg_hód
);

751  
	`gílmsg_ª∂y
(
msg
, 
öfo
);

752 
	}
}

762 
	$b©adv_√éök_ç_mëî_ˇn˚l
(
sk_buff
 *
skb
, 
gíl_öfo
 *
öfo
)

764 
b©adv_¥iv
 *
b©_¥iv
 = 
öfo
->
u£r_±r
[0];

765 
u8
 *
d°
;

766 
ªt
 = 0;

768 i‡(!
öfo
->
©ås
[
BATADV_ATTR_ORIG_ADDRESS
])

769  -
EINVAL
;

771 
d°
 = 
	`∆a_d©a
(
öfo
->
©ås
[
BATADV_ATTR_ORIG_ADDRESS
]);

773 
	`b©adv_ç_°›
(
b©_¥iv
, 
d°
, 
BATADV_TP_REASON_CANCEL
);

775  
ªt
;

776 
	}
}

791 
	$b©adv_√éök_h¨dif_fûl
(
sk_buff
 *
msg
,

792 
b©adv_¥iv
 *
b©_¥iv
,

793 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
,

794 
b©adv_∆_comm™ds
 
cmd
,

795 
u32
 
p‹tid
, u32 
£q
, 
Êags
,

796 
√éök_ˇŒback
 *
cb
)

798 
√t_devi˚
 *
√t_dev
 = 
h¨d_iÁ˚
->net_dev;

799 *
hdr
;

801 
hdr
 = 
	`gílmsg_put
(
msg
, 
p‹tid
, 
£q
, &
b©adv_√éök_Ámûy
, 
Êags
, 
cmd
);

802 i‡(!
hdr
)

803  -
ENOBUFS
;

805 i‡(
cb
)

806 
	`gíl_dump_check_c⁄si°ít
(
cb
, 
hdr
);

808 i‡(
	`∆a_put_u32
(
msg
, 
BATADV_ATTR_MESH_IFINDEX
,

809 
b©_¥iv
->
mesh_iÁ˚
->
ifödex
))

810 
∆a_put_Áûuª
;

812 i‡(
	`∆a_put_°rög
(
msg
, 
BATADV_ATTR_MESH_IFNAME
,

813 
b©_¥iv
->
mesh_iÁ˚
->
«me
))

814 
∆a_put_Áûuª
;

816 i‡(
	`∆a_put_u32
(
msg
, 
BATADV_ATTR_HARD_IFINDEX
,

817 
√t_dev
->
ifödex
) ||

818 
	`∆a_put_°rög
(
msg
, 
BATADV_ATTR_HARD_IFNAME
,

819 
√t_dev
->
«me
) ||

820 
	`∆a_put
(
msg
, 
BATADV_ATTR_HARD_ADDRESS
, 
ETH_ALEN
,

821 
√t_dev
->
dev_addr
))

822 
∆a_put_Áûuª
;

824 i‡(
h¨d_iÁ˚
->
if_°©us
 =
BATADV_IF_ACTIVE
) {

825 i‡(
	`∆a_put_Êag
(
msg
, 
BATADV_ATTR_ACTIVE
))

826 
∆a_put_Áûuª
;

829 i‡(
	`∆a_put_u8
(
msg
, 
BATADV_ATTR_HOP_PENALTY
,

830 
	`©omic_ªad
(&
h¨d_iÁ˚
->
h›_≥«…y
)))

831 
∆a_put_Áûuª
;

833 #ifde‡
CONFIG_BATMAN_ADV_BATMAN_V


834 i‡(
	`∆a_put_u32
(
msg
, 
BATADV_ATTR_ELP_INTERVAL
,

835 
	`©omic_ªad
(&
h¨d_iÁ˚
->
b©_v
.
ñp_öãrvÆ
)))

836 
∆a_put_Áûuª
;

838 i‡(
	`∆a_put_u32
(
msg
, 
BATADV_ATTR_THROUGHPUT_OVERRIDE
,

839 
	`©omic_ªad
(&
h¨d_iÁ˚
->
b©_v
.
throughput_ovîride
)))

840 
∆a_put_Áûuª
;

843 
	`gílmsg_íd
(
msg
, 
hdr
);

846 
∆a_put_Áûuª
:

847 
	`gílmsg_ˇn˚l
(
msg
, 
hdr
);

848  -
EMSGSIZE
;

849 
	}
}

858 
	$b©adv_√éök_nŸify_h¨dif
(
b©adv_¥iv
 *
b©_¥iv
,

859 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
)

861 
sk_buff
 *
msg
;

862 
ªt
;

864 
msg
 = 
	`∆msg_√w
(
NLMSG_DEFAULT_SIZE
, 
GFP_KERNEL
);

865 i‡(!
msg
)

866  -
ENOMEM
;

868 
ªt
 = 
	`b©adv_√éök_h¨dif_fûl
(
msg
, 
b©_¥iv
, 
h¨d_iÁ˚
,

869 
BATADV_CMD_SET_HARDIF
, 0, 0, 0, 
NULL
);

870 i‡(
ªt
 < 0) {

871 
	`∆msg_‰ì
(
msg
);

872  
ªt
;

875 
	`gílmsg_mu…iˇ°_√äs
(&
b©adv_√éök_Ámûy
,

876 
	`dev_√t
(
b©_¥iv
->
mesh_iÁ˚
), 
msg
, 0,

877 
BATADV_NL_MCGRP_CONFIG
, 
GFP_KERNEL
);

880 
	}
}

889 
	$b©adv_√éök_cmd_gë_h¨dif
(
sk_buff
 *
skb
,

890 
gíl_öfo
 *
öfo
)

892 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
 = 
öfo
->
u£r_±r
[1];

893 
b©adv_¥iv
 *
b©_¥iv
 = 
öfo
->
u£r_±r
[0];

894 
sk_buff
 *
msg
;

895 
ªt
;

897 
msg
 = 
	`∆msg_√w
(
NLMSG_DEFAULT_SIZE
, 
GFP_KERNEL
);

898 i‡(!
msg
)

899  -
ENOMEM
;

901 
ªt
 = 
	`b©adv_√éök_h¨dif_fûl
(
msg
, 
b©_¥iv
, 
h¨d_iÁ˚
,

902 
BATADV_CMD_GET_HARDIF
,

903 
öfo
->
¢d_p‹tid
, info->
¢d_£q
, 0,

904 
NULL
);

905 i‡(
ªt
 < 0) {

906 
	`∆msg_‰ì
(
msg
);

907  
ªt
;

910 
ªt
 = 
	`gílmsg_ª∂y
(
msg
, 
öfo
);

912  
ªt
;

913 
	}
}

922 
	$b©adv_√éök_£t_h¨dif
(
sk_buff
 *
skb
,

923 
gíl_öfo
 *
öfo
)

925 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
 = 
öfo
->
u£r_±r
[1];

926 
b©adv_¥iv
 *
b©_¥iv
 = 
öfo
->
u£r_±r
[0];

927 
∆©å
 *
©å
;

929 i‡(
öfo
->
©ås
[
BATADV_ATTR_HOP_PENALTY
]) {

930 
©å
 = 
öfo
->
©ås
[
BATADV_ATTR_HOP_PENALTY
];

932 
	`©omic_£t
(&
h¨d_iÁ˚
->
h›_≥«…y
, 
	`∆a_gë_u8
(
©å
));

935 #ifde‡
CONFIG_BATMAN_ADV_BATMAN_V


937 i‡(
öfo
->
©ås
[
BATADV_ATTR_ELP_INTERVAL
]) {

938 
©å
 = 
öfo
->
©ås
[
BATADV_ATTR_ELP_INTERVAL
];

940 
	`©omic_£t
(&
h¨d_iÁ˚
->
b©_v
.
ñp_öãrvÆ
, 
	`∆a_gë_u32
(
©å
));

943 i‡(
öfo
->
©ås
[
BATADV_ATTR_THROUGHPUT_OVERRIDE
]) {

944 
©å
 = 
öfo
->
©ås
[
BATADV_ATTR_THROUGHPUT_OVERRIDE
];

946 
	`©omic_£t
(&
h¨d_iÁ˚
->
b©_v
.
throughput_ovîride
,

947 
	`∆a_gë_u32
(
©å
));

951 
	`b©adv_√éök_nŸify_h¨dif
(
b©_¥iv
, 
h¨d_iÁ˚
);

954 
	}
}

964 
	$b©adv_√éök_dump_h¨dif
(
sk_buff
 *
msg
, 
√éök_ˇŒback
 *
cb
)

966 
√t_devi˚
 *
mesh_iÁ˚
;

967 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
;

968 
b©adv_¥iv
 *
b©_¥iv
;

969 
p‹tid
 = 
	`NETLINK_CB
(
cb
->
skb
).portid;

970 
skù
 = 
cb
->
¨gs
[0];

971 
i
 = 0;

973 
mesh_iÁ˚
 = 
	`b©adv_√éök_gë_meshif
(
cb
);

974 i‡(
	`IS_ERR
(
mesh_iÁ˚
))

975  
	`PTR_ERR
(
mesh_iÁ˚
);

977 
b©_¥iv
 = 
	`√tdev_¥iv
(
mesh_iÁ˚
);

979 
	`π∆_lock
();

980 
cb
->
£q
 = 
b©adv_h¨dif_gíî©i⁄
 << 1 | 1;

982 
	`li°_f‹_óch_íåy
(
h¨d_iÁ˚
, &
b©adv_h¨dif_li°
, 
li°
) {

983 i‡(
h¨d_iÁ˚
->
mesh_iÁ˚
 != mesh_iface)

986 i‡(
i
++ < 
skù
)

989 i‡(
	`b©adv_√éök_h¨dif_fûl
(
msg
, 
b©_¥iv
, 
h¨d_iÁ˚
,

990 
BATADV_CMD_GET_HARDIF
,

991 
p‹tid
, 
cb
->
∆h
->
∆msg_£q
,

992 
NLM_F_MULTI
, 
cb
)) {

993 
i
--;

998 
	`π∆_u∆ock
();

1000 
	`dev_put
(
mesh_iÁ˚
);

1002 
cb
->
¨gs
[0] = 
i
;

1004  
msg
->
Àn
;

1005 
	}
}

1019 
	$b©adv_√éök_vœn_fûl
(
sk_buff
 *
msg
,

1020 
b©adv_¥iv
 *
b©_¥iv
,

1021 
b©adv_meshif_vœn
 *
vœn
,

1022 
b©adv_∆_comm™ds
 
cmd
,

1023 
u32
 
p‹tid
, u32 
£q
, 
Êags
)

1025 *
hdr
;

1027 
hdr
 = 
	`gílmsg_put
(
msg
, 
p‹tid
, 
£q
, &
b©adv_√éök_Ámûy
, 
Êags
, 
cmd
);

1028 i‡(!
hdr
)

1029  -
ENOBUFS
;

1031 i‡(
	`∆a_put_u32
(
msg
, 
BATADV_ATTR_MESH_IFINDEX
,

1032 
b©_¥iv
->
mesh_iÁ˚
->
ifödex
))

1033 
∆a_put_Áûuª
;

1035 i‡(
	`∆a_put_°rög
(
msg
, 
BATADV_ATTR_MESH_IFNAME
,

1036 
b©_¥iv
->
mesh_iÁ˚
->
«me
))

1037 
∆a_put_Áûuª
;

1039 i‡(
	`∆a_put_u32
(
msg
, 
BATADV_ATTR_VLANID
, 
vœn
->
vid
 & 
VLAN_VID_MASK
))

1040 
∆a_put_Áûuª
;

1042 i‡(
	`∆a_put_u8
(
msg
, 
BATADV_ATTR_AP_ISOLATION_ENABLED
,

1043 !!
	`©omic_ªad
(&
vœn
->
≠_isﬁ©i⁄
)))

1044 
∆a_put_Áûuª
;

1046 
	`gílmsg_íd
(
msg
, 
hdr
);

1049 
∆a_put_Áûuª
:

1050 
	`gílmsg_ˇn˚l
(
msg
, 
hdr
);

1051  -
EMSGSIZE
;

1052 
	}
}

1061 
	$b©adv_√éök_nŸify_vœn
(
b©adv_¥iv
 *
b©_¥iv
,

1062 
b©adv_meshif_vœn
 *
vœn
)

1064 
sk_buff
 *
msg
;

1065 
ªt
;

1067 
msg
 = 
	`∆msg_√w
(
NLMSG_DEFAULT_SIZE
, 
GFP_KERNEL
);

1068 i‡(!
msg
)

1069  -
ENOMEM
;

1071 
ªt
 = 
	`b©adv_√éök_vœn_fûl
(
msg
, 
b©_¥iv
, 
vœn
,

1072 
BATADV_CMD_SET_VLAN
, 0, 0, 0);

1073 i‡(
ªt
 < 0) {

1074 
	`∆msg_‰ì
(
msg
);

1075  
ªt
;

1078 
	`gílmsg_mu…iˇ°_√äs
(&
b©adv_√éök_Ámûy
,

1079 
	`dev_√t
(
b©_¥iv
->
mesh_iÁ˚
), 
msg
, 0,

1080 
BATADV_NL_MCGRP_CONFIG
, 
GFP_KERNEL
);

1083 
	}
}

1092 
	$b©adv_√éök_gë_vœn
(
sk_buff
 *
skb
, 
gíl_öfo
 *
öfo
)

1094 
b©adv_meshif_vœn
 *
vœn
 = 
öfo
->
u£r_±r
[1];

1095 
b©adv_¥iv
 *
b©_¥iv
 = 
öfo
->
u£r_±r
[0];

1096 
sk_buff
 *
msg
;

1097 
ªt
;

1099 
msg
 = 
	`∆msg_√w
(
NLMSG_DEFAULT_SIZE
, 
GFP_KERNEL
);

1100 i‡(!
msg
)

1101  -
ENOMEM
;

1103 
ªt
 = 
	`b©adv_√éök_vœn_fûl
(
msg
, 
b©_¥iv
, 
vœn
, 
BATADV_CMD_GET_VLAN
,

1104 
öfo
->
¢d_p‹tid
, info->
¢d_£q
, 0);

1105 i‡(
ªt
 < 0) {

1106 
	`∆msg_‰ì
(
msg
);

1107  
ªt
;

1110 
ªt
 = 
	`gílmsg_ª∂y
(
msg
, 
öfo
);

1112  
ªt
;

1113 
	}
}

1122 
	$b©adv_√éök_£t_vœn
(
sk_buff
 *
skb
, 
gíl_öfo
 *
öfo
)

1124 
b©adv_meshif_vœn
 *
vœn
 = 
öfo
->
u£r_±r
[1];

1125 
b©adv_¥iv
 *
b©_¥iv
 = 
öfo
->
u£r_±r
[0];

1126 
∆©å
 *
©å
;

1128 i‡(
öfo
->
©ås
[
BATADV_ATTR_AP_ISOLATION_ENABLED
]) {

1129 
©å
 = 
öfo
->
©ås
[
BATADV_ATTR_AP_ISOLATION_ENABLED
];

1131 
	`©omic_£t
(&
vœn
->
≠_isﬁ©i⁄
, !!
	`∆a_gë_u8
(
©å
));

1134 
	`b©adv_√éök_nŸify_vœn
(
b©_¥iv
, 
vœn
);

1137 
	}
}

1147 
√t_devi˚
 *

1148 
	$b©adv_√éök_gë_meshif_‰om_ifödex
(
√t
 *√t, 
ifödex
)

1150 
√t_devi˚
 *
mesh_iÁ˚
;

1152 
mesh_iÁ˚
 = 
	`dev_gë_by_ödex
(
√t
, 
ifödex
);

1153 i‡(!
mesh_iÁ˚
)

1154  
	`ERR_PTR
(-
ENODEV
);

1156 i‡(!
	`b©adv_meshif_is_vÆid
(
mesh_iÁ˚
))

1157 
îr_put_meshif
;

1159  
mesh_iÁ˚
;

1161 
îr_put_meshif
:

1162 
	`dev_put
(
mesh_iÁ˚
);

1164  
	`ERR_PTR
(-
EINVAL
);

1165 
	}
}

1175 
√t_devi˚
 *

1176 
	$b©adv_√éök_gë_meshif_‰om_öfo
(
√t
 *√t, 
gíl_öfo
 *
öfo
)

1178 
ifödex
;

1180 i‡(!
öfo
->
©ås
[
BATADV_ATTR_MESH_IFINDEX
])

1181  
	`ERR_PTR
(-
EINVAL
);

1183 
ifödex
 = 
	`∆a_gë_u32
(
öfo
->
©ås
[
BATADV_ATTR_MESH_IFINDEX
]);

1185  
	`b©adv_√éök_gë_meshif_‰om_ifödex
(
√t
, 
ifödex
);

1186 
	}
}

1195 
√t_devi˚
 *
	$b©adv_√éök_gë_meshif
(
√éök_ˇŒback
 *
cb
)

1197 
ifödex
 = 
	`b©adv_√éök_gë_ifödex
(
cb
->
∆h
,

1198 
BATADV_ATTR_MESH_IFINDEX
);

1199 i‡(!
ifödex
)

1200  
	`ERR_PTR
(-
ENONET
);

1202  
	`b©adv_√éök_gë_meshif_‰om_ifödex
(
	`sock_√t
(
cb
->
skb
->
sk
),

1203 
ifödex
);

1204 
	}
}

1215 
b©adv_h¨d_iÁ˚
 *

1216 
	$b©adv_√éök_gë_h¨dif_‰om_ifödex
(
b©adv_¥iv
 *
b©_¥iv
,

1217 
√t
 *√t, 
ifödex
)

1219 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
;

1220 
√t_devi˚
 *
h¨d_dev
;

1222 
h¨d_dev
 = 
	`dev_gë_by_ödex
(
√t
, 
ifödex
);

1223 i‡(!
h¨d_dev
)

1224  
	`ERR_PTR
(-
ENODEV
);

1226 
h¨d_iÁ˚
 = 
	`b©adv_h¨dif_gë_by_√tdev
(
h¨d_dev
);

1227 i‡(!
h¨d_iÁ˚
)

1228 
îr_put_h¨ddev
;

1230 i‡(
h¨d_iÁ˚
->
mesh_iÁ˚
 !
b©_¥iv
->mesh_iface)

1231 
îr_put_h¨dif
;

1234 
	`dev_put
(
h¨d_dev
);

1236  
h¨d_iÁ˚
;

1238 
îr_put_h¨dif
:

1239 
	`b©adv_h¨dif_put
(
h¨d_iÁ˚
);

1240 
îr_put_h¨ddev
:

1241 
	`dev_put
(
h¨d_dev
);

1243  
	`ERR_PTR
(-
EINVAL
);

1244 
	}
}

1255 
b©adv_h¨d_iÁ˚
 *

1256 
	$b©adv_√éök_gë_h¨dif_‰om_öfo
(
b©adv_¥iv
 *
b©_¥iv
,

1257 
√t
 *√t, 
gíl_öfo
 *
öfo
)

1259 
ifödex
;

1261 i‡(!
öfo
->
©ås
[
BATADV_ATTR_HARD_IFINDEX
])

1262  
	`ERR_PTR
(-
EINVAL
);

1264 
ifödex
 = 
	`∆a_gë_u32
(
öfo
->
©ås
[
BATADV_ATTR_HARD_IFINDEX
]);

1266  
	`b©adv_√éök_gë_h¨dif_‰om_ifödex
(
b©_¥iv
, 
√t
, 
ifödex
);

1267 
	}
}

1277 
b©adv_h¨d_iÁ˚
 *

1278 
	$b©adv_√éök_gë_h¨dif
(
b©adv_¥iv
 *
b©_¥iv
,

1279 
√éök_ˇŒback
 *
cb
)

1281 
ifödex
 = 
	`b©adv_√éök_gë_ifödex
(
cb
->
∆h
,

1282 
BATADV_ATTR_HARD_IFINDEX
);

1283 i‡(!
ifödex
)

1284  
	`ERR_PTR
(-
ENONET
);

1286  
	`b©adv_√éök_gë_h¨dif_‰om_ifödex
(
b©_¥iv
,

1287 
	`sock_√t
(
cb
->
skb
->
sk
),

1288 
ifödex
);

1289 
	}
}

1300 
b©adv_meshif_vœn
 *

1301 
	$b©adv_gë_vœn_‰om_öfo
(
b©adv_¥iv
 *
b©_¥iv
, 
√t
 *net,

1302 
gíl_öfo
 *
öfo
)

1304 
b©adv_meshif_vœn
 *
vœn
;

1305 
u16
 
vid
;

1307 i‡(!
öfo
->
©ås
[
BATADV_ATTR_VLANID
])

1308  
	`ERR_PTR
(-
EINVAL
);

1310 
vid
 = 
	`∆a_gë_u16
(
öfo
->
©ås
[
BATADV_ATTR_VLANID
]);

1312 
vœn
 = 
	`b©adv_meshif_vœn_gë
(
b©_¥iv
, 
vid
 | 
BATADV_VLAN_HAS_TAG
);

1313 i‡(!
vœn
)

1314  
	`ERR_PTR
(-
ENOENT
);

1316  
vœn
;

1317 
	}
}

1327 
	$b©adv_¥e_doô
(c⁄° 
gíl_•lô_›s
 *
›s
,

1328 
sk_buff
 *
skb
,

1329 
gíl_öfo
 *
öfo
)

1331 
√t
 *√à
	`gíl_öfo_√t
(
öfo
);

1332 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
;

1333 
b©adv_¥iv
 *
b©_¥iv
 = 
NULL
;

1334 
b©adv_meshif_vœn
 *
vœn
;

1335 
√t_devi˚
 *
mesh_iÁ˚
;

1336 
u8
 
u£r_±r1_Êags
;

1337 
u8
 
mesh_dï_Êags
;

1338 
ªt
;

1340 
u£r_±r1_Êags
 = 
BATADV_FLAG_NEED_HARDIF
 | 
BATADV_FLAG_NEED_VLAN
;

1341 i‡(
	`WARN_ON
(
	`hweight8
(
›s
->
öã∫Æ_Êags
 & 
u£r_±r1_Êags
) > 1))

1342  -
EINVAL
;

1344 
mesh_dï_Êags
 = 
BATADV_FLAG_NEED_HARDIF
 | 
BATADV_FLAG_NEED_VLAN
;

1345 i‡(
	`WARN_ON
((
›s
->
öã∫Æ_Êags
 & 
mesh_dï_Êags
) &&

1346 (~
›s
->
öã∫Æ_Êags
 & 
BATADV_FLAG_NEED_MESH
)))

1347  -
EINVAL
;

1349 i‡(
›s
->
öã∫Æ_Êags
 & 
BATADV_FLAG_NEED_MESH
) {

1350 
mesh_iÁ˚
 = 
	`b©adv_√éök_gë_meshif_‰om_öfo
(
√t
, 
öfo
);

1351 i‡(
	`IS_ERR
(
mesh_iÁ˚
))

1352  
	`PTR_ERR
(
mesh_iÁ˚
);

1354 
b©_¥iv
 = 
	`√tdev_¥iv
(
mesh_iÁ˚
);

1355 
öfo
->
u£r_±r
[0] = 
b©_¥iv
;

1358 i‡(
›s
->
öã∫Æ_Êags
 & 
BATADV_FLAG_NEED_HARDIF
) {

1359 
h¨d_iÁ˚
 = 
	`b©adv_√éök_gë_h¨dif_‰om_öfo
(
b©_¥iv
, 
√t
,

1360 
öfo
);

1361 i‡(
	`IS_ERR
(
h¨d_iÁ˚
)) {

1362 
ªt
 = 
	`PTR_ERR
(
h¨d_iÁ˚
);

1363 
îr_put_meshif
;

1366 
öfo
->
u£r_±r
[1] = 
h¨d_iÁ˚
;

1369 i‡(
›s
->
öã∫Æ_Êags
 & 
BATADV_FLAG_NEED_VLAN
) {

1370 
vœn
 = 
	`b©adv_gë_vœn_‰om_öfo
(
b©_¥iv
, 
√t
, 
öfo
);

1371 i‡(
	`IS_ERR
(
vœn
)) {

1372 
ªt
 = 
	`PTR_ERR
(
vœn
);

1373 
îr_put_meshif
;

1376 
öfo
->
u£r_±r
[1] = 
vœn
;

1381 
îr_put_meshif
:

1382 i‡(
b©_¥iv
)

1383 
	`dev_put
(
b©_¥iv
->
mesh_iÁ˚
);

1385  
ªt
;

1386 
	}
}

1394 
	$b©adv_po°_doô
(c⁄° 
gíl_•lô_›s
 *
›s
,

1395 
sk_buff
 *
skb
,

1396 
gíl_öfo
 *
öfo
)

1398 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
;

1399 
b©adv_meshif_vœn
 *
vœn
;

1400 
b©adv_¥iv
 *
b©_¥iv
;

1402 i‡(
›s
->
öã∫Æ_Êags
 & 
BATADV_FLAG_NEED_HARDIF
 &&

1403 
öfo
->
u£r_±r
[1]) {

1404 
h¨d_iÁ˚
 = 
öfo
->
u£r_±r
[1];

1406 
	`b©adv_h¨dif_put
(
h¨d_iÁ˚
);

1409 i‡(
›s
->
öã∫Æ_Êags
 & 
BATADV_FLAG_NEED_VLAN
 && 
öfo
->
u£r_±r
[1]) {

1410 
vœn
 = 
öfo
->
u£r_±r
[1];

1411 
	`b©adv_meshif_vœn_put
(
vœn
);

1414 i‡(
›s
->
öã∫Æ_Êags
 & 
BATADV_FLAG_NEED_MESH
 && 
öfo
->
u£r_±r
[0]) {

1415 
b©_¥iv
 = 
öfo
->
u£r_±r
[0];

1416 
	`dev_put
(
b©_¥iv
->
mesh_iÁ˚
);

1418 
	}
}

1420 c⁄° 
gíl_smÆl_›s
 
	gb©adv_√éök_›s
[] = {

1422 .
cmd
 = 
BATADV_CMD_GET_MESH
,

1423 .
	gvÆid©e
 = 
GENL_DONT_VALIDATE_STRICT
 | 
GENL_DONT_VALIDATE_DUMP
,

1425 .
	gdoô
 = 
b©adv_√éök_gë_mesh
,

1426 .
	göã∫Æ_Êags
 = 
BATADV_FLAG_NEED_MESH
,

1429 .
	gcmd
 = 
BATADV_CMD_TP_METER
,

1430 .
	gvÆid©e
 = 
GENL_DONT_VALIDATE_STRICT
 | 
GENL_DONT_VALIDATE_DUMP
,

1431 .
	gÊags
 = 
GENL_UNS_ADMIN_PERM
,

1432 .
	gdoô
 = 
b©adv_√éök_ç_mëî_°¨t
,

1433 .
	göã∫Æ_Êags
 = 
BATADV_FLAG_NEED_MESH
,

1436 .
	gcmd
 = 
BATADV_CMD_TP_METER_CANCEL
,

1437 .
	gvÆid©e
 = 
GENL_DONT_VALIDATE_STRICT
 | 
GENL_DONT_VALIDATE_DUMP
,

1438 .
	gÊags
 = 
GENL_UNS_ADMIN_PERM
,

1439 .
	gdoô
 = 
b©adv_√éök_ç_mëî_ˇn˚l
,

1440 .
	göã∫Æ_Êags
 = 
BATADV_FLAG_NEED_MESH
,

1443 .
	gcmd
 = 
BATADV_CMD_GET_ROUTING_ALGOS
,

1444 .
	gvÆid©e
 = 
GENL_DONT_VALIDATE_STRICT
 | 
GENL_DONT_VALIDATE_DUMP
,

1445 .
	gÊags
 = 
GENL_UNS_ADMIN_PERM
,

1446 .
	gdumpô
 = 
b©adv_Ægo_dump
,

1449 .
	gcmd
 = 
BATADV_CMD_GET_HARDIF
,

1450 .
	gvÆid©e
 = 
GENL_DONT_VALIDATE_STRICT
 | 
GENL_DONT_VALIDATE_DUMP
,

1452 .
	gdumpô
 = 
b©adv_√éök_dump_h¨dif
,

1453 .
	gdoô
 = 
b©adv_√éök_cmd_gë_h¨dif
,

1454 .
	göã∫Æ_Êags
 = 
BATADV_FLAG_NEED_MESH
 |

1455 
BATADV_FLAG_NEED_HARDIF
,

1458 .
	gcmd
 = 
BATADV_CMD_GET_TRANSTABLE_LOCAL
,

1459 .
	gvÆid©e
 = 
GENL_DONT_VALIDATE_STRICT
 | 
GENL_DONT_VALIDATE_DUMP
,

1460 .
	gÊags
 = 
GENL_UNS_ADMIN_PERM
,

1461 .
	gdumpô
 = 
b©adv_â_loˇl_dump
,

1464 .
	gcmd
 = 
BATADV_CMD_GET_TRANSTABLE_GLOBAL
,

1465 .
	gvÆid©e
 = 
GENL_DONT_VALIDATE_STRICT
 | 
GENL_DONT_VALIDATE_DUMP
,

1466 .
	gÊags
 = 
GENL_UNS_ADMIN_PERM
,

1467 .
	gdumpô
 = 
b©adv_â_globÆ_dump
,

1470 .
	gcmd
 = 
BATADV_CMD_GET_ORIGINATORS
,

1471 .
	gvÆid©e
 = 
GENL_DONT_VALIDATE_STRICT
 | 
GENL_DONT_VALIDATE_DUMP
,

1472 .
	gÊags
 = 
GENL_UNS_ADMIN_PERM
,

1473 .
	gdumpô
 = 
b©adv_‹ig_dump
,

1476 .
	gcmd
 = 
BATADV_CMD_GET_NEIGHBORS
,

1477 .
	gvÆid©e
 = 
GENL_DONT_VALIDATE_STRICT
 | 
GENL_DONT_VALIDATE_DUMP
,

1478 .
	gÊags
 = 
GENL_UNS_ADMIN_PERM
,

1479 .
	gdumpô
 = 
b©adv_h¨dif_√igh_dump
,

1482 .
	gcmd
 = 
BATADV_CMD_GET_GATEWAYS
,

1483 .
	gvÆid©e
 = 
GENL_DONT_VALIDATE_STRICT
 | 
GENL_DONT_VALIDATE_DUMP
,

1484 .
	gÊags
 = 
GENL_UNS_ADMIN_PERM
,

1485 .
	gdumpô
 = 
b©adv_gw_dump
,

1488 .
	gcmd
 = 
BATADV_CMD_GET_BLA_CLAIM
,

1489 .
	gvÆid©e
 = 
GENL_DONT_VALIDATE_STRICT
 | 
GENL_DONT_VALIDATE_DUMP
,

1490 .
	gÊags
 = 
GENL_UNS_ADMIN_PERM
,

1491 .
	gdumpô
 = 
b©adv_bœ_˛aim_dump
,

1494 .
	gcmd
 = 
BATADV_CMD_GET_BLA_BACKBONE
,

1495 .
	gvÆid©e
 = 
GENL_DONT_VALIDATE_STRICT
 | 
GENL_DONT_VALIDATE_DUMP
,

1496 .
	gÊags
 = 
GENL_UNS_ADMIN_PERM
,

1497 .
	gdumpô
 = 
b©adv_bœ_backb⁄e_dump
,

1500 .
	gcmd
 = 
BATADV_CMD_GET_DAT_CACHE
,

1501 .
	gvÆid©e
 = 
GENL_DONT_VALIDATE_STRICT
 | 
GENL_DONT_VALIDATE_DUMP
,

1502 .
	gÊags
 = 
GENL_UNS_ADMIN_PERM
,

1503 .
	gdumpô
 = 
b©adv_d©_ˇche_dump
,

1506 .
	gcmd
 = 
BATADV_CMD_GET_MCAST_FLAGS
,

1507 .
	gvÆid©e
 = 
GENL_DONT_VALIDATE_STRICT
 | 
GENL_DONT_VALIDATE_DUMP
,

1508 .
	gÊags
 = 
GENL_UNS_ADMIN_PERM
,

1509 .
	gdumpô
 = 
b©adv_mˇ°_Êags_dump
,

1512 .
	gcmd
 = 
BATADV_CMD_SET_MESH
,

1513 .
	gvÆid©e
 = 
GENL_DONT_VALIDATE_STRICT
 | 
GENL_DONT_VALIDATE_DUMP
,

1514 .
	gÊags
 = 
GENL_UNS_ADMIN_PERM
,

1515 .
	gdoô
 = 
b©adv_√éök_£t_mesh
,

1516 .
	göã∫Æ_Êags
 = 
BATADV_FLAG_NEED_MESH
,

1519 .
	gcmd
 = 
BATADV_CMD_SET_HARDIF
,

1520 .
	gvÆid©e
 = 
GENL_DONT_VALIDATE_STRICT
 | 
GENL_DONT_VALIDATE_DUMP
,

1521 .
	gÊags
 = 
GENL_UNS_ADMIN_PERM
,

1522 .
	gdoô
 = 
b©adv_√éök_£t_h¨dif
,

1523 .
	göã∫Æ_Êags
 = 
BATADV_FLAG_NEED_MESH
 |

1524 
BATADV_FLAG_NEED_HARDIF
,

1527 .
	gcmd
 = 
BATADV_CMD_GET_VLAN
,

1528 .
	gvÆid©e
 = 
GENL_DONT_VALIDATE_STRICT
 | 
GENL_DONT_VALIDATE_DUMP
,

1530 .
	gdoô
 = 
b©adv_√éök_gë_vœn
,

1531 .
	göã∫Æ_Êags
 = 
BATADV_FLAG_NEED_MESH
 |

1532 
BATADV_FLAG_NEED_VLAN
,

1535 .
	gcmd
 = 
BATADV_CMD_SET_VLAN
,

1536 .
	gvÆid©e
 = 
GENL_DONT_VALIDATE_STRICT
 | 
GENL_DONT_VALIDATE_DUMP
,

1537 .
	gÊags
 = 
GENL_UNS_ADMIN_PERM
,

1538 .
	gdoô
 = 
b©adv_√éök_£t_vœn
,

1539 .
	göã∫Æ_Êags
 = 
BATADV_FLAG_NEED_MESH
 |

1540 
BATADV_FLAG_NEED_VLAN
,

1544 
gíl_Ámûy
 
b©adv_√éök_Ámûy
 
	g__ro_a·î_öô
 = {

1545 .
hdrsize
 = 0,

1546 .
	g«me
 = 
BATADV_NL_NAME
,

1547 .
	gvîsi⁄
 = 1,

1548 .
	gmax©å
 = 
BATADV_ATTR_MAX
,

1549 .
	gpﬁicy
 = 
b©adv_√éök_pﬁicy
,

1550 .
	g√äsok
 = 
åue
,

1551 .
	g¥e_doô
 = 
b©adv_¥e_doô
,

1552 .
	gpo°_doô
 = 
b©adv_po°_doô
,

1553 .
	gmoduÀ
 = 
THIS_MODULE
,

1554 .
	gsmÆl_›s
 = 
b©adv_√éök_›s
,

1555 .
	gn_smÆl_›s
 = 
ARRAY_SIZE
(
b©adv_√éök_›s
),

1556 #i‡
LINUX_VERSION_IS_GEQ
(6, 1, 0)

1557 .
	gªsv_°¨t_›
 = 
BATADV_CMD_SET_VLAN
 + 1,

1559 .
	gmcgΩs
 = 
b©adv_√éök_mcgΩs
,

1560 .
	gn_mcgΩs
 = 
ARRAY_SIZE
(
b©adv_√éök_mcgΩs
),

1566 
__öô
 
	$b©adv_√éök_ªgi°î
()

1568 
ªt
;

1570 
ªt
 = 
	`gíl_ªgi°î_Ámûy
(&
b©adv_√éök_Ámûy
);

1571 i‡(
ªt
)

1572 
	`¥_w¨n
("unableÅoÑegisterÇetlink family\n");

1573 
	}
}

1578 
	$b©adv_√éök_uƒegi°î
()

1580 
	`gíl_uƒegi°î_Ámûy
(&
b©adv_√éök_Ámûy
);

1581 
	}
}

	@net/batman-adv/netlink.h

7 #i‚de‡
_NET_BATMAN_ADV_NETLINK_H_


8 
	#_NET_BATMAN_ADV_NETLINK_H_


	)

10 
	~"maö.h
"

12 
	~<löux/√éök.h
>

13 
	~<löux/ty≥s.h
>

14 
	~<√t/gíëlök.h
>

16 
b©adv_√éök_ªgi°î
();

17 
b©adv_√éök_uƒegi°î
();

18 
√t_devi˚
 *
b©adv_√éök_gë_meshif
(
√éök_ˇŒback
 *
cb
);

19 
b©adv_h¨d_iÁ˚
 *

20 
b©adv_√éök_gë_h¨dif
(
b©adv_¥iv
 *
b©_¥iv
,

21 
√éök_ˇŒback
 *
cb
);

23 
b©adv_√éök_çmëî_nŸify
(
b©adv_¥iv
 *
b©_¥iv
, c⁄° 
u8
 *
d°
,

24 
u8
 
ªsu…
, 
u32
 
ã°_time
, 
u64
 
tŸÆ_byãs
,

25 
u32
 
cookõ
);

27 
gíl_Ámûy
 
b©adv_√éök_Ámûy
;

	@net/batman-adv/network-coding.c

7 
	~"√tw‹k-codög.h
"

8 
	~"maö.h
"

10 
	~<löux/©omic.h
>

11 
	~<löux/bô›s.h
>

12 
	~<löux/byã‹dî/gíîic.h
>

13 
	~<löux/compûî.h
>

14 
	~<löux/c⁄èöî_of.h
>

15 
	~<löux/î∫o.h
>

16 
	~<löux/ëhîdevi˚.h
>

17 
	~<löux/gÂ.h
>

18 
	~<löux/if_ëhî.h
>

19 
	~<löux/if_∑ckë.h
>

20 
	~<löux/öô.h
>

21 
	~<löux/jhash.h
>

22 
	~<löux/jiffõs.h
>

23 
	~<löux/kªf.h
>

24 
	~<löux/li°.h
>

25 
	~<löux/lockdï.h
>

26 
	~<löux/√t.h
>

27 
	~<löux/√tdevi˚.h
>

28 
	~<löux/¥ötk.h
>

29 
	~<löux/øndom.h
>

30 
	~<löux/rculi°.h
>

31 
	~<löux/rcupd©e.h
>

32 
	~<löux/skbuff.h
>

33 
	~<löux/¶ab.h
>

34 
	~<löux/•ölock.h
>

35 
	~<löux/°ddef.h
>

36 
	~<löux/°rög.h
>

37 
	~<löux/w‹kqueue.h
>

38 
	~<u≠i/löux/b©adv_∑ckë.h
>

40 
	~"hash.h
"

41 
	~"log.h
"

42 
	~"‹igö©‹.h
"

43 
	~"routög.h
"

44 
	~"£nd.h
"

45 
	~"tvlv.h
"

47 
lock_˛ass_key
 
	gb©adv_nc_codög_hash_lock_˛ass_key
;

48 
lock_˛ass_key
 
	gb©adv_nc_decodög_hash_lock_˛ass_key
;

50 
b©adv_nc_w‹kî
(
w‹k_°ru˘
 *
w‹k
);

51 
b©adv_nc_ªcv_coded_∑ckë
(
sk_buff
 *
skb
,

52 
b©adv_h¨d_iÁ˚
 *
ªcv_if
);

59 
__öô
 
	$b©adv_nc_öô
()

62  
	`b©adv_ªcv_h™dÀr_ªgi°î
(
BATADV_CODED
,

63 
b©adv_nc_ªcv_coded_∑ckë
);

64 
	}
}

70 
	$b©adv_nc_°¨t_timî
(
b©adv_¥iv
 *
b©_¥iv
)

72 
	`queue_dñayed_w‹k
(
b©adv_evít_w‹kqueue
, &
b©_¥iv
->
nc
.
w‹k
,

73 
	`m£cs_to_jiffõs
(10));

74 
	}
}

81 
	$b©adv_nc_tvlv_c⁄èöî_upd©e
(
b©adv_¥iv
 *
b©_¥iv
)

83 
nc_mode
;

85 
nc_mode
 = 
	`©omic_ªad
(&
b©_¥iv
->
√tw‹k_codög
);

87 
nc_mode
) {

89 
	`b©adv_tvlv_c⁄èöî_uƒegi°î
(
b©_¥iv
, 
BATADV_TVLV_NC
, 1);

92 
	`b©adv_tvlv_c⁄èöî_ªgi°î
(
b©_¥iv
, 
BATADV_TVLV_NC
, 1,

93 
NULL
, 0);

96 
	}
}

103 
	$b©adv_nc_°©us_upd©e
(
√t_devi˚
 *
√t_dev
)

105 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
√t_dev
);

107 
	`b©adv_nc_tvlv_c⁄èöî_upd©e
(
b©_¥iv
);

108 
	}
}

118 
	$b©adv_nc_tvlv_ogm_h™dÀr_v1
(
b©adv_¥iv
 *
b©_¥iv
,

119 
b©adv_‹ig_node
 *
‹ig
,

120 
u8
 
Êags
,

121 *
tvlv_vÆue
, 
u16
 
tvlv_vÆue_Àn
)

123 i‡(
Êags
 & 
BATADV_TVLV_HANDLER_OGM_CIFNOTFND
)

124 
	`˛ór_bô
(
BATADV_ORIG_CAPA_HAS_NC
, &
‹ig
->
ˇ∑bûôõs
);

126 
	`£t_bô
(
BATADV_ORIG_CAPA_HAS_NC
, &
‹ig
->
ˇ∑bûôõs
);

127 
	}
}

135 
	$b©adv_nc_mesh_öô
(
b©adv_¥iv
 *
b©_¥iv
)

137 
b©_¥iv
->
nc
.
time°amp_fwd_Êush
 = 
jiffõs
;

138 
b©_¥iv
->
nc
.
time°amp_¢if„d_purge
 = 
jiffõs
;

140 i‡(
b©_¥iv
->
nc
.
codög_hash
 || b©_¥iv->nc.
decodög_hash
)

143 
b©_¥iv
->
nc
.
codög_hash
 = 
	`b©adv_hash_√w
(128);

144 i‡(!
b©_¥iv
->
nc
.
codög_hash
)

145 
îr
;

147 
	`b©adv_hash_£t_lock_˛ass
(
b©_¥iv
->
nc
.
codög_hash
,

148 &
b©adv_nc_codög_hash_lock_˛ass_key
);

150 
b©_¥iv
->
nc
.
decodög_hash
 = 
	`b©adv_hash_√w
(128);

151 i‡(!
b©_¥iv
->
nc
.
decodög_hash
) {

152 
	`b©adv_hash_de°roy
(
b©_¥iv
->
nc
.
codög_hash
);

153 
îr
;

156 
	`b©adv_hash_£t_lock_˛ass
(
b©_¥iv
->
nc
.
decodög_hash
,

157 &
b©adv_nc_decodög_hash_lock_˛ass_key
);

159 
	`INIT_DELAYED_WORK
(&
b©_¥iv
->
nc
.
w‹k
, 
b©adv_nc_w‹kî
);

160 
	`b©adv_nc_°¨t_timî
(
b©_¥iv
);

162 
	`b©adv_tvlv_h™dÀr_ªgi°î
(
b©_¥iv
, 
b©adv_nc_tvlv_ogm_h™dÀr_v1
,

163 
NULL
, NULL, 
BATADV_TVLV_NC
, 1,

164 
BATADV_TVLV_HANDLER_OGM_CIFNOTFND
);

165 
	`b©adv_nc_tvlv_c⁄èöî_upd©e
(
b©_¥iv
);

168 
îr
:

169  -
ENOMEM
;

170 
	}
}

176 
	$b©adv_nc_öô_b©_¥iv
(
b©adv_¥iv
 *
b©_¥iv
)

178 
	`©omic_£t
(&
b©_¥iv
->
√tw‹k_codög
, 0);

179 
b©_¥iv
->
nc
.
mö_tq
 = 200;

180 
b©_¥iv
->
nc
.
max_fwd_dñay
 = 10;

181 
b©_¥iv
->
nc
.
max_buf„r_time
 = 200;

182 
	}
}

188 
	$b©adv_nc_öô_‹ig
(
b©adv_‹ig_node
 *
‹ig_node
)

190 
	`INIT_LIST_HEAD
(&
‹ig_node
->
ö_codög_li°
);

191 
	`INIT_LIST_HEAD
(&
‹ig_node
->
out_codög_li°
);

192 
	`•ö_lock_öô
(&
‹ig_node
->
ö_codög_li°_lock
);

193 
	`•ö_lock_öô
(&
‹ig_node
->
out_codög_li°_lock
);

194 
	}
}

201 
	$b©adv_nc_node_ªÀa£
(
kªf
 *
ªf
)

203 
b©adv_nc_node
 *
nc_node
;

205 
nc_node
 = 
	`c⁄èöî_of
(
ªf
, 
b©adv_nc_node
, 
ªfcou¡
);

207 
	`b©adv_‹ig_node_put
(
nc_node
->
‹ig_node
);

208 
	`k‰ì_rcu
(
nc_node
, 
rcu
);

209 
	}
}

216 
	$b©adv_nc_node_put
(
b©adv_nc_node
 *
nc_node
)

218 i‡(!
nc_node
)

221 
	`kªf_put
(&
nc_node
->
ªfcou¡
, 
b©adv_nc_node_ªÀa£
);

222 
	}
}

229 
	$b©adv_nc_∑th_ªÀa£
(
kªf
 *
ªf
)

231 
b©adv_nc_∑th
 *
nc_∑th
;

233 
nc_∑th
 = 
	`c⁄èöî_of
(
ªf
, 
b©adv_nc_∑th
, 
ªfcou¡
);

235 
	`k‰ì_rcu
(
nc_∑th
, 
rcu
);

236 
	}
}

243 
	$b©adv_nc_∑th_put
(
b©adv_nc_∑th
 *
nc_∑th
)

245 i‡(!
nc_∑th
)

248 
	`kªf_put
(&
nc_∑th
->
ªfcou¡
, 
b©adv_nc_∑th_ªÀa£
);

249 
	}
}

256 
	$b©adv_nc_∑ckë_‰ì
(
b©adv_nc_∑ckë
 *
nc_∑ckë
,

257 
boﬁ
 
dr›≥d
)

259 i‡(
dr›≥d
)

260 
	`k‰ì_skb
(
nc_∑ckë
->
skb
);

262 
	`c⁄sume_skb
(
nc_∑ckë
->
skb
);

264 
	`b©adv_nc_∑th_put
(
nc_∑ckë
->
nc_∑th
);

265 
	`k‰ì
(
nc_∑ckë
);

266 
	}
}

275 
boﬁ
 
	$b©adv_nc_to_purge_nc_node
(
b©adv_¥iv
 *
b©_¥iv
,

276 
b©adv_nc_node
 *
nc_node
)

278 i‡(
	`©omic_ªad
(&
b©_¥iv
->
mesh_°©e
Ë!
BATADV_MESH_ACTIVE
)

279  
åue
;

281  
	`b©adv_has_timed_out
(
nc_node
->
œ°_£í
, 
BATADV_NC_NODE_TIMEOUT
);

282 
	}
}

291 
boﬁ
 
	$b©adv_nc_to_purge_nc_∑th_codög
(
b©adv_¥iv
 *
b©_¥iv
,

292 
b©adv_nc_∑th
 *
nc_∑th
)

294 i‡(
	`©omic_ªad
(&
b©_¥iv
->
mesh_°©e
Ë!
BATADV_MESH_ACTIVE
)

295  
åue
;

300  
	`b©adv_has_timed_out
(
nc_∑th
->
œ°_vÆid
,

301 
b©_¥iv
->
nc
.
max_fwd_dñay
 * 10);

302 
	}
}

312 
boﬁ
 
	$b©adv_nc_to_purge_nc_∑th_decodög
(
b©adv_¥iv
 *
b©_¥iv
,

313 
b©adv_nc_∑th
 *
nc_∑th
)

315 i‡(
	`©omic_ªad
(&
b©_¥iv
->
mesh_°©e
Ë!
BATADV_MESH_ACTIVE
)

316  
åue
;

321  
	`b©adv_has_timed_out
(
nc_∑th
->
œ°_vÆid
,

322 
b©_¥iv
->
nc
.
max_buf„r_time
 * 10);

323 
	}
}

337 
	$b©adv_nc_purge_‹ig_nc_nodes
(
b©adv_¥iv
 *
b©_¥iv
,

338 
li°_hód
 *
li°
,

339 
•ölock_t
 *
lock
,

340 
	$boﬁ
 (*
to_purge
)(
b©adv_¥iv
 *,

341 
b©adv_nc_node
 *))

343 
b©adv_nc_node
 *
nc_node
, *
nc_node_tmp
;

346 
	`•ö_lock_bh
(
lock
);

347 
	`li°_f‹_óch_íåy_ß„
(
nc_node
, 
nc_node_tmp
, 
li°
,Üist) {

351 i‡(
to_purge
 && !
	`to_purge
(
b©_¥iv
, 
nc_node
))

354 
	`b©adv_dbg
(
BATADV_DBG_NC
, 
b©_¥iv
,

356 
nc_node
->
addr
,Çc_node->
‹ig_node
->
‹ig
);

357 
	`li°_dñ_rcu
(&
nc_node
->
li°
);

358 
	`b©adv_nc_node_put
(
nc_node
);

360 
	`•ö_u∆ock_bh
(
lock
);

361 
	}
}

373 
	$b©adv_nc_purge_‹ig
(
b©adv_¥iv
 *
b©_¥iv
,

374 
b©adv_‹ig_node
 *
‹ig_node
,

375 
	$boﬁ
 (*
to_purge
)(
b©adv_¥iv
 *,

376 
b©adv_nc_node
 *))

379 
	`b©adv_nc_purge_‹ig_nc_nodes
(
b©_¥iv
, &
‹ig_node
->
ö_codög_li°
,

380 &
‹ig_node
->
ö_codög_li°_lock
,

381 
to_purge
);

384 
	`b©adv_nc_purge_‹ig_nc_nodes
(
b©_¥iv
, &
‹ig_node
->
out_codög_li°
,

385 &
‹ig_node
->
out_codög_li°_lock
,

386 
to_purge
);

387 
	}
}

394 
	$b©adv_nc_purge_‹ig_hash
(
b©adv_¥iv
 *
b©_¥iv
)

396 
b©adv_hashèbÀ
 *
hash
 = 
b©_¥iv
->
‹ig_hash
;

397 
hli°_hód
 *
hód
;

398 
b©adv_‹ig_node
 *
‹ig_node
;

399 
u32
 
i
;

401 i‡(!
hash
)

405 
i
 = 0; i < 
hash
->
size
; i++) {

406 
hód
 = &
hash
->
èbÀ
[
i
];

408 
	`rcu_ªad_lock
();

409 
	`hli°_f‹_óch_íåy_rcu
(
‹ig_node
, 
hód
, 
hash_íåy
)

410 
	`b©adv_nc_purge_‹ig
(
b©_¥iv
, 
‹ig_node
,

411 
b©adv_nc_to_purge_nc_node
);

412 
	`rcu_ªad_u∆ock
();

414 
	}
}

426 
	$b©adv_nc_purge_∑ths
(
b©adv_¥iv
 *
b©_¥iv
,

427 
b©adv_hashèbÀ
 *
hash
,

428 
	$boﬁ
 (*
to_purge
)(
b©adv_¥iv
 *,

429 
b©adv_nc_∑th
 *))

431 
hli°_hód
 *
hód
;

432 
hli°_node
 *
node_tmp
;

433 
b©adv_nc_∑th
 *
nc_∑th
;

434 
•ölock_t
 *
lock
;

435 
u32
 
i
;

437 
i
 = 0; i < 
hash
->
size
; i++) {

438 
hód
 = &
hash
->
èbÀ
[
i
];

439 
lock
 = &
hash
->
li°_locks
[
i
];

442 
	`•ö_lock_bh
(
lock
);

443 
	`hli°_f‹_óch_íåy_ß„
(
nc_∑th
, 
node_tmp
, 
hód
, 
hash_íåy
) {

447 i‡(
to_purge
 && !
	`to_purge
(
b©_¥iv
, 
nc_∑th
))

455 i‡(!
	`u∆ikñy
(
	`li°_em±y
(&
nc_∑th
->
∑ckë_li°
))) {

456 
	`√t_øãlimôed_fun˘i⁄
(
¥ötk
,

457 
KERN_WARNING


459 
nc_∑th
->
¥ev_h›
,

460 
nc_∑th
->
√xt_h›
);

465 
	`b©adv_dbg
(
BATADV_DBG_NC
, 
b©_¥iv
,

467 
nc_∑th
->
¥ev_h›
,Çc_∑th->
√xt_h›
);

468 
	`hli°_dñ_rcu
(&
nc_∑th
->
hash_íåy
);

469 
	`b©adv_nc_∑th_put
(
nc_∑th
);

471 
	`•ö_u∆ock_bh
(
lock
);

473 
	}
}

481 
	$b©adv_nc_hash_key_gí
(
b©adv_nc_∑th
 *
key
, c⁄° *
§c
,

482 c⁄° *
d°
)

484 
	`mem˝y
(
key
->
¥ev_h›
, 
§c
, (key->prev_hop));

485 
	`mem˝y
(
key
->
√xt_h›
, 
d°
, (key->next_hop));

486 
	}
}

495 
u32
 
	$b©adv_nc_hash_choo£
(c⁄° *
d©a
, 
u32
 
size
)

497 c⁄° 
b©adv_nc_∑th
 *
nc_∑th
 = 
d©a
;

498 
u32
 
hash
 = 0;

500 
hash
 = 
	`jhash
(&
nc_∑th
->
¥ev_h›
, (nc_path->prev_hop), hash);

501 
hash
 = 
	`jhash
(&
nc_∑th
->
√xt_h›
, (nc_path->next_hop), hash);

503  
hash
 % 
size
;

504 
	}
}

514 
boﬁ
 
	$b©adv_nc_hash_com∑ª
(c⁄° 
hli°_node
 *
node
,

515 c⁄° *
d©a2
)

517 c⁄° 
b©adv_nc_∑th
 *
nc_∑th1
, *
nc_∑th2
;

519 
nc_∑th1
 = 
	`c⁄èöî_of
(
node
, 
b©adv_nc_∑th
, 
hash_íåy
);

520 
nc_∑th2
 = 
d©a2
;

523 i‡(!
	`b©adv_com∑ª_ëh
(
nc_∑th1
->
¥ev_h›
, 
nc_∑th2
->prev_hop))

524  
Ál£
;

526 i‡(!
	`b©adv_com∑ª_ëh
(
nc_∑th1
->
√xt_h›
, 
nc_∑th2
->next_hop))

527  
Ál£
;

529  
åue
;

530 
	}
}

539 
b©adv_nc_∑th
 *

540 
	$b©adv_nc_hash_föd
(
b©adv_hashèbÀ
 *
hash
,

541 *
d©a
)

543 
hli°_hód
 *
hód
;

544 
b©adv_nc_∑th
 *
nc_∑th
, *
nc_∑th_tmp
 = 
NULL
;

545 
ödex
;

547 i‡(!
hash
)

548  
NULL
;

550 
ödex
 = 
	`b©adv_nc_hash_choo£
(
d©a
, 
hash
->
size
);

551 
hód
 = &
hash
->
èbÀ
[
ödex
];

553 
	`rcu_ªad_lock
();

554 
	`hli°_f‹_óch_íåy_rcu
(
nc_∑th
, 
hód
, 
hash_íåy
) {

555 i‡(!
	`b©adv_nc_hash_com∑ª
(&
nc_∑th
->
hash_íåy
, 
d©a
))

558 i‡(!
	`kªf_gë_u∆ess_zîo
(&
nc_∑th
->
ªfcou¡
))

561 
nc_∑th_tmp
 = 
nc_∑th
;

564 
	`rcu_ªad_u∆ock
();

566  
nc_∑th_tmp
;

567 
	}
}

573 
	$b©adv_nc_£nd_∑ckë
(
b©adv_nc_∑ckë
 *
nc_∑ckë
)

575 
	`b©adv_£nd_uniˇ°_skb
(
nc_∑ckë
->
skb
,Çc_∑ckë->
√igh_node
);

576 
nc_∑ckë
->
skb
 = 
NULL
;

577 
	`b©adv_nc_∑ckë_‰ì
(
nc_∑ckë
, 
Ál£
);

578 
	}
}

593 
boﬁ
 
	$b©adv_nc_¢if„d_purge
(
b©adv_¥iv
 *
b©_¥iv
,

594 
b©adv_nc_∑th
 *
nc_∑th
,

595 
b©adv_nc_∑ckë
 *
nc_∑ckë
)

597 
timeout
 = 
b©_¥iv
->
nc
.
max_buf„r_time
;

598 
boﬁ
 
ªs
 = 
Ál£
;

600 
	`lockdï_as£π_hñd
(&
nc_∑th
->
∑ckë_li°_lock
);

605 i‡(
	`©omic_ªad
(&
b©_¥iv
->
mesh_°©e
Ë=
BATADV_MESH_ACTIVE
 &&

606 !
	`b©adv_has_timed_out
(
nc_∑ckë
->
time°amp
, 
timeout
))

607 
out
;

610 
	`li°_dñ
(&
nc_∑ckë
->
li°
);

611 
	`b©adv_nc_∑ckë_‰ì
(
nc_∑ckë
, 
åue
);

613 
ªs
 = 
åue
;

615 
out
:

616  
ªs
;

617 
	}
}

632 
boﬁ
 
	$b©adv_nc_fwd_Êush
(
b©adv_¥iv
 *
b©_¥iv
,

633 
b©adv_nc_∑th
 *
nc_∑th
,

634 
b©adv_nc_∑ckë
 *
nc_∑ckë
)

636 
timeout
 = 
b©_¥iv
->
nc
.
max_fwd_dñay
;

638 
	`lockdï_as£π_hñd
(&
nc_∑th
->
∑ckë_li°_lock
);

643 i‡(
	`©omic_ªad
(&
b©_¥iv
->
mesh_°©e
Ë=
BATADV_MESH_ACTIVE
 &&

644 !
	`b©adv_has_timed_out
(
nc_∑ckë
->
time°amp
, 
timeout
))

645  
Ál£
;

648 
	`b©adv_öc_cou¡î
(
b©_¥iv
, 
BATADV_CNT_FORWARD
);

649 
	`b©adv_add_cou¡î
(
b©_¥iv
, 
BATADV_CNT_FORWARD_BYTES
,

650 
nc_∑ckë
->
skb
->
Àn
 + 
ETH_HLEN
);

651 
	`li°_dñ
(&
nc_∑ckë
->
li°
);

652 
	`b©adv_nc_£nd_∑ckë
(
nc_∑ckë
);

654  
åue
;

655 
	}
}

667 
	$b©adv_nc_¥o˚ss_nc_∑ths
(
b©adv_¥iv
 *
b©_¥iv
,

668 
b©adv_hashèbÀ
 *
hash
,

669 
	$boﬁ
 (*
¥o˚ss_‚
)(
b©adv_¥iv
 *,

670 
b©adv_nc_∑th
 *,

671 
b©adv_nc_∑ckë
 *))

673 
hli°_hód
 *
hód
;

674 
b©adv_nc_∑ckë
 *
nc_∑ckë
, *
nc_∑ckë_tmp
;

675 
b©adv_nc_∑th
 *
nc_∑th
;

676 
boﬁ
 
ªt
;

677 
i
;

679 i‡(!
hash
)

683 
i
 = 0; i < 
hash
->
size
; i++) {

684 
hód
 = &
hash
->
èbÀ
[
i
];

687 
	`rcu_ªad_lock
();

688 
	`hli°_f‹_óch_íåy_rcu
(
nc_∑th
, 
hód
, 
hash_íåy
) {

690 
	`•ö_lock_bh
(&
nc_∑th
->
∑ckë_li°_lock
);

691 
	`li°_f‹_óch_íåy_ß„
(
nc_∑ckë
, 
nc_∑ckë_tmp
,

692 &
nc_∑th
->
∑ckë_li°
, 
li°
) {

693 
ªt
 = 
	`¥o˚ss_‚
(
b©_¥iv
, 
nc_∑th
, 
nc_∑ckë
);

694 i‡(!
ªt
)

697 
	`•ö_u∆ock_bh
(&
nc_∑th
->
∑ckë_li°_lock
);

699 
	`rcu_ªad_u∆ock
();

701 
	}
}

708 
	$b©adv_nc_w‹kî
(
w‹k_°ru˘
 *
w‹k
)

710 
dñayed_w‹k
 *delayed_work;

711 
b©adv_¥iv_nc
 *
¥iv_nc
;

712 
b©adv_¥iv
 *
b©_¥iv
;

713 
timeout
;

715 
dñayed_w‹k
 = 
	`to_dñayed_w‹k
(
w‹k
);

716 
¥iv_nc
 = 
	`c⁄èöî_of
(
dñayed_w‹k
, 
b©adv_¥iv_nc
, 
w‹k
);

717 
b©_¥iv
 = 
	`c⁄èöî_of
(
¥iv_nc
, 
b©adv_¥iv
, 
nc
);

719 
	`b©adv_nc_purge_‹ig_hash
(
b©_¥iv
);

720 
	`b©adv_nc_purge_∑ths
(
b©_¥iv
, b©_¥iv->
nc
.
codög_hash
,

721 
b©adv_nc_to_purge_nc_∑th_codög
);

722 
	`b©adv_nc_purge_∑ths
(
b©_¥iv
, b©_¥iv->
nc
.
decodög_hash
,

723 
b©adv_nc_to_purge_nc_∑th_decodög
);

725 
timeout
 = 
b©_¥iv
->
nc
.
max_fwd_dñay
;

727 i‡(
	`b©adv_has_timed_out
(
b©_¥iv
->
nc
.
time°amp_fwd_Êush
, 
timeout
)) {

728 
	`b©adv_nc_¥o˚ss_nc_∑ths
(
b©_¥iv
, b©_¥iv->
nc
.
codög_hash
,

729 
b©adv_nc_fwd_Êush
);

730 
b©_¥iv
->
nc
.
time°amp_fwd_Êush
 = 
jiffõs
;

733 i‡(
	`b©adv_has_timed_out
(
b©_¥iv
->
nc
.
time°amp_¢if„d_purge
,

734 
b©_¥iv
->
nc
.
max_buf„r_time
)) {

735 
	`b©adv_nc_¥o˚ss_nc_∑ths
(
b©_¥iv
, b©_¥iv->
nc
.
decodög_hash
,

736 
b©adv_nc_¢if„d_purge
);

737 
b©_¥iv
->
nc
.
time°amp_¢if„d_purge
 = 
jiffõs
;

741 
	`b©adv_nc_°¨t_timî
(
b©_¥iv
);

742 
	}
}

757 
boﬁ
 
	$b©adv_ˇn_nc_wôh_‹ig
(
b©adv_¥iv
 *
b©_¥iv
,

758 
b©adv_‹ig_node
 *
‹ig_node
,

759 
b©adv_ogm_∑ckë
 *
ogm_∑ckë
)

761 
b©adv_‹ig_iföfo
 *
‹ig_iföfo
;

762 
u32
 
œ°_ªÆ_£qno
;

763 
u8
 
œ°_âl
;

765 
‹ig_iföfo
 = 
	`b©adv_‹ig_iföfo_gë
(
‹ig_node
, 
BATADV_IF_DEFAULT
);

766 i‡(!
‹ig_iföfo
)

767  
Ál£
;

769 
œ°_âl
 = 
‹ig_iföfo
->last_ttl;

770 
œ°_ªÆ_£qno
 = 
‹ig_iföfo
->last_real_seqno;

771 
	`b©adv_‹ig_iföfo_put
(
‹ig_iföfo
);

773 i‡(
œ°_ªÆ_£qno
 !
	`¡ohl
(
ogm_∑ckë
->
£qno
))

774  
Ál£
;

775 i‡(
œ°_âl
 !
ogm_∑ckë
->
âl
 + 1)

776  
Ál£
;

777 i‡(!
	`b©adv_com∑ª_ëh
(
ogm_∑ckë
->
‹ig
, ogm_∑ckë->
¥ev_£ndî
))

778  
Ál£
;

779 i‡(
ogm_∑ckë
->
tq
 < 
b©_¥iv
->
nc
.
mö_tq
)

780  
Ál£
;

782  
åue
;

783 
	}
}

794 
b©adv_nc_node
 *

795 
	$b©adv_nc_föd_nc_node
(
b©adv_‹ig_node
 *
‹ig_node
,

796 
b©adv_‹ig_node
 *
‹ig_√igh_node
,

797 
boﬁ
 
ö_codög
)

799 
b©adv_nc_node
 *
nc_node
, *
nc_node_out
 = 
NULL
;

800 
li°_hód
 *
li°
;

802 i‡(
ö_codög
)

803 
li°
 = &
‹ig_√igh_node
->
ö_codög_li°
;

805 
li°
 = &
‹ig_√igh_node
->
out_codög_li°
;

808 
	`rcu_ªad_lock
();

809 
	`li°_f‹_óch_íåy_rcu
(
nc_node
, 
li°
,Üist) {

810 i‡(!
	`b©adv_com∑ª_ëh
(
nc_node
->
addr
, 
‹ig_node
->
‹ig
))

813 i‡(!
	`kªf_gë_u∆ess_zîo
(&
nc_node
->
ªfcou¡
))

817 
nc_node_out
 = 
nc_node
;

820 
	`rcu_ªad_u∆ock
();

822  
nc_node_out
;

823 
	}
}

836 
b©adv_nc_node
 *

837 
	$b©adv_nc_gë_nc_node
(
b©adv_¥iv
 *
b©_¥iv
,

838 
b©adv_‹ig_node
 *
‹ig_node
,

839 
b©adv_‹ig_node
 *
‹ig_√igh_node
,

840 
boﬁ
 
ö_codög
)

842 
b©adv_nc_node
 *
nc_node
;

843 
•ölock_t
 *
lock
;

844 
li°_hód
 *
li°
;

847 i‡(
ö_codög
) {

848 
lock
 = &
‹ig_√igh_node
->
ö_codög_li°_lock
;

849 
li°
 = &
‹ig_√igh_node
->
ö_codög_li°
;

851 
lock
 = &
‹ig_√igh_node
->
out_codög_li°_lock
;

852 
li°
 = &
‹ig_√igh_node
->
out_codög_li°
;

855 
	`•ö_lock_bh
(
lock
);

858 
nc_node
 = 
	`b©adv_nc_föd_nc_node
(
‹ig_node
, 
‹ig_√igh_node
, 
ö_codög
);

861 i‡(
nc_node
)

862 
u∆ock
;

864 
nc_node
 = 
	`kzÆloc
((*nc_node), 
GFP_ATOMIC
);

865 i‡(!
nc_node
)

866 
u∆ock
;

869 
	`INIT_LIST_HEAD
(&
nc_node
->
li°
);

870 
	`kªf_öô
(&
nc_node
->
ªfcou¡
);

871 
	`ëhî_addr_c›y
(
nc_node
->
addr
, 
‹ig_node
->
‹ig
);

872 
	`kªf_gë
(&
‹ig_√igh_node
->
ªfcou¡
);

873 
nc_node
->
‹ig_node
 = 
‹ig_√igh_node
;

875 
	`b©adv_dbg
(
BATADV_DBG_NC
, 
b©_¥iv
, "AddingÇc_node %pM -> %pM\n",

876 
nc_node
->
addr
,Çc_node->
‹ig_node
->
‹ig
);

879 
	`kªf_gë
(&
nc_node
->
ªfcou¡
);

880 
	`li°_add_èû_rcu
(&
nc_node
->
li°
,Üist);

882 
u∆ock
:

883 
	`•ö_u∆ock_bh
(
lock
);

885  
nc_node
;

886 
	}
}

898 
	$b©adv_nc_upd©e_nc_node
(
b©adv_¥iv
 *
b©_¥iv
,

899 
b©adv_‹ig_node
 *
‹ig_node
,

900 
b©adv_‹ig_node
 *
‹ig_√igh_node
,

901 
b©adv_ogm_∑ckë
 *
ogm_∑ckë
,

902 
is_sögÀ_h›_√igh
)

904 
b©adv_nc_node
 *
ö_nc_node
 = 
NULL
;

905 
b©adv_nc_node
 *
out_nc_node
 = 
NULL
;

908 i‡(!
	`©omic_ªad
(&
b©_¥iv
->
√tw‹k_codög
))

909 
out
;

912 i‡(!
	`ã°_bô
(
BATADV_ORIG_CAPA_HAS_NC
, &
‹ig_node
->
ˇ∑bûôõs
))

913 
out
;

916 i‡(!
	`b©adv_ˇn_nc_wôh_‹ig
(
b©_¥iv
, 
‹ig_node
, 
ogm_∑ckë
) &&

917 !
is_sögÀ_h›_√igh
)

918 
out
;

921 
ö_nc_node
 = 
	`b©adv_nc_gë_nc_node
(
b©_¥iv
, 
‹ig_node
,

922 
‹ig_√igh_node
, 
åue
);

923 i‡(!
ö_nc_node
)

924 
out
;

926 
ö_nc_node
->
œ°_£í
 = 
jiffõs
;

929 
out_nc_node
 = 
	`b©adv_nc_gë_nc_node
(
b©_¥iv
, 
‹ig_√igh_node
,

930 
‹ig_node
, 
Ál£
);

931 i‡(!
out_nc_node
)

932 
out
;

934 
out_nc_node
->
œ°_£í
 = 
jiffõs
;

936 
out
:

937 
	`b©adv_nc_node_put
(
ö_nc_node
);

938 
	`b©adv_nc_node_put
(
out_nc_node
);

939 
	}
}

951 
b©adv_nc_∑th
 *
	$b©adv_nc_gë_∑th
(
b©adv_¥iv
 *
b©_¥iv
,

952 
b©adv_hashèbÀ
 *
hash
,

953 
u8
 *
§c
,

954 
u8
 *
d°
)

956 
hash_added
;

957 
b©adv_nc_∑th
 *
nc_∑th
, 
nc_∑th_key
;

959 
	`b©adv_nc_hash_key_gí
(&
nc_∑th_key
, 
§c
, 
d°
);

962 
nc_∑th
 = 
	`b©adv_nc_hash_föd
(
hash
, (*)&
nc_∑th_key
);

964 i‡(
nc_∑th
) {

966 
nc_∑th
->
œ°_vÆid
 = 
jiffõs
;

967  
nc_∑th
;

971 
nc_∑th
 = 
	`kzÆloc
((*nc_∑th), 
GFP_ATOMIC
);

973 i‡(!
nc_∑th
)

974  
NULL
;

977 
	`INIT_LIST_HEAD
(&
nc_∑th
->
∑ckë_li°
);

978 
	`•ö_lock_öô
(&
nc_∑th
->
∑ckë_li°_lock
);

979 
	`kªf_öô
(&
nc_∑th
->
ªfcou¡
);

980 
nc_∑th
->
œ°_vÆid
 = 
jiffõs
;

981 
	`ëhî_addr_c›y
(
nc_∑th
->
√xt_h›
, 
d°
);

982 
	`ëhî_addr_c›y
(
nc_∑th
->
¥ev_h›
, 
§c
);

984 
	`b©adv_dbg
(
BATADV_DBG_NC
, 
b©_¥iv
, "AddingÇc_path %pM -> %pM\n",

985 
nc_∑th
->
¥ev_h›
,

986 
nc_∑th
->
√xt_h›
);

989 
	`kªf_gë
(&
nc_∑th
->
ªfcou¡
);

990 
hash_added
 = 
	`b©adv_hash_add
(
hash
, 
b©adv_nc_hash_com∑ª
,

991 
b©adv_nc_hash_choo£
, &
nc_∑th_key
,

992 &
nc_∑th
->
hash_íåy
);

994 i‡(
hash_added
 < 0) {

995 
	`k‰ì
(
nc_∑th
);

996  
NULL
;

999  
nc_∑th
;

1000 
	}
}

1009 
u8
 
	$b©adv_nc_øndom_weight_tq
(
u8
 
tq
)

1012 
u8
 
ønd_tq
 = 
	`gë_øndom_u32_bñow
(
BATADV_TQ_MAX_VALUE
 + 1 - 
tq
);

1015  
BATADV_TQ_MAX_VALUE
 - 
ønd_tq
;

1016 
	}
}

1024 
	$b©adv_nc_memx‹
(*
d°
, c⁄° *
§c
, 
Àn
)

1026 
i
;

1028 
i
 = 0; i < 
Àn
; ++i)

1029 
d°
[
i
] ^
§c
[i];

1030 
	}
}

1043 
boﬁ
 
	$b©adv_nc_code_∑ckës
(
b©adv_¥iv
 *
b©_¥iv
,

1044 
sk_buff
 *
skb
,

1045 
ëhhdr
 *ethhdr,

1046 
b©adv_nc_∑ckë
 *
nc_∑ckë
,

1047 
b©adv_√igh_node
 *
√igh_node
)

1049 
u8
 
tq_weighãd_√igh
, 
tq_weighãd_codög
, 
tq_tmp
;

1050 
sk_buff
 *
skb_de°
, *
skb_§c
;

1051 
b©adv_uniˇ°_∑ckë
 *
∑ckë1
;

1052 
b©adv_uniˇ°_∑ckë
 *
∑ckë2
;

1053 
b©adv_coded_∑ckë
 *
coded_∑ckë
;

1054 
b©adv_√igh_node
 *
√igh_tmp
, *
rouãr_√igh
, *
fú°_de°
;

1055 
b©adv_√igh_node
 *
rouãr_codög
 = 
NULL
, *
£c⁄d_de°
;

1056 
b©adv_√igh_iföfo
 *
rouãr_√igh_iföfo
 = 
NULL
;

1057 
b©adv_√igh_iföfo
 *
rouãr_codög_iföfo
 = 
NULL
;

1058 
u8
 *
fú°_sour˚
, *
£c⁄d_sour˚
;

1059 
__be32
 
∑ckë_id1
, 
∑ckë_id2
;

1060 
size_t
 
cou¡
;

1061 
boﬁ
 
ªs
 = 
Ál£
;

1062 
codög_Àn
;

1063 
uniˇ°_size
 = (*
∑ckë1
);

1064 
coded_size
 = (*
coded_∑ckë
);

1065 
hódî_add
 = 
coded_size
 - 
uniˇ°_size
;

1070 
rouãr_√igh
 = 
	`b©adv_‹ig_rouãr_gë
(
√igh_node
->
‹ig_node
,

1071 
BATADV_IF_DEFAULT
);

1072 i‡(!
rouãr_√igh
)

1073 
out
;

1075 
rouãr_√igh_iföfo
 = 
	`b©adv_√igh_iföfo_gë
(
rouãr_√igh
,

1076 
BATADV_IF_DEFAULT
);

1077 i‡(!
rouãr_√igh_iföfo
)

1078 
out
;

1080 
√igh_tmp
 = 
nc_∑ckë
->
√igh_node
;

1081 
rouãr_codög
 = 
	`b©adv_‹ig_rouãr_gë
(
√igh_tmp
->
‹ig_node
,

1082 
BATADV_IF_DEFAULT
);

1083 i‡(!
rouãr_codög
)

1084 
out
;

1086 
rouãr_codög_iföfo
 = 
	`b©adv_√igh_iföfo_gë
(
rouãr_codög
,

1087 
BATADV_IF_DEFAULT
);

1088 i‡(!
rouãr_codög_iföfo
)

1089 
out
;

1091 
tq_tmp
 = 
rouãr_√igh_iföfo
->
b©_iv
.
tq_avg
;

1092 
tq_weighãd_√igh
 = 
	`b©adv_nc_øndom_weight_tq
(
tq_tmp
);

1093 
tq_tmp
 = 
rouãr_codög_iföfo
->
b©_iv
.
tq_avg
;

1094 
tq_weighãd_codög
 = 
	`b©adv_nc_øndom_weight_tq
(
tq_tmp
);

1099 i‡(
tq_weighãd_√igh
 >
tq_weighãd_codög
) {

1101 
fú°_de°
 = 
nc_∑ckë
->
√igh_node
;

1102 
fú°_sour˚
 = 
nc_∑ckë
->
nc_∑th
->
¥ev_h›
;

1103 
£c⁄d_de°
 = 
√igh_node
;

1104 
£c⁄d_sour˚
 = 
ëhhdr
->
h_sour˚
;

1105 
∑ckë1
 = (
b©adv_uniˇ°_∑ckë
 *)
nc_∑ckë
->
skb
->
d©a
;

1106 
∑ckë2
 = (
b©adv_uniˇ°_∑ckë
 *)
skb
->
d©a
;

1107 
∑ckë_id1
 = 
nc_∑ckë
->
∑ckë_id
;

1108 
∑ckë_id2
 = 
	`b©adv_skb_¸c32
(
skb
,

1109 
skb
->
d©a
 + (*
∑ckë2
));

1112 
fú°_de°
 = 
√igh_node
;

1113 
fú°_sour˚
 = 
ëhhdr
->
h_sour˚
;

1114 
£c⁄d_de°
 = 
nc_∑ckë
->
√igh_node
;

1115 
£c⁄d_sour˚
 = 
nc_∑ckë
->
nc_∑th
->
¥ev_h›
;

1116 
∑ckë1
 = (
b©adv_uniˇ°_∑ckë
 *)
skb
->
d©a
;

1117 
∑ckë2
 = (
b©adv_uniˇ°_∑ckë
 *)
nc_∑ckë
->
skb
->
d©a
;

1118 
∑ckë_id1
 = 
	`b©adv_skb_¸c32
(
skb
,

1119 
skb
->
d©a
 + (*
∑ckë1
));

1120 
∑ckë_id2
 = 
nc_∑ckë
->
∑ckë_id
;

1126 i‡(
skb
->
Àn
 <
nc_∑ckë
->skb->len) {

1127 
skb_de°
 = 
nc_∑ckë
->
skb
;

1128 
skb_§c
 = 
skb
;

1130 
skb_de°
 = 
skb
;

1131 
skb_§c
 = 
nc_∑ckë
->
skb
;

1135 
codög_Àn
 = 
skb_§c
->
Àn
 - 
uniˇ°_size
;

1137 i‡(
	`skb_löórize
(
skb_de°
Ë< 0 || skb_löórize(
skb_§c
) < 0)

1138 
out
;

1140 
	`skb_push
(
skb_de°
, 
hódî_add
);

1142 
coded_∑ckë
 = (
b©adv_coded_∑ckë
 *)
skb_de°
->
d©a
;

1143 
	`skb_ª£t_mac_hódî
(
skb_de°
);

1145 
coded_∑ckë
->
∑ckë_ty≥
 = 
BATADV_CODED
;

1146 
coded_∑ckë
->
vîsi⁄
 = 
BATADV_COMPAT_VERSION
;

1147 
coded_∑ckë
->
âl
 = 
∑ckë1
->ttl;

1150 
	`ëhî_addr_c›y
(
coded_∑ckë
->
fú°_sour˚
, first_source);

1151 
	`ëhî_addr_c›y
(
coded_∑ckë
->
fú°_‹ig_de°
, 
∑ckë1
->
de°
);

1152 
coded_∑ckë
->
fú°_¸c
 = 
∑ckë_id1
;

1153 
coded_∑ckë
->
fú°_âvn
 = 
∑ckë1
->
âvn
;

1156 
	`ëhî_addr_c›y
(
coded_∑ckë
->
£c⁄d_de°
, sec⁄d_de°->
addr
);

1157 
	`ëhî_addr_c›y
(
coded_∑ckë
->
£c⁄d_sour˚
, second_source);

1158 
	`ëhî_addr_c›y
(
coded_∑ckë
->
£c⁄d_‹ig_de°
, 
∑ckë2
->
de°
);

1159 
coded_∑ckë
->
£c⁄d_¸c
 = 
∑ckë_id2
;

1160 
coded_∑ckë
->
£c⁄d_âl
 = 
∑ckë2
->
âl
;

1161 
coded_∑ckë
->
£c⁄d_âvn
 = 
∑ckë2
->
âvn
;

1162 
coded_∑ckë
->
coded_Àn
 = 
	`ht⁄s
(
codög_Àn
);

1165 
	`b©adv_nc_memx‹
(
skb_de°
->
d©a
 + 
coded_size
,

1166 
skb_§c
->
d©a
 + 
uniˇ°_size
, 
codög_Àn
);

1169 i‡(
	`BATADV_SKB_CB
(
skb_§c
)->
decoded
 &&

1170 
	`BATADV_SKB_CB
(
skb_de°
)->
decoded
) {

1172 
cou¡
 = 
skb_§c
->
Àn
 + 
ETH_HLEN
;

1173 
cou¡
 +
skb_de°
->
Àn
 + 
ETH_HLEN
;

1174 
	`b©adv_add_cou¡î
(
b©_¥iv
, 
BATADV_CNT_NC_RECODE
, 2);

1175 
	`b©adv_add_cou¡î
(
b©_¥iv
, 
BATADV_CNT_NC_RECODE_BYTES
, 
cou¡
);

1176 } i‡(!
	`BATADV_SKB_CB
(
skb_§c
)->
decoded
 &&

1177 !
	`BATADV_SKB_CB
(
skb_de°
)->
decoded
) {

1179 
cou¡
 = 
skb_§c
->
Àn
 + 
ETH_HLEN
;

1180 
cou¡
 +
skb_de°
->
Àn
 + 
ETH_HLEN
;

1181 
	`b©adv_add_cou¡î
(
b©_¥iv
, 
BATADV_CNT_NC_CODE
, 2);

1182 
	`b©adv_add_cou¡î
(
b©_¥iv
, 
BATADV_CNT_NC_CODE_BYTES
, 
cou¡
);

1183 } i‡(
	`BATADV_SKB_CB
(
skb_§c
)->
decoded
 &&

1184 !
	`BATADV_SKB_CB
(
skb_de°
)->
decoded
) {

1186 
	`b©adv_öc_cou¡î
(
b©_¥iv
, 
BATADV_CNT_NC_RECODE
);

1187 
	`b©adv_add_cou¡î
(
b©_¥iv
, 
BATADV_CNT_NC_RECODE_BYTES
,

1188 
skb_§c
->
Àn
 + 
ETH_HLEN
);

1189 
	`b©adv_öc_cou¡î
(
b©_¥iv
, 
BATADV_CNT_NC_CODE
);

1190 
	`b©adv_add_cou¡î
(
b©_¥iv
, 
BATADV_CNT_NC_CODE_BYTES
,

1191 
skb_de°
->
Àn
 + 
ETH_HLEN
);

1192 } i‡(!
	`BATADV_SKB_CB
(
skb_§c
)->
decoded
 &&

1193 
	`BATADV_SKB_CB
(
skb_de°
)->
decoded
) {

1195 
	`b©adv_öc_cou¡î
(
b©_¥iv
, 
BATADV_CNT_NC_CODE
);

1196 
	`b©adv_add_cou¡î
(
b©_¥iv
, 
BATADV_CNT_NC_CODE_BYTES
,

1197 
skb_§c
->
Àn
 + 
ETH_HLEN
);

1198 
	`b©adv_öc_cou¡î
(
b©_¥iv
, 
BATADV_CNT_NC_RECODE
);

1199 
	`b©adv_add_cou¡î
(
b©_¥iv
, 
BATADV_CNT_NC_RECODE_BYTES
,

1200 
skb_de°
->
Àn
 + 
ETH_HLEN
);

1204 
	`c⁄sume_skb
(
skb_§c
);

1207 
nc_∑ckë
->
skb
 = 
NULL
;

1208 
	`b©adv_nc_∑ckë_‰ì
(
nc_∑ckë
, 
Ál£
);

1211 
	`b©adv_£nd_uniˇ°_skb
(
skb_de°
, 
fú°_de°
);

1212 
ªs
 = 
åue
;

1213 
out
:

1214 
	`b©adv_√igh_node_put
(
rouãr_√igh
);

1215 
	`b©adv_√igh_node_put
(
rouãr_codög
);

1216 
	`b©adv_√igh_iföfo_put
(
rouãr_√igh_iföfo
);

1217 
	`b©adv_√igh_iföfo_put
(
rouãr_codög_iföfo
);

1218  
ªs
;

1219 
	}
}

1238 
boﬁ
 
	$b©adv_nc_skb_codög_possibÀ
(
sk_buff
 *
skb
, 
u8
 *
d°
, u8 *
§c
)

1240 i‡(
	`BATADV_SKB_CB
(
skb
)->
decoded
 && !
	`b©adv_com∑ª_ëh
(
d°
, 
§c
))

1241  
Ál£
;

1242  
åue
;

1243 
	}
}

1256 
b©adv_nc_∑ckë
 *

1257 
	$b©adv_nc_∑th_£¨ch
(
b©adv_¥iv
 *
b©_¥iv
,

1258 
b©adv_nc_node
 *
ö_nc_node
,

1259 
b©adv_nc_node
 *
out_nc_node
,

1260 
sk_buff
 *
skb
,

1261 
u8
 *
ëh_d°
)

1263 
b©adv_nc_∑th
 *
nc_∑th
, 
nc_∑th_key
;

1264 
b©adv_nc_∑ckë
 *
nc_∑ckë_out
 = 
NULL
;

1265 
b©adv_nc_∑ckë
 *
nc_∑ckë
, *
nc_∑ckë_tmp
;

1266 
b©adv_hashèbÀ
 *
hash
 = 
b©_¥iv
->
nc
.
codög_hash
;

1267 
idx
;

1269 i‡(!
hash
)

1270  
NULL
;

1273 
	`b©adv_nc_hash_key_gí
(&
nc_∑th_key
, 
ö_nc_node
->
addr
,

1274 
out_nc_node
->
addr
);

1275 
idx
 = 
	`b©adv_nc_hash_choo£
(&
nc_∑th_key
, 
hash
->
size
);

1278 
	`rcu_ªad_lock
();

1279 
	`hli°_f‹_óch_íåy_rcu
(
nc_∑th
, &
hash
->
èbÀ
[
idx
], 
hash_íåy
) {

1280 i‡(!
	`b©adv_com∑ª_ëh
(
nc_∑th
->
¥ev_h›
, 
ö_nc_node
->
addr
))

1283 i‡(!
	`b©adv_com∑ª_ëh
(
nc_∑th
->
√xt_h›
, 
out_nc_node
->
addr
))

1286 
	`•ö_lock_bh
(&
nc_∑th
->
∑ckë_li°_lock
);

1287 i‡(
	`li°_em±y
(&
nc_∑th
->
∑ckë_li°
)) {

1288 
	`•ö_u∆ock_bh
(&
nc_∑th
->
∑ckë_li°_lock
);

1292 
	`li°_f‹_óch_íåy_ß„
(
nc_∑ckë
, 
nc_∑ckë_tmp
,

1293 &
nc_∑th
->
∑ckë_li°
, 
li°
) {

1294 i‡(!
	`b©adv_nc_skb_codög_possibÀ
(
nc_∑ckë
->
skb
,

1295 
ëh_d°
,

1296 
ö_nc_node
->
addr
))

1300 
	`li°_dñ
(&
nc_∑ckë
->
li°
);

1301 
nc_∑ckë_out
 = 
nc_∑ckë
;

1305 
	`•ö_u∆ock_bh
(&
nc_∑th
->
∑ckë_li°_lock
);

1308 
	`rcu_ªad_u∆ock
();

1310  
nc_∑ckë_out
;

1311 
	}
}

1324 
b©adv_nc_∑ckë
 *

1325 
	$b©adv_nc_skb_§c_£¨ch
(
b©adv_¥iv
 *
b©_¥iv
,

1326 
sk_buff
 *
skb
,

1327 
u8
 *
ëh_d°
,

1328 
u8
 *
ëh_§c
,

1329 
b©adv_nc_node
 *
ö_nc_node
)

1331 
b©adv_‹ig_node
 *
‹ig_node
;

1332 
b©adv_nc_node
 *
out_nc_node
;

1333 
b©adv_nc_∑ckë
 *
nc_∑ckë
 = 
NULL
;

1335 
‹ig_node
 = 
	`b©adv_‹ig_hash_föd
(
b©_¥iv
, 
ëh_§c
);

1336 i‡(!
‹ig_node
)

1337  
NULL
;

1339 
	`rcu_ªad_lock
();

1340 
	`li°_f‹_óch_íåy_rcu
(
out_nc_node
,

1341 &
‹ig_node
->
out_codög_li°
, 
li°
) {

1343 i‡(!
	`b©adv_nc_skb_codög_possibÀ
(
skb
,

1344 
out_nc_node
->
addr
, 
ëh_§c
))

1348 
nc_∑ckë
 = 
	`b©adv_nc_∑th_£¨ch
(
b©_¥iv
, 
ö_nc_node
,

1349 
out_nc_node
, 
skb
, 
ëh_d°
);

1350 i‡(
nc_∑ckë
)

1353 
	`rcu_ªad_u∆ock
();

1355 
	`b©adv_‹ig_node_put
(
‹ig_node
);

1356  
nc_∑ckë
;

1357 
	}
}

1366 
	$b©adv_nc_skb_°‹e_bef‹e_codög
(
b©adv_¥iv
 *
b©_¥iv
,

1367 
sk_buff
 *
skb
,

1368 
u8
 *
ëh_d°_√w
)

1370 
ëhhdr
 *ethhdr;

1373 
skb
 = 
	`pskb_c›y_f‹_˛⁄e
(skb, 
GFP_ATOMIC
);

1374 i‡(!
skb
)

1378 
ëhhdr
 = 
	`ëh_hdr
(
skb
);

1379 
	`ëhî_addr_c›y
(
ëhhdr
->
h_sour˚
,Éthhdr->
h_de°
);

1380 
	`ëhî_addr_c›y
(
ëhhdr
->
h_de°
, 
ëh_d°_√w
);

1383 
	`skb_push
(
skb
, 
ETH_HLEN
);

1386 
	`b©adv_nc_skb_°‹e_f‹_decodög
(
b©_¥iv
, 
skb
);

1391 
	`c⁄sume_skb
(
skb
);

1392 
	}
}

1407 
boﬁ
 
	$b©adv_nc_skb_d°_£¨ch
(
sk_buff
 *
skb
,

1408 
b©adv_√igh_node
 *
√igh_node
,

1409 
ëhhdr
 *ethhdr)

1411 
√t_devi˚
 *
√tdev
 = 
√igh_node
->
if_öcomög
->
mesh_iÁ˚
;

1412 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
√tdev
);

1413 
b©adv_‹ig_node
 *
‹ig_node
 = 
√igh_node
->orig_node;

1414 
b©adv_nc_node
 *
nc_node
;

1415 
b©adv_nc_∑ckë
 *
nc_∑ckë
 = 
NULL
;

1417 
	`rcu_ªad_lock
();

1418 
	`li°_f‹_óch_íåy_rcu
(
nc_node
, &
‹ig_node
->
ö_codög_li°
, 
li°
) {

1420 
nc_∑ckë
 = 
	`b©adv_nc_skb_§c_£¨ch
(
b©_¥iv
, 
skb
,

1421 
√igh_node
->
addr
,

1422 
ëhhdr
->
h_sour˚
, 
nc_node
);

1425 i‡(
nc_∑ckë
)

1428 
	`rcu_ªad_u∆ock
();

1430 i‡(!
nc_∑ckë
)

1431  
Ál£
;

1434 
	`b©adv_nc_skb_°‹e_bef‹e_codög
(
b©_¥iv
, 
skb
,

1435 
√igh_node
->
addr
);

1436 
	`b©adv_nc_skb_°‹e_bef‹e_codög
(
b©_¥iv
, 
nc_∑ckë
->
skb
,

1437 
nc_∑ckë
->
√igh_node
->
addr
);

1440 i‡(
	`b©adv_nc_code_∑ckës
(
b©_¥iv
, 
skb
, 
ëhhdr
, 
nc_∑ckë
,

1441 
√igh_node
))

1442  
åue
;

1448 
	`b©adv_nc_£nd_∑ckë
(
nc_∑ckë
);

1449  
Ál£
;

1450 
	}
}

1461 
boﬁ
 
	$b©adv_nc_skb_add_to_∑th
(
sk_buff
 *
skb
,

1462 
b©adv_nc_∑th
 *
nc_∑th
,

1463 
b©adv_√igh_node
 *
√igh_node
,

1464 
__be32
 
∑ckë_id
)

1466 
b©adv_nc_∑ckë
 *
nc_∑ckë
;

1468 
nc_∑ckë
 = 
	`kzÆloc
((*nc_∑ckë), 
GFP_ATOMIC
);

1469 i‡(!
nc_∑ckë
)

1470  
Ál£
;

1473 
nc_∑ckë
->
time°amp
 = 
jiffõs
;

1474 
nc_∑ckë
->
∑ckë_id
 =Öacket_id;

1475 
nc_∑ckë
->
skb
 = skb;

1476 
nc_∑ckë
->
√igh_node
 =Çeigh_node;

1477 
nc_∑ckë
->
nc_∑th
 =Çc_path;

1480 
	`•ö_lock_bh
(&
nc_∑th
->
∑ckë_li°_lock
);

1481 
	`li°_add_èû
(&
nc_∑ckë
->
li°
, &
nc_∑th
->
∑ckë_li°
);

1482 
	`•ö_u∆ock_bh
(&
nc_∑th
->
∑ckë_li°_lock
);

1484  
åue
;

1485 
	}
}

1495 
boﬁ
 
	$b©adv_nc_skb_f‹w¨d
(
sk_buff
 *
skb
,

1496 
b©adv_√igh_node
 *
√igh_node
)

1498 c⁄° 
√t_devi˚
 *
√tdev
 = 
√igh_node
->
if_öcomög
->
mesh_iÁ˚
;

1499 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
√tdev
);

1500 
b©adv_uniˇ°_∑ckë
 *
∑ckë
;

1501 
b©adv_nc_∑th
 *
nc_∑th
;

1502 
ëhhdr
 *ëhhd∏
	`ëh_hdr
(
skb
);

1503 
__be32
 
∑ckë_id
;

1504 
u8
 *
∑ylﬂd
;

1507 i‡(!
	`©omic_ªad
(&
b©_¥iv
->
√tw‹k_codög
))

1508 
out
;

1511 
∑ylﬂd
 = 
	`skb_√tw‹k_hódî
(
skb
);

1512 
∑ckë
 = (
b©adv_uniˇ°_∑ckë
 *)
∑ylﬂd
;

1513 i‡(
∑ckë
->
∑ckë_ty≥
 !
BATADV_UNICAST
)

1514 
out
;

1517 i‡(
	`b©adv_nc_skb_d°_£¨ch
(
skb
, 
√igh_node
, 
ëhhdr
))

1518  
åue
;

1521 
nc_∑th
 = 
	`b©adv_nc_gë_∑th
(
b©_¥iv
,

1522 
b©_¥iv
->
nc
.
codög_hash
,

1523 
ëhhdr
->
h_sour˚
,

1524 
√igh_node
->
addr
);

1526 i‡(!
nc_∑th
)

1527 
out
;

1530 
∑ckë_id
 = 
	`b©adv_skb_¸c32
(
skb
, 
∑ylﬂd
 + (*
∑ckë
));

1531 i‡(!
	`b©adv_nc_skb_add_to_∑th
(
skb
, 
nc_∑th
, 
√igh_node
, 
∑ckë_id
))

1532 
‰ì_nc_∑th
;

1535  
åue
;

1537 
‰ì_nc_∑th
:

1538 
	`b©adv_nc_∑th_put
(
nc_∑th
);

1539 
out
:

1541  
Ál£
;

1542 
	}
}

1550 
	$b©adv_nc_skb_°‹e_f‹_decodög
(
b©adv_¥iv
 *
b©_¥iv
,

1551 
sk_buff
 *
skb
)

1553 
b©adv_uniˇ°_∑ckë
 *
∑ckë
;

1554 
b©adv_nc_∑th
 *
nc_∑th
;

1555 
ëhhdr
 *ëhhd∏
	`ëh_hdr
(
skb
);

1556 
__be32
 
∑ckë_id
;

1557 
u8
 *
∑ylﬂd
;

1560 i‡(!
	`©omic_ªad
(&
b©_¥iv
->
√tw‹k_codög
))

1561 
out
;

1564 
∑ylﬂd
 = 
	`skb_√tw‹k_hódî
(
skb
);

1565 
∑ckë
 = (
b©adv_uniˇ°_∑ckë
 *)
∑ylﬂd
;

1566 i‡(
∑ckë
->
∑ckë_ty≥
 !
BATADV_UNICAST
)

1567 
out
;

1570 
nc_∑th
 = 
	`b©adv_nc_gë_∑th
(
b©_¥iv
,

1571 
b©_¥iv
->
nc
.
decodög_hash
,

1572 
ëhhdr
->
h_sour˚
,

1573 
ëhhdr
->
h_de°
);

1575 i‡(!
nc_∑th
)

1576 
out
;

1579 
skb
 = 
	`skb_˛⁄e
(skb, 
GFP_ATOMIC
);

1580 i‡(
	`u∆ikñy
(!
skb
))

1581 
‰ì_nc_∑th
;

1583 i‡(
	`u∆ikñy
(!
	`pskb_may_puŒ
(
skb
, 
ETH_HLEN
)))

1584 
‰ì_skb
;

1586 i‡(
	`u∆ikñy
(!
	`skb_puŒ_rcsum
(
skb
, 
ETH_HLEN
)))

1587 
‰ì_skb
;

1590 
∑ckë_id
 = 
	`b©adv_skb_¸c32
(
skb
, 
∑ylﬂd
 + (*
∑ckë
));

1591 i‡(!
	`b©adv_nc_skb_add_to_∑th
(
skb
, 
nc_∑th
, 
NULL
, 
∑ckë_id
))

1592 
‰ì_skb
;

1594 
	`b©adv_öc_cou¡î
(
b©_¥iv
, 
BATADV_CNT_NC_BUFFER
);

1597 
‰ì_skb
:

1598 
	`k‰ì_skb
(
skb
);

1599 
‰ì_nc_∑th
:

1600 
	`b©adv_nc_∑th_put
(
nc_∑th
);

1601 
out
:

1603 
	}
}

1611 
	$b©adv_nc_skb_°‹e_¢if„d_uniˇ°
(
b©adv_¥iv
 *
b©_¥iv
,

1612 
sk_buff
 *
skb
)

1614 
ëhhdr
 *ëhhd∏
	`ëh_hdr
(
skb
);

1616 i‡(
	`b©adv_is_my_mac
(
b©_¥iv
, 
ëhhdr
->
h_de°
))

1620 
	`skb_push
(
skb
, 
ETH_HLEN
);

1622 
	`b©adv_nc_skb_°‹e_f‹_decodög
(
b©_¥iv
, 
skb
);

1623 
	}
}

1635 
b©adv_uniˇ°_∑ckë
 *

1636 
	$b©adv_nc_skb_decode_∑ckë
(
b©adv_¥iv
 *
b©_¥iv
, 
sk_buff
 *
skb
,

1637 
b©adv_nc_∑ckë
 *
nc_∑ckë
)

1639 c⁄° 
h_size
 = (
b©adv_uniˇ°_∑ckë
);

1640 c⁄° 
h_diff
 = (
b©adv_coded_∑ckë
Ë- 
h_size
;

1641 
b©adv_uniˇ°_∑ckë
 *
uniˇ°_∑ckë
;

1642 
b©adv_coded_∑ckë
 
coded_∑ckë_tmp
;

1643 
ëhhdr
 *ëhhdr, 
ëhhdr_tmp
;

1644 
u8
 *
‹ig_de°
, 
âl
, 
âvn
;

1645 
codög_Àn
;

1646 
îr
;

1649 
	`mem˝y
(&
coded_∑ckë_tmp
, 
skb
->
d©a
, (coded_packet_tmp));

1650 
	`mem˝y
(&
ëhhdr_tmp
, 
	`skb_mac_hódî
(
skb
), (ethhdr_tmp));

1652 i‡(
	`skb_cow
(
skb
, 0) < 0)

1653  
NULL
;

1655 i‡(
	`u∆ikñy
(!
	`skb_puŒ_rcsum
(
skb
, 
h_diff
)))

1656  
NULL
;

1661 
	`skb_£t_mac_hódî
(
skb
, -
ETH_HLEN
);

1662 
	`skb_ª£t_√tw‹k_hódî
(
skb
);

1665 
ëhhdr
 = 
	`ëh_hdr
(
skb
);

1666 *
ëhhdr
 = 
ëhhdr_tmp
;

1671 i‡(
	`b©adv_is_my_mac
(
b©_¥iv
, 
coded_∑ckë_tmp
.
£c⁄d_de°
)) {

1676 
	`ëhî_addr_c›y
(
ëhhdr
->
h_de°
, 
coded_∑ckë_tmp
.
£c⁄d_de°
);

1677 
skb
->
pkt_ty≥
 = 
PACKET_HOST
;

1679 
‹ig_de°
 = 
coded_∑ckë_tmp
.
£c⁄d_‹ig_de°
;

1680 
âl
 = 
coded_∑ckë_tmp
.
£c⁄d_âl
;

1681 
âvn
 = 
coded_∑ckë_tmp
.
£c⁄d_âvn
;

1683 
‹ig_de°
 = 
coded_∑ckë_tmp
.
fú°_‹ig_de°
;

1684 
âl
 = 
coded_∑ckë_tmp
.ttl;

1685 
âvn
 = 
coded_∑ckë_tmp
.
fú°_âvn
;

1688 
codög_Àn
 = 
	`¡ohs
(
coded_∑ckë_tmp
.
coded_Àn
);

1690 i‡(
codög_Àn
 > 
skb
->
Àn
)

1691  
NULL
;

1696 
	`b©adv_nc_memx‹
(
skb
->
d©a
 + 
h_size
,

1697 
nc_∑ckë
->
skb
->
d©a
 + 
h_size
,

1698 
codög_Àn
);

1701 i‡(
nc_∑ckë
->
skb
->
Àn
 > 
codög_Àn
 + 
h_size
) {

1702 
îr
 = 
	`pskb_åim_rcsum
(
skb
, 
codög_Àn
 + 
h_size
);

1703 i‡(
îr
)

1704  
NULL
;

1708 
uniˇ°_∑ckë
 = (
b©adv_uniˇ°_∑ckë
 *)
skb
->
d©a
;

1709 
uniˇ°_∑ckë
->
∑ckë_ty≥
 = 
BATADV_UNICAST
;

1710 
uniˇ°_∑ckë
->
vîsi⁄
 = 
BATADV_COMPAT_VERSION
;

1711 
uniˇ°_∑ckë
->
âl
 =Åtl;

1712 
	`ëhî_addr_c›y
(
uniˇ°_∑ckë
->
de°
, 
‹ig_de°
);

1713 
uniˇ°_∑ckë
->
âvn
 =Åtvn;

1715 
	`b©adv_nc_∑ckë_‰ì
(
nc_∑ckë
, 
Ál£
);

1716  
uniˇ°_∑ckë
;

1717 
	}
}

1728 
b©adv_nc_∑ckë
 *

1729 
	$b©adv_nc_föd_decodög_∑ckë
(
b©adv_¥iv
 *
b©_¥iv
,

1730 
ëhhdr
 *ethhdr,

1731 
b©adv_coded_∑ckë
 *
coded
)

1733 
b©adv_hashèbÀ
 *
hash
 = 
b©_¥iv
->
nc
.
decodög_hash
;

1734 
b©adv_nc_∑ckë
 *
tmp_nc_∑ckë
, *
nc_∑ckë
 = 
NULL
;

1735 
b©adv_nc_∑th
 *
nc_∑th
, 
nc_∑th_key
;

1736 
u8
 *
de°
, *
sour˚
;

1737 
__be32
 
∑ckë_id
;

1738 
ödex
;

1740 i‡(!
hash
)

1741  
NULL
;

1744 
de°
 = 
ëhhdr
->
h_sour˚
;

1745 i‡(!
	`b©adv_is_my_mac
(
b©_¥iv
, 
coded
->
£c⁄d_de°
)) {

1746 
sour˚
 = 
coded
->
£c⁄d_sour˚
;

1747 
∑ckë_id
 = 
coded
->
£c⁄d_¸c
;

1749 
sour˚
 = 
coded
->
fú°_sour˚
;

1750 
∑ckë_id
 = 
coded
->
fú°_¸c
;

1753 
	`b©adv_nc_hash_key_gí
(&
nc_∑th_key
, 
sour˚
, 
de°
);

1754 
ödex
 = 
	`b©adv_nc_hash_choo£
(&
nc_∑th_key
, 
hash
->
size
);

1757 
	`rcu_ªad_lock
();

1758 
	`hli°_f‹_óch_íåy_rcu
(
nc_∑th
, &
hash
->
èbÀ
[
ödex
], 
hash_íåy
) {

1760 
	`•ö_lock_bh
(&
nc_∑th
->
∑ckë_li°_lock
);

1761 
	`li°_f‹_óch_íåy
(
tmp_nc_∑ckë
,

1762 &
nc_∑th
->
∑ckë_li°
, 
li°
) {

1763 i‡(
∑ckë_id
 =
tmp_nc_∑ckë
->packet_id) {

1764 
	`li°_dñ
(&
tmp_nc_∑ckë
->
li°
);

1766 
nc_∑ckë
 = 
tmp_nc_∑ckë
;

1770 
	`•ö_u∆ock_bh
(&
nc_∑th
->
∑ckë_li°_lock
);

1772 i‡(
nc_∑ckë
)

1775 
	`rcu_ªad_u∆ock
();

1777 i‡(!
nc_∑ckë
)

1778 
	`b©adv_dbg
(
BATADV_DBG_NC
, 
b©_¥iv
,

1779 "NÿdecodögÖackë found f‹ %u\n", 
∑ckë_id
);

1781  
nc_∑ckë
;

1782 
	}
}

1793 
	$b©adv_nc_ªcv_coded_∑ckë
(
sk_buff
 *
skb
,

1794 
b©adv_h¨d_iÁ˚
 *
ªcv_if
)

1796 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
ªcv_if
->
mesh_iÁ˚
);

1797 
b©adv_uniˇ°_∑ckë
 *
uniˇ°_∑ckë
;

1798 
b©adv_coded_∑ckë
 *
coded_∑ckë
;

1799 
b©adv_nc_∑ckë
 *
nc_∑ckë
;

1800 
ëhhdr
 *ethhdr;

1801 
hdr_size
 = (*
coded_∑ckë
);

1804 i‡(!
	`©omic_ªad
(&
b©_¥iv
->
√tw‹k_codög
))

1805 
‰ì_skb
;

1808 i‡(
	`u∆ikñy
(!
	`pskb_may_puŒ
(
skb
, 
hdr_size
)))

1809 
‰ì_skb
;

1811 
coded_∑ckë
 = (
b©adv_coded_∑ckë
 *)
skb
->
d©a
;

1812 
ëhhdr
 = 
	`ëh_hdr
(
skb
);

1815 i‡(!
	`b©adv_is_my_mac
(
b©_¥iv
, 
ëhhdr
->
h_de°
) &&

1816 !
	`b©adv_is_my_mac
(
b©_¥iv
, 
coded_∑ckë
->
£c⁄d_de°
))

1817 
‰ì_skb
;

1820 i‡(
	`b©adv_is_my_mac
(
b©_¥iv
, 
coded_∑ckë
->
£c⁄d_de°
))

1821 
	`b©adv_öc_cou¡î
(
b©_¥iv
, 
BATADV_CNT_NC_SNIFFED
);

1823 
nc_∑ckë
 = 
	`b©adv_nc_föd_decodög_∑ckë
(
b©_¥iv
, 
ëhhdr
,

1824 
coded_∑ckë
);

1825 i‡(!
nc_∑ckë
) {

1826 
	`b©adv_öc_cou¡î
(
b©_¥iv
, 
BATADV_CNT_NC_DECODE_FAILED
);

1827 
‰ì_skb
;

1831 i‡(
	`skb_löórize
(
skb
) < 0)

1832 
‰ì_nc_∑ckë
;

1834 i‡(
	`skb_löórize
(
nc_∑ckë
->
skb
) < 0)

1835 
‰ì_nc_∑ckë
;

1838 
uniˇ°_∑ckë
 = 
	`b©adv_nc_skb_decode_∑ckë
(
b©_¥iv
, 
skb
, 
nc_∑ckë
);

1839 i‡(!
uniˇ°_∑ckë
) {

1840 
	`b©adv_öc_cou¡î
(
b©_¥iv
, 
BATADV_CNT_NC_DECODE_FAILED
);

1841 
‰ì_nc_∑ckë
;

1845 
	`BATADV_SKB_CB
(
skb
)->
decoded
 = 
åue
;

1846 
	`b©adv_öc_cou¡î
(
b©_¥iv
, 
BATADV_CNT_NC_DECODE
);

1847 
	`b©adv_add_cou¡î
(
b©_¥iv
, 
BATADV_CNT_NC_DECODE_BYTES
,

1848 
skb
->
Àn
 + 
ETH_HLEN
);

1849  
	`b©adv_ªcv_uniˇ°_∑ckë
(
skb
, 
ªcv_if
);

1851 
‰ì_nc_∑ckë
:

1852 
	`b©adv_nc_∑ckë_‰ì
(
nc_∑ckë
, 
åue
);

1853 
‰ì_skb
:

1854 
	`k‰ì_skb
(
skb
);

1856  
NET_RX_DROP
;

1857 
	}
}

1863 
	$b©adv_nc_mesh_‰ì
(
b©adv_¥iv
 *
b©_¥iv
)

1865 
	`b©adv_tvlv_c⁄èöî_uƒegi°î
(
b©_¥iv
, 
BATADV_TVLV_NC
, 1);

1866 
	`b©adv_tvlv_h™dÀr_uƒegi°î
(
b©_¥iv
, 
BATADV_TVLV_NC
, 1);

1867 
	`ˇn˚l_dñayed_w‹k_sync
(&
b©_¥iv
->
nc
.
w‹k
);

1869 
	`b©adv_nc_purge_∑ths
(
b©_¥iv
, b©_¥iv->
nc
.
codög_hash
, 
NULL
);

1870 
	`b©adv_hash_de°roy
(
b©_¥iv
->
nc
.
codög_hash
);

1871 
	`b©adv_nc_purge_∑ths
(
b©_¥iv
, b©_¥iv->
nc
.
decodög_hash
, 
NULL
);

1872 
	`b©adv_hash_de°roy
(
b©_¥iv
->
nc
.
decodög_hash
);

1873 
	}
}

	@net/batman-adv/network-coding.h

7 #i‚de‡
_NET_BATMAN_ADV_NETWORK_CODING_H_


8 
	#_NET_BATMAN_ADV_NETWORK_CODING_H_


	)

10 
	~"maö.h
"

12 
	~<löux/√tdevi˚.h
>

13 
	~<löux/skbuff.h
>

14 
	~<löux/ty≥s.h
>

15 
	~<u≠i/löux/b©adv_∑ckë.h
>

17 #ifde‡
CONFIG_BATMAN_ADV_NC


19 
b©adv_nc_°©us_upd©e
(
√t_devi˚
 *
√t_dev
);

20 
b©adv_nc_öô
();

21 
b©adv_nc_mesh_öô
(
b©adv_¥iv
 *
b©_¥iv
);

22 
b©adv_nc_mesh_‰ì
(
b©adv_¥iv
 *
b©_¥iv
);

23 
b©adv_nc_upd©e_nc_node
(
b©adv_¥iv
 *
b©_¥iv
,

24 
b©adv_‹ig_node
 *
‹ig_node
,

25 
b©adv_‹ig_node
 *
‹ig_√igh_node
,

26 
b©adv_ogm_∑ckë
 *
ogm_∑ckë
,

27 
is_sögÀ_h›_√igh
);

28 
b©adv_nc_purge_‹ig
(
b©adv_¥iv
 *
b©_¥iv
,

29 
b©adv_‹ig_node
 *
‹ig_node
,

30 
	$boﬁ
 (*
to_purge
)(
b©adv_¥iv
 *,

31 
b©adv_nc_node
 *));

32 
	`b©adv_nc_öô_b©_¥iv
(
b©adv_¥iv
 *
b©_¥iv
);

33 
	`b©adv_nc_öô_‹ig
(
b©adv_‹ig_node
 *
‹ig_node
);

34 
boﬁ
 
	`b©adv_nc_skb_f‹w¨d
(
sk_buff
 *
skb
,

35 
b©adv_√igh_node
 *
√igh_node
);

36 
	`b©adv_nc_skb_°‹e_f‹_decodög
(
b©adv_¥iv
 *
b©_¥iv
,

37 
sk_buff
 *
skb
);

38 
	`b©adv_nc_skb_°‹e_¢if„d_uniˇ°
(
b©adv_¥iv
 *
b©_¥iv
,

39 
sk_buff
 *
skb
);

43 
ölöe
 
	$b©adv_nc_°©us_upd©e
(
√t_devi˚
 *
√t_dev
)

45 
	}
}

47 
ölöe
 
	$b©adv_nc_öô
()

50 
	}
}

52 
ölöe
 
	$b©adv_nc_mesh_öô
(
b©adv_¥iv
 *
b©_¥iv
)

55 
	}
}

57 
ölöe
 
	$b©adv_nc_mesh_‰ì
(
b©adv_¥iv
 *
b©_¥iv
)

59 
	}
}

61 
ölöe
 

62 
	$b©adv_nc_upd©e_nc_node
(
b©adv_¥iv
 *
b©_¥iv
,

63 
b©adv_‹ig_node
 *
‹ig_node
,

64 
b©adv_‹ig_node
 *
‹ig_√igh_node
,

65 
b©adv_ogm_∑ckë
 *
ogm_∑ckë
,

66 
is_sögÀ_h›_√igh
)

68 
	}
}

70 
ölöe
 

71 
	$b©adv_nc_purge_‹ig
(
b©adv_¥iv
 *
b©_¥iv
,

72 
b©adv_‹ig_node
 *
‹ig_node
,

73 
	$boﬁ
 (*
to_purge
)(
b©adv_¥iv
 *,

74 
b©adv_nc_node
 *))

76 
	}
}

78 
ölöe
 
	$b©adv_nc_öô_b©_¥iv
(
b©adv_¥iv
 *
b©_¥iv
)

80 
	}
}

82 
ölöe
 
	$b©adv_nc_öô_‹ig
(
b©adv_‹ig_node
 *
‹ig_node
)

84 
	}
}

86 
ölöe
 
boﬁ
 
	$b©adv_nc_skb_f‹w¨d
(
sk_buff
 *
skb
,

87 
b©adv_√igh_node
 *
√igh_node
)

89  
Ál£
;

90 
	}
}

92 
ölöe
 

93 
	$b©adv_nc_skb_°‹e_f‹_decodög
(
b©adv_¥iv
 *
b©_¥iv
,

94 
sk_buff
 *
skb
)

96 
	}
}

98 
ölöe
 

99 
	$b©adv_nc_skb_°‹e_¢if„d_uniˇ°
(
b©adv_¥iv
 *
b©_¥iv
,

100 
sk_buff
 *
skb
)

102 
	}
}

	@net/batman-adv/originator.c

7 
	~"‹igö©‹.h
"

8 
	~"maö.h
"

10 
	~<löux/©omic.h
>

11 
	~<löux/c⁄èöî_of.h
>

12 
	~<löux/îr.h
>

13 
	~<löux/î∫o.h
>

14 
	~<löux/ëhîdevi˚.h
>

15 
	~<löux/gÂ.h
>

16 
	~<löux/if_vœn.h
>

17 
	~<löux/jiffõs.h
>

18 
	~<löux/kªf.h
>

19 
	~<löux/li°.h
>

20 
	~<löux/lockdï.h
>

21 
	~<löux/√tdevi˚.h
>

22 
	~<löux/√éök.h
>

23 
	~<löux/rculi°.h
>

24 
	~<löux/rcupd©e.h
>

25 
	~<löux/skbuff.h
>

26 
	~<löux/¶ab.h
>

27 
	~<löux/•ölock.h
>

28 
	~<löux/°ddef.h
>

29 
	~<löux/w‹kqueue.h
>

30 
	~<u≠i/löux/b©adv_∑ckë.h
>

32 
	~"b©_Ægo.h
"

33 
	~"di°ribuãd-¨p-èbÀ.h
"

34 
	~"‰agmíèti⁄.h
"

35 
	~"g©eway_˛õ¡.h
"

36 
	~"h¨d-öãrÁ˚.h
"

37 
	~"hash.h
"

38 
	~"log.h
"

39 
	~"mu…iˇ°.h
"

40 
	~"√éök.h
"

41 
	~"√tw‹k-codög.h
"

42 
	~"routög.h
"

43 
	~"å™¶©i⁄-èbÀ.h
"

46 
lock_˛ass_key
 
	gb©adv_‹ig_hash_lock_˛ass_key
;

55 
b©adv_‹ig_node
 *

56 
	$b©adv_‹ig_hash_föd
(
b©adv_¥iv
 *
b©_¥iv
, c⁄° *
d©a
)

58 
b©adv_hashèbÀ
 *
hash
 = 
b©_¥iv
->
‹ig_hash
;

59 
hli°_hód
 *
hód
;

60 
b©adv_‹ig_node
 *
‹ig_node
, *
‹ig_node_tmp
 = 
NULL
;

61 
ödex
;

63 i‡(!
hash
)

64  
NULL
;

66 
ödex
 = 
	`b©adv_choo£_‹ig
(
d©a
, 
hash
->
size
);

67 
hód
 = &
hash
->
èbÀ
[
ödex
];

69 
	`rcu_ªad_lock
();

70 
	`hli°_f‹_óch_íåy_rcu
(
‹ig_node
, 
hód
, 
hash_íåy
) {

71 i‡(!
	`b©adv_com∑ª_ëh
(
‹ig_node
, 
d©a
))

74 i‡(!
	`kªf_gë_u∆ess_zîo
(&
‹ig_node
->
ªfcou¡
))

77 
‹ig_node_tmp
 = 
‹ig_node
;

80 
	`rcu_ªad_u∆ock
();

82  
‹ig_node_tmp
;

83 
	}
}

85 
b©adv_purge_‹ig
(
w‹k_°ru˘
 *
w‹k
);

94 
boﬁ
 
	$b©adv_com∑ª_‹ig
(c⁄° 
hli°_node
 *
node
, c⁄° *
d©a2
)

96 c⁄° *
d©a1
 = 
	`c⁄èöî_of
(
node
, 
b©adv_‹ig_node
,

97 
hash_íåy
);

99  
	`b©adv_com∑ª_ëh
(
d©a1
, 
d©a2
);

100 
	}
}

110 
b©adv_‹ig_node_vœn
 *

111 
	$b©adv_‹ig_node_vœn_gë
(
b©adv_‹ig_node
 *
‹ig_node
,

112 
vid
)

114 
b©adv_‹ig_node_vœn
 *
vœn
 = 
NULL
, *
tmp
;

116 
	`rcu_ªad_lock
();

117 
	`hli°_f‹_óch_íåy_rcu
(
tmp
, &
‹ig_node
->
vœn_li°
, 
li°
) {

118 i‡(
tmp
->
vid
 != vid)

121 i‡(!
	`kªf_gë_u∆ess_zîo
(&
tmp
->
ªfcou¡
))

124 
vœn
 = 
tmp
;

128 
	`rcu_ªad_u∆ock
();

130  
vœn
;

131 
	}
}

140 
boﬁ
 
	$b©adv_vœn_id_vÆid
(
vid
)

142 
n⁄_vœn
 = 
vid
 & ~(
BATADV_VLAN_HAS_TAG
 | 
VLAN_VID_MASK
);

144 i‡(
vid
 == 0)

145  
åue
;

147 i‡(!(
vid
 & 
BATADV_VLAN_HAS_TAG
))

148  
Ál£
;

150 i‡(
n⁄_vœn
)

151  
Ál£
;

153  
åue
;

154 
	}
}

168 
b©adv_‹ig_node_vœn
 *

169 
	$b©adv_‹ig_node_vœn_√w
(
b©adv_‹ig_node
 *
‹ig_node
,

170 
vid
)

172 
b©adv_‹ig_node_vœn
 *
vœn
;

174 i‡(!
	`b©adv_vœn_id_vÆid
(
vid
))

175  
NULL
;

177 
	`•ö_lock_bh
(&
‹ig_node
->
vœn_li°_lock
);

180 
vœn
 = 
	`b©adv_‹ig_node_vœn_gë
(
‹ig_node
, 
vid
);

181 i‡(
vœn
)

182 
out
;

184 
vœn
 = 
	`kzÆloc
((*vœn), 
GFP_ATOMIC
);

185 i‡(!
vœn
)

186 
out
;

188 
	`kªf_öô
(&
vœn
->
ªfcou¡
);

189 
vœn
->
vid
 = vid;

191 
	`kªf_gë
(&
vœn
->
ªfcou¡
);

192 
	`hli°_add_hód_rcu
(&
vœn
->
li°
, &
‹ig_node
->
vœn_li°
);

194 
out
:

195 
	`•ö_u∆ock_bh
(&
‹ig_node
->
vœn_li°_lock
);

197  
vœn
;

198 
	}
}

205 
	$b©adv_‹ig_node_vœn_ªÀa£
(
kªf
 *
ªf
)

207 
b©adv_‹ig_node_vœn
 *
‹ig_vœn
;

209 
‹ig_vœn
 = 
	`c⁄èöî_of
(
ªf
, 
b©adv_‹ig_node_vœn
, 
ªfcou¡
);

211 
	`k‰ì_rcu
(
‹ig_vœn
, 
rcu
);

212 
	}
}

220 
	$b©adv_‹igö©‹_öô
(
b©adv_¥iv
 *
b©_¥iv
)

222 i‡(
b©_¥iv
->
‹ig_hash
)

225 
b©_¥iv
->
‹ig_hash
 = 
	`b©adv_hash_√w
(1024);

227 i‡(!
b©_¥iv
->
‹ig_hash
)

228 
îr
;

230 
	`b©adv_hash_£t_lock_˛ass
(
b©_¥iv
->
‹ig_hash
,

231 &
b©adv_‹ig_hash_lock_˛ass_key
);

233 
	`INIT_DELAYED_WORK
(&
b©_¥iv
->
‹ig_w‹k
, 
b©adv_purge_‹ig
);

234 
	`queue_dñayed_w‹k
(
b©adv_evít_w‹kqueue
,

235 &
b©_¥iv
->
‹ig_w‹k
,

236 
	`m£cs_to_jiffõs
(
BATADV_ORIG_WORK_PERIOD
));

240 
îr
:

241  -
ENOMEM
;

242 
	}
}

249 
	$b©adv_√igh_iföfo_ªÀa£
(
kªf
 *
ªf
)

251 
b©adv_√igh_iföfo
 *
√igh_iföfo
;

253 
√igh_iföfo
 = 
	`c⁄èöî_of
(
ªf
, 
b©adv_√igh_iföfo
, 
ªfcou¡
);

255 i‡(
√igh_iföfo
->
if_outgoög
 !
BATADV_IF_DEFAULT
)

256 
	`b©adv_h¨dif_put
(
√igh_iföfo
->
if_outgoög
);

258 
	`k‰ì_rcu
(
√igh_iföfo
, 
rcu
);

259 
	}
}

266 
	$b©adv_h¨dif_√igh_ªÀa£
(
kªf
 *
ªf
)

268 
b©adv_h¨dif_√igh_node
 *
h¨dif_√igh
;

270 
h¨dif_√igh
 = 
	`c⁄èöî_of
(
ªf
, 
b©adv_h¨dif_√igh_node
,

271 
ªfcou¡
);

273 
	`•ö_lock_bh
(&
h¨dif_√igh
->
if_öcomög
->
√igh_li°_lock
);

274 
	`hli°_dñ_öô_rcu
(&
h¨dif_√igh
->
li°
);

275 
	`•ö_u∆ock_bh
(&
h¨dif_√igh
->
if_öcomög
->
√igh_li°_lock
);

277 
	`b©adv_h¨dif_put
(
h¨dif_√igh
->
if_öcomög
);

278 
	`k‰ì_rcu
(
h¨dif_√igh
, 
rcu
);

279 
	}
}

286 
	$b©adv_√igh_node_ªÀa£
(
kªf
 *
ªf
)

288 
hli°_node
 *
node_tmp
;

289 
b©adv_√igh_node
 *
√igh_node
;

290 
b©adv_√igh_iföfo
 *
√igh_iföfo
;

292 
√igh_node
 = 
	`c⁄èöî_of
(
ªf
, 
b©adv_√igh_node
, 
ªfcou¡
);

294 
	`hli°_f‹_óch_íåy_ß„
(
√igh_iföfo
, 
node_tmp
,

295 &
√igh_node
->
iföfo_li°
, 
li°
) {

296 
	`b©adv_√igh_iföfo_put
(
√igh_iföfo
);

299 
	`b©adv_h¨dif_√igh_put
(
√igh_node
->
h¨dif_√igh
);

301 
	`b©adv_h¨dif_put
(
√igh_node
->
if_öcomög
);

303 
	`k‰ì_rcu
(
√igh_node
, 
rcu
);

304 
	}
}

316 
b©adv_√igh_node
 *

317 
	$b©adv_‹ig_rouãr_gë
(
b©adv_‹ig_node
 *
‹ig_node
,

318 c⁄° 
b©adv_h¨d_iÁ˚
 *
if_outgoög
)

320 
b©adv_‹ig_iföfo
 *
‹ig_iföfo
;

321 
b©adv_√igh_node
 *
rouãr
 = 
NULL
;

323 
	`rcu_ªad_lock
();

324 
	`hli°_f‹_óch_íåy_rcu
(
‹ig_iföfo
, &
‹ig_node
->
iföfo_li°
, 
li°
) {

325 i‡(
‹ig_iföfo
->
if_outgoög
 != if_outgoing)

328 
rouãr
 = 
	`rcu_dîe„ªn˚
(
‹ig_iföfo
->router);

332 i‡(
rouãr
 && !
	`kªf_gë_u∆ess_zîo
(&rouãr->
ªfcou¡
))

333 
rouãr
 = 
NULL
;

335 
	`rcu_ªad_u∆ock
();

336  
rouãr
;

337 
	}
}

349 
b©adv_√igh_node
 *

350 
	$b©adv_‹ig_to_rouãr
(
b©adv_¥iv
 *
b©_¥iv
, 
u8
 *
‹ig_addr
,

351 
b©adv_h¨d_iÁ˚
 *
if_outgoög
)

353 
b©adv_√igh_node
 *
√igh_node
;

354 
b©adv_‹ig_node
 *
‹ig_node
;

356 
‹ig_node
 = 
	`b©adv_‹ig_hash_föd
(
b©_¥iv
, 
‹ig_addr
);

357 i‡(!
‹ig_node
)

358  
NULL
;

360 
√igh_node
 = 
	`b©adv_föd_rouãr
(
b©_¥iv
, 
‹ig_node
, 
if_outgoög
);

361 
	`b©adv_‹ig_node_put
(
‹ig_node
);

363  
√igh_node
;

364 
	}
}

375 
b©adv_‹ig_iföfo
 *

376 
	$b©adv_‹ig_iföfo_gë
(
b©adv_‹ig_node
 *
‹ig_node
,

377 
b©adv_h¨d_iÁ˚
 *
if_outgoög
)

379 
b©adv_‹ig_iföfo
 *
tmp
, *
‹ig_iföfo
 = 
NULL
;

381 
	`rcu_ªad_lock
();

382 
	`hli°_f‹_óch_íåy_rcu
(
tmp
, &
‹ig_node
->
iföfo_li°
,

383 
li°
) {

384 i‡(
tmp
->
if_outgoög
 != if_outgoing)

387 i‡(!
	`kªf_gë_u∆ess_zîo
(&
tmp
->
ªfcou¡
))

390 
‹ig_iföfo
 = 
tmp
;

393 
	`rcu_ªad_u∆ock
();

395  
‹ig_iföfo
;

396 
	}
}

409 
b©adv_‹ig_iföfo
 *

410 
	$b©adv_‹ig_iföfo_√w
(
b©adv_‹ig_node
 *
‹ig_node
,

411 
b©adv_h¨d_iÁ˚
 *
if_outgoög
)

413 
b©adv_‹ig_iföfo
 *
‹ig_iföfo
;

414 
ª£t_time
;

416 
	`•ö_lock_bh
(&
‹ig_node
->
√igh_li°_lock
);

418 
‹ig_iföfo
 = 
	`b©adv_‹ig_iföfo_gë
(
‹ig_node
, 
if_outgoög
);

419 i‡(
‹ig_iföfo
)

420 
out
;

422 
‹ig_iföfo
 = 
	`kzÆloc
((*‹ig_iföfo), 
GFP_ATOMIC
);

423 i‡(!
‹ig_iföfo
)

424 
out
;

426 i‡(
if_outgoög
 !
BATADV_IF_DEFAULT
)

427 
	`kªf_gë
(&
if_outgoög
->
ªfcou¡
);

429 
ª£t_time
 = 
jiffõs
 - 1;

430 
ª£t_time
 -
	`m£cs_to_jiffõs
(
BATADV_RESET_PROTECTION_MS
);

431 
‹ig_iföfo
->
b©m™_£qno_ª£t
 = 
ª£t_time
;

432 
‹ig_iföfo
->
if_outgoög
 = if_outgoing;

433 
	`INIT_HLIST_NODE
(&
‹ig_iföfo
->
li°
);

434 
	`kªf_öô
(&
‹ig_iföfo
->
ªfcou¡
);

436 
	`kªf_gë
(&
‹ig_iföfo
->
ªfcou¡
);

437 
	`hli°_add_hód_rcu
(&
‹ig_iföfo
->
li°
,

438 &
‹ig_node
->
iföfo_li°
);

439 
out
:

440 
	`•ö_u∆ock_bh
(&
‹ig_node
->
√igh_li°_lock
);

441  
‹ig_iföfo
;

442 
	}
}

453 
b©adv_√igh_iföfo
 *

454 
	$b©adv_√igh_iföfo_gë
(
b©adv_√igh_node
 *
√igh
,

455 
b©adv_h¨d_iÁ˚
 *
if_outgoög
)

457 
b©adv_√igh_iföfo
 *
√igh_iföfo
 = 
NULL
,

458 *
tmp_√igh_iföfo
;

460 
	`rcu_ªad_lock
();

461 
	`hli°_f‹_óch_íåy_rcu
(
tmp_√igh_iföfo
, &
√igh
->
iföfo_li°
,

462 
li°
) {

463 i‡(
tmp_√igh_iföfo
->
if_outgoög
 != if_outgoing)

466 i‡(!
	`kªf_gë_u∆ess_zîo
(&
tmp_√igh_iföfo
->
ªfcou¡
))

469 
√igh_iföfo
 = 
tmp_√igh_iföfo
;

472 
	`rcu_ªad_u∆ock
();

474  
√igh_iföfo
;

475 
	}
}

488 
b©adv_√igh_iföfo
 *

489 
	$b©adv_√igh_iföfo_√w
(
b©adv_√igh_node
 *
√igh
,

490 
b©adv_h¨d_iÁ˚
 *
if_outgoög
)

492 
b©adv_√igh_iföfo
 *
√igh_iföfo
;

494 
	`•ö_lock_bh
(&
√igh
->
iföfo_lock
);

496 
√igh_iföfo
 = 
	`b©adv_√igh_iföfo_gë
(
√igh
, 
if_outgoög
);

497 i‡(
√igh_iföfo
)

498 
out
;

500 
√igh_iföfo
 = 
	`kzÆloc
((*√igh_iföfo), 
GFP_ATOMIC
);

501 i‡(!
√igh_iföfo
)

502 
out
;

504 i‡(
if_outgoög
)

505 
	`kªf_gë
(&
if_outgoög
->
ªfcou¡
);

507 
	`INIT_HLIST_NODE
(&
√igh_iföfo
->
li°
);

508 
	`kªf_öô
(&
√igh_iföfo
->
ªfcou¡
);

509 
√igh_iföfo
->
if_outgoög
 = if_outgoing;

511 
	`kªf_gë
(&
√igh_iföfo
->
ªfcou¡
);

512 
	`hli°_add_hód_rcu
(&
√igh_iföfo
->
li°
, &
√igh
->
iföfo_li°
);

514 
out
:

515 
	`•ö_u∆ock_bh
(&
√igh
->
iföfo_lock
);

517  
√igh_iföfo
;

518 
	}
}

531 
b©adv_√igh_node
 *

532 
	$b©adv_√igh_node_gë
(c⁄° 
b©adv_‹ig_node
 *
‹ig_node
,

533 c⁄° 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
,

534 c⁄° 
u8
 *
addr
)

536 
b©adv_√igh_node
 *
tmp_√igh_node
, *
ªs
 = 
NULL
;

538 
	`rcu_ªad_lock
();

539 
	`hli°_f‹_óch_íåy_rcu
(
tmp_√igh_node
, &
‹ig_node
->
√igh_li°
, 
li°
) {

540 i‡(!
	`b©adv_com∑ª_ëh
(
tmp_√igh_node
->
addr
,áddr))

543 i‡(
tmp_√igh_node
->
if_öcomög
 !
h¨d_iÁ˚
)

546 i‡(!
	`kªf_gë_u∆ess_zîo
(&
tmp_√igh_node
->
ªfcou¡
))

549 
ªs
 = 
tmp_√igh_node
;

552 
	`rcu_ªad_u∆ock
();

554  
ªs
;

555 
	}
}

565 
b©adv_h¨dif_√igh_node
 *

566 
	$b©adv_h¨dif_√igh_¸óã
(
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
,

567 c⁄° 
u8
 *
√igh_addr
,

568 
b©adv_‹ig_node
 *
‹ig_node
)

570 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
h¨d_iÁ˚
->
mesh_iÁ˚
);

571 
b©adv_h¨dif_√igh_node
 *
h¨dif_√igh
;

573 
	`•ö_lock_bh
(&
h¨d_iÁ˚
->
√igh_li°_lock
);

576 
h¨dif_√igh
 = 
	`b©adv_h¨dif_√igh_gë
(
h¨d_iÁ˚
, 
√igh_addr
);

577 i‡(
h¨dif_√igh
)

578 
out
;

580 
h¨dif_√igh
 = 
	`kzÆloc
((*h¨dif_√igh), 
GFP_ATOMIC
);

581 i‡(!
h¨dif_√igh
)

582 
out
;

584 
	`kªf_gë
(&
h¨d_iÁ˚
->
ªfcou¡
);

585 
	`INIT_HLIST_NODE
(&
h¨dif_√igh
->
li°
);

586 
	`ëhî_addr_c›y
(
h¨dif_√igh
->
addr
, 
√igh_addr
);

587 
	`ëhî_addr_c›y
(
h¨dif_√igh
->
‹ig
, 
‹ig_node
->orig);

588 
h¨dif_√igh
->
if_öcomög
 = 
h¨d_iÁ˚
;

589 
h¨dif_√igh
->
œ°_£í
 = 
jiffõs
;

591 
	`kªf_öô
(&
h¨dif_√igh
->
ªfcou¡
);

593 i‡(
b©_¥iv
->
Ægo_›s
->
√igh
.
h¨dif_öô
)

594 
b©_¥iv
->
Ægo_›s
->
√igh
.
	`h¨dif_öô
(
h¨dif_√igh
);

596 
	`hli°_add_hód_rcu
(&
h¨dif_√igh
->
li°
, &
h¨d_iÁ˚
->
√igh_li°
);

598 
out
:

599 
	`•ö_u∆ock_bh
(&
h¨d_iÁ˚
->
√igh_li°_lock
);

600  
h¨dif_√igh
;

601 
	}
}

612 
b©adv_h¨dif_√igh_node
 *

613 
	$b©adv_h¨dif_√igh_gë_‹_¸óã
(
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
,

614 c⁄° 
u8
 *
√igh_addr
,

615 
b©adv_‹ig_node
 *
‹ig_node
)

617 
b©adv_h¨dif_√igh_node
 *
h¨dif_√igh
;

620 
h¨dif_√igh
 = 
	`b©adv_h¨dif_√igh_gë
(
h¨d_iÁ˚
, 
√igh_addr
);

621 i‡(
h¨dif_√igh
)

622  
h¨dif_√igh
;

624  
	`b©adv_h¨dif_√igh_¸óã
(
h¨d_iÁ˚
, 
√igh_addr
, 
‹ig_node
);

625 
	}
}

636 
b©adv_h¨dif_√igh_node
 *

637 
	$b©adv_h¨dif_√igh_gë
(c⁄° 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
,

638 c⁄° 
u8
 *
√igh_addr
)

640 
b©adv_h¨dif_√igh_node
 *
tmp_h¨dif_√igh
, *
h¨dif_√igh
 = 
NULL
;

642 
	`rcu_ªad_lock
();

643 
	`hli°_f‹_óch_íåy_rcu
(
tmp_h¨dif_√igh
,

644 &
h¨d_iÁ˚
->
√igh_li°
, 
li°
) {

645 i‡(!
	`b©adv_com∑ª_ëh
(
tmp_h¨dif_√igh
->
addr
, 
√igh_addr
))

648 i‡(!
	`kªf_gë_u∆ess_zîo
(&
tmp_h¨dif_√igh
->
ªfcou¡
))

651 
h¨dif_√igh
 = 
tmp_h¨dif_√igh
;

654 
	`rcu_ªad_u∆ock
();

656  
h¨dif_√igh
;

657 
	}
}

669 
b©adv_√igh_node
 *

670 
	$b©adv_√igh_node_¸óã
(
b©adv_‹ig_node
 *
‹ig_node
,

671 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
,

672 c⁄° 
u8
 *
√igh_addr
)

674 
b©adv_√igh_node
 *
√igh_node
;

675 
b©adv_h¨dif_√igh_node
 *
h¨dif_√igh
 = 
NULL
;

677 
	`•ö_lock_bh
(&
‹ig_node
->
√igh_li°_lock
);

679 
√igh_node
 = 
	`b©adv_√igh_node_gë
(
‹ig_node
, 
h¨d_iÁ˚
, 
√igh_addr
);

680 i‡(
√igh_node
)

681 
out
;

683 
h¨dif_√igh
 = 
	`b©adv_h¨dif_√igh_gë_‹_¸óã
(
h¨d_iÁ˚
,

684 
√igh_addr
, 
‹ig_node
);

685 i‡(!
h¨dif_√igh
)

686 
out
;

688 
√igh_node
 = 
	`kzÆloc
((*√igh_node), 
GFP_ATOMIC
);

689 i‡(!
√igh_node
)

690 
out
;

692 
	`INIT_HLIST_NODE
(&
√igh_node
->
li°
);

693 
	`INIT_HLIST_HEAD
(&
√igh_node
->
iföfo_li°
);

694 
	`•ö_lock_öô
(&
√igh_node
->
iföfo_lock
);

696 
	`kªf_gë
(&
h¨d_iÁ˚
->
ªfcou¡
);

697 
	`ëhî_addr_c›y
(
√igh_node
->
addr
, 
√igh_addr
);

698 
√igh_node
->
if_öcomög
 = 
h¨d_iÁ˚
;

699 
√igh_node
->
‹ig_node
 = orig_node;

700 
√igh_node
->
œ°_£í
 = 
jiffõs
;

703 
	`kªf_gë
(&
h¨dif_√igh
->
ªfcou¡
);

704 
√igh_node
->
h¨dif_√igh
 = hardif_neigh;

707 
	`kªf_öô
(&
√igh_node
->
ªfcou¡
);

709 
	`kªf_gë
(&
√igh_node
->
ªfcou¡
);

710 
	`hli°_add_hód_rcu
(&
√igh_node
->
li°
, &
‹ig_node
->
√igh_li°
);

712 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
‹ig_node
->
b©_¥iv
,

714 
√igh_addr
, 
‹ig_node
->
‹ig
, 
h¨d_iÁ˚
->
√t_dev
->
«me
);

716 
out
:

717 
	`•ö_u∆ock_bh
(&
‹ig_node
->
√igh_li°_lock
);

719 
	`b©adv_h¨dif_√igh_put
(
h¨dif_√igh
);

720  
√igh_node
;

721 
	}
}

731 
b©adv_√igh_node
 *

732 
	$b©adv_√igh_node_gë_‹_¸óã
(
b©adv_‹ig_node
 *
‹ig_node
,

733 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
,

734 c⁄° 
u8
 *
√igh_addr
)

736 
b©adv_√igh_node
 *
√igh_node
;

739 
√igh_node
 = 
	`b©adv_√igh_node_gë
(
‹ig_node
, 
h¨d_iÁ˚
, 
√igh_addr
);

740 i‡(
√igh_node
)

741  
√igh_node
;

743  
	`b©adv_√igh_node_¸óã
(
‹ig_node
, 
h¨d_iÁ˚
, 
√igh_addr
);

744 
	}
}

754 
	$b©adv_h¨dif_√igh_dump
(
sk_buff
 *
msg
, 
√éök_ˇŒback
 *
cb
)

756 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
, *
h¨d_iÁ˚
;

757 
√t_devi˚
 *
mesh_iÁ˚
;

758 
b©adv_¥iv
 *
b©_¥iv
;

759 
ªt
;

761 
mesh_iÁ˚
 = 
	`b©adv_√éök_gë_meshif
(
cb
);

762 i‡(
	`IS_ERR
(
mesh_iÁ˚
))

763  
	`PTR_ERR
(
mesh_iÁ˚
);

765 
b©_¥iv
 = 
	`√tdev_¥iv
(
mesh_iÁ˚
);

767 
¥im¨y_if
 = 
	`b©adv_¥im¨y_if_gë_£À˘ed
(
b©_¥iv
);

768 i‡(!
¥im¨y_if
 ||Örim¨y_if->
if_°©us
 !
BATADV_IF_ACTIVE
) {

769 
ªt
 = -
ENOENT
;

770 
out_put_mesh_iÁ˚
;

773 
h¨d_iÁ˚
 = 
	`b©adv_√éök_gë_h¨dif
(
b©_¥iv
, 
cb
);

774 i‡(
	`IS_ERR
(
h¨d_iÁ˚
Ë&& 
	`PTR_ERR
(h¨d_iÁ˚Ë!-
ENONET
) {

775 
ªt
 = 
	`PTR_ERR
(
h¨d_iÁ˚
);

776 
out_put_¥im¨y_if
;

777 } i‡(
	`IS_ERR
(
h¨d_iÁ˚
)) {

781 
h¨d_iÁ˚
 = 
BATADV_IF_DEFAULT
;

784 i‡(!
b©_¥iv
->
Ægo_›s
->
√igh
.
dump
) {

785 
ªt
 = -
EOPNOTSUPP
;

786 
out_put_h¨d_iÁ˚
;

789 
b©_¥iv
->
Ægo_›s
->
√igh
.
	`dump
(
msg
, 
cb
, b©_¥iv, 
h¨d_iÁ˚
);

791 
ªt
 = 
msg
->
Àn
;

793 
out_put_h¨d_iÁ˚
:

794 
	`b©adv_h¨dif_put
(
h¨d_iÁ˚
);

795 
out_put_¥im¨y_if
:

796 
	`b©adv_h¨dif_put
(
¥im¨y_if
);

797 
out_put_mesh_iÁ˚
:

798 
	`dev_put
(
mesh_iÁ˚
);

800  
ªt
;

801 
	}
}

808 
	$b©adv_‹ig_iföfo_ªÀa£
(
kªf
 *
ªf
)

810 
b©adv_‹ig_iföfo
 *
‹ig_iföfo
;

811 
b©adv_√igh_node
 *
rouãr
;

813 
‹ig_iföfo
 = 
	`c⁄èöî_of
(
ªf
, 
b©adv_‹ig_iföfo
, 
ªfcou¡
);

815 i‡(
‹ig_iföfo
->
if_outgoög
 !
BATADV_IF_DEFAULT
)

816 
	`b©adv_h¨dif_put
(
‹ig_iföfo
->
if_outgoög
);

819 
rouãr
 = 
	`rcu_dîe„ªn˚_¥Ÿe˘ed
(
‹ig_iföfo
->rouãr, 
åue
);

820 
	`b©adv_√igh_node_put
(
rouãr
);

822 
	`k‰ì_rcu
(
‹ig_iföfo
, 
rcu
);

823 
	}
}

829 
	$b©adv_‹ig_node_‰ì_rcu
(
rcu_hód
 *
rcu
)

831 
b©adv_‹ig_node
 *
‹ig_node
;

833 
‹ig_node
 = 
	`c⁄èöî_of
(
rcu
, 
b©adv_‹ig_node
,Ñcu);

835 
	`b©adv_mˇ°_purge_‹ig
(
‹ig_node
);

837 
	`b©adv_‰ag_purge_‹ig
(
‹ig_node
, 
NULL
);

839 
	`k‰ì
(
‹ig_node
->
â_buff
);

840 
	`k‰ì
(
‹ig_node
);

841 
	}
}

848 
	$b©adv_‹ig_node_ªÀa£
(
kªf
 *
ªf
)

850 
hli°_node
 *
node_tmp
;

851 
b©adv_√igh_node
 *
√igh_node
;

852 
b©adv_‹ig_node
 *
‹ig_node
;

853 
b©adv_‹ig_iföfo
 *
‹ig_iföfo
;

854 
b©adv_‹ig_node_vœn
 *
vœn
;

855 
b©adv_‹ig_iföfo
 *
œ°_ˇndid©e
;

857 
‹ig_node
 = 
	`c⁄èöî_of
(
ªf
, 
b©adv_‹ig_node
, 
ªfcou¡
);

859 
	`•ö_lock_bh
(&
‹ig_node
->
√igh_li°_lock
);

862 
	`hli°_f‹_óch_íåy_ß„
(
√igh_node
, 
node_tmp
,

863 &
‹ig_node
->
√igh_li°
, 
li°
) {

864 
	`hli°_dñ_rcu
(&
√igh_node
->
li°
);

865 
	`b©adv_√igh_node_put
(
√igh_node
);

868 
	`hli°_f‹_óch_íåy_ß„
(
‹ig_iföfo
, 
node_tmp
,

869 &
‹ig_node
->
iföfo_li°
, 
li°
) {

870 
	`hli°_dñ_rcu
(&
‹ig_iföfo
->
li°
);

871 
	`b©adv_‹ig_iföfo_put
(
‹ig_iföfo
);

874 
œ°_ˇndid©e
 = 
‹ig_node
->
œ°_b⁄dög_ˇndid©e
;

875 
‹ig_node
->
œ°_b⁄dög_ˇndid©e
 = 
NULL
;

876 
	`•ö_u∆ock_bh
(&
‹ig_node
->
√igh_li°_lock
);

878 
	`b©adv_‹ig_iföfo_put
(
œ°_ˇndid©e
);

880 
	`•ö_lock_bh
(&
‹ig_node
->
vœn_li°_lock
);

881 
	`hli°_f‹_óch_íåy_ß„
(
vœn
, 
node_tmp
, &
‹ig_node
->
vœn_li°
, 
li°
) {

882 
	`hli°_dñ_rcu
(&
vœn
->
li°
);

883 
	`b©adv_‹ig_node_vœn_put
(
vœn
);

885 
	`•ö_u∆ock_bh
(&
‹ig_node
->
vœn_li°_lock
);

888 
	`b©adv_nc_purge_‹ig
(
‹ig_node
->
b©_¥iv
, orig_node, 
NULL
);

890 
	`ˇŒ_rcu
(&
‹ig_node
->
rcu
, 
b©adv_‹ig_node_‰ì_rcu
);

891 
	}
}

897 
	$b©adv_‹igö©‹_‰ì
(
b©adv_¥iv
 *
b©_¥iv
)

899 
b©adv_hashèbÀ
 *
hash
 = 
b©_¥iv
->
‹ig_hash
;

900 
hli°_node
 *
node_tmp
;

901 
hli°_hód
 *
hód
;

902 
•ölock_t
 *
li°_lock
;

903 
b©adv_‹ig_node
 *
‹ig_node
;

904 
u32
 
i
;

906 i‡(!
hash
)

909 
	`ˇn˚l_dñayed_w‹k_sync
(&
b©_¥iv
->
‹ig_w‹k
);

911 
b©_¥iv
->
‹ig_hash
 = 
NULL
;

913 
i
 = 0; i < 
hash
->
size
; i++) {

914 
hód
 = &
hash
->
èbÀ
[
i
];

915 
li°_lock
 = &
hash
->
li°_locks
[
i
];

917 
	`•ö_lock_bh
(
li°_lock
);

918 
	`hli°_f‹_óch_íåy_ß„
(
‹ig_node
, 
node_tmp
,

919 
hód
, 
hash_íåy
) {

920 
	`hli°_dñ_rcu
(&
‹ig_node
->
hash_íåy
);

921 
	`b©adv_‹ig_node_put
(
‹ig_node
);

923 
	`•ö_u∆ock_bh
(
li°_lock
);

926 
	`b©adv_hash_de°roy
(
hash
);

927 
	}
}

939 
b©adv_‹ig_node
 *
	$b©adv_‹ig_node_√w
(
b©adv_¥iv
 *
b©_¥iv
,

940 c⁄° 
u8
 *
addr
)

942 
b©adv_‹ig_node
 *
‹ig_node
;

943 
b©adv_‹ig_node_vœn
 *
vœn
;

944 
ª£t_time
;

945 
i
;

947 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

948 "Cª©ögÇew origö©‹: %pM\n", 
addr
);

950 
‹ig_node
 = 
	`kzÆloc
((*‹ig_node), 
GFP_ATOMIC
);

951 i‡(!
‹ig_node
)

952  
NULL
;

954 
	`INIT_HLIST_HEAD
(&
‹ig_node
->
√igh_li°
);

955 
	`INIT_HLIST_HEAD
(&
‹ig_node
->
vœn_li°
);

956 
	`INIT_HLIST_HEAD
(&
‹ig_node
->
iföfo_li°
);

957 
	`•ö_lock_öô
(&
‹ig_node
->
bˇ°_£qno_lock
);

958 
	`•ö_lock_öô
(&
‹ig_node
->
√igh_li°_lock
);

959 
	`•ö_lock_öô
(&
‹ig_node
->
â_buff_lock
);

960 
	`•ö_lock_öô
(&
‹ig_node
->
â_lock
);

961 
	`•ö_lock_öô
(&
‹ig_node
->
vœn_li°_lock
);

963 
	`b©adv_nc_öô_‹ig
(
‹ig_node
);

966 
	`kªf_öô
(&
‹ig_node
->
ªfcou¡
);

968 
‹ig_node
->
b©_¥iv
 = bat_priv;

969 
	`ëhî_addr_c›y
(
‹ig_node
->
‹ig
, 
addr
);

970 
	`b©adv_d©_öô_‹ig_node_addr
(
‹ig_node
);

971 
	`©omic_£t
(&
‹ig_node
->
œ°_âvn
, 0);

972 
‹ig_node
->
â_buff
 = 
NULL
;

973 
‹ig_node
->
â_buff_Àn
 = 0;

974 
‹ig_node
->
œ°_£í
 = 
jiffõs
;

975 
ª£t_time
 = 
jiffõs
 - 1 - 
	`m£cs_to_jiffõs
(
BATADV_RESET_PROTECTION_MS
);

976 
‹ig_node
->
bˇ°_£qno_ª£t
 = 
ª£t_time
;

978 #ifde‡
CONFIG_BATMAN_ADV_MCAST


979 
‹ig_node
->
mˇ°_Êags
 = 
BATADV_MCAST_WANT_NO_RTR4
;

980 
‹ig_node
->
mˇ°_Êags
 |
BATADV_MCAST_WANT_NO_RTR6
;

981 
‹ig_node
->
mˇ°_Êags
 |
BATADV_MCAST_HAVE_MC_PTYPE_CAPA
;

982 
	`INIT_HLIST_NODE
(&
‹ig_node
->
mˇ°_w™t_Æl_un¢o›abÀs_node
);

983 
	`INIT_HLIST_NODE
(&
‹ig_node
->
mˇ°_w™t_Æl_ùv4_node
);

984 
	`INIT_HLIST_NODE
(&
‹ig_node
->
mˇ°_w™t_Æl_ùv6_node
);

985 
	`•ö_lock_öô
(&
‹ig_node
->
mˇ°_h™dÀr_lock
);

989 
vœn
 = 
	`b©adv_‹ig_node_vœn_√w
(
‹ig_node
, 
BATADV_NO_FLAGS
);

990 i‡(!
vœn
)

991 
‰ì_‹ig_node
;

996 
	`b©adv_‹ig_node_vœn_put
(
vœn
);

998 
i
 = 0; i < 
BATADV_FRAG_BUFFER_COUNT
; i++) {

999 
	`INIT_HLIST_HEAD
(&
‹ig_node
->
‰agmíts
[
i
].
‰agmít_li°
);

1000 
	`•ö_lock_öô
(&
‹ig_node
->
‰agmíts
[
i
].
lock
);

1001 
‹ig_node
->
‰agmíts
[
i
].
size
 = 0;

1004  
‹ig_node
;

1005 
‰ì_‹ig_node
:

1006 
	`k‰ì
(
‹ig_node
);

1007  
NULL
;

1008 
	}
}

1016 
	$b©adv_purge_√igh_iföfo
(
b©adv_¥iv
 *
b©_¥iv
,

1017 
b©adv_√igh_node
 *
√igh
)

1019 
b©adv_√igh_iföfo
 *
√igh_iföfo
;

1020 
b©adv_h¨d_iÁ˚
 *
if_outgoög
;

1021 
hli°_node
 *
node_tmp
;

1023 
	`•ö_lock_bh
(&
√igh
->
iföfo_lock
);

1026 
	`hli°_f‹_óch_íåy_ß„
(
√igh_iföfo
, 
node_tmp
,

1027 &
√igh
->
iföfo_li°
, 
li°
) {

1028 
if_outgoög
 = 
√igh_iföfo
->if_outgoing;

1031 i‡(
if_outgoög
 =
BATADV_IF_DEFAULT
)

1035 i‡(
if_outgoög
->
if_°©us
 !
BATADV_IF_INACTIVE
 &&

1036 
if_outgoög
->
if_°©us
 !
BATADV_IF_NOT_IN_USE
 &&

1037 
if_outgoög
->
if_°©us
 !
BATADV_IF_TO_BE_REMOVED
)

1040 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

1042 
√igh
->
addr
, 
if_outgoög
->
√t_dev
->
«me
);

1044 
	`hli°_dñ_rcu
(&
√igh_iföfo
->
li°
);

1045 
	`b©adv_√igh_iföfo_put
(
√igh_iföfo
);

1048 
	`•ö_u∆ock_bh
(&
√igh
->
iföfo_lock
);

1049 
	}
}

1058 
boﬁ


1059 
	$b©adv_purge_‹ig_iföfo
(
b©adv_¥iv
 *
b©_¥iv
,

1060 
b©adv_‹ig_node
 *
‹ig_node
)

1062 
b©adv_‹ig_iföfo
 *
‹ig_iföfo
;

1063 
b©adv_h¨d_iÁ˚
 *
if_outgoög
;

1064 
hli°_node
 *
node_tmp
;

1065 
boﬁ
 
iföfo_purged
 = 
Ál£
;

1067 
	`•ö_lock_bh
(&
‹ig_node
->
√igh_li°_lock
);

1070 
	`hli°_f‹_óch_íåy_ß„
(
‹ig_iföfo
, 
node_tmp
,

1071 &
‹ig_node
->
iföfo_li°
, 
li°
) {

1072 
if_outgoög
 = 
‹ig_iföfo
->if_outgoing;

1075 i‡(
if_outgoög
 =
BATADV_IF_DEFAULT
)

1079 i‡(
if_outgoög
->
if_°©us
 !
BATADV_IF_INACTIVE
 &&

1080 
if_outgoög
->
if_°©us
 !
BATADV_IF_NOT_IN_USE
 &&

1081 
if_outgoög
->
if_°©us
 !
BATADV_IF_TO_BE_REMOVED
)

1084 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

1086 
‹ig_node
->
‹ig
, 
if_outgoög
->
√t_dev
->
«me
);

1088 
iföfo_purged
 = 
åue
;

1090 
	`hli°_dñ_rcu
(&
‹ig_iföfo
->
li°
);

1091 
	`b©adv_‹ig_iföfo_put
(
‹ig_iföfo
);

1092 i‡(
‹ig_node
->
œ°_b⁄dög_ˇndid©e
 =
‹ig_iföfo
) {

1093 
‹ig_node
->
œ°_b⁄dög_ˇndid©e
 = 
NULL
;

1094 
	`b©adv_‹ig_iföfo_put
(
‹ig_iföfo
);

1098 
	`•ö_u∆ock_bh
(&
‹ig_node
->
√igh_li°_lock
);

1100  
iföfo_purged
;

1101 
	}
}

1110 
boﬁ


1111 
	$b©adv_purge_‹ig_√ighb‹s
(
b©adv_¥iv
 *
b©_¥iv
,

1112 
b©adv_‹ig_node
 *
‹ig_node
)

1114 
hli°_node
 *
node_tmp
;

1115 
b©adv_√igh_node
 *
√igh_node
;

1116 
boﬁ
 
√igh_purged
 = 
Ál£
;

1117 
œ°_£í
;

1118 
b©adv_h¨d_iÁ˚
 *
if_öcomög
;

1120 
	`•ö_lock_bh
(&
‹ig_node
->
√igh_li°_lock
);

1123 
	`hli°_f‹_óch_íåy_ß„
(
√igh_node
, 
node_tmp
,

1124 &
‹ig_node
->
√igh_li°
, 
li°
) {

1125 
œ°_£í
 = 
√igh_node
->last_seen;

1126 
if_öcomög
 = 
√igh_node
->if_incoming;

1128 i‡(
	`b©adv_has_timed_out
(
œ°_£í
, 
BATADV_PURGE_TIMEOUT
) ||

1129 
if_öcomög
->
if_°©us
 =
BATADV_IF_INACTIVE
 ||

1130 
if_öcomög
->
if_°©us
 =
BATADV_IF_NOT_IN_USE
 ||

1131 
if_öcomög
->
if_°©us
 =
BATADV_IF_TO_BE_REMOVED
) {

1132 i‡(
if_öcomög
->
if_°©us
 =
BATADV_IF_INACTIVE
 ||

1133 
if_öcomög
->
if_°©us
 =
BATADV_IF_NOT_IN_USE
 ||

1134 
if_öcomög
->
if_°©us
 =
BATADV_IF_TO_BE_REMOVED
)

1135 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

1137 
‹ig_node
->
‹ig
, 
√igh_node
->
addr
,

1138 
if_öcomög
->
√t_dev
->
«me
);

1140 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

1142 
‹ig_node
->
‹ig
, 
√igh_node
->
addr
,

1143 
	`jiffõs_to_m£cs
(
œ°_£í
));

1145 
√igh_purged
 = 
åue
;

1147 
	`hli°_dñ_rcu
(&
√igh_node
->
li°
);

1148 
	`b©adv_√igh_node_put
(
√igh_node
);

1153 
	`b©adv_purge_√igh_iföfo
(
b©_¥iv
, 
√igh_node
);

1157 
	`•ö_u∆ock_bh
(&
‹ig_node
->
√igh_li°_lock
);

1158  
√igh_purged
;

1159 
	}
}

1169 
b©adv_√igh_node
 *

1170 
	$b©adv_föd_be°_√ighb‹
(
b©adv_¥iv
 *
b©_¥iv
,

1171 
b©adv_‹ig_node
 *
‹ig_node
,

1172 
b©adv_h¨d_iÁ˚
 *
if_outgoög
)

1174 
b©adv_√igh_node
 *
be°
 = 
NULL
, *
√igh
;

1175 
b©adv_Ægo_›s
 *
bao
 = 
b©_¥iv
->
Ægo_›s
;

1177 
	`rcu_ªad_lock
();

1178 
	`hli°_f‹_óch_íåy_rcu
(
√igh
, &
‹ig_node
->
√igh_li°
, 
li°
) {

1179 i‡(
be°
 && (
bao
->
√igh
.
	`cmp
“eigh, 
if_outgoög
, best,

1180 
if_outgoög
) <= 0))

1183 i‡(!
	`kªf_gë_u∆ess_zîo
(&
√igh
->
ªfcou¡
))

1186 
	`b©adv_√igh_node_put
(
be°
);

1188 
be°
 = 
√igh
;

1190 
	`rcu_ªad_u∆ock
();

1192  
be°
;

1193 
	}
}

1205 
boﬁ
 
	$b©adv_purge_‹ig_node
(
b©adv_¥iv
 *
b©_¥iv
,

1206 
b©adv_‹ig_node
 *
‹ig_node
)

1208 
b©adv_√igh_node
 *
be°_√igh_node
;

1209 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
;

1210 
boﬁ
 
ch™ged_iföfo
, 
ch™ged_√igh
;

1212 i‡(
	`b©adv_has_timed_out
(
‹ig_node
->
œ°_£í
,

1213 2 * 
BATADV_PURGE_TIMEOUT
)) {

1214 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

1216 
‹ig_node
->
‹ig
,

1217 
	`jiffõs_to_m£cs
(
‹ig_node
->
œ°_£í
));

1218  
åue
;

1220 
ch™ged_iföfo
 = 
	`b©adv_purge_‹ig_iföfo
(
b©_¥iv
, 
‹ig_node
);

1221 
ch™ged_√igh
 = 
	`b©adv_purge_‹ig_√ighb‹s
(
b©_¥iv
, 
‹ig_node
);

1223 i‡(!
ch™ged_iföfo
 && !
ch™ged_√igh
)

1224  
Ál£
;

1227 
be°_√igh_node
 = 
	`b©adv_föd_be°_√ighb‹
(
b©_¥iv
, 
‹ig_node
,

1228 
BATADV_IF_DEFAULT
);

1229 
	`b©adv_upd©e_rouã
(
b©_¥iv
, 
‹ig_node
, 
BATADV_IF_DEFAULT
,

1230 
be°_√igh_node
);

1231 
	`b©adv_√igh_node_put
(
be°_√igh_node
);

1234 
	`rcu_ªad_lock
();

1235 
	`li°_f‹_óch_íåy_rcu
(
h¨d_iÁ˚
, &
b©adv_h¨dif_li°
, 
li°
) {

1236 i‡(
h¨d_iÁ˚
->
if_°©us
 !
BATADV_IF_ACTIVE
)

1239 i‡(
h¨d_iÁ˚
->
mesh_iÁ˚
 !
b©_¥iv
->mesh_iface)

1242 i‡(!
	`kªf_gë_u∆ess_zîo
(&
h¨d_iÁ˚
->
ªfcou¡
))

1245 
be°_√igh_node
 = 
	`b©adv_föd_be°_√ighb‹
(
b©_¥iv
,

1246 
‹ig_node
,

1247 
h¨d_iÁ˚
);

1248 
	`b©adv_upd©e_rouã
(
b©_¥iv
, 
‹ig_node
, 
h¨d_iÁ˚
,

1249 
be°_√igh_node
);

1250 
	`b©adv_√igh_node_put
(
be°_√igh_node
);

1252 
	`b©adv_h¨dif_put
(
h¨d_iÁ˚
);

1254 
	`rcu_ªad_u∆ock
();

1256  
Ál£
;

1257 
	}
}

1263 
	$b©adv_purge_‹ig_ªf
(
b©adv_¥iv
 *
b©_¥iv
)

1265 
b©adv_hashèbÀ
 *
hash
 = 
b©_¥iv
->
‹ig_hash
;

1266 
hli°_node
 *
node_tmp
;

1267 
hli°_hód
 *
hód
;

1268 
•ölock_t
 *
li°_lock
;

1269 
b©adv_‹ig_node
 *
‹ig_node
;

1270 
u32
 
i
;

1272 i‡(!
hash
)

1276 
i
 = 0; i < 
hash
->
size
; i++) {

1277 
hód
 = &
hash
->
èbÀ
[
i
];

1278 i‡(
	`hli°_em±y
(
hód
))

1280 
li°_lock
 = &
hash
->
li°_locks
[
i
];

1282 
	`•ö_lock_bh
(
li°_lock
);

1283 
	`hli°_f‹_óch_íåy_ß„
(
‹ig_node
, 
node_tmp
,

1284 
hód
, 
hash_íåy
) {

1285 i‡(
	`b©adv_purge_‹ig_node
(
b©_¥iv
, 
‹ig_node
)) {

1286 
	`b©adv_gw_node_dñëe
(
b©_¥iv
, 
‹ig_node
);

1287 
	`hli°_dñ_rcu
(&
‹ig_node
->
hash_íåy
);

1288 
	`b©adv_â_globÆ_dñ_‹ig
(
‹ig_node
->
b©_¥iv
,

1289 
‹ig_node
, -1,

1291 
	`b©adv_‹ig_node_put
(
‹ig_node
);

1295 
	`b©adv_‰ag_purge_‹ig
(
‹ig_node
,

1296 
b©adv_‰ag_check_íåy
);

1298 
	`•ö_u∆ock_bh
(
li°_lock
);

1301 
	`b©adv_gw_ñe˘i⁄
(
b©_¥iv
);

1302 
	}
}

1304 
	$b©adv_purge_‹ig
(
w‹k_°ru˘
 *
w‹k
)

1306 
dñayed_w‹k
 *delayed_work;

1307 
b©adv_¥iv
 *
b©_¥iv
;

1309 
dñayed_w‹k
 = 
	`to_dñayed_w‹k
(
w‹k
);

1310 
b©_¥iv
 = 
	`c⁄èöî_of
(
dñayed_w‹k
, 
b©adv_¥iv
, 
‹ig_w‹k
);

1311 
	`b©adv_purge_‹ig_ªf
(
b©_¥iv
);

1312 
	`queue_dñayed_w‹k
(
b©adv_evít_w‹kqueue
,

1313 &
b©_¥iv
->
‹ig_w‹k
,

1314 
	`m£cs_to_jiffõs
(
BATADV_ORIG_WORK_PERIOD
));

1315 
	}
}

1325 
	$b©adv_‹ig_dump
(
sk_buff
 *
msg
, 
√éök_ˇŒback
 *
cb
)

1327 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
, *
h¨d_iÁ˚
;

1328 
√t_devi˚
 *
mesh_iÁ˚
;

1329 
b©adv_¥iv
 *
b©_¥iv
;

1330 
ªt
;

1332 
mesh_iÁ˚
 = 
	`b©adv_√éök_gë_meshif
(
cb
);

1333 i‡(
	`IS_ERR
(
mesh_iÁ˚
))

1334  
	`PTR_ERR
(
mesh_iÁ˚
);

1336 
b©_¥iv
 = 
	`√tdev_¥iv
(
mesh_iÁ˚
);

1338 
¥im¨y_if
 = 
	`b©adv_¥im¨y_if_gë_£À˘ed
(
b©_¥iv
);

1339 i‡(!
¥im¨y_if
 ||Örim¨y_if->
if_°©us
 !
BATADV_IF_ACTIVE
) {

1340 
ªt
 = -
ENOENT
;

1341 
out_put_mesh_iÁ˚
;

1344 
h¨d_iÁ˚
 = 
	`b©adv_√éök_gë_h¨dif
(
b©_¥iv
, 
cb
);

1345 i‡(
	`IS_ERR
(
h¨d_iÁ˚
Ë&& 
	`PTR_ERR
(h¨d_iÁ˚Ë!-
ENONET
) {

1346 
ªt
 = 
	`PTR_ERR
(
h¨d_iÁ˚
);

1347 
out_put_¥im¨y_if
;

1348 } i‡(
	`IS_ERR
(
h¨d_iÁ˚
)) {

1352 
h¨d_iÁ˚
 = 
BATADV_IF_DEFAULT
;

1355 i‡(!
b©_¥iv
->
Ægo_›s
->
‹ig
.
dump
) {

1356 
ªt
 = -
EOPNOTSUPP
;

1357 
out_put_h¨d_iÁ˚
;

1360 
b©_¥iv
->
Ægo_›s
->
‹ig
.
	`dump
(
msg
, 
cb
, b©_¥iv, 
h¨d_iÁ˚
);

1362 
ªt
 = 
msg
->
Àn
;

1364 
out_put_h¨d_iÁ˚
:

1365 
	`b©adv_h¨dif_put
(
h¨d_iÁ˚
);

1366 
out_put_¥im¨y_if
:

1367 
	`b©adv_h¨dif_put
(
¥im¨y_if
);

1368 
out_put_mesh_iÁ˚
:

1369 
	`dev_put
(
mesh_iÁ˚
);

1371  
ªt
;

1372 
	}
}

	@net/batman-adv/originator.h

7 #i‚de‡
_NET_BATMAN_ADV_ORIGINATOR_H_


8 
	#_NET_BATMAN_ADV_ORIGINATOR_H_


	)

10 
	~"maö.h
"

12 
	~<löux/compûî.h
>

13 
	~<löux/if_ëhî.h
>

14 
	~<löux/jhash.h
>

15 
	~<löux/kªf.h
>

16 
	~<löux/√éök.h
>

17 
	~<löux/skbuff.h
>

18 
	~<löux/ty≥s.h
>

20 
boﬁ
 
b©adv_com∑ª_‹ig
(c⁄° 
hli°_node
 *
node
, c⁄° *
d©a2
);

21 
b©adv_‹igö©‹_öô
(
b©adv_¥iv
 *
b©_¥iv
);

22 
b©adv_‹igö©‹_‰ì
(
b©adv_¥iv
 *
b©_¥iv
);

23 
b©adv_purge_‹ig_ªf
(
b©adv_¥iv
 *
b©_¥iv
);

24 
b©adv_‹ig_node_ªÀa£
(
kªf
 *
ªf
);

25 
b©adv_‹ig_node
 *
b©adv_‹ig_node_√w
(
b©adv_¥iv
 *
b©_¥iv
,

26 c⁄° 
u8
 *
addr
);

27 
b©adv_h¨dif_√igh_node
 *

28 
b©adv_h¨dif_√igh_gë
(c⁄° 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
,

29 c⁄° 
u8
 *
√igh_addr
);

30 
b©adv_h¨dif_√igh_ªÀa£
(
kªf
 *
ªf
);

31 
b©adv_√igh_node
 *

32 
b©adv_√igh_node_gë_‹_¸óã
(
b©adv_‹ig_node
 *
‹ig_node
,

33 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
,

34 c⁄° 
u8
 *
√igh_addr
);

35 
b©adv_√igh_node_ªÀa£
(
kªf
 *
ªf
);

36 
b©adv_√igh_node
 *

37 
b©adv_‹ig_rouãr_gë
(
b©adv_‹ig_node
 *
‹ig_node
,

38 c⁄° 
b©adv_h¨d_iÁ˚
 *
if_outgoög
);

39 
b©adv_√igh_node
 *

40 
b©adv_‹ig_to_rouãr
(
b©adv_¥iv
 *
b©_¥iv
, 
u8
 *
‹ig_addr
,

41 
b©adv_h¨d_iÁ˚
 *
if_outgoög
);

42 
b©adv_√igh_iföfo
 *

43 
b©adv_√igh_iföfo_√w
(
b©adv_√igh_node
 *
√igh
,

44 
b©adv_h¨d_iÁ˚
 *
if_outgoög
);

45 
b©adv_√igh_iföfo
 *

46 
b©adv_√igh_iföfo_gë
(
b©adv_√igh_node
 *
√igh
,

47 
b©adv_h¨d_iÁ˚
 *
if_outgoög
);

48 
b©adv_√igh_iföfo_ªÀa£
(
kªf
 *
ªf
);

50 
b©adv_h¨dif_√igh_dump
(
sk_buff
 *
msg
, 
√éök_ˇŒback
 *
cb
);

52 
b©adv_‹ig_iföfo
 *

53 
b©adv_‹ig_iföfo_gë
(
b©adv_‹ig_node
 *
‹ig_node
,

54 
b©adv_h¨d_iÁ˚
 *
if_outgoög
);

55 
b©adv_‹ig_iföfo
 *

56 
b©adv_‹ig_iföfo_√w
(
b©adv_‹ig_node
 *
‹ig_node
,

57 
b©adv_h¨d_iÁ˚
 *
if_outgoög
);

58 
b©adv_‹ig_iföfo_ªÀa£
(
kªf
 *
ªf
);

60 
b©adv_‹ig_dump
(
sk_buff
 *
msg
, 
√éök_ˇŒback
 *
cb
);

61 
b©adv_‹ig_node_vœn
 *

62 
b©adv_‹ig_node_vœn_√w
(
b©adv_‹ig_node
 *
‹ig_node
,

63 
vid
);

64 
b©adv_‹ig_node_vœn
 *

65 
b©adv_‹ig_node_vœn_gë
(
b©adv_‹ig_node
 *
‹ig_node
,

66 
vid
);

67 
b©adv_‹ig_node_vœn_ªÀa£
(
kªf
 *
ªf
);

77 
ölöe
 
u32
 
	$b©adv_choo£_‹ig
(c⁄° *
d©a
, 
u32
 
size
)

79 
u32
 
hash
 = 0;

81 
hash
 = 
	`jhash
(
d©a
, 
ETH_ALEN
, hash);

82  
hash
 % 
size
;

83 
	}
}

85 
b©adv_‹ig_node
 *

86 
b©adv_‹ig_hash_föd
(
b©adv_¥iv
 *
b©_¥iv
, c⁄° *
d©a
);

93 
ölöe
 

94 
	$b©adv_‹ig_node_vœn_put
(
b©adv_‹ig_node_vœn
 *
‹ig_vœn
)

96 i‡(!
‹ig_vœn
)

99 
	`kªf_put
(&
‹ig_vœn
->
ªfcou¡
, 
b©adv_‹ig_node_vœn_ªÀa£
);

100 
	}
}

107 
ölöe
 

108 
	$b©adv_√igh_iföfo_put
(
b©adv_√igh_iföfo
 *
√igh_iföfo
)

110 i‡(!
√igh_iföfo
)

113 
	`kªf_put
(&
√igh_iföfo
->
ªfcou¡
, 
b©adv_√igh_iföfo_ªÀa£
);

114 
	}
}

121 
ölöe
 

122 
	$b©adv_h¨dif_√igh_put
(
b©adv_h¨dif_√igh_node
 *
h¨dif_√igh
)

124 i‡(!
h¨dif_√igh
)

127 
	`kªf_put
(&
h¨dif_√igh
->
ªfcou¡
, 
b©adv_h¨dif_√igh_ªÀa£
);

128 
	}
}

135 
ölöe
 
	$b©adv_√igh_node_put
(
b©adv_√igh_node
 *
√igh_node
)

137 i‡(!
√igh_node
)

140 
	`kªf_put
(&
√igh_node
->
ªfcou¡
, 
b©adv_√igh_node_ªÀa£
);

141 
	}
}

148 
ölöe
 

149 
	$b©adv_‹ig_iföfo_put
(
b©adv_‹ig_iföfo
 *
‹ig_iföfo
)

151 i‡(!
‹ig_iföfo
)

154 
	`kªf_put
(&
‹ig_iföfo
->
ªfcou¡
, 
b©adv_‹ig_iföfo_ªÀa£
);

155 
	}
}

162 
ölöe
 
	$b©adv_‹ig_node_put
(
b©adv_‹ig_node
 *
‹ig_node
)

164 i‡(!
‹ig_node
)

167 
	`kªf_put
(&
‹ig_node
->
ªfcou¡
, 
b©adv_‹ig_node_ªÀa£
);

168 
	}
}

	@net/batman-adv/routing.c

7 
	~"routög.h
"

8 
	~"maö.h
"

10 
	~<löux/©omic.h
>

11 
	~<löux/byã‹dî/gíîic.h
>

12 
	~<löux/compûî.h
>

13 
	~<löux/î∫o.h
>

14 
	~<löux/ëhîdevi˚.h
>

15 
	~<löux/if_ëhî.h
>

16 
	~<löux/jiffõs.h
>

17 
	~<löux/kªf.h
>

18 
	~<löux/√tdevi˚.h
>

19 
	~<löux/¥ötk.h
>

20 
	~<löux/rculi°.h
>

21 
	~<löux/rcupd©e.h
>

22 
	~<löux/skbuff.h
>

23 
	~<löux/•ölock.h
>

24 
	~<löux/°ddef.h
>

25 
	~<u≠i/löux/b©adv_∑ckë.h
>

27 
	~"bô¨øy.h
"

28 
	~"bridge_lo›_avoid™˚.h
"

29 
	~"di°ribuãd-¨p-èbÀ.h
"

30 
	~"‰agmíèti⁄.h
"

31 
	~"h¨d-öãrÁ˚.h
"

32 
	~"log.h
"

33 
	~"mesh-öãrÁ˚.h
"

34 
	~"√tw‹k-codög.h
"

35 
	~"‹igö©‹.h
"

36 
	~"£nd.h
"

37 
	~"ç_mëî.h
"

38 
	~"å™¶©i⁄-èbÀ.h
"

39 
	~"tvlv.h
"

41 
b©adv_rouã_uniˇ°_∑ckë
(
sk_buff
 *
skb
,

42 
b©adv_h¨d_iÁ˚
 *
ªcv_if
);

53 
	$_b©adv_upd©e_rouã
(
b©adv_¥iv
 *
b©_¥iv
,

54 
b©adv_‹ig_node
 *
‹ig_node
,

55 
b©adv_h¨d_iÁ˚
 *
ªcv_if
,

56 
b©adv_√igh_node
 *
√igh_node
)

58 
b©adv_‹ig_iföfo
 *
‹ig_iföfo
;

59 
b©adv_√igh_node
 *
cuº_rouãr
;

61 
‹ig_iföfo
 = 
	`b©adv_‹ig_iföfo_gë
(
‹ig_node
, 
ªcv_if
);

62 i‡(!
‹ig_iföfo
)

65 
	`•ö_lock_bh
(&
‹ig_node
->
√igh_li°_lock
);

75 i‡(
√igh_node
)

76 
	`kªf_gë
(&
√igh_node
->
ªfcou¡
);

78 
cuº_rouãr
 = 
	`rcu_ª∂a˚_poöãr
(
‹ig_iföfo
->
rouãr
, 
√igh_node
,

79 
åue
);

80 
	`•ö_u∆ock_bh
(&
‹ig_node
->
√igh_li°_lock
);

81 
	`b©adv_‹ig_iföfo_put
(
‹ig_iföfo
);

84 i‡(
cuº_rouãr
 && !
√igh_node
) {

85 
	`b©adv_dbg
(
BATADV_DBG_ROUTES
, 
b©_¥iv
,

86 "DñëögÑouãÅow¨ds: %pM\n", 
‹ig_node
->
‹ig
);

87 
	`b©adv_â_globÆ_dñ_‹ig
(
b©_¥iv
, 
‹ig_node
, -1,

91 } i‡(!
cuº_rouãr
 && 
√igh_node
) {

92 
	`b©adv_dbg
(
BATADV_DBG_ROUTES
, 
b©_¥iv
,

94 
‹ig_node
->
‹ig
, 
√igh_node
->
addr
);

96 } i‡(
√igh_node
 && 
cuº_rouãr
) {

97 
	`b©adv_dbg
(
BATADV_DBG_ROUTES
, 
b©_¥iv
,

99 
‹ig_node
->
‹ig
, 
√igh_node
->
addr
,

100 
cuº_rouãr
->
addr
);

104 
	`b©adv_√igh_node_put
(
cuº_rouãr
);

105 
	}
}

114 
	$b©adv_upd©e_rouã
(
b©adv_¥iv
 *
b©_¥iv
,

115 
b©adv_‹ig_node
 *
‹ig_node
,

116 
b©adv_h¨d_iÁ˚
 *
ªcv_if
,

117 
b©adv_√igh_node
 *
√igh_node
)

119 
b©adv_√igh_node
 *
rouãr
 = 
NULL
;

121 i‡(!
‹ig_node
)

122 
out
;

124 
rouãr
 = 
	`b©adv_‹ig_rouãr_gë
(
‹ig_node
, 
ªcv_if
);

126 i‡(
rouãr
 !
√igh_node
)

127 
	`_b©adv_upd©e_rouã
(
b©_¥iv
, 
‹ig_node
, 
ªcv_if
, 
√igh_node
);

129 
out
:

130 
	`b©adv_√igh_node_put
(
rouãr
);

131 
	}
}

149 
boﬁ
 
	$b©adv_wödow_¥Ÿe˘ed
(
b©adv_¥iv
 *
b©_¥iv
, 
s32
 
£q_num_diff
,

150 
s32
 
£q_ﬁd_max_diff
, *
œ°_ª£t
,

151 
boﬁ
 *
¥Ÿe˘i⁄_°¨ãd
)

153 i‡(
£q_num_diff
 <-
£q_ﬁd_max_diff
 ||

154 
£q_num_diff
 >
BATADV_EXPECTED_SEQNO_RANGE
) {

155 i‡(!
	`b©adv_has_timed_out
(*
œ°_ª£t
,

156 
BATADV_RESET_PROTECTION_MS
))

157  
åue
;

159 *
œ°_ª£t
 = 
jiffõs
;

160 i‡(
¥Ÿe˘i⁄_°¨ãd
)

161 *
¥Ÿe˘i⁄_°¨ãd
 = 
åue
;

162 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

166  
Ál£
;

167 
	}
}

177 
boﬁ
 
	$b©adv_check_m™agemít_∑ckë
(
sk_buff
 *
skb
,

178 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
,

179 
hódî_Àn
)

181 
ëhhdr
 *ethhdr;

184 i‡(
	`u∆ikñy
(!
	`pskb_may_puŒ
(
skb
, 
hódî_Àn
)))

185  
Ál£
;

187 
ëhhdr
 = 
	`ëh_hdr
(
skb
);

190 i‡(!
	`is_brﬂdˇ°_ëhî_addr
(
ëhhdr
->
h_de°
))

191  
Ál£
;

194 i‡(!
	`is_vÆid_ëhî_addr
(
ëhhdr
->
h_sour˚
))

195  
Ál£
;

198 i‡(
	`skb_cow
(
skb
, 0) < 0)

199  
Ál£
;

202 i‡(
	`skb_löórize
(
skb
) < 0)

203  
Ál£
;

205  
åue
;

206 
	}
}

216 
	$b©adv_ªcv_my_icmp_∑ckë
(
b©adv_¥iv
 *
b©_¥iv
,

217 
sk_buff
 *
skb
)

219 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
 = 
NULL
;

220 
b©adv_‹ig_node
 *
‹ig_node
 = 
NULL
;

221 
b©adv_icmp_hódî
 *
icmph
;

222 
ªs
, 
ªt
 = 
NET_RX_DROP
;

224 
icmph
 = (
b©adv_icmp_hódî
 *)
skb
->
d©a
;

226 
icmph
->
msg_ty≥
) {

227 
BATADV_ECHO_REQUEST
:

229 
¥im¨y_if
 = 
	`b©adv_¥im¨y_if_gë_£À˘ed
(
b©_¥iv
);

230 i‡(!
¥im¨y_if
)

231 
out
;

234 
‹ig_node
 = 
	`b©adv_‹ig_hash_föd
(
b©_¥iv
, 
icmph
->
‹ig
);

235 i‡(!
‹ig_node
)

236 
out
;

239 i‡(
	`skb_cow
(
skb
, 
ETH_HLEN
) < 0)

240 
out
;

242 
icmph
 = (
b©adv_icmp_hódî
 *)
skb
->
d©a
;

244 
	`ëhî_addr_c›y
(
icmph
->
d°
, icmph->
‹ig
);

245 
	`ëhî_addr_c›y
(
icmph
->
‹ig
, 
¥im¨y_if
->
√t_dev
->
dev_addr
);

246 
icmph
->
msg_ty≥
 = 
BATADV_ECHO_REPLY
;

247 
icmph
->
âl
 = 
BATADV_TTL
;

249 
ªs
 = 
	`b©adv_£nd_skb_to_‹ig
(
skb
, 
‹ig_node
, 
NULL
);

250 i‡(
ªs
 =
NET_XMIT_SUCCESS
)

251 
ªt
 = 
NET_RX_SUCCESS
;

254 
skb
 = 
NULL
;

256 
BATADV_TP
:

257 i‡(!
	`pskb_may_puŒ
(
skb
, (
b©adv_icmp_ç_∑ckë
)))

258 
out
;

260 
	`b©adv_ç_mëî_ªcv
(
b©_¥iv
, 
skb
);

261 
ªt
 = 
NET_RX_SUCCESS
;

263 
skb
 = 
NULL
;

264 
out
;

267 
out
;

269 
out
:

270 
	`b©adv_h¨dif_put
(
¥im¨y_if
);

271 
	`b©adv_‹ig_node_put
(
‹ig_node
);

273 
	`k‰ì_skb
(
skb
);

275  
ªt
;

276 
	}
}

278 
	$b©adv_ªcv_icmp_âl_ex˚eded
(
b©adv_¥iv
 *
b©_¥iv
,

279 
sk_buff
 *
skb
)

281 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
 = 
NULL
;

282 
b©adv_‹ig_node
 *
‹ig_node
 = 
NULL
;

283 
b©adv_icmp_∑ckë
 *
icmp_∑ckë
;

284 
ªs
, 
ªt
 = 
NET_RX_DROP
;

286 
icmp_∑ckë
 = (
b©adv_icmp_∑ckë
 *)
skb
->
d©a
;

289 i‡(
icmp_∑ckë
->
msg_ty≥
 !
BATADV_ECHO_REQUEST
) {

290 
	`¥_debug
("Warning - can't forward icmpÖacket from %pMÅo %pM:ÅtlÉxceeded\n",

291 
icmp_∑ckë
->
‹ig
, icmp_∑ckë->
d°
);

292 
out
;

295 
¥im¨y_if
 = 
	`b©adv_¥im¨y_if_gë_£À˘ed
(
b©_¥iv
);

296 i‡(!
¥im¨y_if
)

297 
out
;

300 
‹ig_node
 = 
	`b©adv_‹ig_hash_föd
(
b©_¥iv
, 
icmp_∑ckë
->
‹ig
);

301 i‡(!
‹ig_node
)

302 
out
;

305 i‡(
	`skb_cow
(
skb
, 
ETH_HLEN
) < 0)

306 
out
;

308 
icmp_∑ckë
 = (
b©adv_icmp_∑ckë
 *)
skb
->
d©a
;

310 
	`ëhî_addr_c›y
(
icmp_∑ckë
->
d°
, icmp_∑ckë->
‹ig
);

311 
	`ëhî_addr_c›y
(
icmp_∑ckë
->
‹ig
, 
¥im¨y_if
->
√t_dev
->
dev_addr
);

312 
icmp_∑ckë
->
msg_ty≥
 = 
BATADV_TTL_EXCEEDED
;

313 
icmp_∑ckë
->
âl
 = 
BATADV_TTL
;

315 
ªs
 = 
	`b©adv_£nd_skb_to_‹ig
(
skb
, 
‹ig_node
, 
NULL
);

316 i‡(
ªs
 =
NET_RX_SUCCESS
)

317 
ªt
 = 
NET_XMIT_SUCCESS
;

320 
skb
 = 
NULL
;

322 
out
:

323 
	`b©adv_h¨dif_put
(
¥im¨y_if
);

324 
	`b©adv_‹ig_node_put
(
‹ig_node
);

326 
	`k‰ì_skb
(
skb
);

328  
ªt
;

329 
	}
}

338 
	$b©adv_ªcv_icmp_∑ckë
(
sk_buff
 *
skb
,

339 
b©adv_h¨d_iÁ˚
 *
ªcv_if
)

341 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
ªcv_if
->
mesh_iÁ˚
);

342 
b©adv_icmp_hódî
 *
icmph
;

343 
b©adv_icmp_∑ckë_º
 *
icmp_∑ckë_º
;

344 
ëhhdr
 *ethhdr;

345 
b©adv_‹ig_node
 *
‹ig_node
 = 
NULL
;

346 
hdr_size
 = (
b©adv_icmp_hódî
);

347 
ªs
, 
ªt
 = 
NET_RX_DROP
;

350 i‡(
	`u∆ikñy
(!
	`pskb_may_puŒ
(
skb
, 
hdr_size
)))

351 
‰ì_skb
;

353 
ëhhdr
 = 
	`ëh_hdr
(
skb
);

356 i‡(!
	`is_vÆid_ëhî_addr
(
ëhhdr
->
h_de°
))

357 
‰ì_skb
;

360 i‡(
	`is_mu…iˇ°_ëhî_addr
(
ëhhdr
->
h_sour˚
))

361 
‰ì_skb
;

364 i‡(!
	`b©adv_is_my_mac
(
b©_¥iv
, 
ëhhdr
->
h_de°
))

365 
‰ì_skb
;

367 
icmph
 = (
b©adv_icmp_hódî
 *)
skb
->
d©a
;

370 i‡((
icmph
->
msg_ty≥
 =
BATADV_ECHO_REPLY
 ||

371 
icmph
->
msg_ty≥
 =
BATADV_ECHO_REQUEST
) &&

372 
skb
->
Àn
 >(
b©adv_icmp_∑ckë_º
)) {

373 i‡(
	`skb_löórize
(
skb
) < 0)

374 
‰ì_skb
;

377 i‡(
	`skb_cow
(
skb
, 
ETH_HLEN
) < 0)

378 
‰ì_skb
;

380 
ëhhdr
 = 
	`ëh_hdr
(
skb
);

381 
icmph
 = (
b©adv_icmp_hódî
 *)
skb
->
d©a
;

382 
icmp_∑ckë_º
 = (
b©adv_icmp_∑ckë_º
 *)
icmph
;

383 i‡(
icmp_∑ckë_º
->
º_cur
 >
BATADV_RR_LEN
)

384 
‰ì_skb
;

386 
	`ëhî_addr_c›y
(
icmp_∑ckë_º
->
º
[icmp_∑ckë_º->
º_cur
],

387 
ëhhdr
->
h_de°
);

388 
icmp_∑ckë_º
->
º_cur
++;

392 i‡(
	`b©adv_is_my_mac
(
b©_¥iv
, 
icmph
->
d°
))

393  
	`b©adv_ªcv_my_icmp_∑ckë
(
b©_¥iv
, 
skb
);

396 i‡(
icmph
->
âl
 < 2)

397  
	`b©adv_ªcv_icmp_âl_ex˚eded
(
b©_¥iv
, 
skb
);

400 
‹ig_node
 = 
	`b©adv_‹ig_hash_föd
(
b©_¥iv
, 
icmph
->
d°
);

401 i‡(!
‹ig_node
)

402 
‰ì_skb
;

405 i‡(
	`skb_cow
(
skb
, 
ETH_HLEN
) < 0)

406 
put_‹ig_node
;

408 
icmph
 = (
b©adv_icmp_hódî
 *)
skb
->
d©a
;

411 
icmph
->
âl
--;

414 
ªs
 = 
	`b©adv_£nd_skb_to_‹ig
(
skb
, 
‹ig_node
, 
ªcv_if
);

415 i‡(
ªs
 =
NET_XMIT_SUCCESS
)

416 
ªt
 = 
NET_RX_SUCCESS
;

419 
skb
 = 
NULL
;

421 
put_‹ig_node
:

422 
	`b©adv_‹ig_node_put
(
‹ig_node
);

423 
‰ì_skb
:

424 
	`k‰ì_skb
(
skb
);

426  
ªt
;

427 
	}
}

441 
	$b©adv_check_uniˇ°_∑ckë
(
b©adv_¥iv
 *
b©_¥iv
,

442 
sk_buff
 *
skb
, 
hdr_size
)

444 
ëhhdr
 *ethhdr;

447 i‡(
	`u∆ikñy
(!
	`pskb_may_puŒ
(
skb
, 
hdr_size
)))

448  -
ENODATA
;

450 
ëhhdr
 = 
	`ëh_hdr
(
skb
);

453 i‡(!
	`is_vÆid_ëhî_addr
(
ëhhdr
->
h_de°
))

454  -
EBADR
;

457 i‡(
	`is_mu…iˇ°_ëhî_addr
(
ëhhdr
->
h_sour˚
))

458  -
EBADR
;

461 i‡(!
	`b©adv_is_my_mac
(
b©_¥iv
, 
ëhhdr
->
h_de°
))

462  -
EREMOTE
;

465 
	}
}

475 
b©adv_‹ig_iföfo
 *

476 
	$b©adv_œ°_b⁄dög_gë
(
b©adv_‹ig_node
 *
‹ig_node
)

478 
b©adv_‹ig_iföfo
 *
œ°_b⁄dög_ˇndid©e
;

480 
	`•ö_lock_bh
(&
‹ig_node
->
√igh_li°_lock
);

481 
œ°_b⁄dög_ˇndid©e
 = 
‹ig_node
->last_bonding_candidate;

483 i‡(
œ°_b⁄dög_ˇndid©e
)

484 
	`kªf_gë
(&
œ°_b⁄dög_ˇndid©e
->
ªfcou¡
);

485 
	`•ö_u∆ock_bh
(&
‹ig_node
->
√igh_li°_lock
);

487  
œ°_b⁄dög_ˇndid©e
;

488 
	}
}

496 
	$b©adv_œ°_b⁄dög_ª∂a˚
(
b©adv_‹ig_node
 *
‹ig_node
,

497 
b©adv_‹ig_iföfo
 *
√w_ˇndid©e
)

499 
b©adv_‹ig_iföfo
 *
ﬁd_ˇndid©e
;

501 
	`•ö_lock_bh
(&
‹ig_node
->
√igh_li°_lock
);

502 
ﬁd_ˇndid©e
 = 
‹ig_node
->
œ°_b⁄dög_ˇndid©e
;

504 i‡(
√w_ˇndid©e
)

505 
	`kªf_gë
(&
√w_ˇndid©e
->
ªfcou¡
);

506 
‹ig_node
->
œ°_b⁄dög_ˇndid©e
 = 
√w_ˇndid©e
;

507 
	`•ö_u∆ock_bh
(&
‹ig_node
->
√igh_li°_lock
);

509 
	`b©adv_‹ig_iföfo_put
(
ﬁd_ˇndid©e
);

510 
	}
}

521 
b©adv_√igh_node
 *

522 
	$b©adv_föd_rouãr
(
b©adv_¥iv
 *
b©_¥iv
,

523 
b©adv_‹ig_node
 *
‹ig_node
,

524 
b©adv_h¨d_iÁ˚
 *
ªcv_if
)

526 
b©adv_Ægo_›s
 *
bao
 = 
b©_¥iv
->
Ægo_›s
;

527 
b©adv_√igh_node
 *
fú°_ˇndid©e_rouãr
 = 
NULL
;

528 
b©adv_√igh_node
 *
√xt_ˇndid©e_rouãr
 = 
NULL
;

529 
b©adv_√igh_node
 *
rouãr
, *
ˇnd_rouãr
 = 
NULL
;

530 
b©adv_√igh_node
 *
œ°_ˇnd_rouãr
 = 
NULL
;

531 
b©adv_‹ig_iföfo
 *
ˇnd
, *
fú°_ˇndid©e
 = 
NULL
;

532 
b©adv_‹ig_iföfo
 *
√xt_ˇndid©e
 = 
NULL
;

533 
b©adv_‹ig_iföfo
 *
œ°_ˇndid©e
;

534 
boﬁ
 
œ°_ˇndid©e_found
 = 
Ál£
;

536 i‡(!
‹ig_node
)

537  
NULL
;

539 
rouãr
 = 
	`b©adv_‹ig_rouãr_gë
(
‹ig_node
, 
ªcv_if
);

541 i‡(!
rouãr
)

542  
rouãr
;

547 i‡(!(
ªcv_if
 =
BATADV_IF_DEFAULT
 && 
	`©omic_ªad
(&
b©_¥iv
->
b⁄dög
)))

548  
rouãr
;

558 
	`rcu_ªad_lock
();

559 
œ°_ˇndid©e
 = 
	`b©adv_œ°_b⁄dög_gë
(
‹ig_node
);

560 i‡(
œ°_ˇndid©e
)

561 
œ°_ˇnd_rouãr
 = 
	`rcu_dîe„ªn˚
(
œ°_ˇndid©e
->
rouãr
);

563 
	`hli°_f‹_óch_íåy_rcu
(
ˇnd
, &
‹ig_node
->
iföfo_li°
, 
li°
) {

565 i‡(!
	`kªf_gë_u∆ess_zîo
(&
ˇnd
->
ªfcou¡
))

568 
ˇnd_rouãr
 = 
	`rcu_dîe„ªn˚
(
ˇnd
->
rouãr
);

569 i‡(!
ˇnd_rouãr
)

570 
√xt
;

572 i‡(!
	`kªf_gë_u∆ess_zîo
(&
ˇnd_rouãr
->
ªfcou¡
)) {

573 
ˇnd_rouãr
 = 
NULL
;

574 
√xt
;

580 i‡(!
bao
->
√igh
.
	`is_simû¨_‹_bëãr
(
ˇnd_rouãr
,

581 
ˇnd
->
if_outgoög
, 
rouãr
,

582 
ªcv_if
))

583 
√xt
;

586 i‡(
œ°_ˇnd_rouãr
 =
ˇnd_rouãr
)

587 
√xt
;

590 i‡(!
fú°_ˇndid©e
) {

591 
	`kªf_gë
(&
ˇnd_rouãr
->
ªfcou¡
);

592 
	`kªf_gë
(&
ˇnd
->
ªfcou¡
);

593 
fú°_ˇndid©e
 = 
ˇnd
;

594 
fú°_ˇndid©e_rouãr
 = 
ˇnd_rouãr
;

601 i‡(!
œ°_ˇndid©e
 || 
œ°_ˇndid©e_found
) {

602 
√xt_ˇndid©e
 = 
ˇnd
;

603 
√xt_ˇndid©e_rouãr
 = 
ˇnd_rouãr
;

607 i‡(
œ°_ˇndid©e
 =
ˇnd
)

608 
œ°_ˇndid©e_found
 = 
åue
;

609 
√xt
:

611 i‡(
ˇnd_rouãr
) {

612 
	`b©adv_√igh_node_put
(
ˇnd_rouãr
);

613 
ˇnd_rouãr
 = 
NULL
;

615 
	`b©adv_‹ig_iföfo_put
(
ˇnd
);

617 
	`rcu_ªad_u∆ock
();

624 i‡(
√xt_ˇndid©e
) {

625 
	`b©adv_√igh_node_put
(
rouãr
);

627 
	`kªf_gë
(&
√xt_ˇndid©e_rouãr
->
ªfcou¡
);

628 
rouãr
 = 
√xt_ˇndid©e_rouãr
;

629 
	`b©adv_œ°_b⁄dög_ª∂a˚
(
‹ig_node
, 
√xt_ˇndid©e
);

630 } i‡(
fú°_ˇndid©e
) {

631 
	`b©adv_√igh_node_put
(
rouãr
);

633 
	`kªf_gë
(&
fú°_ˇndid©e_rouãr
->
ªfcou¡
);

634 
rouãr
 = 
fú°_ˇndid©e_rouãr
;

635 
	`b©adv_œ°_b⁄dög_ª∂a˚
(
‹ig_node
, 
fú°_ˇndid©e
);

637 
	`b©adv_œ°_b⁄dög_ª∂a˚
(
‹ig_node
, 
NULL
);

641 i‡(
fú°_ˇndid©e
) {

642 
	`b©adv_√igh_node_put
(
fú°_ˇndid©e_rouãr
);

643 
	`b©adv_‹ig_iföfo_put
(
fú°_ˇndid©e
);

646 i‡(
√xt_ˇndid©e
) {

647 
	`b©adv_√igh_node_put
(
√xt_ˇndid©e_rouãr
);

648 
	`b©adv_‹ig_iföfo_put
(
√xt_ˇndid©e
);

651 
	`b©adv_‹ig_iföfo_put
(
œ°_ˇndid©e
);

653  
rouãr
;

654 
	}
}

656 
	$b©adv_rouã_uniˇ°_∑ckë
(
sk_buff
 *
skb
,

657 
b©adv_h¨d_iÁ˚
 *
ªcv_if
)

659 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
ªcv_if
->
mesh_iÁ˚
);

660 
b©adv_‹ig_node
 *
‹ig_node
 = 
NULL
;

661 
b©adv_uniˇ°_∑ckë
 *
uniˇ°_∑ckë
;

662 
ëhhdr
 *ëhhd∏
	`ëh_hdr
(
skb
);

663 
ªs
, 
hdr_Àn
, 
ªt
 = 
NET_RX_DROP
;

664 
Àn
;

666 
uniˇ°_∑ckë
 = (
b©adv_uniˇ°_∑ckë
 *)
skb
->
d©a
;

669 i‡(
uniˇ°_∑ckë
->
âl
 < 2) {

670 
	`¥_debug
("Warning - can't forward unicastÖacket from %pMÅo %pM:ÅtlÉxceeded\n",

671 
ëhhdr
->
h_sour˚
, 
uniˇ°_∑ckë
->
de°
);

672 
‰ì_skb
;

676 
‹ig_node
 = 
	`b©adv_‹ig_hash_föd
(
b©_¥iv
, 
uniˇ°_∑ckë
->
de°
);

678 i‡(!
‹ig_node
)

679 
‰ì_skb
;

682 i‡(
	`skb_cow
(
skb
, 
ETH_HLEN
) < 0)

683 
put_‹ig_node
;

686 
uniˇ°_∑ckë
 = (
b©adv_uniˇ°_∑ckë
 *)
skb
->
d©a
;

687 
uniˇ°_∑ckë
->
âl
--;

689 
uniˇ°_∑ckë
->
∑ckë_ty≥
) {

690 
BATADV_UNICAST_4ADDR
:

691 
hdr_Àn
 = (
b©adv_uniˇ°_4addr_∑ckë
);

693 
BATADV_UNICAST
:

694 
hdr_Àn
 = (
b©adv_uniˇ°_∑ckë
);

698 
hdr_Àn
 = -1;

702 i‡(
hdr_Àn
 > 0)

703 
	`b©adv_skb_£t_¥i‹ôy
(
skb
, 
hdr_Àn
);

705 
Àn
 = 
skb
->len;

706 
ªs
 = 
	`b©adv_£nd_skb_to_‹ig
(
skb
, 
‹ig_node
, 
ªcv_if
);

709 i‡(
ªs
 =
NET_XMIT_SUCCESS
) {

710 
ªt
 = 
NET_RX_SUCCESS
;

712 
	`b©adv_öc_cou¡î
(
b©_¥iv
, 
BATADV_CNT_FORWARD
);

713 
	`b©adv_add_cou¡î
(
b©_¥iv
, 
BATADV_CNT_FORWARD_BYTES
,

714 
Àn
 + 
ETH_HLEN
);

718 
skb
 = 
NULL
;

720 
put_‹ig_node
:

721 
	`b©adv_‹ig_node_put
(
‹ig_node
);

722 
‰ì_skb
:

723 
	`k‰ì_skb
(
skb
);

725  
ªt
;

726 
	}
}

742 
boﬁ


743 
	$b©adv_ªrouã_uniˇ°_∑ckë
(
b©adv_¥iv
 *
b©_¥iv
, 
sk_buff
 *
skb
,

744 
b©adv_uniˇ°_∑ckë
 *
uniˇ°_∑ckë
,

745 
u8
 *
d°_addr
, 
vid
)

747 
b©adv_‹ig_node
 *
‹ig_node
 = 
NULL
;

748 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
 = 
NULL
;

749 
boﬁ
 
ªt
 = 
Ál£
;

750 c⁄° 
u8
 *
‹ig_addr
;

751 
u8
 
‹ig_âvn
;

753 i‡(
	`b©adv_is_my_˛õ¡
(
b©_¥iv
, 
d°_addr
, 
vid
)) {

754 
¥im¨y_if
 = 
	`b©adv_¥im¨y_if_gë_£À˘ed
(
b©_¥iv
);

755 i‡(!
¥im¨y_if
)

756 
out
;

757 
‹ig_addr
 = 
¥im¨y_if
->
√t_dev
->
dev_addr
;

758 
‹ig_âvn
 = (
u8
)
	`©omic_ªad
(&
b©_¥iv
->
â
.
vn
);

760 
‹ig_node
 = 
	`b©adv_å™°abÀ_£¨ch
(
b©_¥iv
, 
NULL
, 
d°_addr
,

761 
vid
);

762 i‡(!
‹ig_node
)

763 
out
;

765 i‡(
	`b©adv_com∑ª_ëh
(
‹ig_node
->
‹ig
, 
uniˇ°_∑ckë
->
de°
))

766 
out
;

768 
‹ig_addr
 = 
‹ig_node
->
‹ig
;

769 
‹ig_âvn
 = (
u8
)
	`©omic_ªad
(&
‹ig_node
->
œ°_âvn
);

773 
	`skb_po°puŒ_rcsum
(
skb
, 
uniˇ°_∑ckë
, (*unicast_packet));

774 
	`ëhî_addr_c›y
(
uniˇ°_∑ckë
->
de°
, 
‹ig_addr
);

775 
uniˇ°_∑ckë
->
âvn
 = 
‹ig_âvn
;

776 
	`skb_po°push_rcsum
(
skb
, 
uniˇ°_∑ckë
, (*unicast_packet));

778 
ªt
 = 
åue
;

779 
out
:

780 
	`b©adv_h¨dif_put
(
¥im¨y_if
);

781 
	`b©adv_‹ig_node_put
(
‹ig_node
);

783  
ªt
;

784 
	}
}

786 
boﬁ
 
	$b©adv_check_uniˇ°_âvn
(
b©adv_¥iv
 *
b©_¥iv
,

787 
sk_buff
 *
skb
, 
hdr_Àn
)

789 
b©adv_uniˇ°_∑ckë
 *
uniˇ°_∑ckë
;

790 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
;

791 
b©adv_‹ig_node
 *
‹ig_node
;

792 
u8
 
cuº_âvn
, 
ﬁd_âvn
;

793 
ëhhdr
 *ethhdr;

794 
vid
;

795 
is_ﬁd_âvn
;

798 i‡(!
	`pskb_may_puŒ
(
skb
, 
hdr_Àn
 + 
ETH_HLEN
))

799  
Ál£
;

802 i‡(
	`skb_cow
(
skb
, (*
uniˇ°_∑ckë
)) < 0)

803  
Ál£
;

805 
uniˇ°_∑ckë
 = (
b©adv_uniˇ°_∑ckë
 *)
skb
->
d©a
;

806 
vid
 = 
	`b©adv_gë_vid
(
skb
, 
hdr_Àn
);

807 
ëhhdr
 = (ëhhd∏*)(
skb
->
d©a
 + 
hdr_Àn
);

810 i‡(
	`is_mu…iˇ°_ëhî_addr
(
ëhhdr
->
h_de°
))

811  
åue
;

818 i‡(
	`b©adv_â_loˇl_˛õ¡_is_rﬂmög
(
b©_¥iv
, 
ëhhdr
->
h_de°
, 
vid
)) {

819 i‡(
	`b©adv_ªrouã_uniˇ°_∑ckë
(
b©_¥iv
, 
skb
, 
uniˇ°_∑ckë
,

820 
ëhhdr
->
h_de°
, 
vid
))

821 
	`b©adv_dbg_øãlimôed
(
BATADV_DBG_TT
,

822 
b©_¥iv
,

824 
uniˇ°_∑ckë
->
de°
,

825 
ëhhdr
->
h_de°
);

831  
åue
;

838 
cuº_âvn
 = (
u8
)
	`©omic_ªad
(&
b©_¥iv
->
â
.
vn
);

839 i‡(!
	`b©adv_is_my_mac
(
b©_¥iv
, 
uniˇ°_∑ckë
->
de°
)) {

840 
‹ig_node
 = 
	`b©adv_‹ig_hash_föd
(
b©_¥iv
,

841 
uniˇ°_∑ckë
->
de°
);

846 i‡(!
‹ig_node
)

847  
Ál£
;

849 
cuº_âvn
 = (
u8
)
	`©omic_ªad
(&
‹ig_node
->
œ°_âvn
);

850 
	`b©adv_‹ig_node_put
(
‹ig_node
);

856 
is_ﬁd_âvn
 = 
	`b©adv_£q_bef‹e
(
uniˇ°_∑ckë
->
âvn
, 
cuº_âvn
);

857 i‡(!
is_ﬁd_âvn
)

858  
åue
;

860 
ﬁd_âvn
 = 
uniˇ°_∑ckë
->
âvn
;

865 i‡(
	`b©adv_ªrouã_uniˇ°_∑ckë
(
b©_¥iv
, 
skb
, 
uniˇ°_∑ckë
,

866 
ëhhdr
->
h_de°
, 
vid
)) {

867 
	`b©adv_dbg_øãlimôed
(
BATADV_DBG_TT
, 
b©_¥iv
,

869 
uniˇ°_∑ckë
->
de°
, 
ëhhdr
->
h_de°
,

870 
ﬁd_âvn
, 
cuº_âvn
);

871  
åue
;

878 i‡(!
	`b©adv_is_my_˛õ¡
(
b©_¥iv
, 
ëhhdr
->
h_de°
, 
vid
))

879  
Ál£
;

884 
¥im¨y_if
 = 
	`b©adv_¥im¨y_if_gë_£À˘ed
(
b©_¥iv
);

885 i‡(!
¥im¨y_if
)

886  
Ál£
;

889 
	`skb_po°puŒ_rcsum
(
skb
, 
uniˇ°_∑ckë
, (*unicast_packet));

890 
	`ëhî_addr_c›y
(
uniˇ°_∑ckë
->
de°
, 
¥im¨y_if
->
√t_dev
->
dev_addr
);

891 
uniˇ°_∑ckë
->
âvn
 = 
cuº_âvn
;

892 
	`skb_po°push_rcsum
(
skb
, 
uniˇ°_∑ckë
, (*unicast_packet));

894 
	`b©adv_h¨dif_put
(
¥im¨y_if
);

896  
åue
;

897 
	}
}

908 
	$b©adv_ªcv_unh™dÀd_uniˇ°_∑ckë
(
sk_buff
 *
skb
,

909 
b©adv_h¨d_iÁ˚
 *
ªcv_if
)

911 
b©adv_uniˇ°_∑ckë
 *
uniˇ°_∑ckë
;

912 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
ªcv_if
->
mesh_iÁ˚
);

913 
check
, 
hdr_size
 = (*
uniˇ°_∑ckë
);

915 
check
 = 
	`b©adv_check_uniˇ°_∑ckë
(
b©_¥iv
, 
skb
, 
hdr_size
);

916 i‡(
check
 < 0)

917 
‰ì_skb
;

920 
uniˇ°_∑ckë
 = (
b©adv_uniˇ°_∑ckë
 *)
skb
->
d©a
;

921 i‡(
	`b©adv_is_my_mac
(
b©_¥iv
, 
uniˇ°_∑ckë
->
de°
))

922 
‰ì_skb
;

924  
	`b©adv_rouã_uniˇ°_∑ckë
(
skb
, 
ªcv_if
);

926 
‰ì_skb
:

927 
	`k‰ì_skb
(
skb
);

928  
NET_RX_DROP
;

929 
	}
}

938 
	$b©adv_ªcv_uniˇ°_∑ckë
(
sk_buff
 *
skb
,

939 
b©adv_h¨d_iÁ˚
 *
ªcv_if
)

941 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
ªcv_if
->
mesh_iÁ˚
);

942 
b©adv_uniˇ°_∑ckë
 *
uniˇ°_∑ckë
;

943 
b©adv_uniˇ°_4addr_∑ckë
 *
uniˇ°_4addr_∑ckë
;

944 
u8
 *
‹ig_addr
, *
‹ig_addr_gw
;

945 
b©adv_‹ig_node
 *
‹ig_node
 = 
NULL
, *
‹ig_node_gw
 = NULL;

946 
check
, 
hdr_size
 = (*
uniˇ°_∑ckë
);

947 
b©adv_subty≥
 
subty≥
;

948 
ªt
 = 
NET_RX_DROP
;

949 
boﬁ
 
is4addr
, 
is_gw
;

951 
uniˇ°_∑ckë
 = (
b©adv_uniˇ°_∑ckë
 *)
skb
->
d©a
;

952 
is4addr
 = 
uniˇ°_∑ckë
->
∑ckë_ty≥
 =
BATADV_UNICAST_4ADDR
;

954 i‡(
is4addr
)

955 
hdr_size
 = (*
uniˇ°_4addr_∑ckë
);

958 
check
 = 
	`b©adv_check_uniˇ°_∑ckë
(
b©_¥iv
, 
skb
, 
hdr_size
);

963 i‡(
check
 =-
EREMOTE
)

964 
	`b©adv_nc_skb_°‹e_¢if„d_uniˇ°
(
b©_¥iv
, 
skb
);

966 i‡(
check
 < 0)

967 
‰ì_skb
;

968 i‡(!
	`b©adv_check_uniˇ°_âvn
(
b©_¥iv
, 
skb
, 
hdr_size
))

969 
‰ì_skb
;

971 
uniˇ°_∑ckë
 = (
b©adv_uniˇ°_∑ckë
 *)
skb
->
d©a
;

974 i‡(
	`b©adv_is_my_mac
(
b©_¥iv
, 
uniˇ°_∑ckë
->
de°
)) {

978 
‹ig_addr_gw
 = 
	`ëh_hdr
(
skb
)->
h_sour˚
;

979 
‹ig_node_gw
 = 
	`b©adv_‹ig_hash_föd
(
b©_¥iv
, 
‹ig_addr_gw
);

980 i‡(
‹ig_node_gw
) {

981 
is_gw
 = 
	`b©adv_bœ_is_backb⁄e_gw
(
skb
, 
‹ig_node_gw
,

982 
hdr_size
);

983 
	`b©adv_‹ig_node_put
(
‹ig_node_gw
);

984 i‡(
is_gw
) {

985 
	`b©adv_dbg
(
BATADV_DBG_BLA
, 
b©_¥iv
,

987 
__func__
, 
‹ig_addr_gw
);

988 
‰ì_skb
;

992 i‡(
is4addr
) {

993 
uniˇ°_4addr_∑ckë
 =

994 (
b©adv_uniˇ°_4addr_∑ckë
 *)
skb
->
d©a
;

995 
subty≥
 = 
uniˇ°_4addr_∑ckë
->subtype;

996 
	`b©adv_d©_öc_cou¡î
(
b©_¥iv
, 
subty≥
);

1004 i‡(
subty≥
 =
BATADV_P_DATA
) {

1005 
‹ig_addr
 = 
uniˇ°_4addr_∑ckë
->
§c
;

1006 
‹ig_node
 = 
	`b©adv_‹ig_hash_föd
(
b©_¥iv
,

1007 
‹ig_addr
);

1011 i‡(
	`b©adv_d©_¢o›_öcomög_¨p_ªque°
(
b©_¥iv
, 
skb
,

1012 
hdr_size
))

1013 
rx_suc˚ss
;

1014 i‡(
	`b©adv_d©_¢o›_öcomög_¨p_ª∂y
(
b©_¥iv
, 
skb
,

1015 
hdr_size
))

1016 
rx_suc˚ss
;

1018 
	`b©adv_d©_¢o›_öcomög_dh˝_ack
(
b©_¥iv
, 
skb
, 
hdr_size
);

1020 
	`b©adv_öãrÁ˚_rx
(
ªcv_if
->
mesh_iÁ˚
, 
skb
, 
hdr_size
,

1021 
‹ig_node
);

1023 
rx_suc˚ss
:

1024 
	`b©adv_‹ig_node_put
(
‹ig_node
);

1026  
NET_RX_SUCCESS
;

1029 
ªt
 = 
	`b©adv_rouã_uniˇ°_∑ckë
(
skb
, 
ªcv_if
);

1031 
skb
 = 
NULL
;

1033 
‰ì_skb
:

1034 
	`k‰ì_skb
(
skb
);

1036  
ªt
;

1037 
	}
}

1047 
	$b©adv_ªcv_uniˇ°_tvlv
(
sk_buff
 *
skb
,

1048 
b©adv_h¨d_iÁ˚
 *
ªcv_if
)

1050 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
ªcv_if
->
mesh_iÁ˚
);

1051 
b©adv_uniˇ°_tvlv_∑ckë
 *
uniˇ°_tvlv_∑ckë
;

1052 *
tvlv_buff
;

1053 
u16
 
tvlv_buff_Àn
;

1054 
hdr_size
 = (*
uniˇ°_tvlv_∑ckë
);

1055 
ªt
 = 
NET_RX_DROP
;

1057 i‡(
	`b©adv_check_uniˇ°_∑ckë
(
b©_¥iv
, 
skb
, 
hdr_size
) < 0)

1058 
‰ì_skb
;

1061 i‡(
	`skb_cow
(
skb
, 
hdr_size
) < 0)

1062 
‰ì_skb
;

1065 i‡(
	`skb_löórize
(
skb
) < 0)

1066 
‰ì_skb
;

1068 
uniˇ°_tvlv_∑ckë
 = (
b©adv_uniˇ°_tvlv_∑ckë
 *)
skb
->
d©a
;

1070 
tvlv_buff
 = (*)(
skb
->
d©a
 + 
hdr_size
);

1071 
tvlv_buff_Àn
 = 
	`¡ohs
(
uniˇ°_tvlv_∑ckë
->
tvlv_Àn
);

1073 i‡(
tvlv_buff_Àn
 > 
skb
->
Àn
 - 
hdr_size
)

1074 
‰ì_skb
;

1076 
ªt
 = 
	`b©adv_tvlv_c⁄èöîs_¥o˚ss
(
b©_¥iv
, 
BATADV_UNICAST_TVLV
,

1077 
NULL
, 
skb
, 
tvlv_buff
,

1078 
tvlv_buff_Àn
);

1080 i‡(
ªt
 !
NET_RX_SUCCESS
) {

1081 
ªt
 = 
	`b©adv_rouã_uniˇ°_∑ckë
(
skb
, 
ªcv_if
);

1083 
skb
 = 
NULL
;

1086 
‰ì_skb
:

1087 
	`k‰ì_skb
(
skb
);

1089  
ªt
;

1090 
	}
}

1103 
	$b©adv_ªcv_‰ag_∑ckë
(
sk_buff
 *
skb
,

1104 
b©adv_h¨d_iÁ˚
 *
ªcv_if
)

1106 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
ªcv_if
->
mesh_iÁ˚
);

1107 
b©adv_‹ig_node
 *
‹ig_node_§c
 = 
NULL
;

1108 
b©adv_‰ag_∑ckë
 *
‰ag_∑ckë
;

1109 
ªt
 = 
NET_RX_DROP
;

1111 i‡(
	`b©adv_check_uniˇ°_∑ckë
(
b©_¥iv
, 
skb
,

1112 (*
‰ag_∑ckë
)) < 0)

1113 
‰ì_skb
;

1115 
‰ag_∑ckë
 = (
b©adv_‰ag_∑ckë
 *)
skb
->
d©a
;

1116 
‹ig_node_§c
 = 
	`b©adv_‹ig_hash_föd
(
b©_¥iv
, 
‰ag_∑ckë
->
‹ig
);

1117 i‡(!
‹ig_node_§c
)

1118 
‰ì_skb
;

1120 
skb
->
¥i‹ôy
 = 
‰ag_∑ckë
->priority + 256;

1123 i‡(!
	`b©adv_is_my_mac
(
b©_¥iv
, 
‰ag_∑ckë
->
de°
) &&

1124 
	`b©adv_‰ag_skb_fwd
(
skb
, 
ªcv_if
, 
‹ig_node_§c
)) {

1126 
skb
 = 
NULL
;

1127 
ªt
 = 
NET_RX_SUCCESS
;

1128 
put_‹ig_node
;

1131 
	`b©adv_öc_cou¡î
(
b©_¥iv
, 
BATADV_CNT_FRAG_RX
);

1132 
	`b©adv_add_cou¡î
(
b©_¥iv
, 
BATADV_CNT_FRAG_RX_BYTES
, 
skb
->
Àn
);

1135 i‡(!
	`b©adv_‰ag_skb_buf„r
(&
skb
, 
‹ig_node_§c
))

1136 
put_‹ig_node
;

1141 i‡(
skb
) {

1142 
	`b©adv_b©m™_skb_ªcv
(
skb
, 
ªcv_if
->
√t_dev
,

1143 &
ªcv_if
->
b©m™_adv_±y≥
, 
NULL
);

1145 
skb
 = 
NULL
;

1148 
ªt
 = 
NET_RX_SUCCESS
;

1150 
put_‹ig_node
:

1151 
	`b©adv_‹ig_node_put
(
‹ig_node_§c
);

1152 
‰ì_skb
:

1153 
	`k‰ì_skb
(
skb
);

1155  
ªt
;

1156 
	}
}

1165 
	$b©adv_ªcv_bˇ°_∑ckë
(
sk_buff
 *
skb
,

1166 
b©adv_h¨d_iÁ˚
 *
ªcv_if
)

1168 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
ªcv_if
->
mesh_iÁ˚
);

1169 
b©adv_‹ig_node
 *
‹ig_node
 = 
NULL
;

1170 
b©adv_bˇ°_∑ckë
 *
bˇ°_∑ckë
;

1171 
ëhhdr
 *ethhdr;

1172 
hdr_size
 = (*
bˇ°_∑ckë
);

1173 
s32
 
£q_diff
;

1174 
u32
 
£qno
;

1175 
ªt
;

1178 i‡(
	`u∆ikñy
(!
	`pskb_may_puŒ
(
skb
, 
hdr_size
)))

1179 
‰ì_skb
;

1181 
ëhhdr
 = 
	`ëh_hdr
(
skb
);

1184 i‡(!
	`is_brﬂdˇ°_ëhî_addr
(
ëhhdr
->
h_de°
))

1185 
‰ì_skb
;

1188 i‡(
	`is_mu…iˇ°_ëhî_addr
(
ëhhdr
->
h_sour˚
))

1189 
‰ì_skb
;

1192 i‡(
	`b©adv_is_my_mac
(
b©_¥iv
, 
ëhhdr
->
h_sour˚
))

1193 
‰ì_skb
;

1195 
bˇ°_∑ckë
 = (
b©adv_bˇ°_∑ckë
 *)
skb
->
d©a
;

1198 i‡(
	`b©adv_is_my_mac
(
b©_¥iv
, 
bˇ°_∑ckë
->
‹ig
))

1199 
‰ì_skb
;

1201 i‡(
bˇ°_∑ckë
->
âl
-- < 2)

1202 
‰ì_skb
;

1204 
‹ig_node
 = 
	`b©adv_‹ig_hash_föd
(
b©_¥iv
, 
bˇ°_∑ckë
->
‹ig
);

1206 i‡(!
‹ig_node
)

1207 
‰ì_skb
;

1209 
	`•ö_lock_bh
(&
‹ig_node
->
bˇ°_£qno_lock
);

1211 
£qno
 = 
	`¡ohl
(
bˇ°_∑ckë
->seqno);

1213 i‡(
	`b©adv_ã°_bô
(
‹ig_node
->
bˇ°_bôs
, orig_node->
œ°_bˇ°_£qno
,

1214 
£qno
))

1215 
•ö_u∆ock
;

1217 
£q_diff
 = 
£qno
 - 
‹ig_node
->
œ°_bˇ°_£qno
;

1220 i‡(
	`b©adv_wödow_¥Ÿe˘ed
(
b©_¥iv
, 
£q_diff
,

1221 
BATADV_BCAST_MAX_AGE
,

1222 &
‹ig_node
->
bˇ°_£qno_ª£t
, 
NULL
))

1223 
•ö_u∆ock
;

1228 i‡(
	`b©adv_bô_gë_∑ckë
(
b©_¥iv
, 
‹ig_node
->
bˇ°_bôs
, 
£q_diff
, 1))

1229 
‹ig_node
->
œ°_bˇ°_£qno
 = 
£qno
;

1231 
	`•ö_u∆ock_bh
(&
‹ig_node
->
bˇ°_£qno_lock
);

1234 i‡(
	`b©adv_bœ_check_bˇ°_du∂i°
(
b©_¥iv
, 
skb
))

1235 
‰ì_skb
;

1237 
	`b©adv_skb_£t_¥i‹ôy
(
skb
, (
b©adv_bˇ°_∑ckë
));

1240 
ªt
 = 
	`b©adv_f‹w_bˇ°_∑ckë
(
b©_¥iv
, 
skb
, 0, 
Ál£
);

1241 i‡(
ªt
 =
NETDEV_TX_BUSY
)

1242 
‰ì_skb
;

1247 i‡(
	`b©adv_bœ_is_backb⁄e_gw
(
skb
, 
‹ig_node
, 
hdr_size
))

1248 
‰ì_skb
;

1250 i‡(
	`b©adv_d©_¢o›_öcomög_¨p_ªque°
(
b©_¥iv
, 
skb
, 
hdr_size
))

1251 
rx_suc˚ss
;

1252 i‡(
	`b©adv_d©_¢o›_öcomög_¨p_ª∂y
(
b©_¥iv
, 
skb
, 
hdr_size
))

1253 
rx_suc˚ss
;

1255 
	`b©adv_d©_¢o›_öcomög_dh˝_ack
(
b©_¥iv
, 
skb
, 
hdr_size
);

1258 
	`b©adv_öãrÁ˚_rx
(
ªcv_if
->
mesh_iÁ˚
, 
skb
, 
hdr_size
, 
‹ig_node
);

1260 
rx_suc˚ss
:

1261 
ªt
 = 
NET_RX_SUCCESS
;

1262 
out
;

1264 
•ö_u∆ock
:

1265 
	`•ö_u∆ock_bh
(&
‹ig_node
->
bˇ°_£qno_lock
);

1266 
‰ì_skb
:

1267 
	`k‰ì_skb
(
skb
);

1268 
ªt
 = 
NET_RX_DROP
;

1269 
out
:

1270 
	`b©adv_‹ig_node_put
(
‹ig_node
);

1271  
ªt
;

1272 
	}
}

1274 #ifde‡
CONFIG_BATMAN_ADV_MCAST


1286 
	$b©adv_ªcv_mˇ°_∑ckë
(
sk_buff
 *
skb
,

1287 
b©adv_h¨d_iÁ˚
 *
ªcv_if
)

1289 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
ªcv_if
->
mesh_iÁ˚
);

1290 
b©adv_mˇ°_∑ckë
 *
mˇ°_∑ckë
;

1291 
hdr_size
 = (*
mˇ°_∑ckë
);

1292 *
tvlv_buff
;

1293 
ªt
 = 
NET_RX_DROP
;

1294 
u16
 
tvlv_buff_Àn
;

1296 i‡(
	`b©adv_check_uniˇ°_∑ckë
(
b©_¥iv
, 
skb
, 
hdr_size
) < 0)

1297 
‰ì_skb
;

1300 i‡(
	`skb_cow
(
skb
, 
ETH_HLEN
) < 0)

1301 
‰ì_skb
;

1304 i‡(
	`skb_löórize
(
skb
) < 0)

1305 
‰ì_skb
;

1307 
mˇ°_∑ckë
 = (
b©adv_mˇ°_∑ckë
 *)
skb
->
d©a
;

1308 i‡(
mˇ°_∑ckë
->
âl
-- < 2)

1309 
‰ì_skb
;

1311 
tvlv_buff
 = (*)(
skb
->
d©a
 + 
hdr_size
);

1312 
tvlv_buff_Àn
 = 
	`¡ohs
(
mˇ°_∑ckë
->
tvlv_Àn
);

1314 i‡(
tvlv_buff_Àn
 > 
skb
->
Àn
 - 
hdr_size
)

1315 
‰ì_skb
;

1317 
ªt
 = 
	`b©adv_tvlv_c⁄èöîs_¥o˚ss
(
b©_¥iv
, 
BATADV_MCAST
, 
NULL
, 
skb
,

1318 
tvlv_buff
, 
tvlv_buff_Àn
);

1319 i‡(
ªt
 >= 0) {

1320 
	`b©adv_öc_cou¡î
(
b©_¥iv
, 
BATADV_CNT_MCAST_RX
);

1321 
	`b©adv_add_cou¡î
(
b©_¥iv
, 
BATADV_CNT_MCAST_RX_BYTES
,

1322 
skb
->
Àn
 + 
ETH_HLEN
);

1325 
hdr_size
 +
tvlv_buff_Àn
;

1327 i‡(
ªt
 =
NET_RX_SUCCESS
 && (
skb
->
Àn
 - 
hdr_size
 >
ETH_HLEN
)) {

1328 
	`b©adv_öc_cou¡î
(
b©_¥iv
, 
BATADV_CNT_MCAST_RX_LOCAL
);

1329 
	`b©adv_add_cou¡î
(
b©_¥iv
, 
BATADV_CNT_MCAST_RX_LOCAL_BYTES
,

1330 
skb
->
Àn
 - 
hdr_size
);

1332 
	`b©adv_öãrÁ˚_rx
(
b©_¥iv
->
mesh_iÁ˚
, 
skb
, 
hdr_size
, 
NULL
);

1334 
skb
 = 
NULL
;

1337 
‰ì_skb
:

1338 
	`k‰ì_skb
(
skb
);

1340  
ªt
;

1341 
	}
}

	@net/batman-adv/routing.h

7 #i‚de‡
_NET_BATMAN_ADV_ROUTING_H_


8 
	#_NET_BATMAN_ADV_ROUTING_H_


	)

10 
	~"maö.h
"

12 
	~<löux/skbuff.h
>

13 
	~<löux/ty≥s.h
>

15 
boﬁ
 
b©adv_check_m™agemít_∑ckë
(
sk_buff
 *
skb
,

16 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
,

17 
hódî_Àn
);

18 
b©adv_upd©e_rouã
(
b©adv_¥iv
 *
b©_¥iv
,

19 
b©adv_‹ig_node
 *
‹ig_node
,

20 
b©adv_h¨d_iÁ˚
 *
ªcv_if
,

21 
b©adv_√igh_node
 *
√igh_node
);

22 
b©adv_ªcv_icmp_∑ckë
(
sk_buff
 *
skb
,

23 
b©adv_h¨d_iÁ˚
 *
ªcv_if
);

24 
b©adv_ªcv_uniˇ°_∑ckë
(
sk_buff
 *
skb
,

25 
b©adv_h¨d_iÁ˚
 *
ªcv_if
);

26 
b©adv_ªcv_‰ag_∑ckë
(
sk_buff
 *
skb
,

27 
b©adv_h¨d_iÁ˚
 *
iÁ˚
);

28 
b©adv_ªcv_bˇ°_∑ckë
(
sk_buff
 *
skb
,

29 
b©adv_h¨d_iÁ˚
 *
ªcv_if
);

30 #ifde‡
CONFIG_BATMAN_ADV_MCAST


31 
b©adv_ªcv_mˇ°_∑ckë
(
sk_buff
 *
skb
,

32 
b©adv_h¨d_iÁ˚
 *
ªcv_if
);

34 
ölöe
 
	$b©adv_ªcv_mˇ°_∑ckë
(
sk_buff
 *
skb
,

35 
b©adv_h¨d_iÁ˚
 *
ªcv_if
)

37 
	`k‰ì_skb
(
skb
);

38  
NET_RX_DROP
;

39 
	}
}

41 
b©adv_ªcv_uniˇ°_tvlv
(
sk_buff
 *
skb
,

42 
b©adv_h¨d_iÁ˚
 *
ªcv_if
);

43 
b©adv_ªcv_unh™dÀd_uniˇ°_∑ckë
(
sk_buff
 *
skb
,

44 
b©adv_h¨d_iÁ˚
 *
ªcv_if
);

45 
b©adv_√igh_node
 *

46 
b©adv_föd_rouãr
(
b©adv_¥iv
 *
b©_¥iv
,

47 
b©adv_‹ig_node
 *
‹ig_node
,

48 
b©adv_h¨d_iÁ˚
 *
ªcv_if
);

49 
boﬁ
 
b©adv_wödow_¥Ÿe˘ed
(
b©adv_¥iv
 *
b©_¥iv
, 
s32
 
£q_num_diff
,

50 
s32
 
£q_ﬁd_max_diff
, *
œ°_ª£t
,

51 
boﬁ
 *
¥Ÿe˘i⁄_°¨ãd
);

	@net/batman-adv/send.c

7 
	~"£nd.h
"

8 
	~"maö.h
"

10 
	~<löux/©omic.h
>

11 
	~<löux/bug.h
>

12 
	~<löux/byã‹dî/gíîic.h
>

13 
	~<löux/c⁄èöî_of.h
>

14 
	~<löux/î∫o.h
>

15 
	~<löux/ëhîdevi˚.h
>

16 
	~<löux/gÂ.h
>

17 
	~<löux/if.h
>

18 
	~<löux/if_ëhî.h
>

19 
	~<löux/jiffõs.h
>

20 
	~<löux/kªf.h
>

21 
	~<löux/li°.h
>

22 
	~<löux/√tdevi˚.h
>

23 
	~<löux/¥ötk.h
>

24 
	~<löux/rculi°.h
>

25 
	~<löux/rcupd©e.h
>

26 
	~<löux/skbuff.h
>

27 
	~<löux/¶ab.h
>

28 
	~<löux/•ölock.h
>

29 
	~<löux/°ddef.h
>

30 
	~<löux/w‹kqueue.h
>

32 
	~"di°ribuãd-¨p-èbÀ.h
"

33 
	~"‰agmíèti⁄.h
"

34 
	~"g©eway_˛õ¡.h
"

35 
	~"h¨d-öãrÁ˚.h
"

36 
	~"log.h
"

37 
	~"mesh-öãrÁ˚.h
"

38 
	~"√tw‹k-codög.h
"

39 
	~"‹igö©‹.h
"

40 
	~"routög.h
"

41 
	~"å™¶©i⁄-èbÀ.h
"

43 
b©adv_£nd_out°™dög_bˇ°_∑ckë
(
w‹k_°ru˘
 *
w‹k
);

63 
	$b©adv_£nd_skb_∑ckë
(
sk_buff
 *
skb
,

64 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
,

65 c⁄° 
u8
 *
d°_addr
)

67 
b©adv_¥iv
 *
b©_¥iv
;

68 
ëhhdr
 *ethhdr;

69 
ªt
;

71 
b©_¥iv
 = 
	`√tdev_¥iv
(
h¨d_iÁ˚
->
mesh_iÁ˚
);

73 i‡(
h¨d_iÁ˚
->
if_°©us
 !
BATADV_IF_ACTIVE
)

74 
£nd_skb_îr
;

76 i‡(
	`u∆ikñy
(!
h¨d_iÁ˚
->
√t_dev
))

77 
£nd_skb_îr
;

79 i‡(!(
h¨d_iÁ˚
->
√t_dev
->
Êags
 & 
IFF_UP
)) {

80 
	`¥_w¨n
("Interface %s isÇot up - can't sendÖacket viaÅhat interface!\n",

81 
h¨d_iÁ˚
->
√t_dev
->
«me
);

82 
£nd_skb_îr
;

86 i‡(
	`b©adv_skb_hód_push
(
skb
, 
ETH_HLEN
) < 0)

87 
£nd_skb_îr
;

89 
	`skb_ª£t_mac_hódî
(
skb
);

91 
ëhhdr
 = 
	`ëh_hdr
(
skb
);

92 
	`ëhî_addr_c›y
(
ëhhdr
->
h_sour˚
, 
h¨d_iÁ˚
->
√t_dev
->
dev_addr
);

93 
	`ëhî_addr_c›y
(
ëhhdr
->
h_de°
, 
d°_addr
);

94 
ëhhdr
->
h_¥Ÿo
 = 
	`ht⁄s
(
ETH_P_BATMAN
);

96 
	`skb_£t_√tw‹k_hódî
(
skb
, 
ETH_HLEN
);

97 
skb
->
¥Ÿocﬁ
 = 
	`ht⁄s
(
ETH_P_BATMAN
);

99 
skb
->
dev
 = 
h¨d_iÁ˚
->
√t_dev
;

102 
	`b©adv_nc_skb_°‹e_f‹_decodög
(
b©_¥iv
, 
skb
);

108 
ªt
 = 
	`dev_queue_xmô
(
skb
);

109  
	`√t_xmô_evÆ
(
ªt
);

110 
£nd_skb_îr
:

111 
	`k‰ì_skb
(
skb
);

112  
NET_XMIT_DROP
;

113 
	}
}

124 
	$b©adv_£nd_brﬂdˇ°_skb
(
sk_buff
 *
skb
,

125 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
)

127  
	`b©adv_£nd_skb_∑ckë
(
skb
, 
h¨d_iÁ˚
, 
b©adv_brﬂdˇ°_addr
);

128 
	}
}

139 
	$b©adv_£nd_uniˇ°_skb
(
sk_buff
 *
skb
,

140 
b©adv_√igh_node
 *
√igh
)

142 #ifde‡
CONFIG_BATMAN_ADV_BATMAN_V


143 
b©adv_h¨dif_√igh_node
 *
h¨dif_√igh
;

145 
ªt
;

147 
ªt
 = 
	`b©adv_£nd_skb_∑ckë
(
skb
, 
√igh
->
if_öcomög
,Çeigh->
addr
);

149 #ifde‡
CONFIG_BATMAN_ADV_BATMAN_V


150 
h¨dif_√igh
 = 
	`b©adv_h¨dif_√igh_gë
(
√igh
->
if_öcomög
,Çeigh->
addr
);

152 i‡(
h¨dif_√igh
 && 
ªt
 !
NET_XMIT_DROP
)

153 
h¨dif_√igh
->
b©_v
.
œ°_uniˇ°_tx
 = 
jiffõs
;

155 
	`b©adv_h¨dif_√igh_put
(
h¨dif_√igh
);

158  
ªt
;

159 
	}
}

176 
	$b©adv_£nd_skb_to_‹ig
(
sk_buff
 *
skb
,

177 
b©adv_‹ig_node
 *
‹ig_node
,

178 
b©adv_h¨d_iÁ˚
 *
ªcv_if
)

180 
b©adv_¥iv
 *
b©_¥iv
 = 
‹ig_node
->bat_priv;

181 
b©adv_√igh_node
 *
√igh_node
;

182 
ªt
;

185 
√igh_node
 = 
	`b©adv_föd_rouãr
(
b©_¥iv
, 
‹ig_node
, 
ªcv_if
);

186 i‡(!
√igh_node
) {

187 
ªt
 = -
EINVAL
;

188 
‰ì_skb
;

194 i‡(
	`©omic_ªad
(&
b©_¥iv
->
‰agmíèti⁄
) &&

195 
skb
->
Àn
 > 
√igh_node
->
if_öcomög
->
√t_dev
->
mtu
) {

197 
ªt
 = 
	`b©adv_‰ag_£nd_∑ckë
(
skb
, 
‹ig_node
, 
√igh_node
);

199 
skb
 = 
NULL
;

201 
put_√igh_node
;

208 i‡(
ªcv_if
 && 
	`b©adv_nc_skb_f‹w¨d
(
skb
, 
√igh_node
))

209 
ªt
 = -
EINPROGRESS
;

211 
ªt
 = 
	`b©adv_£nd_uniˇ°_skb
(
skb
, 
√igh_node
);

214 
skb
 = 
NULL
;

216 
put_√igh_node
:

217 
	`b©adv_√igh_node_put
(
√igh_node
);

218 
‰ì_skb
:

219 
	`k‰ì_skb
(
skb
);

221  
ªt
;

222 
	}
}

233 
boﬁ


234 
	$b©adv_£nd_skb_push_fûl_uniˇ°
(
sk_buff
 *
skb
, 
hdr_size
,

235 
b©adv_‹ig_node
 *
‹ig_node
)

237 
b©adv_uniˇ°_∑ckë
 *
uniˇ°_∑ckë
;

238 
u8
 
âvn
 = (u8)
	`©omic_ªad
(&
‹ig_node
->
œ°_âvn
);

240 i‡(
	`b©adv_skb_hód_push
(
skb
, 
hdr_size
) < 0)

241  
Ál£
;

243 
uniˇ°_∑ckë
 = (
b©adv_uniˇ°_∑ckë
 *)
skb
->
d©a
;

244 
uniˇ°_∑ckë
->
vîsi⁄
 = 
BATADV_COMPAT_VERSION
;

246 
uniˇ°_∑ckë
->
∑ckë_ty≥
 = 
BATADV_UNICAST
;

248 
uniˇ°_∑ckë
->
âl
 = 
BATADV_TTL
;

250 
	`ëhî_addr_c›y
(
uniˇ°_∑ckë
->
de°
, 
‹ig_node
->
‹ig
);

252 
uniˇ°_∑ckë
->
âvn
 =Åtvn;

254  
åue
;

255 
	}
}

264 
boﬁ
 
	$b©adv_£nd_skb_¥ï¨e_uniˇ°
(
sk_buff
 *
skb
,

265 
b©adv_‹ig_node
 *
‹ig_node
)

267 
size_t
 
uni_size
 = (
b©adv_uniˇ°_∑ckë
);

269  
	`b©adv_£nd_skb_push_fûl_uniˇ°
(
skb
, 
uni_size
, 
‹ig_node
);

270 
	}
}

282 
boﬁ
 
	$b©adv_£nd_skb_¥ï¨e_uniˇ°_4addr
(
b©adv_¥iv
 *
b©_¥iv
,

283 
sk_buff
 *
skb
,

284 
b©adv_‹ig_node
 *
‹ig
,

285 
∑ckë_subty≥
)

287 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
;

288 
b©adv_uniˇ°_4addr_∑ckë
 *
uc_4addr_∑ckë
;

289 
boﬁ
 
ªt
 = 
Ál£
;

291 
¥im¨y_if
 = 
	`b©adv_¥im¨y_if_gë_£À˘ed
(
b©_¥iv
);

292 i‡(!
¥im¨y_if
)

293 
out
;

299 i‡(!
	`b©adv_£nd_skb_push_fûl_uniˇ°
(
skb
, (*
uc_4addr_∑ckë
),

300 
‹ig
))

301 
out
;

303 
uc_4addr_∑ckë
 = (
b©adv_uniˇ°_4addr_∑ckë
 *)
skb
->
d©a
;

304 
uc_4addr_∑ckë
->
u
.
∑ckë_ty≥
 = 
BATADV_UNICAST_4ADDR
;

305 
	`ëhî_addr_c›y
(
uc_4addr_∑ckë
->
§c
, 
¥im¨y_if
->
√t_dev
->
dev_addr
);

306 
uc_4addr_∑ckë
->
subty≥
 = 
∑ckë_subty≥
;

307 
uc_4addr_∑ckë
->
ª£rved
 = 0;

309 
ªt
 = 
åue
;

310 
out
:

311 
	`b©adv_h¨dif_put
(
¥im¨y_if
);

312  
ªt
;

313 
	}
}

331 
	$b©adv_£nd_skb_uniˇ°
(
b©adv_¥iv
 *
b©_¥iv
,

332 
sk_buff
 *
skb
, 
∑ckë_ty≥
,

333 
∑ckë_subty≥
,

334 
b©adv_‹ig_node
 *
‹ig_node
,

335 
vid
)

337 
b©adv_uniˇ°_∑ckë
 *
uniˇ°_∑ckë
;

338 
ëhhdr
 *ethhdr;

339 
ªt
 = 
NET_XMIT_DROP
;

341 i‡(!
‹ig_node
)

342 
out
;

344 
∑ckë_ty≥
) {

345 
BATADV_UNICAST
:

346 i‡(!
	`b©adv_£nd_skb_¥ï¨e_uniˇ°
(
skb
, 
‹ig_node
))

347 
out
;

349 
BATADV_UNICAST_4ADDR
:

350 i‡(!
	`b©adv_£nd_skb_¥ï¨e_uniˇ°_4addr
(
b©_¥iv
, 
skb
,

351 
‹ig_node
,

352 
∑ckë_subty≥
))

353 
out
;

359 
out
;

365 
ëhhdr
 = 
	`ëh_hdr
(
skb
);

366 
uniˇ°_∑ckë
 = (
b©adv_uniˇ°_∑ckë
 *)
skb
->
d©a
;

373 i‡(
	`b©adv_â_globÆ_˛õ¡_is_rﬂmög
(
b©_¥iv
, 
ëhhdr
->
h_de°
, 
vid
))

374 
uniˇ°_∑ckë
->
âvn
 = unicast_packet->ttvn - 1;

376 
ªt
 = 
	`b©adv_£nd_skb_to_‹ig
(
skb
, 
‹ig_node
, 
NULL
);

378 
skb
 = 
NULL
;

380 
out
:

381 
	`k‰ì_skb
(
skb
);

382  
ªt
;

383 
	}
}

403 
	$b©adv_£nd_skb_vü_â_gíîic
(
b©adv_¥iv
 *
b©_¥iv
,

404 
sk_buff
 *
skb
, 
∑ckë_ty≥
,

405 
∑ckë_subty≥
, 
u8
 *
d°_höt
,

406 
vid
)

408 
ëhhdr
 *ëhhd∏(ëhhd∏*)
skb
->
d©a
;

409 
b©adv_‹ig_node
 *
‹ig_node
;

410 
u8
 *
§c
, *
d°
;

411 
ªt
;

413 
§c
 = 
ëhhdr
->
h_sour˚
;

414 
d°
 = 
ëhhdr
->
h_de°
;

417 i‡(
d°_höt
) {

418 
§c
 = 
NULL
;

419 
d°
 = 
d°_höt
;

421 
‹ig_node
 = 
	`b©adv_å™°abÀ_£¨ch
(
b©_¥iv
, 
§c
, 
d°
, 
vid
);

423 
ªt
 = 
	`b©adv_£nd_skb_uniˇ°
(
b©_¥iv
, 
skb
, 
∑ckë_ty≥
,

424 
∑ckë_subty≥
, 
‹ig_node
, 
vid
);

426 
	`b©adv_‹ig_node_put
(
‹ig_node
);

428  
ªt
;

429 
	}
}

442 
	$b©adv_£nd_skb_vü_gw
(
b©adv_¥iv
 *
b©_¥iv
, 
sk_buff
 *
skb
,

443 
vid
)

445 
b©adv_‹ig_node
 *
‹ig_node
;

446 
ªt
;

448 
‹ig_node
 = 
	`b©adv_gw_gë_£À˘ed_‹ig
(
b©_¥iv
);

449 
ªt
 = 
	`b©adv_£nd_skb_uniˇ°
(
b©_¥iv
, 
skb
, 
BATADV_UNICAST_4ADDR
,

450 
BATADV_P_DATA
, 
‹ig_node
, 
vid
);

452 
	`b©adv_‹ig_node_put
(
‹ig_node
);

454  
ªt
;

455 
	}
}

465 
	$b©adv_f‹w_∑ckë_‰ì
(
b©adv_f‹w_∑ckë
 *
f‹w_∑ckë
,

466 
boﬁ
 
dr›≥d
)

468 i‡(
dr›≥d
)

469 
	`k‰ì_skb
(
f‹w_∑ckë
->
skb
);

471 
	`c⁄sume_skb
(
f‹w_∑ckë
->
skb
);

473 
	`b©adv_h¨dif_put
(
f‹w_∑ckë
->
if_öcomög
);

474 
	`b©adv_h¨dif_put
(
f‹w_∑ckë
->
if_outgoög
);

475 i‡(
f‹w_∑ckë
->
queue_À·
)

476 
	`©omic_öc
(
f‹w_∑ckë
->
queue_À·
);

477 
	`k‰ì
(
f‹w_∑ckë
);

478 
	}
}

494 
b©adv_f‹w_∑ckë
 *

495 
	$b©adv_f‹w_∑ckë_Æloc
(
b©adv_h¨d_iÁ˚
 *
if_öcomög
,

496 
b©adv_h¨d_iÁ˚
 *
if_outgoög
,

497 
©omic_t
 *
queue_À·
,

498 
b©adv_¥iv
 *
b©_¥iv
,

499 
sk_buff
 *
skb
)

501 
b©adv_f‹w_∑ckë
 *
f‹w_∑ckë
;

502 c⁄° *
q«me
;

504 i‡(
queue_À·
 && !
	`b©adv_©omic_dec_nŸ_zîo
(queue_left)) {

505 
q«me
 = "unknown";

507 i‡(
queue_À·
 =&
b©_¥iv
->
bˇ°_queue_À·
)

508 
q«me
 = "bcast";

510 i‡(
queue_À·
 =&
b©_¥iv
->
b©m™_queue_À·
)

511 
q«me
 = "batman";

513 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

514 "%†queuêi†fuŒ\n", 
q«me
);

516  
NULL
;

519 
f‹w_∑ckë
 = 
	`kmÆloc
((*f‹w_∑ckë), 
GFP_ATOMIC
);

520 i‡(!
f‹w_∑ckë
)

521 
îr
;

523 i‡(
if_öcomög
)

524 
	`kªf_gë
(&
if_öcomög
->
ªfcou¡
);

526 i‡(
if_outgoög
)

527 
	`kªf_gë
(&
if_outgoög
->
ªfcou¡
);

529 
	`INIT_HLIST_NODE
(&
f‹w_∑ckë
->
li°
);

530 
	`INIT_HLIST_NODE
(&
f‹w_∑ckë
->
˛ónup_li°
);

531 
f‹w_∑ckë
->
skb
 = skb;

532 
f‹w_∑ckë
->
queue_À·
 = queue_left;

533 
f‹w_∑ckë
->
if_öcomög
 = if_incoming;

534 
f‹w_∑ckë
->
if_outgoög
 = if_outgoing;

535 
f‹w_∑ckë
->
num_∑ckës
 = 1;

537  
f‹w_∑ckë
;

539 
îr
:

540 i‡(
queue_À·
)

541 
	`©omic_öc
(
queue_À·
);

543  
NULL
;

544 
	}
}

555 
boﬁ


556 
	$b©adv_f‹w_∑ckë_was_°ﬁí
(
b©adv_f‹w_∑ckë
 *
f‹w_∑ckë
)

558  !
	`hli°_unhashed
(&
f‹w_∑ckë
->
˛ónup_li°
);

559 
	}
}

573 
boﬁ
 
	$b©adv_f‹w_∑ckë_°ól
(
b©adv_f‹w_∑ckë
 *
f‹w_∑ckë
,

574 
•ölock_t
 *
lock
)

577 
	`•ö_lock_bh
(
lock
);

578 i‡(
	`b©adv_f‹w_∑ckë_was_°ﬁí
(
f‹w_∑ckë
)) {

579 
	`•ö_u∆ock_bh
(
lock
);

580  
Ál£
;

583 
	`hli°_dñ_öô
(&
f‹w_∑ckë
->
li°
);

586 
	`hli°_add_Áke
(&
f‹w_∑ckë
->
˛ónup_li°
);

588 
	`•ö_u∆ock_bh
(
lock
);

589  
åue
;

590 
	}
}

606 
	$b©adv_f‹w_∑ckë_li°_°ól
(
hli°_hód
 *
f‹w_li°
,

607 
hli°_hód
 *
˛ónup_li°
,

608 c⁄° 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
)

610 
b©adv_f‹w_∑ckë
 *
f‹w_∑ckë
;

611 
hli°_node
 *
ß„_tmp_node
;

613 
	`hli°_f‹_óch_íåy_ß„
(
f‹w_∑ckë
, 
ß„_tmp_node
,

614 
f‹w_li°
, 
li°
) {

618 i‡(
h¨d_iÁ˚
 &&

619 
f‹w_∑ckë
->
if_öcomög
 !
h¨d_iÁ˚
 &&

620 
f‹w_∑ckë
->
if_outgoög
 !
h¨d_iÁ˚
)

623 
	`hli°_dñ
(&
f‹w_∑ckë
->
li°
);

624 
	`hli°_add_hód
(&
f‹w_∑ckë
->
˛ónup_li°
, cleanup_list);

626 
	}
}

638 
	$b©adv_f‹w_∑ckë_li°_‰ì
(
hli°_hód
 *
hód
)

640 
b©adv_f‹w_∑ckë
 *
f‹w_∑ckë
;

641 
hli°_node
 *
ß„_tmp_node
;

643 
	`hli°_f‹_óch_íåy_ß„
(
f‹w_∑ckë
, 
ß„_tmp_node
, 
hód
,

644 
˛ónup_li°
) {

645 
	`ˇn˚l_dñayed_w‹k_sync
(&
f‹w_∑ckë
->
dñayed_w‹k
);

647 
	`hli°_dñ
(&
f‹w_∑ckë
->
˛ónup_li°
);

648 
	`b©adv_f‹w_∑ckë_‰ì
(
f‹w_∑ckë
, 
åue
);

650 
	}
}

669 
	$b©adv_f‹w_∑ckë_queue
(
b©adv_f‹w_∑ckë
 *
f‹w_∑ckë
,

670 
•ölock_t
 *
lock
, 
hli°_hód
 *
hód
,

671 
£nd_time
)

673 
	`•ö_lock_bh
(
lock
);

676 i‡(
	`b©adv_f‹w_∑ckë_was_°ﬁí
(
f‹w_∑ckë
)) {

680 
	`WARN_ONCE
(
	`hli°_Áke
(&
f‹w_∑ckë
->
˛ónup_li°
),

683 
	`•ö_u∆ock_bh
(
lock
);

687 
	`hli°_dñ_öô
(&
f‹w_∑ckë
->
li°
);

688 
	`hli°_add_hód
(&
f‹w_∑ckë
->
li°
, 
hód
);

690 
	`queue_dñayed_w‹k
(
b©adv_evít_w‹kqueue
,

691 &
f‹w_∑ckë
->
dñayed_w‹k
,

692 
£nd_time
 - 
jiffõs
);

693 
	`•ö_u∆ock_bh
(
lock
);

694 
	}
}

707 
	$b©adv_f‹w_∑ckë_bˇ°_queue
(
b©adv_¥iv
 *
b©_¥iv
,

708 
b©adv_f‹w_∑ckë
 *
f‹w_∑ckë
,

709 
£nd_time
)

711 
	`b©adv_f‹w_∑ckë_queue
(
f‹w_∑ckë
, &
b©_¥iv
->
f‹w_bˇ°_li°_lock
,

712 &
b©_¥iv
->
f‹w_bˇ°_li°
, 
£nd_time
);

713 
	}
}

725 
	$b©adv_f‹w_∑ckë_ogmv1_queue
(
b©adv_¥iv
 *
b©_¥iv
,

726 
b©adv_f‹w_∑ckë
 *
f‹w_∑ckë
,

727 
£nd_time
)

729 
	`b©adv_f‹w_∑ckë_queue
(
f‹w_∑ckë
, &
b©_¥iv
->
f‹w_b©_li°_lock
,

730 &
b©_¥iv
->
f‹w_b©_li°
, 
£nd_time
);

731 
	}
}

751 
	$b©adv_f‹w_bˇ°_∑ckë_to_li°
(
b©adv_¥iv
 *
b©_¥iv
,

752 
sk_buff
 *
skb
,

753 
dñay
,

754 
boﬁ
 
own_∑ckë
,

755 
b©adv_h¨d_iÁ˚
 *
if_ö
,

756 
b©adv_h¨d_iÁ˚
 *
if_out
)

758 
b©adv_f‹w_∑ckë
 *
f‹w_∑ckë
;

759 
£nd_time
 = 
jiffõs
;

760 
sk_buff
 *
√wskb
;

762 
√wskb
 = 
	`skb_˛⁄e
(
skb
, 
GFP_ATOMIC
);

763 i‡(!
√wskb
)

764 
îr
;

766 
f‹w_∑ckë
 = 
	`b©adv_f‹w_∑ckë_Æloc
(
if_ö
, 
if_out
,

767 &
b©_¥iv
->
bˇ°_queue_À·
,

768 
b©_¥iv
, 
√wskb
);

769 i‡(!
f‹w_∑ckë
)

770 
îr_∑ckë_‰ì
;

772 
f‹w_∑ckë
->
own
 = 
own_∑ckë
;

774 
	`INIT_DELAYED_WORK
(&
f‹w_∑ckë
->
dñayed_w‹k
,

775 
b©adv_£nd_out°™dög_bˇ°_∑ckë
);

777 
£nd_time
 +
dñay
 ? dñay : 
	`m£cs_to_jiffõs
(5);

779 
	`b©adv_f‹w_∑ckë_bˇ°_queue
(
b©_¥iv
, 
f‹w_∑ckë
, 
£nd_time
);

780  
NETDEV_TX_OK
;

782 
îr_∑ckë_‰ì
:

783 
	`k‰ì_skb
(
√wskb
);

784 
îr
:

785  
NETDEV_TX_BUSY
;

786 
	}
}

807 
	$b©adv_f‹w_bˇ°_∑ckë_if
(
b©adv_¥iv
 *
b©_¥iv
,

808 
sk_buff
 *
skb
,

809 
dñay
,

810 
boﬁ
 
own_∑ckë
,

811 
b©adv_h¨d_iÁ˚
 *
if_ö
,

812 
b©adv_h¨d_iÁ˚
 *
if_out
)

814 
num_bˇ°s
 = 
if_out
->num_bcasts;

815 
sk_buff
 *
√wskb
;

816 
ªt
 = 
NETDEV_TX_OK
;

818 i‡(!
dñay
) {

819 
√wskb
 = 
	`skb_˛⁄e
(
skb
, 
GFP_ATOMIC
);

820 i‡(!
√wskb
)

821  
NETDEV_TX_BUSY
;

823 
	`b©adv_£nd_brﬂdˇ°_skb
(
√wskb
, 
if_out
);

824 
num_bˇ°s
--;

828 i‡(
num_bˇ°s
 >= 1) {

829 
	`BATADV_SKB_CB
(
skb
)->
num_bˇ°s
 =Çum_bcasts;

831 
ªt
 = 
	`b©adv_f‹w_bˇ°_∑ckë_to_li°
(
b©_¥iv
, 
skb
, 
dñay
,

832 
own_∑ckë
, 
if_ö
,

833 
if_out
);

836  
ªt
;

837 
	}
}

849 
boﬁ
 
	$b©adv_£nd_no_brﬂdˇ°
(
b©adv_¥iv
 *
b©_¥iv
,

850 
sk_buff
 *
skb
, 
boﬁ
 
own_∑ckë
,

851 
b©adv_h¨d_iÁ˚
 *
if_out
)

853 
b©adv_h¨dif_√igh_node
 *
√igh_node
 = 
NULL
;

854 
b©adv_bˇ°_∑ckë
 *
bˇ°_∑ckë
;

855 
u8
 *
‹ig_√igh
;

856 
u8
 *
√igh_addr
;

857 *
ty≥
;

858 
ªt
;

860 i‡(!
own_∑ckë
) {

861 
√igh_addr
 = 
	`ëh_hdr
(
skb
)->
h_sour˚
;

862 
√igh_node
 = 
	`b©adv_h¨dif_√igh_gë
(
if_out
,

863 
√igh_addr
);

866 
bˇ°_∑ckë
 = (
b©adv_bˇ°_∑ckë
 *)
skb
->
d©a
;

867 
‹ig_√igh
 = 
√igh_node
 ?Çeigh_node->
‹ig
 : 
NULL
;

869 
ªt
 = 
	`b©adv_h¨dif_no_brﬂdˇ°
(
if_out
, 
bˇ°_∑ckë
->
‹ig
,

870 
‹ig_√igh
);

872 
	`b©adv_h¨dif_√igh_put
(
√igh_node
);

875 i‡(!
ªt
)

876  
Ál£
;

879 
ªt
) {

880 
BATADV_HARDIF_BCAST_NORECIPIENT
:

881 
ty≥
 = "noÇeighbor";

883 
BATADV_HARDIF_BCAST_DUPFWD
:

884 
ty≥
 = "singleÇeighbor is source";

886 
BATADV_HARDIF_BCAST_DUPORIG
:

887 
ty≥
 = "singleÇeighbor is originator";

890 
ty≥
 = "unknown";

893 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

895 
bˇ°_∑ckë
->
‹ig
,

896 
if_out
->
√t_dev
->
«me
, 
ty≥
);

898  
åue
;

899 
	}
}

918 
	$__b©adv_f‹w_bˇ°_∑ckë
(
b©adv_¥iv
 *
b©_¥iv
,

919 
sk_buff
 *
skb
,

920 
dñay
,

921 
boﬁ
 
own_∑ckë
)

923 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
;

924 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
;

925 
ªt
 = 
NETDEV_TX_OK
;

927 
¥im¨y_if
 = 
	`b©adv_¥im¨y_if_gë_£À˘ed
(
b©_¥iv
);

928 i‡(!
¥im¨y_if
)

929  
NETDEV_TX_BUSY
;

931 
	`rcu_ªad_lock
();

932 
	`li°_f‹_óch_íåy_rcu
(
h¨d_iÁ˚
, &
b©adv_h¨dif_li°
, 
li°
) {

933 i‡(
h¨d_iÁ˚
->
mesh_iÁ˚
 !
b©_¥iv
->mesh_iface)

936 i‡(!
	`kªf_gë_u∆ess_zîo
(&
h¨d_iÁ˚
->
ªfcou¡
))

939 i‡(
	`b©adv_£nd_no_brﬂdˇ°
(
b©_¥iv
, 
skb
, 
own_∑ckë
,

940 
h¨d_iÁ˚
)) {

941 
	`b©adv_h¨dif_put
(
h¨d_iÁ˚
);

945 
ªt
 = 
	`b©adv_f‹w_bˇ°_∑ckë_if
(
b©_¥iv
, 
skb
, 
dñay
,

946 
own_∑ckë
, 
¥im¨y_if
,

947 
h¨d_iÁ˚
);

948 
	`b©adv_h¨dif_put
(
h¨d_iÁ˚
);

950 i‡(
ªt
 =
NETDEV_TX_BUSY
)

953 
	`rcu_ªad_u∆ock
();

955 
	`b©adv_h¨dif_put
(
¥im¨y_if
);

956  
ªt
;

957 
	}
}

972 
	$b©adv_f‹w_bˇ°_∑ckë
(
b©adv_¥iv
 *
b©_¥iv
,

973 
sk_buff
 *
skb
,

974 
dñay
,

975 
boﬁ
 
own_∑ckë
)

977  
	`__b©adv_f‹w_bˇ°_∑ckë
(
b©_¥iv
, 
skb
, 
dñay
, 
own_∑ckë
);

978 
	}
}

993 
	$b©adv_£nd_bˇ°_∑ckë
(
b©adv_¥iv
 *
b©_¥iv
,

994 
sk_buff
 *
skb
,

995 
dñay
,

996 
boﬁ
 
own_∑ckë
)

998 
	`__b©adv_f‹w_bˇ°_∑ckë
(
b©_¥iv
, 
skb
, 
dñay
, 
own_∑ckë
);

999 
	`c⁄sume_skb
(
skb
);

1000 
	}
}

1015 
boﬁ


1016 
	$b©adv_f‹w_∑ckë_bˇ°s_À·
(
b©adv_f‹w_∑ckë
 *
f‹w_∑ckë
)

1018  
	`BATADV_SKB_CB
(
f‹w_∑ckë
->
skb
)->
num_bˇ°s
;

1019 
	}
}

1027 
	$b©adv_f‹w_∑ckë_bˇ°s_dec
(
b©adv_f‹w_∑ckë
 *
f‹w_∑ckë
)

1029 
	`BATADV_SKB_CB
(
f‹w_∑ckë
->
skb
)->
num_bˇ°s
--;

1030 
	}
}

1038 
boﬁ
 
	$b©adv_f‹w_∑ckë_is_ªbrﬂdˇ°
(
b©adv_f‹w_∑ckë
 *
f‹w_∑ckë
)

1040 
num_bˇ°s
 = 
	`BATADV_SKB_CB
(
f‹w_∑ckë
->
skb
)->num_bcasts;

1042  
num_bˇ°s
 !
f‹w_∑ckë
->
if_outgoög
->num_bcasts;

1043 
	}
}

1051 
	$b©adv_£nd_out°™dög_bˇ°_∑ckë
(
w‹k_°ru˘
 *
w‹k
)

1053 
£nd_time
 = 
jiffõs
 + 
	`m£cs_to_jiffõs
(5);

1054 
b©adv_f‹w_∑ckë
 *
f‹w_∑ckë
;

1055 
dñayed_w‹k
 *delayed_work;

1056 
b©adv_¥iv
 *
b©_¥iv
;

1057 
sk_buff
 *
skb1
;

1058 
boﬁ
 
dr›≥d
 = 
Ál£
;

1060 
dñayed_w‹k
 = 
	`to_dñayed_w‹k
(
w‹k
);

1061 
f‹w_∑ckë
 = 
	`c⁄èöî_of
(
dñayed_w‹k
, 
b©adv_f‹w_∑ckë
,

1062 
dñayed_w‹k
);

1063 
b©_¥iv
 = 
	`√tdev_¥iv
(
f‹w_∑ckë
->
if_öcomög
->
mesh_iÁ˚
);

1065 i‡(
	`©omic_ªad
(&
b©_¥iv
->
mesh_°©e
Ë=
BATADV_MESH_DEACTIVATING
) {

1066 
dr›≥d
 = 
åue
;

1067 
out
;

1070 i‡(
	`b©adv_d©_dr›_brﬂdˇ°_∑ckë
(
b©_¥iv
, 
f‹w_∑ckë
)) {

1071 
dr›≥d
 = 
åue
;

1072 
out
;

1076 
skb1
 = 
	`skb_˛⁄e
(
f‹w_∑ckë
->
skb
, 
GFP_ATOMIC
);

1077 i‡(!
skb1
)

1078 
out
;

1080 
	`b©adv_£nd_brﬂdˇ°_skb
(
skb1
, 
f‹w_∑ckë
->
if_outgoög
);

1081 
	`b©adv_f‹w_∑ckë_bˇ°s_dec
(
f‹w_∑ckë
);

1083 i‡(
	`b©adv_f‹w_∑ckë_bˇ°s_À·
(
f‹w_∑ckë
)) {

1084 
	`b©adv_f‹w_∑ckë_bˇ°_queue
(
b©_¥iv
, 
f‹w_∑ckë
,

1085 
£nd_time
);

1089 
out
:

1091 i‡(
	`b©adv_f‹w_∑ckë_°ól
(
f‹w_∑ckë
,

1092 &
b©_¥iv
->
f‹w_bˇ°_li°_lock
))

1093 
	`b©adv_f‹w_∑ckë_‰ì
(
f‹w_∑ckë
, 
dr›≥d
);

1094 
	}
}

1108 
	$b©adv_purge_out°™dög_∑ckës
(
b©adv_¥iv
 *
b©_¥iv
,

1109 c⁄° 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
)

1111 
hli°_hód
 
hód
 = 
HLIST_HEAD_INIT
;

1113 i‡(
h¨d_iÁ˚
)

1114 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

1116 
__func__
, 
h¨d_iÁ˚
->
√t_dev
->
«me
);

1118 
	`b©adv_dbg
(
BATADV_DBG_BATMAN
, 
b©_¥iv
,

1119 "%s()\n", 
__func__
);

1122 
	`•ö_lock_bh
(&
b©_¥iv
->
f‹w_bˇ°_li°_lock
);

1123 
	`b©adv_f‹w_∑ckë_li°_°ól
(&
b©_¥iv
->
f‹w_bˇ°_li°
, &
hód
,

1124 
h¨d_iÁ˚
);

1125 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
f‹w_bˇ°_li°_lock
);

1128 
	`•ö_lock_bh
(&
b©_¥iv
->
f‹w_b©_li°_lock
);

1129 
	`b©adv_f‹w_∑ckë_li°_°ól
(&
b©_¥iv
->
f‹w_b©_li°
, &
hód
,

1130 
h¨d_iÁ˚
);

1131 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
f‹w_b©_li°_lock
);

1134 
	`b©adv_f‹w_∑ckë_li°_‰ì
(&
hód
);

1135 
	}
}

	@net/batman-adv/send.h

7 #i‚de‡
_NET_BATMAN_ADV_SEND_H_


8 
	#_NET_BATMAN_ADV_SEND_H_


	)

10 
	~"maö.h
"

12 
	~<löux/compûî.h
>

13 
	~<löux/skbuff.h
>

14 
	~<löux/•ölock.h
>

15 
	~<löux/ty≥s.h
>

16 
	~<u≠i/löux/b©adv_∑ckë.h
>

18 
b©adv_f‹w_∑ckë_‰ì
(
b©adv_f‹w_∑ckë
 *
f‹w_∑ckë
,

19 
boﬁ
 
dr›≥d
);

20 
b©adv_f‹w_∑ckë
 *

21 
b©adv_f‹w_∑ckë_Æloc
(
b©adv_h¨d_iÁ˚
 *
if_öcomög
,

22 
b©adv_h¨d_iÁ˚
 *
if_outgoög
,

23 
©omic_t
 *
queue_À·
,

24 
b©adv_¥iv
 *
b©_¥iv
,

25 
sk_buff
 *
skb
);

26 
boﬁ
 
b©adv_f‹w_∑ckë_°ól
(
b©adv_f‹w_∑ckë
 *
∑ckë
, 
•ölock_t
 *
l
);

27 
b©adv_f‹w_∑ckë_ogmv1_queue
(
b©adv_¥iv
 *
b©_¥iv
,

28 
b©adv_f‹w_∑ckë
 *
f‹w_∑ckë
,

29 
£nd_time
);

30 
boﬁ
 
b©adv_f‹w_∑ckë_is_ªbrﬂdˇ°
(
b©adv_f‹w_∑ckë
 *
f‹w_∑ckë
);

32 
b©adv_£nd_skb_to_‹ig
(
sk_buff
 *
skb
,

33 
b©adv_‹ig_node
 *
‹ig_node
,

34 
b©adv_h¨d_iÁ˚
 *
ªcv_if
);

35 
b©adv_£nd_skb_∑ckë
(
sk_buff
 *
skb
,

36 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
,

37 c⁄° 
u8
 *
d°_addr
);

38 
b©adv_£nd_brﬂdˇ°_skb
(
sk_buff
 *
skb
,

39 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
);

40 
b©adv_£nd_uniˇ°_skb
(
sk_buff
 *
skb
,

41 
b©adv_√igh_node
 *
√igh_node
);

42 
b©adv_f‹w_bˇ°_∑ckë
(
b©adv_¥iv
 *
b©_¥iv
,

43 
sk_buff
 *
skb
,

44 
dñay
,

45 
boﬁ
 
own_∑ckë
);

46 
b©adv_£nd_bˇ°_∑ckë
(
b©adv_¥iv
 *
b©_¥iv
,

47 
sk_buff
 *
skb
,

48 
dñay
,

49 
boﬁ
 
own_∑ckë
);

51 
b©adv_purge_out°™dög_∑ckës
(
b©adv_¥iv
 *
b©_¥iv
,

52 c⁄° 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
);

53 
boﬁ
 
b©adv_£nd_skb_¥ï¨e_uniˇ°_4addr
(
b©adv_¥iv
 *
b©_¥iv
,

54 
sk_buff
 *
skb
,

55 
b©adv_‹ig_node
 *
‹ig_node
,

56 
∑ckë_subty≥
);

57 
b©adv_£nd_skb_uniˇ°
(
b©adv_¥iv
 *
b©_¥iv
,

58 
sk_buff
 *
skb
, 
∑ckë_ty≥
,

59 
∑ckë_subty≥
,

60 
b©adv_‹ig_node
 *
‹ig_node
,

61 
vid
);

62 
b©adv_£nd_skb_vü_â_gíîic
(
b©adv_¥iv
 *
b©_¥iv
,

63 
sk_buff
 *
skb
, 
∑ckë_ty≥
,

64 
∑ckë_subty≥
, 
u8
 *
d°_höt
,

65 
vid
);

66 
b©adv_£nd_skb_vü_gw
(
b©adv_¥iv
 *
b©_¥iv
, 
sk_buff
 *
skb
,

67 
vid
);

82 
ölöe
 
	$b©adv_£nd_skb_vü_â
(
b©adv_¥iv
 *
b©_¥iv
,

83 
sk_buff
 *
skb
, 
u8
 *
d°_höt
,

84 
vid
)

86  
	`b©adv_£nd_skb_vü_â_gíîic
(
b©_¥iv
, 
skb
, 
BATADV_UNICAST
, 0,

87 
d°_höt
, 
vid
);

88 
	}
}

105 
ölöe
 
	$b©adv_£nd_skb_vü_â_4addr
(
b©adv_¥iv
 *
b©_¥iv
,

106 
sk_buff
 *
skb
,

107 
∑ckë_subty≥
,

108 
u8
 *
d°_höt
,

109 
vid
)

111  
	`b©adv_£nd_skb_vü_â_gíîic
(
b©_¥iv
, 
skb
,

112 
BATADV_UNICAST_4ADDR
,

113 
∑ckë_subty≥
, 
d°_höt
, 
vid
);

114 
	}
}

	@net/batman-adv/tp_meter.c

7 
	~"ç_mëî.h
"

8 
	~"maö.h
"

10 
	~<löux/©omic.h
>

11 
	~<löux/buûd_bug.h
>

12 
	~<löux/byã‹dî/gíîic.h
>

13 
	~<löux/ˇche.h
>

14 
	~<löux/compûî.h
>

15 
	~<löux/c⁄èöî_of.h
>

16 
	~<löux/îr.h
>

17 
	~<löux/ëhîdevi˚.h
>

18 
	~<löux/gÂ.h
>

19 
	~<löux/if_ëhî.h
>

20 
	~<löux/öô.h
>

21 
	~<löux/jiffõs.h
>

22 
	~<löux/kªf.h
>

23 
	~<löux/kthªad.h
>

24 
	~<löux/limôs.h
>

25 
	~<löux/li°.h
>

26 
	~<löux/mömax.h
>

27 
	~<löux/√tdevi˚.h
>

28 
	~<löux/∑øm.h
>

29 
	~<löux/¥ötk.h
>

30 
	~<löux/øndom.h
>

31 
	~<löux/rculi°.h
>

32 
	~<löux/rcupd©e.h
>

33 
	~<löux/sched.h
>

34 
	~<löux/skbuff.h
>

35 
	~<löux/¶ab.h
>

36 
	~<löux/•ölock.h
>

37 
	~<löux/°ddef.h
>

38 
	~<löux/°rög.h
>

39 
	~<löux/timî.h
>

40 
	~<löux/waô.h
>

41 
	~<löux/w‹kqueue.h
>

42 
	~<u≠i/löux/b©adv_∑ckë.h
>

43 
	~<u≠i/löux/b©m™_adv.h
>

45 
	~"h¨d-öãrÁ˚.h
"

46 
	~"log.h
"

47 
	~"√éök.h
"

48 
	~"‹igö©‹.h
"

49 
	~"£nd.h
"

55 
	#BATADV_TP_DEF_TEST_LENGTH
 10000

	)

60 
	#BATADV_TP_AWND
 0x20000000

	)

66 
	#BATADV_TP_RECV_TIMEOUT
 1000

	)

73 
	#BATADV_TP_MAX_RTO
 30000

	)

79 
	#BATADV_TP_FIRST_SEQ
 ((
u32
)-1 - 2000)

	)

85 
	#BATADV_TP_PLEN
 (
BATADV_TP_PACKET_LEN
 - 
ETH_HLEN
 - \

86 (
b©adv_uniˇ°_∑ckë
))

	)

88 
u8
 
	gb©adv_ç_¥î™dom
[4096] 
	g__ªad_mo°ly
;

97 
u32
 
	$b©adv_ç_£ssi⁄_cookõ
(c⁄° 
u8
 
£ssi⁄
[2], u8 
icmp_uid
)

99 
u32
 
cookõ
;

101 
cookõ
 = 
icmp_uid
 << 16;

102 
cookõ
 |
£ssi⁄
[0] << 8;

103 
cookõ
 |
£ssi⁄
[1];

105  
cookõ
;

106 
	}
}

120 
u32
 
	$b©adv_ç_cwnd
(
u32
 
ba£
, u32 
ö¸emít
, u32 
mö
)

122 
u32
 
√w_size
 = 
ba£
 + 
ö¸emít
;

125 i‡(
√w_size
 < 
ba£
)

126 
√w_size
 = (
u32
)
ULONG_MAX
;

128 
√w_size
 = 
	`mö_t
(
u32
,Çew_size, 
BATADV_TP_AWND
);

130  
	`max_t
(
u32
, 
√w_size
, 
mö
);

131 
	}
}

143 
	$b©adv_ç_upd©e_cwnd
(
b©adv_ç_v¨s
 *
ç_v¨s
, 
u32
 
mss
)

145 
	`•ö_lock_bh
(&
ç_v¨s
->
cwnd_lock
);

148 i‡(
ç_v¨s
->
cwnd
 <ç_v¨s->
ss_thªshﬁd
) {

149 
ç_v¨s
->
dec_cwnd
 = 0;

150 
ç_v¨s
->
cwnd
 = 
	`b©adv_ç_cwnd
—p_v¨s->cwnd, 
mss
, mss);

151 
	`•ö_u∆ock_bh
(&
ç_v¨s
->
cwnd_lock
);

156 
ç_v¨s
->
dec_cwnd
 +
	`max_t
(
u32
, 1U << 3,

157 ((
mss
 * mssË<< 6Ë/ (
ç_v¨s
->
cwnd
 << 3));

158 i‡(
ç_v¨s
->
dec_cwnd
 < (
mss
 << 3)) {

159 
	`•ö_u∆ock_bh
(&
ç_v¨s
->
cwnd_lock
);

163 
ç_v¨s
->
cwnd
 = 
	`b©adv_ç_cwnd
—p_v¨s->cwnd, 
mss
, mss);

164 
ç_v¨s
->
dec_cwnd
 = 0;

166 
	`•ö_u∆ock_bh
(&
ç_v¨s
->
cwnd_lock
);

167 
	}
}

174 
	$b©adv_ç_upd©e_πo
(
b©adv_ç_v¨s
 *
ç_v¨s
,

175 
u32
 
√w_πt
)

177 
m
 = 
√w_πt
;

185 i‡(
ç_v¨s
->
§â
 != 0) {

186 
m
 -(
ç_v¨s
->
§â
 >> 3);

187 
ç_v¨s
->
§â
 +
m
;

188 i‡(
m
 < 0)

189 
m
 = -m;

191 
m
 -(
ç_v¨s
->
πtv¨
 >> 2);

192 
ç_v¨s
->
πtv¨
 +
m
;

195 
ç_v¨s
->
§â
 = 
m
 << 3;

196 
ç_v¨s
->
πtv¨
 = 
m
 << 1;

202 
ç_v¨s
->
πo
 = (ç_v¨s->
§â
 >> 3Ë+Åp_v¨s->
πtv¨
;

203 
	}
}

214 
	$b©adv_ç_b©˘l_nŸify
(
b©adv_ç_mëî_ªas⁄
 
ªas⁄
,

215 c⁄° 
u8
 *
d°
, 
b©adv_¥iv
 *
b©_¥iv
,

216 
°¨t_time
, 
u64
 
tŸÆ_£¡
,

217 
u32
 
cookõ
)

219 
u32
 
ã°_time
;

220 
u8
 
ªsu…
;

221 
u32
 
tŸÆ_byãs
;

223 i‡(!
	`b©adv_ç_is_îr‹
(
ªas⁄
)) {

224 
ªsu…
 = 
BATADV_TP_REASON_COMPLETE
;

225 
ã°_time
 = 
	`jiffõs_to_m£cs
(
jiffõs
 - 
°¨t_time
);

226 
tŸÆ_byãs
 = 
tŸÆ_£¡
;

228 
ªsu…
 = 
ªas⁄
;

229 
ã°_time
 = 0;

230 
tŸÆ_byãs
 = 0;

233 
	`b©adv_√éök_çmëî_nŸify
(
b©_¥iv
, 
d°
, 
ªsu…
, 
ã°_time
,

234 
tŸÆ_byãs
, 
cookõ
);

235 
	}
}

244 
	$b©adv_ç_b©˘l_îr‹_nŸify
(
b©adv_ç_mëî_ªas⁄
 
ªas⁄
,

245 c⁄° 
u8
 *
d°
,

246 
b©adv_¥iv
 *
b©_¥iv
,

247 
u32
 
cookõ
)

249 
	`b©adv_ç_b©˘l_nŸify
(
ªas⁄
, 
d°
, 
b©_¥iv
, 0, 0, 
cookõ
);

250 
	}
}

262 
b©adv_ç_v¨s
 *
	$b©adv_ç_li°_föd
(
b©adv_¥iv
 *
b©_¥iv
,

263 c⁄° 
u8
 *
d°
)

265 
b©adv_ç_v¨s
 *
pos
, *
ç_v¨s
 = 
NULL
;

267 
	`rcu_ªad_lock
();

268 
	`hli°_f‹_óch_íåy_rcu
(
pos
, &
b©_¥iv
->
ç_li°
, 
li°
) {

269 i‡(!
	`b©adv_com∑ª_ëh
(
pos
->
Ÿhî_íd
, 
d°
))

276 i‡(
	`u∆ikñy
(!
	`kªf_gë_u∆ess_zîo
(&
pos
->
ªfcou¡
)))

279 
ç_v¨s
 = 
pos
;

282 
	`rcu_ªad_u∆ock
();

284  
ç_v¨s
;

285 
	}
}

300 
b©adv_ç_v¨s
 *

301 
	$b©adv_ç_li°_föd_£ssi⁄
(
b©adv_¥iv
 *
b©_¥iv
, c⁄° 
u8
 *
d°
,

302 c⁄° 
u8
 *
£ssi⁄
)

304 
b©adv_ç_v¨s
 *
pos
, *
ç_v¨s
 = 
NULL
;

306 
	`rcu_ªad_lock
();

307 
	`hli°_f‹_óch_íåy_rcu
(
pos
, &
b©_¥iv
->
ç_li°
, 
li°
) {

308 i‡(!
	`b©adv_com∑ª_ëh
(
pos
->
Ÿhî_íd
, 
d°
))

311 i‡(
	`memcmp
(
pos
->
£ssi⁄
, session, (pos->session)) != 0)

318 i‡(
	`u∆ikñy
(!
	`kªf_gë_u∆ess_zîo
(&
pos
->
ªfcou¡
)))

321 
ç_v¨s
 = 
pos
;

324 
	`rcu_ªad_u∆ock
();

326  
ç_v¨s
;

327 
	}
}

334 
	$b©adv_ç_v¨s_ªÀa£
(
kªf
 *
ªf
)

336 
b©adv_ç_v¨s
 *
ç_v¨s
;

337 
b©adv_ç_u«cked
 *
un
, *
ß„
;

339 
ç_v¨s
 = 
	`c⁄èöî_of
(
ªf
, 
b©adv_ç_v¨s
, 
ªfcou¡
);

344 
	`•ö_lock_bh
(&
ç_v¨s
->
u«cked_lock
);

345 
	`li°_f‹_óch_íåy_ß„
(
un
, 
ß„
, &
ç_v¨s
->
u«cked_li°
, 
li°
) {

346 
	`li°_dñ
(&
un
->
li°
);

347 
	`k‰ì
(
un
);

349 
	`•ö_u∆ock_bh
(&
ç_v¨s
->
u«cked_lock
);

351 
	`k‰ì_rcu
(
ç_v¨s
, 
rcu
);

352 
	}
}

359 
	$b©adv_ç_v¨s_put
(
b©adv_ç_v¨s
 *
ç_v¨s
)

361 i‡(!
ç_v¨s
)

364 
	`kªf_put
(&
ç_v¨s
->
ªfcou¡
, 
b©adv_ç_v¨s_ªÀa£
);

365 
	}
}

372 
	$b©adv_ç_£ndî_˛ónup
(
b©adv_¥iv
 *
b©_¥iv
,

373 
b©adv_ç_v¨s
 *
ç_v¨s
)

375 
	`ˇn˚l_dñayed_w‹k
(&
ç_v¨s
->
föish_w‹k
);

377 
	`•ö_lock_bh
(&
ç_v¨s
->
b©_¥iv
->
ç_li°_lock
);

378 
	`hli°_dñ_rcu
(&
ç_v¨s
->
li°
);

379 
	`•ö_u∆ock_bh
(&
ç_v¨s
->
b©_¥iv
->
ç_li°_lock
);

382 
	`b©adv_ç_v¨s_put
(
ç_v¨s
);

384 
	`©omic_dec
(&
ç_v¨s
->
b©_¥iv
->
ç_num
);

387 
	`timî_dñëe_sync
(&
ç_v¨s
->
timî
);

393 
	`timî_dñëe
(&
ç_v¨s
->
timî
);

394 
	`b©adv_ç_v¨s_put
(
ç_v¨s
);

395 
	}
}

402 
	$b©adv_ç_£ndî_íd
(
b©adv_¥iv
 *
b©_¥iv
,

403 
b©adv_ç_v¨s
 *
ç_v¨s
)

405 
u32
 
£ssi⁄_cookõ
;

407 
	`b©adv_dbg
(
BATADV_DBG_TP_METER
, 
b©_¥iv
,

409 
ç_v¨s
->
Ÿhî_íd
,Åp_v¨s->
ªas⁄
);

411 
	`b©adv_dbg
(
BATADV_DBG_TP_METER
, 
b©_¥iv
,

413 
ç_v¨s
->
§â
 >> 3,Åp_v¨s->
πtv¨
 >> 2,Åp_v¨s->
πo
);

415 
	`b©adv_dbg
(
BATADV_DBG_TP_METER
, 
b©_¥iv
,

417 
ç_v¨s
->
cwnd
,Åp_v¨s->
ss_thªshﬁd
);

419 
£ssi⁄_cookõ
 = 
	`b©adv_ç_£ssi⁄_cookõ
(
ç_v¨s
->
£ssi⁄
,

420 
ç_v¨s
->
icmp_uid
);

422 
	`b©adv_ç_b©˘l_nŸify
(
ç_v¨s
->
ªas⁄
,

423 
ç_v¨s
->
Ÿhî_íd
,

424 
b©_¥iv
,

425 
ç_v¨s
->
°¨t_time
,

426 
	`©omic64_ªad
(&
ç_v¨s
->
tŸ_£¡
),

427 
£ssi⁄_cookõ
);

428 
	}
}

435 
	$b©adv_ç_£ndî_shutdown
(
b©adv_ç_v¨s
 *
ç_v¨s
,

436 
b©adv_ç_mëî_ªas⁄
 
ªas⁄
)

438 i‡(!
	`©omic_dec_™d_ã°
(&
ç_v¨s
->
£ndög
))

441 
ç_v¨s
->
ªas⁄
 =Ñeason;

442 
	}
}

448 
	$b©adv_ç_£ndî_föish
(
w‹k_°ru˘
 *
w‹k
)

450 
dñayed_w‹k
 *delayed_work;

451 
b©adv_ç_v¨s
 *
ç_v¨s
;

453 
dñayed_w‹k
 = 
	`to_dñayed_w‹k
(
w‹k
);

454 
ç_v¨s
 = 
	`c⁄èöî_of
(
dñayed_w‹k
, 
b©adv_ç_v¨s
,

455 
föish_w‹k
);

457 
	`b©adv_ç_£ndî_shutdown
(
ç_v¨s
, 
BATADV_TP_REASON_COMPLETE
);

458 
	}
}

466 
	$b©adv_ç_ª£t_£ndî_timî
(
b©adv_ç_v¨s
 *
ç_v¨s
)

471 i‡(
	`u∆ikñy
(
	`©omic_ªad
(&
ç_v¨s
->
£ndög
) == 0))

475 
	`mod_timî
(&
ç_v¨s
->
timî
, 
jiffõs
 + 
	`m£cs_to_jiffõs
—p_v¨s->
πo
));

476 
	}
}

486 
	$b©adv_ç_£ndî_timeout
(
timî_li°
 *
t
)

488 
b©adv_ç_v¨s
 *
ç_v¨s
 = 
	`‰om_timî
—p_v¨s, 
t
, 
timî
);

489 
b©adv_¥iv
 *
b©_¥iv
 = 
ç_v¨s
->bat_priv;

491 i‡(
	`©omic_ªad
(&
ç_v¨s
->
£ndög
) == 0)

495 i‡(
	`u∆ikñy
(
ç_v¨s
->
πo
 >
BATADV_TP_MAX_RTO
)) {

496 
	`b©adv_ç_£ndî_shutdown
(
ç_v¨s
,

497 
BATADV_TP_REASON_DST_UNREACHABLE
);

504 
ç_v¨s
->
πo
 <<= 1;

506 
	`•ö_lock_bh
(&
ç_v¨s
->
cwnd_lock
);

508 
ç_v¨s
->
ss_thªshﬁd
 =Åp_v¨s->
cwnd
 >> 1;

509 i‡(
ç_v¨s
->
ss_thªshﬁd
 < 
BATADV_TP_PLEN
 * 2)

510 
ç_v¨s
->
ss_thªshﬁd
 = 
BATADV_TP_PLEN
 * 2;

512 
	`b©adv_dbg
(
BATADV_DBG_TP_METER
, 
b©_¥iv
,

514 
ç_v¨s
->
Ÿhî_íd
,Åp_v¨s->
cwnd
,Åp_v¨s->
ss_thªshﬁd
,

515 
	`©omic_ªad
(&
ç_v¨s
->
œ°_acked
));

517 
ç_v¨s
->
cwnd
 = 
BATADV_TP_PLEN
 * 3;

519 
	`•ö_u∆ock_bh
(&
ç_v¨s
->
cwnd_lock
);

522 
ç_v¨s
->
œ°_£¡
 = 
	`©omic_ªad
(&ç_v¨s->
œ°_acked
);

523 
	`wake_up
(&
ç_v¨s
->
m‹e_byãs
);

525 
	`b©adv_ç_ª£t_£ndî_timî
(
ç_v¨s
);

526 
	}
}

534 
	$b©adv_ç_fûl_¥î™dom
(
b©adv_ç_v¨s
 *
ç_v¨s
,

535 
u8
 *
buf
, 
size_t
 
nbyãs
)

537 
u32
 
loˇl_off£t
;

538 
size_t
 
byãs_öbuf
;

539 
size_t
 
to_c›y
;

540 
size_t
 
pos
 = 0;

542 
	`•ö_lock_bh
(&
ç_v¨s
->
¥î™dom_lock
);

543 
loˇl_off£t
 = 
ç_v¨s
->
¥î™dom_off£t
;

544 
ç_v¨s
->
¥î™dom_off£t
 +
nbyãs
;

545 
ç_v¨s
->
¥î™dom_off£t
 %(
b©adv_ç_¥î™dom
);

546 
	`•ö_u∆ock_bh
(&
ç_v¨s
->
¥î™dom_lock
);

548 
nbyãs
) {

549 
loˇl_off£t
 %(
b©adv_ç_¥î™dom
);

550 
byãs_öbuf
 = (
b©adv_ç_¥î™dom
Ë- 
loˇl_off£t
;

551 
to_c›y
 = 
	`mö
(
nbyãs
, 
byãs_öbuf
);

553 
	`mem˝y
(&
buf
[
pos
], &
b©adv_ç_¥î™dom
[
loˇl_off£t
], 
to_c›y
);

554 
pos
 +
to_c›y
;

555 
nbyãs
 -
to_c›y
;

556 
loˇl_off£t
 = 0;

558 
	}
}

577 
	$b©adv_ç_£nd_msg
(
b©adv_ç_v¨s
 *
ç_v¨s
, c⁄° 
u8
 *
§c
,

578 
b©adv_‹ig_node
 *
‹ig_node
,

579 
u32
 
£qno
, 
size_t
 
Àn
, c⁄° 
u8
 *
£ssi⁄
,

580 
uid
, 
u32
 
time°amp
)

582 
b©adv_icmp_ç_∑ckë
 *
icmp
;

583 
sk_buff
 *
skb
;

584 
r
;

585 
u8
 *
d©a
;

586 
size_t
 
d©a_Àn
;

588 
skb
 = 
	`√tdev_Æloc_skb_ù_Æign
(
NULL
, 
Àn
 + 
ETH_HLEN
);

589 i‡(
	`u∆ikñy
(!
skb
))

590  
BATADV_TP_REASON_MEMORY_ERROR
;

592 
	`skb_ª£rve
(
skb
, 
ETH_HLEN
);

593 
icmp
 = 
	`skb_put
(
skb
, (*icmp));

596 
	`ëhî_addr_c›y
(
icmp
->
d°
, 
‹ig_node
->
‹ig
);

597 
	`ëhî_addr_c›y
(
icmp
->
‹ig
, 
§c
);

598 
icmp
->
vîsi⁄
 = 
BATADV_COMPAT_VERSION
;

599 
icmp
->
∑ckë_ty≥
 = 
BATADV_ICMP
;

600 
icmp
->
âl
 = 
BATADV_TTL
;

601 
icmp
->
msg_ty≥
 = 
BATADV_TP
;

602 
icmp
->
uid
 = uid;

604 
icmp
->
subty≥
 = 
BATADV_TP_MSG
;

605 
	`mem˝y
(
icmp
->
£ssi⁄
, session, (icmp->session));

606 
icmp
->
£qno
 = 
	`ht⁄l
(seqno);

607 
icmp
->
time°amp
 = 
	`ht⁄l
(timestamp);

609 
d©a_Àn
 = 
Àn
 - (*
icmp
);

610 
d©a
 = 
	`skb_put
(
skb
, 
d©a_Àn
);

611 
	`b©adv_ç_fûl_¥î™dom
(
ç_v¨s
, 
d©a
, 
d©a_Àn
);

613 
r
 = 
	`b©adv_£nd_skb_to_‹ig
(
skb
, 
‹ig_node
, 
NULL
);

614 i‡(
r
 =
NET_XMIT_SUCCESS
)

617  
BATADV_TP_REASON_CANT_SEND
;

618 
	}
}

627 
	$b©adv_ç_ªcv_ack
(
b©adv_¥iv
 *
b©_¥iv
,

628 c⁄° 
sk_buff
 *
skb
)

630 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
 = 
NULL
;

631 
b©adv_‹ig_node
 *
‹ig_node
 = 
NULL
;

632 c⁄° 
b©adv_icmp_ç_∑ckë
 *
icmp
;

633 
b©adv_ç_v¨s
 *
ç_v¨s
;

634 c⁄° *
dev_addr
;

635 
size_t
 
∑ckë_Àn
, 
mss
;

636 
u32
 
πt
, 
ªcv_ack
, 
cwnd
;

638 
∑ckë_Àn
 = 
BATADV_TP_PLEN
;

639 
mss
 = 
BATADV_TP_PLEN
;

640 
∑ckë_Àn
 +(
b©adv_uniˇ°_∑ckë
);

642 
icmp
 = (
b©adv_icmp_ç_∑ckë
 *)
skb
->
d©a
;

645 
ç_v¨s
 = 
	`b©adv_ç_li°_föd_£ssi⁄
(
b©_¥iv
, 
icmp
->
‹ig
,

646 
icmp
->
£ssi⁄
);

647 i‡(
	`u∆ikñy
(!
ç_v¨s
))

650 i‡(
	`u∆ikñy
(
	`©omic_ªad
(&
ç_v¨s
->
£ndög
) == 0))

651 
out
;

654 i‡(
	`b©adv_£q_bef‹e
(
	`¡ohl
(
icmp
->
£qno
),

655 (
u32
)
	`©omic_ªad
(&
ç_v¨s
->
œ°_acked
)))

656 
out
;

658 
¥im¨y_if
 = 
	`b©adv_¥im¨y_if_gë_£À˘ed
(
b©_¥iv
);

659 i‡(
	`u∆ikñy
(!
¥im¨y_if
))

660 
out
;

662 
‹ig_node
 = 
	`b©adv_‹ig_hash_föd
(
b©_¥iv
, 
icmp
->
‹ig
);

663 i‡(
	`u∆ikñy
(!
‹ig_node
))

664 
out
;

667 
πt
 = 
	`jiffõs_to_m£cs
(
jiffõs
Ë- 
	`¡ohl
(
icmp
->
time°amp
);

668 i‡(
icmp
->
time°amp
 && 
πt
)

669 
	`b©adv_ç_upd©e_πo
(
ç_v¨s
, 
πt
);

672 
	`b©adv_ç_ª£t_£ndî_timî
(
ç_v¨s
);

674 
ªcv_ack
 = 
	`¡ohl
(
icmp
->
£qno
);

677 i‡(
	`©omic_ªad
(&
ç_v¨s
->
œ°_acked
Ë=
ªcv_ack
) {

678 
	`©omic_öc
(&
ç_v¨s
->
dup_acks
);

679 i‡(
	`©omic_ªad
(&
ç_v¨s
->
dup_acks
) != 3)

680 
out
;

682 i‡(
ªcv_ack
 >
ç_v¨s
->
ªcovî
)

683 
out
;

686 
	`b©adv_ç_£nd_msg
(
ç_v¨s
, 
¥im¨y_if
->
√t_dev
->
dev_addr
,

687 
‹ig_node
, 
ªcv_ack
, 
∑ckë_Àn
,

688 
icmp
->
£ssi⁄
, icmp->
uid
,

689 
	`jiffõs_to_m£cs
(
jiffõs
));

691 
	`•ö_lock_bh
(&
ç_v¨s
->
cwnd_lock
);

694 
ç_v¨s
->
Á°_ªcovîy
 = 
åue
;

698 
ç_v¨s
->
ªcovî
 =Åp_v¨s->
œ°_£¡
;

699 
ç_v¨s
->
ss_thªshﬁd
 =Åp_v¨s->
cwnd
 >> 1;

700 
	`b©adv_dbg
(
BATADV_DBG_TP_METER
, 
b©_¥iv
,

702 
ç_v¨s
->
cwnd
,Åp_v¨s->
ss_thªshﬁd
,

703 
ç_v¨s
->
œ°_£¡
, 
ªcv_ack
);

704 
ç_v¨s
->
cwnd
 = 
	`b©adv_ç_cwnd
—p_v¨s->
ss_thªshﬁd
, 3 * 
mss
,

705 
mss
);

706 
ç_v¨s
->
dec_cwnd
 = 0;

707 
ç_v¨s
->
œ°_£¡
 = 
ªcv_ack
;

709 
	`•ö_u∆ock_bh
(&
ç_v¨s
->
cwnd_lock
);

712 
	`©omic64_add
(
ªcv_ack
 - 
	`©omic_ªad
(&
ç_v¨s
->
œ°_acked
),

713 &
ç_v¨s
->
tŸ_£¡
);

715 
	`©omic_£t
(&
ç_v¨s
->
dup_acks
, 0);

717 i‡(
ç_v¨s
->
Á°_ªcovîy
) {

719 i‡(
	`b©adv_£q_bef‹e
(
ªcv_ack
, 
ç_v¨s
->
ªcovî
)) {

724 
dev_addr
 = 
¥im¨y_if
->
√t_dev
->dev_addr;

725 
	`b©adv_ç_£nd_msg
(
ç_v¨s
, 
dev_addr
,

726 
‹ig_node
, 
ªcv_ack
,

727 
∑ckë_Àn
, 
icmp
->
£ssi⁄
,

728 
icmp
->
uid
,

729 
	`jiffõs_to_m£cs
(
jiffõs
));

730 
ç_v¨s
->
cwnd
 = 
	`b©adv_ç_cwnd
(tp_vars->cwnd,

731 
mss
, mss);

733 
ç_v¨s
->
Á°_ªcovîy
 = 
Ál£
;

738 
cwnd
 = 
	`b©adv_ç_cwnd
(
ç_v¨s
->
ss_thªshﬁd
, 0,

739 
mss
);

740 
ç_v¨s
->
cwnd
 = cwnd;

742 
move_twnd
;

745 i‡(
ªcv_ack
 - 
	`©omic_ªad
(&
ç_v¨s
->
œ°_acked
Ë>
mss
)

746 
	`b©adv_ç_upd©e_cwnd
(
ç_v¨s
, 
mss
);

747 
move_twnd
:

749 
	`©omic_£t
(&
ç_v¨s
->
œ°_acked
, 
ªcv_ack
);

752 
	`wake_up
(&
ç_v¨s
->
m‹e_byãs
);

753 
out
:

754 
	`b©adv_h¨dif_put
(
¥im¨y_if
);

755 
	`b©adv_‹ig_node_put
(
‹ig_node
);

756 
	`b©adv_ç_v¨s_put
(
ç_v¨s
);

757 
	}
}

766 
boﬁ
 
	$b©adv_ç_avaû
(
b©adv_ç_v¨s
 *
ç_v¨s
,

767 
size_t
 
∑ylﬂd_Àn
)

769 
u32
 
wö_À·
, 
wö_limô
;

771 
wö_limô
 = 
	`©omic_ªad
(&
ç_v¨s
->
œ°_acked
Ë+Åp_v¨s->
cwnd
;

772 
wö_À·
 = 
wö_limô
 - 
ç_v¨s
->
œ°_£¡
;

774  
wö_À·
 >
∑ylﬂd_Àn
;

775 
	}
}

788 
	$b©adv_ç_waô_avaûabÀ
(
b©adv_ç_v¨s
 *
ç_v¨s
, 
size_t
 
∂í
)

790 
ªt
;

792 
ªt
 = 
	`waô_evít_öãºu±ibÀ_timeout
(
ç_v¨s
->
m‹e_byãs
,

793 
	`b©adv_ç_avaû
(
ç_v¨s
, 
∂í
),

794 
HZ
 / 10);

796  
ªt
;

797 
	}
}

805 
	$b©adv_ç_£nd
(*
¨g
)

807 
b©adv_ç_v¨s
 *
ç_v¨s
 = 
¨g
;

808 
b©adv_¥iv
 *
b©_¥iv
 = 
ç_v¨s
->bat_priv;

809 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
 = 
NULL
;

810 
b©adv_‹ig_node
 *
‹ig_node
 = 
NULL
;

811 
size_t
 
∑ylﬂd_Àn
, 
∑ckë_Àn
;

812 
îr
 = 0;

814 i‡(
	`u∆ikñy
(
ç_v¨s
->
rﬁe
 !
BATADV_TP_SENDER
)) {

815 
îr
 = 
BATADV_TP_REASON_DST_UNREACHABLE
;

816 
ç_v¨s
->
ªas⁄
 = 
îr
;

817 
out
;

820 
‹ig_node
 = 
	`b©adv_‹ig_hash_föd
(
b©_¥iv
, 
ç_v¨s
->
Ÿhî_íd
);

821 i‡(
	`u∆ikñy
(!
‹ig_node
)) {

822 
îr
 = 
BATADV_TP_REASON_DST_UNREACHABLE
;

823 
ç_v¨s
->
ªas⁄
 = 
îr
;

824 
out
;

827 
¥im¨y_if
 = 
	`b©adv_¥im¨y_if_gë_£À˘ed
(
b©_¥iv
);

828 i‡(
	`u∆ikñy
(!
¥im¨y_if
)) {

829 
îr
 = 
BATADV_TP_REASON_DST_UNREACHABLE
;

830 
ç_v¨s
->
ªas⁄
 = 
îr
;

831 
out
;

840 
∑ylﬂd_Àn
 = 
BATADV_TP_PLEN
;

841 
	`BUILD_BUG_ON
((
b©adv_icmp_ç_∑ckë
Ë> 
BATADV_TP_PLEN
);

843 
	`b©adv_ç_ª£t_£ndî_timî
(
ç_v¨s
);

846 
	`queue_dñayed_w‹k
(
b©adv_evít_w‹kqueue
, &
ç_v¨s
->
föish_w‹k
,

847 
	`m£cs_to_jiffõs
(
ç_v¨s
->
ã°_Àngth
));

849 
	`©omic_ªad
(&
ç_v¨s
->
£ndög
) != 0) {

850 i‡(
	`u∆ikñy
(!
	`b©adv_ç_avaû
(
ç_v¨s
, 
∑ylﬂd_Àn
))) {

851 
	`b©adv_ç_waô_avaûabÀ
(
ç_v¨s
, 
∑ylﬂd_Àn
);

858 
∑ckë_Àn
 = 
∑ylﬂd_Àn
 + (
b©adv_uniˇ°_∑ckë
);

860 
îr
 = 
	`b©adv_ç_£nd_msg
(
ç_v¨s
, 
¥im¨y_if
->
√t_dev
->
dev_addr
,

861 
‹ig_node
, 
ç_v¨s
->
œ°_£¡
,

862 
∑ckë_Àn
,

863 
ç_v¨s
->
£ssi⁄
,Åp_v¨s->
icmp_uid
,

864 
	`jiffõs_to_m£cs
(
jiffõs
));

867 i‡(
	`u∆ikñy
(
îr
 &&Éº !
BATADV_TP_REASON_CANT_SEND
)) {

868 
	`b©adv_dbg
(
BATADV_DBG_TP_METER
, 
b©_¥iv
,

870 
__func__
, 
îr
);

872 i‡(
	`©omic_dec_™d_ã°
(&
ç_v¨s
->
£ndög
))

873 
ç_v¨s
->
ªas⁄
 = 
îr
;

878 i‡(!
îr
)

879 
ç_v¨s
->
œ°_£¡
 +
∑ylﬂd_Àn
;

881 
	`c⁄d_ªsched
();

884 
out
:

885 
	`b©adv_h¨dif_put
(
¥im¨y_if
);

886 
	`b©adv_‹ig_node_put
(
‹ig_node
);

888 
	`b©adv_ç_£ndî_íd
(
b©_¥iv
, 
ç_v¨s
);

889 
	`b©adv_ç_£ndî_˛ónup
(
b©_¥iv
, 
ç_v¨s
);

891 
	`b©adv_ç_v¨s_put
(
ç_v¨s
);

894 
	}
}

901 
	$b©adv_ç_°¨t_kthªad
(
b©adv_ç_v¨s
 *
ç_v¨s
)

903 
èsk_°ru˘
 *
kthªad
;

904 
b©adv_¥iv
 *
b©_¥iv
 = 
ç_v¨s
->bat_priv;

905 
u32
 
£ssi⁄_cookõ
;

907 
	`kªf_gë
(&
ç_v¨s
->
ªfcou¡
);

908 
kthªad
 = 
	`kthªad_¸óã
(
b©adv_ç_£nd
, 
ç_v¨s
, "kbatadv_tp_meter");

909 i‡(
	`IS_ERR
(
kthªad
)) {

910 
£ssi⁄_cookõ
 = 
	`b©adv_ç_£ssi⁄_cookõ
(
ç_v¨s
->
£ssi⁄
,

911 
ç_v¨s
->
icmp_uid
);

912 
	`¥_îr
("batadv: cannot createÅp meter kthread\n");

913 
	`b©adv_ç_b©˘l_îr‹_nŸify
(
BATADV_TP_REASON_MEMORY_ERROR
,

914 
ç_v¨s
->
Ÿhî_íd
,

915 
b©_¥iv
, 
£ssi⁄_cookõ
);

918 
	`b©adv_ç_v¨s_put
(
ç_v¨s
);

921 
	`b©adv_ç_£ndî_˛ónup
(
b©_¥iv
, 
ç_v¨s
);

925 
	`wake_up_¥o˚ss
(
kthªad
);

926 
	}
}

935 
	$b©adv_ç_°¨t
(
b©adv_¥iv
 *
b©_¥iv
, c⁄° 
u8
 *
d°
,

936 
u32
 
ã°_Àngth
, u32 *
cookõ
)

938 
b©adv_ç_v¨s
 *
ç_v¨s
;

939 
u8
 
£ssi⁄_id
[2];

940 
u8
 
icmp_uid
;

941 
u32
 
£ssi⁄_cookõ
;

943 
	`gë_øndom_byãs
(
£ssi⁄_id
, (session_id));

944 
	`gë_øndom_byãs
(&
icmp_uid
, 1);

945 
£ssi⁄_cookõ
 = 
	`b©adv_ç_£ssi⁄_cookõ
(
£ssi⁄_id
, 
icmp_uid
);

946 *
cookõ
 = 
£ssi⁄_cookõ
;

949 
	`•ö_lock_bh
(&
b©_¥iv
->
ç_li°_lock
);

950 
ç_v¨s
 = 
	`b©adv_ç_li°_föd
(
b©_¥iv
, 
d°
);

951 i‡(
ç_v¨s
) {

952 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
ç_li°_lock
);

953 
	`b©adv_ç_v¨s_put
(
ç_v¨s
);

954 
	`b©adv_dbg
(
BATADV_DBG_TP_METER
, 
b©_¥iv
,

956 
	`b©adv_ç_b©˘l_îr‹_nŸify
(
BATADV_TP_REASON_ALREADY_ONGOING
,

957 
d°
, 
b©_¥iv
, 
£ssi⁄_cookõ
);

961 i‡(!
	`©omic_add_u∆ess
(&
b©_¥iv
->
ç_num
, 1, 
BATADV_TP_MAX_NUM
)) {

962 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
ç_li°_lock
);

963 
	`b©adv_dbg
(
BATADV_DBG_TP_METER
, 
b©_¥iv
,

965 
	`b©adv_ç_b©˘l_îr‹_nŸify
(
BATADV_TP_REASON_TOO_MANY
, 
d°
,

966 
b©_¥iv
, 
£ssi⁄_cookõ
);

970 
ç_v¨s
 = 
	`kmÆloc
((*ç_v¨s), 
GFP_ATOMIC
);

971 i‡(!
ç_v¨s
) {

972 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
ç_li°_lock
);

973 
	`b©adv_dbg
(
BATADV_DBG_TP_METER
, 
b©_¥iv
,

975 
__func__
);

976 
	`b©adv_ç_b©˘l_îr‹_nŸify
(
BATADV_TP_REASON_MEMORY_ERROR
,

977 
d°
, 
b©_¥iv
, 
£ssi⁄_cookõ
);

982 
	`ëhî_addr_c›y
(
ç_v¨s
->
Ÿhî_íd
, 
d°
);

983 
	`kªf_öô
(&
ç_v¨s
->
ªfcou¡
);

984 
ç_v¨s
->
rﬁe
 = 
BATADV_TP_SENDER
;

985 
	`©omic_£t
(&
ç_v¨s
->
£ndög
, 1);

986 
	`mem˝y
(
ç_v¨s
->
£ssi⁄
, 
£ssi⁄_id
, (session_id));

987 
ç_v¨s
->
icmp_uid
 = icmp_uid;

989 
ç_v¨s
->
œ°_£¡
 = 
BATADV_TP_FIRST_SEQ
;

990 
	`©omic_£t
(&
ç_v¨s
->
œ°_acked
, 
BATADV_TP_FIRST_SEQ
);

991 
ç_v¨s
->
Á°_ªcovîy
 = 
Ál£
;

992 
ç_v¨s
->
ªcovî
 = 
BATADV_TP_FIRST_SEQ
;

998 
ç_v¨s
->
cwnd
 = 
BATADV_TP_PLEN
 * 3;

1002 
ç_v¨s
->
ss_thªshﬁd
 = 
BATADV_TP_AWND
;

1007 
ç_v¨s
->
πo
 = 1000;

1008 
ç_v¨s
->
§â
 = 0;

1009 
ç_v¨s
->
πtv¨
 = 0;

1011 
	`©omic64_£t
(&
ç_v¨s
->
tŸ_£¡
, 0);

1013 
	`kªf_gë
(&
ç_v¨s
->
ªfcou¡
);

1014 
	`timî_£tup
(&
ç_v¨s
->
timî
, 
b©adv_ç_£ndî_timeout
, 0);

1016 
ç_v¨s
->
b©_¥iv
 = bat_priv;

1017 
ç_v¨s
->
°¨t_time
 = 
jiffõs
;

1019 
	`öô_waôqueue_hód
(&
ç_v¨s
->
m‹e_byãs
);

1021 
	`•ö_lock_öô
(&
ç_v¨s
->
u«cked_lock
);

1022 
	`INIT_LIST_HEAD
(&
ç_v¨s
->
u«cked_li°
);

1024 
	`•ö_lock_öô
(&
ç_v¨s
->
cwnd_lock
);

1026 
ç_v¨s
->
¥î™dom_off£t
 = 0;

1027 
	`•ö_lock_öô
(&
ç_v¨s
->
¥î™dom_lock
);

1029 
	`kªf_gë
(&
ç_v¨s
->
ªfcou¡
);

1030 
	`hli°_add_hód_rcu
(&
ç_v¨s
->
li°
, &
b©_¥iv
->
ç_li°
);

1031 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
ç_li°_lock
);

1033 
ç_v¨s
->
ã°_Àngth
 =Åest_length;

1034 i‡(!
ç_v¨s
->
ã°_Àngth
)

1035 
ç_v¨s
->
ã°_Àngth
 = 
BATADV_TP_DEF_TEST_LENGTH
;

1037 
	`b©adv_dbg
(
BATADV_DBG_TP_METER
, 
b©_¥iv
,

1039 
d°
, 
ã°_Àngth
);

1042 
	`INIT_DELAYED_WORK
(&
ç_v¨s
->
föish_w‹k
, 
b©adv_ç_£ndî_föish
);

1047 
	`b©adv_ç_°¨t_kthªad
(
ç_v¨s
);

1050 
	`b©adv_ç_v¨s_put
(
ç_v¨s
);

1051 
	}
}

1059 
	$b©adv_ç_°›
(
b©adv_¥iv
 *
b©_¥iv
, c⁄° 
u8
 *
d°
,

1060 
u8
 
ªtu∫_vÆue
)

1062 
b©adv_‹ig_node
 *
‹ig_node
;

1063 
b©adv_ç_v¨s
 *
ç_v¨s
;

1065 
	`b©adv_dbg
(
BATADV_DBG_TP_METER
, 
b©_¥iv
,

1066 "Mëî: st›pögÅe°Åow¨d†%pM\n", 
d°
);

1068 
‹ig_node
 = 
	`b©adv_‹ig_hash_föd
(
b©_¥iv
, 
d°
);

1069 i‡(!
‹ig_node
)

1072 
ç_v¨s
 = 
	`b©adv_ç_li°_föd
(
b©_¥iv
, 
‹ig_node
->
‹ig
);

1073 i‡(!
ç_v¨s
) {

1074 
	`b©adv_dbg
(
BATADV_DBG_TP_METER
, 
b©_¥iv
,

1076 
out
;

1079 
	`b©adv_ç_£ndî_shutdown
(
ç_v¨s
, 
ªtu∫_vÆue
);

1080 
	`b©adv_ç_v¨s_put
(
ç_v¨s
);

1081 
out
:

1082 
	`b©adv_‹ig_node_put
(
‹ig_node
);

1083 
	}
}

1091 
	$b©adv_ç_ª£t_ª˚ivî_timî
(
b©adv_ç_v¨s
 *
ç_v¨s
)

1093 
	`mod_timî
(&
ç_v¨s
->
timî
,

1094 
jiffõs
 + 
	`m£cs_to_jiffõs
(
BATADV_TP_RECV_TIMEOUT
));

1095 
	}
}

1102 
	$b©adv_ç_ª˚ivî_shutdown
(
timî_li°
 *
t
)

1104 
b©adv_ç_v¨s
 *
ç_v¨s
 = 
	`‰om_timî
—p_v¨s, 
t
, 
timî
);

1105 
b©adv_ç_u«cked
 *
un
, *
ß„
;

1106 
b©adv_¥iv
 *
b©_¥iv
;

1108 
b©_¥iv
 = 
ç_v¨s
->bat_priv;

1111 i‡(!
	`b©adv_has_timed_out
(
ç_v¨s
->
œ°_ªcv_time
,

1112 
BATADV_TP_RECV_TIMEOUT
)) {

1114 
	`b©adv_ç_ª£t_ª˚ivî_timî
(
ç_v¨s
);

1118 
	`b©adv_dbg
(
BATADV_DBG_TP_METER
, 
b©_¥iv
,

1120 
BATADV_TP_RECV_TIMEOUT
, 
ç_v¨s
->
Ÿhî_íd
);

1122 
	`•ö_lock_bh
(&
ç_v¨s
->
b©_¥iv
->
ç_li°_lock
);

1123 
	`hli°_dñ_rcu
(&
ç_v¨s
->
li°
);

1124 
	`•ö_u∆ock_bh
(&
ç_v¨s
->
b©_¥iv
->
ç_li°_lock
);

1127 
	`b©adv_ç_v¨s_put
(
ç_v¨s
);

1129 
	`©omic_dec
(&
b©_¥iv
->
ç_num
);

1131 
	`•ö_lock_bh
(&
ç_v¨s
->
u«cked_lock
);

1132 
	`li°_f‹_óch_íåy_ß„
(
un
, 
ß„
, &
ç_v¨s
->
u«cked_li°
, 
li°
) {

1133 
	`li°_dñ
(&
un
->
li°
);

1134 
	`k‰ì
(
un
);

1136 
	`•ö_u∆ock_bh
(&
ç_v¨s
->
u«cked_lock
);

1139 
	`b©adv_ç_v¨s_put
(
ç_v¨s
);

1140 
	}
}

1154 
	$b©adv_ç_£nd_ack
(
b©adv_¥iv
 *
b©_¥iv
, c⁄° 
u8
 *
d°
,

1155 
u32
 
£q
, 
__be32
 
time°amp
, c⁄° 
u8
 *
£ssi⁄
,

1156 
sockë_ödex
)

1158 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
 = 
NULL
;

1159 
b©adv_‹ig_node
 *
‹ig_node
;

1160 
b©adv_icmp_ç_∑ckë
 *
icmp
;

1161 
sk_buff
 *
skb
;

1162 
r
, 
ªt
;

1164 
‹ig_node
 = 
	`b©adv_‹ig_hash_föd
(
b©_¥iv
, 
d°
);

1165 i‡(
	`u∆ikñy
(!
‹ig_node
)) {

1166 
ªt
 = 
BATADV_TP_REASON_DST_UNREACHABLE
;

1167 
out
;

1170 
¥im¨y_if
 = 
	`b©adv_¥im¨y_if_gë_£À˘ed
(
b©_¥iv
);

1171 i‡(
	`u∆ikñy
(!
¥im¨y_if
)) {

1172 
ªt
 = 
BATADV_TP_REASON_DST_UNREACHABLE
;

1173 
out
;

1176 
skb
 = 
	`√tdev_Æloc_skb_ù_Æign
(
NULL
, (*
icmp
Ë+ 
ETH_HLEN
);

1177 i‡(
	`u∆ikñy
(!
skb
)) {

1178 
ªt
 = 
BATADV_TP_REASON_MEMORY_ERROR
;

1179 
out
;

1182 
	`skb_ª£rve
(
skb
, 
ETH_HLEN
);

1183 
icmp
 = 
	`skb_put
(
skb
, (*icmp));

1184 
icmp
->
∑ckë_ty≥
 = 
BATADV_ICMP
;

1185 
icmp
->
vîsi⁄
 = 
BATADV_COMPAT_VERSION
;

1186 
icmp
->
âl
 = 
BATADV_TTL
;

1187 
icmp
->
msg_ty≥
 = 
BATADV_TP
;

1188 
	`ëhî_addr_c›y
(
icmp
->
d°
, 
‹ig_node
->
‹ig
);

1189 
	`ëhî_addr_c›y
(
icmp
->
‹ig
, 
¥im¨y_if
->
√t_dev
->
dev_addr
);

1190 
icmp
->
uid
 = 
sockë_ödex
;

1192 
icmp
->
subty≥
 = 
BATADV_TP_ACK
;

1193 
	`mem˝y
(
icmp
->
£ssi⁄
, session, (icmp->session));

1194 
icmp
->
£qno
 = 
	`ht⁄l
(
£q
);

1195 
icmp
->
time°amp
 =Åimestamp;

1198 
r
 = 
	`b©adv_£nd_skb_to_‹ig
(
skb
, 
‹ig_node
, 
NULL
);

1199 i‡(
	`u∆ikñy
(
r
 < 0Ë||Ñ =
NET_XMIT_DROP
) {

1200 
ªt
 = 
BATADV_TP_REASON_DST_UNREACHABLE
;

1201 
out
;

1203 
ªt
 = 0;

1205 
out
:

1206 
	`b©adv_‹ig_node_put
(
‹ig_node
);

1207 
	`b©adv_h¨dif_put
(
¥im¨y_if
);

1209  
ªt
;

1210 
	}
}

1223 
boﬁ
 
	$b©adv_ç_h™dÀ_out_of_‹dî
(
b©adv_ç_v¨s
 *
ç_v¨s
,

1224 c⁄° 
sk_buff
 *
skb
)

1226 c⁄° 
b©adv_icmp_ç_∑ckë
 *
icmp
;

1227 
b©adv_ç_u«cked
 *
un
, *
√w
;

1228 
u32
 
∑ylﬂd_Àn
;

1229 
boﬁ
 
added
 = 
Ál£
;

1231 
√w
 = 
	`kmÆloc
((*√w), 
GFP_ATOMIC
);

1232 i‡(
	`u∆ikñy
(!
√w
))

1233  
Ál£
;

1235 
icmp
 = (
b©adv_icmp_ç_∑ckë
 *)
skb
->
d©a
;

1237 
√w
->
£qno
 = 
	`¡ohl
(
icmp
->seqno);

1238 
∑ylﬂd_Àn
 = 
skb
->
Àn
 - (
b©adv_uniˇ°_∑ckë
);

1239 
√w
->
Àn
 = 
∑ylﬂd_Àn
;

1241 
	`•ö_lock_bh
(&
ç_v¨s
->
u«cked_lock
);

1243 i‡(
	`li°_em±y
(&
ç_v¨s
->
u«cked_li°
)) {

1244 
	`li°_add
(&
√w
->
li°
, &
ç_v¨s
->
u«cked_li°
);

1245 
out
;

1255 
	`li°_f‹_óch_íåy_ªvî£
(
un
, &
ç_v¨s
->
u«cked_li°
, 
li°
) {

1257 i‡(
√w
->
£qno
 =
un
->seqno) {

1258 i‡(
√w
->
Àn
 > 
un
->len)

1259 
un
->
Àn
 = 
√w
->len;

1260 
	`k‰ì
(
√w
);

1261 
added
 = 
åue
;

1266 i‡(
	`b©adv_£q_bef‹e
(
√w
->
£qno
, 
un
->seqno))

1273 
	`li°_add_èû
(&
√w
->
li°
, &
un
->list);

1274 
added
 = 
åue
;

1279 i‡(!
added
)

1280 
	`li°_add
(&
√w
->
li°
, &
ç_v¨s
->
u«cked_li°
);

1282 
out
:

1283 
	`•ö_u∆ock_bh
(&
ç_v¨s
->
u«cked_lock
);

1285  
åue
;

1286 
	}
}

1293 
	$b©adv_ç_ack_un‹dîed
(
b©adv_ç_v¨s
 *
ç_v¨s
)

1295 
b©adv_ç_u«cked
 *
un
, *
ß„
;

1296 
u32
 
to_ack
;

1301 
	`•ö_lock_bh
(&
ç_v¨s
->
u«cked_lock
);

1302 
	`li°_f‹_óch_íåy_ß„
(
un
, 
ß„
, &
ç_v¨s
->
u«cked_li°
, 
li°
) {

1307 i‡(
	`b©adv_£q_bef‹e
(
ç_v¨s
->
œ°_ªcv
, 
un
->
£qno
))

1310 
to_ack
 = 
un
->
£qno
 + un->
Àn
 - 
ç_v¨s
->
œ°_ªcv
;

1312 i‡(
	`b©adv_£q_bef‹e
(
ç_v¨s
->
œ°_ªcv
, 
un
->
£qno
 + un->
Àn
))

1313 
ç_v¨s
->
œ°_ªcv
 +
to_ack
;

1315 
	`li°_dñ
(&
un
->
li°
);

1316 
	`k‰ì
(
un
);

1318 
	`•ö_u∆ock_bh
(&
ç_v¨s
->
u«cked_lock
);

1319 
	}
}

1328 
b©adv_ç_v¨s
 *

1329 
	$b©adv_ç_öô_ªcv
(
b©adv_¥iv
 *
b©_¥iv
,

1330 c⁄° 
b©adv_icmp_ç_∑ckë
 *
icmp
)

1332 
b©adv_ç_v¨s
 *
ç_v¨s
;

1334 
	`•ö_lock_bh
(&
b©_¥iv
->
ç_li°_lock
);

1335 
ç_v¨s
 = 
	`b©adv_ç_li°_föd_£ssi⁄
(
b©_¥iv
, 
icmp
->
‹ig
,

1336 
icmp
->
£ssi⁄
);

1337 i‡(
ç_v¨s
)

1338 
out_u∆ock
;

1340 i‡(!
	`©omic_add_u∆ess
(&
b©_¥iv
->
ç_num
, 1, 
BATADV_TP_MAX_NUM
)) {

1341 
	`b©adv_dbg
(
BATADV_DBG_TP_METER
, 
b©_¥iv
,

1343 
out_u∆ock
;

1346 
ç_v¨s
 = 
	`kmÆloc
((*ç_v¨s), 
GFP_ATOMIC
);

1347 i‡(!
ç_v¨s
)

1348 
out_u∆ock
;

1350 
	`ëhî_addr_c›y
(
ç_v¨s
->
Ÿhî_íd
, 
icmp
->
‹ig
);

1351 
ç_v¨s
->
rﬁe
 = 
BATADV_TP_RECEIVER
;

1352 
	`mem˝y
(
ç_v¨s
->
£ssi⁄
, 
icmp
->session, (tp_vars->session));

1353 
ç_v¨s
->
œ°_ªcv
 = 
BATADV_TP_FIRST_SEQ
;

1354 
ç_v¨s
->
b©_¥iv
 = bat_priv;

1355 
	`kªf_öô
(&
ç_v¨s
->
ªfcou¡
);

1357 
	`•ö_lock_öô
(&
ç_v¨s
->
u«cked_lock
);

1358 
	`INIT_LIST_HEAD
(&
ç_v¨s
->
u«cked_li°
);

1360 
	`kªf_gë
(&
ç_v¨s
->
ªfcou¡
);

1361 
	`hli°_add_hód_rcu
(&
ç_v¨s
->
li°
, &
b©_¥iv
->
ç_li°
);

1363 
	`kªf_gë
(&
ç_v¨s
->
ªfcou¡
);

1364 
	`timî_£tup
(&
ç_v¨s
->
timî
, 
b©adv_ç_ª˚ivî_shutdown
, 0);

1366 
	`b©adv_ç_ª£t_ª˚ivî_timî
(
ç_v¨s
);

1368 
out_u∆ock
:

1369 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
ç_li°_lock
);

1371  
ç_v¨s
;

1372 
	}
}

1381 
	$b©adv_ç_ªcv_msg
(
b©adv_¥iv
 *
b©_¥iv
,

1382 c⁄° 
sk_buff
 *
skb
)

1384 c⁄° 
b©adv_icmp_ç_∑ckë
 *
icmp
;

1385 
b©adv_ç_v¨s
 *
ç_v¨s
;

1386 
size_t
 
∑ckë_size
;

1387 
u32
 
£qno
;

1389 
icmp
 = (
b©adv_icmp_ç_∑ckë
 *)
skb
->
d©a
;

1391 
£qno
 = 
	`¡ohl
(
icmp
->seqno);

1395 i‡(
£qno
 =
BATADV_TP_FIRST_SEQ
) {

1396 
ç_v¨s
 = 
	`b©adv_ç_öô_ªcv
(
b©_¥iv
, 
icmp
);

1397 i‡(!
ç_v¨s
) {

1398 
	`b©adv_dbg
(
BATADV_DBG_TP_METER
, 
b©_¥iv
,

1400 
out
;

1403 
ç_v¨s
 = 
	`b©adv_ç_li°_föd_£ssi⁄
(
b©_¥iv
, 
icmp
->
‹ig
,

1404 
icmp
->
£ssi⁄
);

1405 i‡(!
ç_v¨s
) {

1406 
	`b©adv_dbg
(
BATADV_DBG_TP_METER
, 
b©_¥iv
,

1408 
icmp
->
‹ig
);

1409 
out
;

1413 i‡(
	`u∆ikñy
(
ç_v¨s
->
rﬁe
 !
BATADV_TP_RECEIVER
)) {

1414 
	`b©adv_dbg
(
BATADV_DBG_TP_METER
, 
b©_¥iv
,

1416 
ç_v¨s
->
rﬁe
);

1417 
out
;

1420 
ç_v¨s
->
œ°_ªcv_time
 = 
jiffõs
;

1425 i‡(
	`b©adv_£q_bef‹e
(
£qno
, 
ç_v¨s
->
œ°_ªcv
))

1426 
£nd_ack
;

1429 i‡(
	`¡ohl
(
icmp
->
£qno
Ë!
ç_v¨s
->
œ°_ªcv
) {

1433 i‡(!
	`b©adv_ç_h™dÀ_out_of_‹dî
(
ç_v¨s
, 
skb
))

1434 
out
;

1437 
£nd_ack
;

1441 
∑ckë_size
 = 
skb
->
Àn
 - (
b©adv_uniˇ°_∑ckë
);

1442 
ç_v¨s
->
œ°_ªcv
 +
∑ckë_size
;

1445 
	`b©adv_ç_ack_un‹dîed
(
ç_v¨s
);

1447 
£nd_ack
:

1452 
	`b©adv_ç_£nd_ack
(
b©_¥iv
, 
icmp
->
‹ig
, 
ç_v¨s
->
œ°_ªcv
,

1453 
icmp
->
time°amp
, icmp->
£ssi⁄
, icmp->
uid
);

1454 
out
:

1455 
	`b©adv_ç_v¨s_put
(
ç_v¨s
);

1456 
	}
}

1463 
	$b©adv_ç_mëî_ªcv
(
b©adv_¥iv
 *
b©_¥iv
, 
sk_buff
 *
skb
)

1465 
b©adv_icmp_ç_∑ckë
 *
icmp
;

1467 
icmp
 = (
b©adv_icmp_ç_∑ckë
 *)
skb
->
d©a
;

1469 
icmp
->
subty≥
) {

1470 
BATADV_TP_MSG
:

1471 
	`b©adv_ç_ªcv_msg
(
b©_¥iv
, 
skb
);

1473 
BATADV_TP_ACK
:

1474 
	`b©adv_ç_ªcv_ack
(
b©_¥iv
, 
skb
);

1477 
	`b©adv_dbg
(
BATADV_DBG_TP_METER
, 
b©_¥iv
,

1479 
icmp
->
subty≥
);

1481 
	`c⁄sume_skb
(
skb
);

1482 
	}
}

1487 
__öô
 
	$b©adv_ç_mëî_öô
()

1489 
	`gë_øndom_byãs
(
b©adv_ç_¥î™dom
, (batadv_tp_prerandom));

1490 
	}
}

	@net/batman-adv/tp_meter.h

7 #i‚de‡
_NET_BATMAN_ADV_TP_METER_H_


8 
	#_NET_BATMAN_ADV_TP_METER_H_


	)

10 
	~"maö.h
"

12 
	~<löux/skbuff.h
>

13 
	~<löux/ty≥s.h
>

15 
b©adv_ç_mëî_öô
();

16 
b©adv_ç_°¨t
(
b©adv_¥iv
 *
b©_¥iv
, c⁄° 
u8
 *
d°
,

17 
u32
 
ã°_Àngth
, u32 *
cookõ
);

18 
b©adv_ç_°›
(
b©adv_¥iv
 *
b©_¥iv
, c⁄° 
u8
 *
d°
,

19 
u8
 
ªtu∫_vÆue
);

20 
b©adv_ç_mëî_ªcv
(
b©adv_¥iv
 *
b©_¥iv
, 
sk_buff
 *
skb
);

	@net/batman-adv/trace.c

7 
	#CREATE_TRACE_POINTS


	)

8 
	~"åa˚.h
"

	@net/batman-adv/trace.h

7 #i‡!
deföed
(
_NET_BATMAN_ADV_TRACE_H_
Ë|| deföed(
TRACE_HEADER_MULTI_READ
)

8 
	#_NET_BATMAN_ADV_TRACE_H_


	)

10 
	~"maö.h
"

12 
	~<löux/√tdevi˚.h
>

13 
	~<löux/≥r˝u.h
>

14 
	~<löux/¥ötk.h
>

15 
	~<löux/åa˚poöt.h
>

17 #unde‡
TRACE_SYSTEM


18 
	#TRACE_SYSTEM
 
b©adv


	)

21 #i‡!
deföed
(
CONFIG_BATMAN_ADV_TRACING
)

23 #unde‡
TRACE_EVENT


24 
	#TRACE_EVENT
(
«me
, 
¥Ÿo
, ...) \

25 
ölöe
 
åa˚_
 ## 
	`«me
(
¥Ÿo
Ë{}

	)

29 
TRACE_EVENT
(
b©adv_dbg
,

31 
TP_PROTO
(
b©adv_¥iv
 *
b©_¥iv
,

32 
va_f‹m©
 *
vaf
),

34 
TP_ARGS
(
b©_¥iv
, 
vaf
),

36 
TP_STRUCT__íåy
(

37 
__°rög
(
devi˚
, 
b©_¥iv
->
mesh_iÁ˚
->
«me
)

38 
	$__°rög
(
drivî
, 
KBUILD_MODNAME
)

39 
	`__v°rög
(
msg
, 
vaf
->
fmt
, vaf->
va
)

42 
	`TP_Á°_assign
(

43 #i‡
	`LINUX_VERSION_IS_GEQ
(6, 10, 0)

44 
	`__assign_°r
(
devi˚
);

45 
	`__assign_°r
(
drivî
);

47 
	`__assign_°r
(
devi˚
, 
b©_¥iv
->
mesh_iÁ˚
->
«me
);

48 
	`__assign_°r
(
drivî
, 
KBUILD_MODNAME
);

50 
	`__assign_v°r
(
msg
, 
vaf
->
fmt
, vaf->
va
);

53 
	`TP_¥ötk
(

55 
	`__gë_°r
(
drivî
),

56 
	`__gë_°r
(
devi˚
),

57 
	`__gë_°r
(
msg
)

63 #unde‡
TRACE_INCLUDE_PATH


64 
	#TRACE_INCLUDE_PATH
 .

	)

65 #unde‡
TRACE_INCLUDE_FILE


66 
	#TRACE_INCLUDE_FILE
 
åa˚


	)

69 
	~<åa˚/deföe_åa˚.h
>

	@net/batman-adv/translation-table.c

7 
	~"å™¶©i⁄-èbÀ.h
"

8 
	~"maö.h
"

10 
	~<löux/©omic.h
>

11 
	~<löux/bô›s.h
>

12 
	~<löux/buûd_bug.h
>

13 
	~<löux/byã‹dî/gíîic.h
>

14 
	~<löux/ˇche.h
>

15 
	~<löux/compûî.h
>

16 
	~<löux/c⁄èöî_of.h
>

17 
	~<löux/¸c32c.h
>

18 
	~<löux/îr.h
>

19 
	~<löux/î∫o.h
>

20 
	~<löux/ëhîdevi˚.h
>

21 
	~<löux/gÂ.h
>

22 
	~<löux/if_ëhî.h
>

23 
	~<löux/öô.h
>

24 
	~<löux/jhash.h
>

25 
	~<löux/jiffõs.h
>

26 
	~<löux/kªf.h
>

27 
	~<löux/li°.h
>

28 
	~<löux/lockdï.h
>

29 
	~<löux/√t.h
>

30 
	~<löux/√tdevi˚.h
>

31 
	~<löux/√éök.h
>

32 
	~<löux/ovîÊow.h
>

33 
	~<löux/rculi°.h
>

34 
	~<löux/rcupd©e.h
>

35 
	~<löux/skbuff.h
>

36 
	~<löux/¶ab.h
>

37 
	~<löux/•ölock.h
>

38 
	~<löux/°ddef.h
>

39 
	~<löux/°rög.h
>

40 
	~<löux/w‹kqueue.h
>

41 
	~<√t/gíëlök.h
>

42 
	~<√t/√éök.h
>

43 
	~<u≠i/löux/b©adv_∑ckë.h
>

44 
	~<u≠i/löux/b©m™_adv.h
>

46 
	~"bridge_lo›_avoid™˚.h
"

47 
	~"h¨d-öãrÁ˚.h
"

48 
	~"hash.h
"

49 
	~"log.h
"

50 
	~"mesh-öãrÁ˚.h
"

51 
	~"√éök.h
"

52 
	~"‹igö©‹.h
"

53 
	~"tvlv.h
"

55 
kmem_ˇche
 *
b©adv_é_ˇche
 
	g__ªad_mo°ly
;

56 
kmem_ˇche
 *
b©adv_tg_ˇche
 
	g__ªad_mo°ly
;

57 
kmem_ˇche
 *
b©adv_â_‹ig_ˇche
 
	g__ªad_mo°ly
;

58 
kmem_ˇche
 *
b©adv_â_ch™ge_ˇche
 
	g__ªad_mo°ly
;

59 
kmem_ˇche
 *
b©adv_â_ªq_ˇche
 
	g__ªad_mo°ly
;

60 
kmem_ˇche
 *
b©adv_â_rﬂm_ˇche
 
	g__ªad_mo°ly
;

63 
lock_˛ass_key
 
	gb©adv_â_loˇl_hash_lock_˛ass_key
;

64 
lock_˛ass_key
 
	gb©adv_â_globÆ_hash_lock_˛ass_key
;

66 
b©adv_£nd_rﬂm_adv
(
b©adv_¥iv
 *
b©_¥iv
, 
u8
 *
˛õ¡
,

67 
vid
,

68 
b©adv_‹ig_node
 *
‹ig_node
);

69 
b©adv_â_purge
(
w‹k_°ru˘
 *
w‹k
);

71 
b©adv_â_globÆ_dñ_‹ig_li°
(
b©adv_â_globÆ_íåy
 *
â_globÆ_íåy
);

72 
b©adv_â_globÆ_dñ
(
b©adv_¥iv
 *
b©_¥iv
,

73 
b©adv_‹ig_node
 *
‹ig_node
,

74 c⁄° *
addr
,

75 
vid
, c⁄° *
mesßge
,

76 
boﬁ
 
rﬂmög
);

78 #i‡
LINUX_VERSION_IS_LESS
(6, 12, 0)

80 
	$b©adv_â_loˇl_íåy_‰ì_rcu
(
rcu_hód
 *
rcu
)

82 
b©adv_â_loˇl_íåy
 *
â_loˇl_íåy
;

84 
â_loˇl_íåy
 = 
	`c⁄èöî_of
(
rcu
, 
b©adv_â_loˇl_íåy
, 
comm⁄
.rcu);

85 
	`kmem_ˇche_‰ì
(
b©adv_é_ˇche
, 
â_loˇl_íåy
);

86 
	}
}

88 
	$b©adv_â_globÆ_íåy_‰ì_rcu
(
rcu_hód
 *
rcu
)

90 
b©adv_â_globÆ_íåy
 *
â_globÆ_íåy
;

92 
â_globÆ_íåy
 = 
	`c⁄èöî_of
(
rcu
, 
b©adv_â_globÆ_íåy
, 
comm⁄
.rcu);

93 
	`kmem_ˇche_‰ì
(
b©adv_tg_ˇche
, 
â_globÆ_íåy
);

94 
	}
}

96 
	$b©adv_â_‹ig_li°_íåy_‰ì_rcu
(
rcu_hód
 *
rcu
)

98 
b©adv_â_‹ig_li°_íåy
 *
‹ig_íåy
;

100 
‹ig_íåy
 = 
	`c⁄èöî_of
(
rcu
, 
b©adv_â_‹ig_li°_íåy
,Ñcu);

101 
	`kmem_ˇche_‰ì
(
b©adv_â_‹ig_ˇche
, 
‹ig_íåy
);

102 
	}
}

115 
boﬁ
 
	$b©adv_com∑ª_â
(c⁄° 
hli°_node
 *
node
, c⁄° *
d©a2
)

117 c⁄° *
d©a1
 = 
	`c⁄èöî_of
(
node
, 
b©adv_â_comm⁄_íåy
,

118 
hash_íåy
);

119 c⁄° 
b©adv_â_comm⁄_íåy
 *
â1
 = 
d©a1
;

120 c⁄° 
b©adv_â_comm⁄_íåy
 *
â2
 = 
d©a2
;

122  (
â1
->
vid
 =
â2
->vidË&& 
	`b©adv_com∑ª_ëh
(
d©a1
, 
d©a2
);

123 
	}
}

133 
ölöe
 
u32
 
	$b©adv_choo£_â
(c⁄° *
d©a
, 
u32
 
size
)

135 c⁄° 
b©adv_â_comm⁄_íåy
 *
â
;

136 
u32
 
hash
 = 0;

138 
â
 = 
d©a
;

139 
hash
 = 
	`jhash
(&
â
->
addr
, 
ETH_ALEN
, hash);

140 
hash
 = 
	`jhash
(&
â
->
vid
, (tt->vid), hash);

142  
hash
 % 
size
;

143 
	}
}

154 
b©adv_â_comm⁄_íåy
 *

155 
	$b©adv_â_hash_föd
(
b©adv_hashèbÀ
 *
hash
, c⁄° 
u8
 *
addr
,

156 
vid
)

158 
hli°_hód
 *
hód
;

159 
b©adv_â_comm⁄_íåy
 
to_£¨ch
, *
â
, *
â_tmp
 = 
NULL
;

160 
u32
 
ödex
;

162 i‡(!
hash
)

163  
NULL
;

165 
	`ëhî_addr_c›y
(
to_£¨ch
.
addr
,áddr);

166 
to_£¨ch
.
vid
 = vid;

168 
ödex
 = 
	`b©adv_choo£_â
(&
to_£¨ch
, 
hash
->
size
);

169 
hód
 = &
hash
->
èbÀ
[
ödex
];

171 
	`rcu_ªad_lock
();

172 
	`hli°_f‹_óch_íåy_rcu
(
â
, 
hód
, 
hash_íåy
) {

173 i‡(!
	`b©adv_com∑ª_ëh
(
â
, 
addr
))

176 i‡(
â
->
vid
 != vid)

179 i‡(!
	`kªf_gë_u∆ess_zîo
(&
â
->
ªfcou¡
))

182 
â_tmp
 = 
â
;

185 
	`rcu_ªad_u∆ock
();

187  
â_tmp
;

188 
	}
}

199 
b©adv_â_loˇl_íåy
 *

200 
	$b©adv_â_loˇl_hash_föd
(
b©adv_¥iv
 *
b©_¥iv
, c⁄° 
u8
 *
addr
,

201 
vid
)

203 
b©adv_â_comm⁄_íåy
 *
â_comm⁄_íåy
;

204 
b©adv_â_loˇl_íåy
 *
â_loˇl_íåy
 = 
NULL
;

206 
â_comm⁄_íåy
 = 
	`b©adv_â_hash_föd
(
b©_¥iv
->
â
.
loˇl_hash
, 
addr
,

207 
vid
);

208 i‡(
â_comm⁄_íåy
)

209 
â_loˇl_íåy
 = 
	`c⁄èöî_of
(
â_comm⁄_íåy
,

210 
b©adv_â_loˇl_íåy
,

211 
comm⁄
);

212  
â_loˇl_íåy
;

213 
	}
}

224 
b©adv_â_globÆ_íåy
 *

225 
	$b©adv_â_globÆ_hash_föd
(
b©adv_¥iv
 *
b©_¥iv
, c⁄° 
u8
 *
addr
,

226 
vid
)

228 
b©adv_â_comm⁄_íåy
 *
â_comm⁄_íåy
;

229 
b©adv_â_globÆ_íåy
 *
â_globÆ_íåy
 = 
NULL
;

231 
â_comm⁄_íåy
 = 
	`b©adv_â_hash_föd
(
b©_¥iv
->
â
.
globÆ_hash
, 
addr
,

232 
vid
);

233 i‡(
â_comm⁄_íåy
)

234 
â_globÆ_íåy
 = 
	`c⁄èöî_of
(
â_comm⁄_íåy
,

235 
b©adv_â_globÆ_íåy
,

236 
comm⁄
);

237  
â_globÆ_íåy
;

238 
	}
}

245 
	$b©adv_â_loˇl_íåy_ªÀa£
(
kªf
 *
ªf
)

247 
b©adv_â_loˇl_íåy
 *
â_loˇl_íåy
;

249 
â_loˇl_íåy
 = 
	`c⁄èöî_of
(
ªf
, 
b©adv_â_loˇl_íåy
,

250 
comm⁄
.
ªfcou¡
);

252 
	`b©adv_meshif_vœn_put
(
â_loˇl_íåy
->
vœn
);

254 #i‡
	`LINUX_VERSION_IS_GEQ
(6, 12, 0)

255 
	`k‰ì_rcu
(
â_loˇl_íåy
, 
comm⁄
.
rcu
);

257 
	`ˇŒ_rcu
(&
â_loˇl_íåy
->
comm⁄
.
rcu
, 
b©adv_â_loˇl_íåy_‰ì_rcu
);

259 
	}
}

267 
	$b©adv_â_loˇl_íåy_put
(
b©adv_â_loˇl_íåy
 *
â_loˇl_íåy
)

269 i‡(!
â_loˇl_íåy
)

272 
	`kªf_put
(&
â_loˇl_íåy
->
comm⁄
.
ªfcou¡
,

273 
b©adv_â_loˇl_íåy_ªÀa£
);

274 
	}
}

281 
	$b©adv_â_globÆ_íåy_ªÀa£
(
kªf
 *
ªf
)

283 
b©adv_â_globÆ_íåy
 *
â_globÆ_íåy
;

285 
â_globÆ_íåy
 = 
	`c⁄èöî_of
(
ªf
, 
b©adv_â_globÆ_íåy
,

286 
comm⁄
.
ªfcou¡
);

288 
	`b©adv_â_globÆ_dñ_‹ig_li°
(
â_globÆ_íåy
);

290 #i‡
	`LINUX_VERSION_IS_GEQ
(6, 12, 0)

291 
	`k‰ì_rcu
(
â_globÆ_íåy
, 
comm⁄
.
rcu
);

293 
	`ˇŒ_rcu
(&
â_globÆ_íåy
->
comm⁄
.
rcu
, 
b©adv_â_globÆ_íåy_‰ì_rcu
);

295 
	}
}

306 
	$b©adv_â_globÆ_hash_cou¡
(
b©adv_¥iv
 *
b©_¥iv
,

307 c⁄° 
u8
 *
addr
, 
vid
)

309 
b©adv_â_globÆ_íåy
 *
â_globÆ_íåy
;

310 
cou¡
;

312 
â_globÆ_íåy
 = 
	`b©adv_â_globÆ_hash_föd
(
b©_¥iv
, 
addr
, 
vid
);

313 i‡(!
â_globÆ_íåy
)

316 
cou¡
 = 
	`©omic_ªad
(&
â_globÆ_íåy
->
‹ig_li°_cou¡
);

317 
	`b©adv_â_globÆ_íåy_put
(
â_globÆ_íåy
);

319  
cou¡
;

320 
	}
}

329 
	$b©adv_â_loˇl_size_mod
(
b©adv_¥iv
 *
b©_¥iv
,

330 
vid
, 
v
)

332 
b©adv_meshif_vœn
 *
vœn
;

334 
vœn
 = 
	`b©adv_meshif_vœn_gë
(
b©_¥iv
, 
vid
);

335 i‡(!
vœn
)

338 
	`©omic_add
(
v
, &
vœn
->
â
.
num_íåõs
);

340 
	`b©adv_meshif_vœn_put
(
vœn
);

341 
	}
}

349 
	$b©adv_â_loˇl_size_öc
(
b©adv_¥iv
 *
b©_¥iv
,

350 
vid
)

352 
	`b©adv_â_loˇl_size_mod
(
b©_¥iv
, 
vid
, 1);

353 
	}
}

361 
	$b©adv_â_loˇl_size_dec
(
b©adv_¥iv
 *
b©_¥iv
,

362 
vid
)

364 
	`b©adv_â_loˇl_size_mod
(
b©_¥iv
, 
vid
, -1);

365 
	}
}

374 
	$b©adv_â_globÆ_size_mod
(
b©adv_‹ig_node
 *
‹ig_node
,

375 
vid
, 
v
)

377 
b©adv_‹ig_node_vœn
 *
vœn
;

379 
vœn
 = 
	`b©adv_‹ig_node_vœn_√w
(
‹ig_node
, 
vid
);

380 i‡(!
vœn
)

383 i‡(
	`©omic_add_ªtu∫
(
v
, &
vœn
->
â
.
num_íåõs
) == 0) {

384 
	`•ö_lock_bh
(&
‹ig_node
->
vœn_li°_lock
);

385 i‡(!
	`hli°_unhashed
(&
vœn
->
li°
)) {

386 
	`hli°_dñ_öô_rcu
(&
vœn
->
li°
);

387 
	`b©adv_‹ig_node_vœn_put
(
vœn
);

389 
	`•ö_u∆ock_bh
(&
‹ig_node
->
vœn_li°_lock
);

392 
	`b©adv_‹ig_node_vœn_put
(
vœn
);

393 
	}
}

401 
	$b©adv_â_globÆ_size_öc
(
b©adv_‹ig_node
 *
‹ig_node
,

402 
vid
)

404 
	`b©adv_â_globÆ_size_mod
(
‹ig_node
, 
vid
, 1);

405 
	}
}

413 
	$b©adv_â_globÆ_size_dec
(
b©adv_‹ig_node
 *
‹ig_node
,

414 
vid
)

416 
	`b©adv_â_globÆ_size_mod
(
‹ig_node
, 
vid
, -1);

417 
	}
}

424 
	$b©adv_â_‹ig_li°_íåy_ªÀa£
(
kªf
 *
ªf
)

426 
b©adv_â_‹ig_li°_íåy
 *
‹ig_íåy
;

428 
‹ig_íåy
 = 
	`c⁄èöî_of
(
ªf
, 
b©adv_â_‹ig_li°_íåy
,

429 
ªfcou¡
);

431 
	`b©adv_‹ig_node_put
(
‹ig_íåy
->
‹ig_node
);

432 #i‡
	`LINUX_VERSION_IS_GEQ
(6, 12, 0)

433 
	`k‰ì_rcu
(
‹ig_íåy
, 
rcu
);

435 
	`ˇŒ_rcu
(&
‹ig_íåy
->
rcu
, 
b©adv_â_‹ig_li°_íåy_‰ì_rcu
);

437 
	}
}

445 
	$b©adv_â_‹ig_li°_íåy_put
(
b©adv_â_‹ig_li°_íåy
 *
‹ig_íåy
)

447 i‡(!
‹ig_íåy
)

450 
	`kªf_put
(&
‹ig_íåy
->
ªfcou¡
, 
b©adv_â_‹ig_li°_íåy_ªÀa£
);

451 
	}
}

459 
	$b©adv_â_loˇl_evít
(
b©adv_¥iv
 *
b©_¥iv
,

460 
b©adv_â_loˇl_íåy
 *
â_loˇl_íåy
,

461 
u8
 
evít_Êags
)

463 
b©adv_â_ch™ge_node
 *
â_ch™ge_node
, *
íåy
, *
ß„
;

464 
b©adv_â_comm⁄_íåy
 *
comm⁄
 = &
â_loˇl_íåy
->common;

465 
u8
 
Êags
 = 
comm⁄
->Êag†| 
evít_Êags
;

466 
boﬁ
 
dñ_›_ªque°ed
, 
dñ_›_íåy
;

467 
size_t
 
ch™ges
;

469 
â_ch™ge_node
 = 
	`kmem_ˇche_Æloc
(
b©adv_â_ch™ge_ˇche
, 
GFP_ATOMIC
);

470 i‡(!
â_ch™ge_node
)

473 
â_ch™ge_node
->
ch™ge
.
Êags
 = flags;

474 
	`mem£t
(
â_ch™ge_node
->
ch™ge
.
ª£rved
, 0,

475 (
â_ch™ge_node
->
ch™ge
.
ª£rved
));

476 
	`ëhî_addr_c›y
(
â_ch™ge_node
->
ch™ge
.
addr
, 
comm⁄
->addr);

477 
â_ch™ge_node
->
ch™ge
.
vid
 = 
	`ht⁄s
(
comm⁄
->vid);

479 
dñ_›_ªque°ed
 = 
Êags
 & 
BATADV_TT_CLIENT_DEL
;

482 
	`•ö_lock_bh
(&
b©_¥iv
->
â
.
ch™ges_li°_lock
);

483 
ch™ges
 = 
	`READ_ONCE
(
b©_¥iv
->
â
.
loˇl_ch™ges
);

484 
	`li°_f‹_óch_íåy_ß„
(
íåy
, 
ß„
, &
b©_¥iv
->
â
.
ch™ges_li°
,

485 
li°
) {

486 i‡(!
	`b©adv_com∑ª_ëh
(
íåy
->
ch™ge
.
addr
, 
comm⁄
->addr))

489 
dñ_›_íåy
 = 
íåy
->
ch™ge
.
Êags
 & 
BATADV_TT_CLIENT_DEL
;

490 i‡(
dñ_›_ªque°ed
 !
dñ_›_íåy
) {

498 
	`li°_dñ
(&
íåy
->
li°
);

499 
	`kmem_ˇche_‰ì
(
b©adv_â_ch™ge_ˇche
, 
íåy
);

500 
ch™ges
--;

506 
íåy
->
ch™ge
.
Êags
 = flags;

509 
	`kmem_ˇche_‰ì
(
b©adv_â_ch™ge_ˇche
, 
â_ch™ge_node
);

510 
upd©e_ch™ges
;

514 
	`li°_add_èû
(&
â_ch™ge_node
->
li°
, &
b©_¥iv
->
â
.
ch™ges_li°
);

515 
ch™ges
++;

517 
upd©e_ch™ges
:

518 
	`WRITE_ONCE
(
b©_¥iv
->
â
.
loˇl_ch™ges
, 
ch™ges
);

519 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
â
.
ch™ges_li°_lock
);

520 
	}
}

528 
	$b©adv_â_Àn
(
ch™ges_num
)

530  
ch™ges_num
 * (
b©adv_tvlv_â_ch™ge
);

531 
	}
}

539 
u16
 
	$b©adv_â_íåõs
(
u16
 
â_Àn
)

541  
â_Àn
 / 
	`b©adv_â_Àn
(1);

542 
	}
}

551 
	$b©adv_â_loˇl_èbÀ_å™smô_size
(
b©adv_¥iv
 *
b©_¥iv
)

553 
u16
 
num_vœn
 = 0;

554 
u16
 
â_loˇl_íåõs
 = 0;

555 
b©adv_meshif_vœn
 *
vœn
;

556 
hdr_size
;

558 
	`rcu_ªad_lock
();

559 
	`hli°_f‹_óch_íåy_rcu
(
vœn
, &
b©_¥iv
->
meshif_vœn_li°
, 
li°
) {

560 
num_vœn
++;

561 
â_loˇl_íåõs
 +
	`©omic_ªad
(&
vœn
->
â
.
num_íåõs
);

563 
	`rcu_ªad_u∆ock
();

566 
hdr_size
 = (
b©adv_uniˇ°_tvlv_∑ckë
);

567 
hdr_size
 +(
b©adv_tvlv_hdr
);

568 
hdr_size
 +(
b©adv_tvlv_â_d©a
);

569 
hdr_size
 +
num_vœn
 * (
b©adv_tvlv_â_vœn_d©a
);

571  
hdr_size
 + 
	`b©adv_â_Àn
(
â_loˇl_íåõs
);

572 
	}
}

574 
	$b©adv_â_loˇl_öô
(
b©adv_¥iv
 *
b©_¥iv
)

576 i‡(
b©_¥iv
->
â
.
loˇl_hash
)

579 
b©_¥iv
->
â
.
loˇl_hash
 = 
	`b©adv_hash_√w
(1024);

581 i‡(!
b©_¥iv
->
â
.
loˇl_hash
)

582  -
ENOMEM
;

584 
	`b©adv_hash_£t_lock_˛ass
(
b©_¥iv
->
â
.
loˇl_hash
,

585 &
b©adv_â_loˇl_hash_lock_˛ass_key
);

588 
	}
}

590 
	$b©adv_â_globÆ_‰ì
(
b©adv_¥iv
 *
b©_¥iv
,

591 
b©adv_â_globÆ_íåy
 *
â_globÆ
,

592 c⁄° *
mesßge
)

594 
b©adv_â_globÆ_íåy
 *
â_ªmoved_íåy
;

595 
hli°_node
 *
â_ªmoved_node
;

597 
	`b©adv_dbg
(
BATADV_DBG_TT
, 
b©_¥iv
,

599 
â_globÆ
->
comm⁄
.
addr
,

600 
	`b©adv_¥öt_vid
(
â_globÆ
->
comm⁄
.
vid
), 
mesßge
);

602 
â_ªmoved_node
 = 
	`b©adv_hash_ªmove
(
b©_¥iv
->
â
.
globÆ_hash
,

603 
b©adv_com∑ª_â
,

604 
b©adv_choo£_â
,

605 &
â_globÆ
->
comm⁄
);

606 i‡(!
â_ªmoved_node
)

610 
â_ªmoved_íåy
 = 
	`hli°_íåy
(
â_ªmoved_node
,

611 
b©adv_â_globÆ_íåy
,

612 
comm⁄
.
hash_íåy
);

613 
	`b©adv_â_globÆ_íåy_put
(
â_ªmoved_íåy
);

614 
	}
}

629 
boﬁ
 
	$b©adv_â_loˇl_add
(
√t_devi˚
 *
mesh_iÁ˚
, c⁄° 
u8
 *
addr
,

630 
vid
, 
ifödex
, 
u32
 
m¨k
)

632 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
mesh_iÁ˚
);

633 
b©adv_â_loˇl_íåy
 *
â_loˇl
;

634 
b©adv_â_globÆ_íåy
 *
â_globÆ
 = 
NULL
;

635 
√t
 *√à
	`dev_√t
(
mesh_iÁ˚
);

636 
b©adv_meshif_vœn
 *
vœn
;

637 
√t_devi˚
 *
ö_dev
 = 
NULL
;

638 
b©adv_h¨d_iÁ˚
 *
ö_h¨dif
 = 
NULL
;

639 
hli°_hód
 *
hód
;

640 
b©adv_â_‹ig_li°_íåy
 *
‹ig_íåy
;

641 
hash_added
, 
èbÀ_size
, 
∑ckë_size_max
;

642 
boﬁ
 
ªt
 = 
Ál£
;

643 
boﬁ
 
rﬂmed_back
 = 
Ál£
;

644 
u8
 
ªmŸe_Êags
;

645 
u32
 
m©ch_m¨k
;

647 i‡(
ifödex
 !
BATADV_NULL_IFINDEX
)

648 
ö_dev
 = 
	`dev_gë_by_ödex
(
√t
, 
ifödex
);

650 i‡(
ö_dev
)

651 
ö_h¨dif
 = 
	`b©adv_h¨dif_gë_by_√tdev
(
ö_dev
);

653 
â_loˇl
 = 
	`b©adv_â_loˇl_hash_föd
(
b©_¥iv
, 
addr
, 
vid
);

655 i‡(!
	`is_mu…iˇ°_ëhî_addr
(
addr
))

656 
â_globÆ
 = 
	`b©adv_â_globÆ_hash_föd
(
b©_¥iv
, 
addr
, 
vid
);

658 i‡(
â_loˇl
) {

659 
â_loˇl
->
œ°_£í
 = 
jiffõs
;

660 i‡(
â_loˇl
->
comm⁄
.
Êags
 & 
BATADV_TT_CLIENT_PENDING
) {

661 
	`b©adv_dbg
(
BATADV_DBG_TT
, 
b©_¥iv
,

663 
addr
, 
	`b©adv_¥öt_vid
(
vid
));

669 
â_loˇl
->
comm⁄
.
Êags
 &~
BATADV_TT_CLIENT_PENDING
;

670 
add_evít
;

673 i‡(
â_loˇl
->
comm⁄
.
Êags
 & 
BATADV_TT_CLIENT_ROAM
) {

674 
	`b©adv_dbg
(
BATADV_DBG_TT
, 
b©_¥iv
,

676 
addr
, 
	`b©adv_¥öt_vid
(
vid
));

682 
â_loˇl
->
comm⁄
.
Êags
 &~
BATADV_TT_CLIENT_ROAM
;

683 
rﬂmed_back
 = 
åue
;

685 
check_rﬂmög
;

689 
èbÀ_size
 = 
	`b©adv_â_loˇl_èbÀ_å™smô_size
(
b©_¥iv
);

690 
èbÀ_size
 +
	`b©adv_â_Àn
(1);

691 
∑ckë_size_max
 = 
	`©omic_ªad
(&
b©_¥iv
->packet_size_max);

692 i‡(
èbÀ_size
 > 
∑ckë_size_max
) {

693 
	`√t_øãlimôed_fun˘i⁄
(
b©adv_öfo
, 
mesh_iÁ˚
,

695 
èbÀ_size
, 
∑ckë_size_max
, 
addr
);

696 
out
;

699 
â_loˇl
 = 
	`kmem_ˇche_Æloc
(
b©adv_é_ˇche
, 
GFP_ATOMIC
);

700 i‡(!
â_loˇl
)

701 
out
;

704 
vœn
 = 
	`b©adv_meshif_vœn_gë
(
b©_¥iv
, 
vid
);

705 i‡(!
vœn
) {

706 
	`√t_øãlimôed_fun˘i⁄
(
b©adv_öfo
, 
mesh_iÁ˚
,

708 
addr
, 
	`b©adv_¥öt_vid
(
vid
));

709 
	`kmem_ˇche_‰ì
(
b©adv_é_ˇche
, 
â_loˇl
);

710 
â_loˇl
 = 
NULL
;

711 
out
;

714 
	`b©adv_dbg
(
BATADV_DBG_TT
, 
b©_¥iv
,

716 
addr
, 
	`b©adv_¥öt_vid
(
vid
),

717 (
u8
)
	`©omic_ªad
(&
b©_¥iv
->
â
.
vn
));

719 
	`ëhî_addr_c›y
(
â_loˇl
->
comm⁄
.
addr
,áddr);

724 
â_loˇl
->
comm⁄
.
Êags
 = 
BATADV_TT_CLIENT_NEW
;

725 
â_loˇl
->
comm⁄
.
vid
 = vid;

726 i‡(
	`b©adv_is_wifi_h¨dif
(
ö_h¨dif
))

727 
â_loˇl
->
comm⁄
.
Êags
 |
BATADV_TT_CLIENT_WIFI
;

728 
	`kªf_öô
(&
â_loˇl
->
comm⁄
.
ªfcou¡
);

729 
â_loˇl
->
œ°_£í
 = 
jiffõs
;

730 
â_loˇl
->
comm⁄
.
added_©
 =Åt_loˇl->
œ°_£í
;

731 
â_loˇl
->
vœn
 = vlan;

736 i‡(
	`b©adv_com∑ª_ëh
(
addr
, 
mesh_iÁ˚
->
dev_addr
) ||

737 
	`is_mu…iˇ°_ëhî_addr
(
addr
))

738 
â_loˇl
->
comm⁄
.
Êags
 |
BATADV_TT_CLIENT_NOPURGE
;

740 
	`kªf_gë
(&
â_loˇl
->
comm⁄
.
ªfcou¡
);

741 
hash_added
 = 
	`b©adv_hash_add
(
b©_¥iv
->
â
.
loˇl_hash
, 
b©adv_com∑ª_â
,

742 
b©adv_choo£_â
, &
â_loˇl
->
comm⁄
,

743 &
â_loˇl
->
comm⁄
.
hash_íåy
);

745 i‡(
	`u∆ikñy
(
hash_added
 != 0)) {

747 
	`b©adv_â_loˇl_íåy_put
(
â_loˇl
);

748 
out
;

751 
add_evít
:

752 
	`b©adv_â_loˇl_evít
(
b©_¥iv
, 
â_loˇl
, 
BATADV_NO_FLAGS
);

754 
check_rﬂmög
:

758 i‡(
â_globÆ
 && !—t_globÆ->
comm⁄
.
Êags
 & 
BATADV_TT_CLIENT_ROAM
)) {

760 
hód
 = &
â_globÆ
->
‹ig_li°
;

761 
	`rcu_ªad_lock
();

762 
	`hli°_f‹_óch_íåy_rcu
(
‹ig_íåy
, 
hód
, 
li°
) {

763 
	`b©adv_£nd_rﬂm_adv
(
b©_¥iv
, 
â_globÆ
->
comm⁄
.
addr
,

764 
â_globÆ
->
comm⁄
.
vid
,

765 
‹ig_íåy
->
‹ig_node
);

767 
	`rcu_ªad_u∆ock
();

768 i‡(
rﬂmed_back
) {

769 
	`b©adv_â_globÆ_‰ì
(
b©_¥iv
, 
â_globÆ
,

775 
â_globÆ
->
comm⁄
.
Êags
 |
BATADV_TT_CLIENT_ROAM
;

776 
â_globÆ
->
rﬂm_©
 = 
jiffõs
;

783 
ªmŸe_Êags
 = 
â_loˇl
->
comm⁄
.
Êags
 & 
BATADV_TT_REMOTE_MASK
;

785 i‡(
	`b©adv_is_wifi_h¨dif
(
ö_h¨dif
))

786 
â_loˇl
->
comm⁄
.
Êags
 |
BATADV_TT_CLIENT_WIFI
;

788 
â_loˇl
->
comm⁄
.
Êags
 &~
BATADV_TT_CLIENT_WIFI
;

794 
m©ch_m¨k
 = (
m¨k
 & 
b©_¥iv
->
isﬁ©i⁄_m¨k_mask
);

795 i‡(
b©_¥iv
->
isﬁ©i⁄_m¨k_mask
 &&

796 
m©ch_m¨k
 =
b©_¥iv
->
isﬁ©i⁄_m¨k
)

797 
â_loˇl
->
comm⁄
.
Êags
 |
BATADV_TT_CLIENT_ISOLA
;

799 
â_loˇl
->
comm⁄
.
Êags
 &~
BATADV_TT_CLIENT_ISOLA
;

804 i‡(
ªmŸe_Êags
 ^ (
â_loˇl
->
comm⁄
.
Êags
 & 
BATADV_TT_REMOTE_MASK
))

805 
	`b©adv_â_loˇl_evít
(
b©_¥iv
, 
â_loˇl
, 
BATADV_NO_FLAGS
);

807 
ªt
 = 
åue
;

808 
out
:

809 
	`b©adv_h¨dif_put
(
ö_h¨dif
);

810 
	`dev_put
(
ö_dev
);

811 
	`b©adv_â_loˇl_íåy_put
(
â_loˇl
);

812 
	`b©adv_â_globÆ_íåy_put
(
â_globÆ
);

813  
ªt
;

814 
	}
}

833 
u16


834 
	$b©adv_â_¥ï¨e_tvlv_globÆ_d©a
(
b©adv_‹ig_node
 *
‹ig_node
,

835 
b©adv_tvlv_â_d©a
 **
â_d©a
,

836 
b©adv_tvlv_â_ch™ge
 **
â_ch™ge
,

837 
s32
 *
â_Àn
)

839 
u16
 
num_vœn
 = 0;

840 
u16
 
num_íåõs
 = 0;

841 
u16
 
ch™ge_off£t
;

842 
u16
 
tvlv_Àn
;

843 
b©adv_tvlv_â_vœn_d©a
 *
â_vœn
;

844 
b©adv_‹ig_node_vœn
 *
vœn
;

845 
u8
 *
â_ch™ge_±r
;

847 
	`•ö_lock_bh
(&
‹ig_node
->
vœn_li°_lock
);

848 
	`hli°_f‹_óch_íåy
(
vœn
, &
‹ig_node
->
vœn_li°
, 
li°
) {

849 
num_vœn
++;

850 
num_íåõs
 +
	`©omic_ªad
(&
vœn
->
â
.num_entries);

853 
ch™ge_off£t
 = 
	`°ru˘_size
(*
â_d©a
, 
vœn_d©a
, 
num_vœn
);

856 i‡(*
â_Àn
 < 0)

857 *
â_Àn
 = 
	`b©adv_â_Àn
(
num_íåõs
);

859 
tvlv_Àn
 = *
â_Àn
;

860 
tvlv_Àn
 +
ch™ge_off£t
;

862 *
â_d©a
 = 
	`kmÆloc
(
tvlv_Àn
, 
GFP_ATOMIC
);

863 i‡(!*
â_d©a
) {

864 *
â_Àn
 = 0;

865 
out
;

868 (*
â_d©a
)->
Êags
 = 
BATADV_NO_FLAGS
;

869 (*
â_d©a
)->
âvn
 = 
	`©omic_ªad
(&
‹ig_node
->
œ°_âvn
);

870 (*
â_d©a
)->
num_vœn
 = 
	`ht⁄s
(num_vlan);

872 
â_vœn
 = (*
â_d©a
)->
vœn_d©a
;

873 
	`hli°_f‹_óch_íåy
(
vœn
, &
‹ig_node
->
vœn_li°
, 
li°
) {

874 
â_vœn
->
vid
 = 
	`ht⁄s
(
vœn
->vid);

875 
â_vœn
->
¸c
 = 
	`ht⁄l
(
vœn
->
â
.crc);

876 
â_vœn
->
ª£rved
 = 0;

878 
â_vœn
++;

881 
â_ch™ge_±r
 = (
u8
 *)*
â_d©a
 + 
ch™ge_off£t
;

882 *
â_ch™ge
 = (
b©adv_tvlv_â_ch™ge
 *)
â_ch™ge_±r
;

884 
out
:

885 
	`•ö_u∆ock_bh
(&
‹ig_node
->
vœn_li°_lock
);

886  
tvlv_Àn
;

887 
	}
}

907 
u16


908 
	$b©adv_â_¥ï¨e_tvlv_loˇl_d©a
(
b©adv_¥iv
 *
b©_¥iv
,

909 
b©adv_tvlv_â_d©a
 **
â_d©a
,

910 
b©adv_tvlv_â_ch™ge
 **
â_ch™ge
,

911 
s32
 *
â_Àn
)

913 
b©adv_tvlv_â_vœn_d©a
 *
â_vœn
;

914 
b©adv_meshif_vœn
 *
vœn
;

915 
u16
 
num_vœn
 = 0;

916 
u16
 
vœn_íåõs
 = 0;

917 
u16
 
tŸÆ_íåõs
 = 0;

918 
u16
 
tvlv_Àn
;

919 
u8
 *
â_ch™ge_±r
;

920 
ch™ge_off£t
;

922 
	`•ö_lock_bh
(&
b©_¥iv
->
meshif_vœn_li°_lock
);

923 
	`hli°_f‹_óch_íåy
(
vœn
, &
b©_¥iv
->
meshif_vœn_li°
, 
li°
) {

924 
vœn_íåõs
 = 
	`©omic_ªad
(&
vœn
->
â
.
num_íåõs
);

925 i‡(
vœn_íåõs
 < 1)

928 
num_vœn
++;

929 
tŸÆ_íåõs
 +
vœn_íåõs
;

932 
ch™ge_off£t
 = 
	`°ru˘_size
(*
â_d©a
, 
vœn_d©a
, 
num_vœn
);

935 i‡(*
â_Àn
 < 0)

936 *
â_Àn
 = 
	`b©adv_â_Àn
(
tŸÆ_íåõs
);

938 
tvlv_Àn
 = *
â_Àn
;

939 
tvlv_Àn
 +
ch™ge_off£t
;

941 *
â_d©a
 = 
	`kmÆloc
(
tvlv_Àn
, 
GFP_ATOMIC
);

942 i‡(!*
â_d©a
) {

943 
tvlv_Àn
 = 0;

944 
out
;

947 (*
â_d©a
)->
Êags
 = 
BATADV_NO_FLAGS
;

948 (*
â_d©a
)->
âvn
 = 
	`©omic_ªad
(&
b©_¥iv
->
â
.
vn
);

949 (*
â_d©a
)->
num_vœn
 = 
	`ht⁄s
(num_vlan);

951 
â_vœn
 = (*
â_d©a
)->
vœn_d©a
;

952 
	`hli°_f‹_óch_íåy
(
vœn
, &
b©_¥iv
->
meshif_vœn_li°
, 
li°
) {

953 
vœn_íåõs
 = 
	`©omic_ªad
(&
vœn
->
â
.
num_íåõs
);

954 i‡(
vœn_íåõs
 < 1)

957 
â_vœn
->
vid
 = 
	`ht⁄s
(
vœn
->vid);

958 
â_vœn
->
¸c
 = 
	`ht⁄l
(
vœn
->
â
.crc);

959 
â_vœn
->
ª£rved
 = 0;

961 
â_vœn
++;

964 
â_ch™ge_±r
 = (
u8
 *)*
â_d©a
 + 
ch™ge_off£t
;

965 *
â_ch™ge
 = (
b©adv_tvlv_â_ch™ge
 *)
â_ch™ge_±r
;

967 
out
:

968 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
meshif_vœn_li°_lock
);

969  
tvlv_Àn
;

970 
	}
}

977 
	$b©adv_â_tvlv_c⁄èöî_upd©e
(
b©adv_¥iv
 *
b©_¥iv
)

979 
b©adv_â_ch™ge_node
 *
íåy
, *
ß„
;

980 
b©adv_tvlv_â_d©a
 *
â_d©a
;

981 
b©adv_tvlv_â_ch™ge
 *
â_ch™ge
;

982 
â_diff_Àn
, 
â_ch™ge_Àn
 = 0;

983 
â_diff_íåõs_num
 = 0;

984 
â_diff_íåõs_cou¡
 = 0;

985 
boﬁ
 
dr›_ch™ges
 = 
Ál£
;

986 
size_t
 
â_exåa_Àn
 = 0;

987 
u16
 
tvlv_Àn
;

989 
â_diff_íåõs_num
 = 
	`READ_ONCE
(
b©_¥iv
->
â
.
loˇl_ch™ges
);

990 
â_diff_Àn
 = 
	`b©adv_â_Àn
(
â_diff_íåõs_num
);

999 i‡(
â_diff_Àn
 > 
b©_¥iv
->
mesh_iÁ˚
->
mtu
) {

1000 
â_diff_Àn
 = 0;

1001 
â_diff_íåõs_num
 = 0;

1002 
dr›_ch™ges
 = 
åue
;

1005 
tvlv_Àn
 = 
	`b©adv_â_¥ï¨e_tvlv_loˇl_d©a
(
b©_¥iv
, &
â_d©a
,

1006 &
â_ch™ge
, &
â_diff_Àn
);

1007 i‡(!
tvlv_Àn
)

1010 
â_d©a
->
Êags
 = 
BATADV_TT_OGM_DIFF
;

1012 i‡(!
dr›_ch™ges
 && 
â_diff_Àn
 == 0)

1013 
c⁄èöî_ªgi°î
;

1015 
	`•ö_lock_bh
(&
b©_¥iv
->
â
.
ch™ges_li°_lock
);

1016 
	`WRITE_ONCE
(
b©_¥iv
->
â
.
loˇl_ch™ges
, 0);

1018 
	`li°_f‹_óch_íåy_ß„
(
íåy
, 
ß„
, &
b©_¥iv
->
â
.
ch™ges_li°
,

1019 
li°
) {

1020 i‡(
â_diff_íåõs_cou¡
 < 
â_diff_íåõs_num
) {

1021 
	`mem˝y
(
â_ch™ge
 + 
â_diff_íåõs_cou¡
,

1022 &
íåy
->
ch™ge
,

1023 (
b©adv_tvlv_â_ch™ge
));

1024 
â_diff_íåõs_cou¡
++;

1026 
	`li°_dñ
(&
íåy
->
li°
);

1027 
	`kmem_ˇche_‰ì
(
b©adv_â_ch™ge_ˇche
, 
íåy
);

1029 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
â
.
ch™ges_li°_lock
);

1031 
â_exåa_Àn
 = 
	`b©adv_â_Àn
(
â_diff_íåõs_num
 -

1032 
â_diff_íåõs_cou¡
);

1035 
	`•ö_lock_bh
(&
b©_¥iv
->
â
.
œ°_ch™ge£t_lock
);

1036 
	`k‰ì
(
b©_¥iv
->
â
.
œ°_ch™ge£t
);

1037 
b©_¥iv
->
â
.
œ°_ch™ge£t_Àn
 = 0;

1038 
b©_¥iv
->
â
.
œ°_ch™ge£t
 = 
NULL
;

1039 
â_ch™ge_Àn
 = 
	`b©adv_â_Àn
(
â_diff_íåõs_cou¡
);

1041 i‡(
â_diff_íåõs_cou¡
 > 0) {

1042 
â_diff_Àn
 -
â_exåa_Àn
;

1046 
b©_¥iv
->
â
.
œ°_ch™ge£t
 = 
	`kzÆloc
(
â_diff_Àn
, 
GFP_ATOMIC
);

1047 i‡(
b©_¥iv
->
â
.
œ°_ch™ge£t
) {

1048 
	`mem˝y
(
b©_¥iv
->
â
.
œ°_ch™ge£t
,

1049 
â_ch™ge
, 
â_ch™ge_Àn
);

1050 
b©_¥iv
->
â
.
œ°_ch™ge£t_Àn
 = 
â_diff_Àn
;

1053 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
â
.
œ°_ch™ge£t_lock
);

1056 
tvlv_Àn
 -
â_exåa_Àn
;

1057 
c⁄èöî_ªgi°î
:

1058 
	`b©adv_tvlv_c⁄èöî_ªgi°î
(
b©_¥iv
, 
BATADV_TVLV_TT
, 1, 
â_d©a
,

1059 
tvlv_Àn
);

1060 
	`k‰ì
(
â_d©a
);

1061 
	}
}

1074 
	$b©adv_â_loˇl_dump_íåy
(
sk_buff
 *
msg
, 
u32
 
p‹tid
,

1075 
√éök_ˇŒback
 *
cb
,

1076 
b©adv_¥iv
 *
b©_¥iv
,

1077 
b©adv_â_comm⁄_íåy
 *
comm⁄
)

1079 *
hdr
;

1080 
b©adv_meshif_vœn
 *
vœn
;

1081 
b©adv_â_loˇl_íåy
 *
loˇl
;

1082 
œ°_£í_m£cs
;

1083 
u32
 
¸c
;

1085 
loˇl
 = 
	`c⁄èöî_of
(
comm⁄
, 
b©adv_â_loˇl_íåy
, common);

1086 
œ°_£í_m£cs
 = 
	`jiffõs_to_m£cs
(
jiffõs
 - 
loˇl
->
œ°_£í
);

1088 
vœn
 = 
	`b©adv_meshif_vœn_gë
(
b©_¥iv
, 
comm⁄
->
vid
);

1089 i‡(!
vœn
)

1092 
¸c
 = 
vœn
->
â
.crc;

1094 
	`b©adv_meshif_vœn_put
(
vœn
);

1096 
hdr
 = 
	`gílmsg_put
(
msg
, 
p‹tid
, 
cb
->
∆h
->
∆msg_£q
,

1097 &
b©adv_√éök_Ámûy
, 
NLM_F_MULTI
,

1098 
BATADV_CMD_GET_TRANSTABLE_LOCAL
);

1099 i‡(!
hdr
)

1100  -
ENOBUFS
;

1102 
	`gíl_dump_check_c⁄si°ít
(
cb
, 
hdr
);

1104 i‡(
	`∆a_put
(
msg
, 
BATADV_ATTR_TT_ADDRESS
, 
ETH_ALEN
, 
comm⁄
->
addr
) ||

1105 
	`∆a_put_u32
(
msg
, 
BATADV_ATTR_TT_CRC32
, 
¸c
) ||

1106 
	`∆a_put_u16
(
msg
, 
BATADV_ATTR_TT_VID
, 
comm⁄
->
vid
) ||

1107 
	`∆a_put_u32
(
msg
, 
BATADV_ATTR_TT_FLAGS
, 
comm⁄
->
Êags
))

1108 
∆a_put_Áûuª
;

1110 i‡(!(
comm⁄
->
Êags
 & 
BATADV_TT_CLIENT_NOPURGE
) &&

1111 
	`∆a_put_u32
(
msg
, 
BATADV_ATTR_LAST_SEEN_MSECS
, 
œ°_£í_m£cs
))

1112 
∆a_put_Áûuª
;

1114 
	`gílmsg_íd
(
msg
, 
hdr
);

1117 
∆a_put_Áûuª
:

1118 
	`gílmsg_ˇn˚l
(
msg
, 
hdr
);

1119  -
EMSGSIZE
;

1120 
	}
}

1135 
	$b©adv_â_loˇl_dump_buckë
(
sk_buff
 *
msg
, 
u32
 
p‹tid
,

1136 
√éök_ˇŒback
 *
cb
,

1137 
b©adv_¥iv
 *
b©_¥iv
,

1138 
b©adv_hashèbÀ
 *
hash
, 
buckë
,

1139 *
idx_s
)

1141 
b©adv_â_comm⁄_íåy
 *
comm⁄
;

1142 
idx
 = 0;

1144 
	`•ö_lock_bh
(&
hash
->
li°_locks
[
buckë
]);

1145 
cb
->
£q
 = 
	`©omic_ªad
(&
hash
->
gíî©i⁄
) << 1 | 1;

1147 
	`hli°_f‹_óch_íåy
(
comm⁄
, &
hash
->
èbÀ
[
buckë
], 
hash_íåy
) {

1148 i‡(
idx
++ < *
idx_s
)

1151 i‡(
	`b©adv_â_loˇl_dump_íåy
(
msg
, 
p‹tid
, 
cb
, 
b©_¥iv
,

1152 
comm⁄
)) {

1153 
	`•ö_u∆ock_bh
(&
hash
->
li°_locks
[
buckë
]);

1154 *
idx_s
 = 
idx
 - 1;

1155  -
EMSGSIZE
;

1158 
	`•ö_u∆ock_bh
(&
hash
->
li°_locks
[
buckë
]);

1160 *
idx_s
 = 0;

1162 
	}
}

1171 
	$b©adv_â_loˇl_dump
(
sk_buff
 *
msg
, 
√éök_ˇŒback
 *
cb
)

1173 
√t_devi˚
 *
mesh_iÁ˚
;

1174 
b©adv_¥iv
 *
b©_¥iv
;

1175 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
 = 
NULL
;

1176 
b©adv_hashèbÀ
 *
hash
;

1177 
ªt
;

1178 
buckë
 = 
cb
->
¨gs
[0];

1179 
idx
 = 
cb
->
¨gs
[1];

1180 
p‹tid
 = 
	`NETLINK_CB
(
cb
->
skb
).portid;

1182 
mesh_iÁ˚
 = 
	`b©adv_√éök_gë_meshif
(
cb
);

1183 i‡(
	`IS_ERR
(
mesh_iÁ˚
))

1184  
	`PTR_ERR
(
mesh_iÁ˚
);

1186 
b©_¥iv
 = 
	`√tdev_¥iv
(
mesh_iÁ˚
);

1188 
¥im¨y_if
 = 
	`b©adv_¥im¨y_if_gë_£À˘ed
(
b©_¥iv
);

1189 i‡(!
¥im¨y_if
 ||Örim¨y_if->
if_°©us
 !
BATADV_IF_ACTIVE
) {

1190 
ªt
 = -
ENOENT
;

1191 
out
;

1194 
hash
 = 
b©_¥iv
->
â
.
loˇl_hash
;

1196 
buckë
 < 
hash
->
size
) {

1197 i‡(
	`b©adv_â_loˇl_dump_buckë
(
msg
, 
p‹tid
, 
cb
, 
b©_¥iv
,

1198 
hash
, 
buckë
, &
idx
))

1201 
buckë
++;

1204 
ªt
 = 
msg
->
Àn
;

1206 
out
:

1207 
	`b©adv_h¨dif_put
(
¥im¨y_if
);

1208 
	`dev_put
(
mesh_iÁ˚
);

1210 
cb
->
¨gs
[0] = 
buckë
;

1211 
cb
->
¨gs
[1] = 
idx
;

1213  
ªt
;

1214 
	}
}

1217 
	$b©adv_â_loˇl_£t_≥ndög
(
b©adv_¥iv
 *
b©_¥iv
,

1218 
b©adv_â_loˇl_íåy
 *
â_loˇl_íåy
,

1219 
u16
 
Êags
, c⁄° *
mesßge
)

1221 
	`b©adv_â_loˇl_evít
(
b©_¥iv
, 
â_loˇl_íåy
, 
Êags
);

1227 
â_loˇl_íåy
->
comm⁄
.
Êags
 |
BATADV_TT_CLIENT_PENDING
;

1229 
	`b©adv_dbg
(
BATADV_DBG_TT
, 
b©_¥iv
,

1231 
â_loˇl_íåy
->
comm⁄
.
addr
,

1232 
	`b©adv_¥öt_vid
(
â_loˇl_íåy
->
comm⁄
.
vid
), 
mesßge
);

1233 
	}
}

1245 
u16
 
	$b©adv_â_loˇl_ªmove
(
b©adv_¥iv
 *
b©_¥iv
, c⁄° 
u8
 *
addr
,

1246 
vid
, c⁄° *
mesßge
,

1247 
boﬁ
 
rﬂmög
)

1249 
b©adv_â_loˇl_íåy
 *
â_ªmoved_íåy
;

1250 
b©adv_â_loˇl_íåy
 *
â_loˇl_íåy
;

1251 
u16
 
Êags
, 
cuº_Êags
 = 
BATADV_NO_FLAGS
;

1252 
hli°_node
 *
â_ªmoved_node
;

1254 
â_loˇl_íåy
 = 
	`b©adv_â_loˇl_hash_föd
(
b©_¥iv
, 
addr
, 
vid
);

1255 i‡(!
â_loˇl_íåy
)

1256 
out
;

1258 
cuº_Êags
 = 
â_loˇl_íåy
->
comm⁄
.
Êags
;

1260 
Êags
 = 
BATADV_TT_CLIENT_DEL
;

1265 i‡(
rﬂmög
) {

1266 
Êags
 |
BATADV_TT_CLIENT_ROAM
;

1268 
â_loˇl_íåy
->
comm⁄
.
Êags
 |
BATADV_TT_CLIENT_ROAM
;

1271 i‡(!(
â_loˇl_íåy
->
comm⁄
.
Êags
 & 
BATADV_TT_CLIENT_NEW
)) {

1272 
	`b©adv_â_loˇl_£t_≥ndög
(
b©_¥iv
, 
â_loˇl_íåy
, 
Êags
,

1273 
mesßge
);

1274 
out
;

1279 
	`b©adv_â_loˇl_evít
(
b©_¥iv
, 
â_loˇl_íåy
, 
BATADV_TT_CLIENT_DEL
);

1281 
â_ªmoved_node
 = 
	`b©adv_hash_ªmove
(
b©_¥iv
->
â
.
loˇl_hash
,

1282 
b©adv_com∑ª_â
,

1283 
b©adv_choo£_â
,

1284 &
â_loˇl_íåy
->
comm⁄
);

1285 i‡(!
â_ªmoved_node
)

1286 
out
;

1289 
â_ªmoved_íåy
 = 
	`hli°_íåy
(
â_ªmoved_node
,

1290 
b©adv_â_loˇl_íåy
,

1291 
comm⁄
.
hash_íåy
);

1292 
	`b©adv_â_loˇl_íåy_put
(
â_ªmoved_íåy
);

1294 
out
:

1295 
	`b©adv_â_loˇl_íåy_put
(
â_loˇl_íåy
);

1297  
cuº_Êags
;

1298 
	}
}

1307 
	$b©adv_â_loˇl_purge_li°
(
b©adv_¥iv
 *
b©_¥iv
,

1308 
hli°_hód
 *
hód
,

1309 
timeout
)

1311 
b©adv_â_loˇl_íåy
 *
â_loˇl_íåy
;

1312 
b©adv_â_comm⁄_íåy
 *
â_comm⁄_íåy
;

1313 
hli°_node
 *
node_tmp
;

1315 
	`hli°_f‹_óch_íåy_ß„
(
â_comm⁄_íåy
, 
node_tmp
, 
hód
,

1316 
hash_íåy
) {

1317 
â_loˇl_íåy
 = 
	`c⁄èöî_of
(
â_comm⁄_íåy
,

1318 
b©adv_â_loˇl_íåy
,

1319 
comm⁄
);

1320 i‡(
â_loˇl_íåy
->
comm⁄
.
Êags
 & 
BATADV_TT_CLIENT_NOPURGE
)

1324 i‡(
â_loˇl_íåy
->
comm⁄
.
Êags
 & 
BATADV_TT_CLIENT_PENDING
)

1327 i‡(!
	`b©adv_has_timed_out
(
â_loˇl_íåy
->
œ°_£í
, 
timeout
))

1330 
	`b©adv_â_loˇl_£t_≥ndög
(
b©_¥iv
, 
â_loˇl_íåy
,

1331 
BATADV_TT_CLIENT_DEL
, "timed out");

1333 
	}
}

1341 
	$b©adv_â_loˇl_purge
(
b©adv_¥iv
 *
b©_¥iv
,

1342 
timeout
)

1344 
b©adv_hashèbÀ
 *
hash
 = 
b©_¥iv
->
â
.
loˇl_hash
;

1345 
hli°_hód
 *
hód
;

1346 
•ölock_t
 *
li°_lock
;

1347 
u32
 
i
;

1349 
i
 = 0; i < 
hash
->
size
; i++) {

1350 
hód
 = &
hash
->
èbÀ
[
i
];

1351 
li°_lock
 = &
hash
->
li°_locks
[
i
];

1353 
	`•ö_lock_bh
(
li°_lock
);

1354 
	`b©adv_â_loˇl_purge_li°
(
b©_¥iv
, 
hód
, 
timeout
);

1355 
	`•ö_u∆ock_bh
(
li°_lock
);

1357 
	}
}

1359 
	$b©adv_â_loˇl_èbÀ_‰ì
(
b©adv_¥iv
 *
b©_¥iv
)

1361 
b©adv_hashèbÀ
 *
hash
;

1362 
•ölock_t
 *
li°_lock
;

1363 
b©adv_â_comm⁄_íåy
 *
â_comm⁄_íåy
;

1364 
b©adv_â_loˇl_íåy
 *
â_loˇl
;

1365 
hli°_node
 *
node_tmp
;

1366 
hli°_hód
 *
hód
;

1367 
u32
 
i
;

1369 i‡(!
b©_¥iv
->
â
.
loˇl_hash
)

1372 
hash
 = 
b©_¥iv
->
â
.
loˇl_hash
;

1374 
i
 = 0; i < 
hash
->
size
; i++) {

1375 
hód
 = &
hash
->
èbÀ
[
i
];

1376 
li°_lock
 = &
hash
->
li°_locks
[
i
];

1378 
	`•ö_lock_bh
(
li°_lock
);

1379 
	`hli°_f‹_óch_íåy_ß„
(
â_comm⁄_íåy
, 
node_tmp
,

1380 
hód
, 
hash_íåy
) {

1381 
	`hli°_dñ_rcu
(&
â_comm⁄_íåy
->
hash_íåy
);

1382 
â_loˇl
 = 
	`c⁄èöî_of
(
â_comm⁄_íåy
,

1383 
b©adv_â_loˇl_íåy
,

1384 
comm⁄
);

1386 
	`b©adv_â_loˇl_íåy_put
(
â_loˇl
);

1388 
	`•ö_u∆ock_bh
(
li°_lock
);

1391 
	`b©adv_hash_de°roy
(
hash
);

1393 
b©_¥iv
->
â
.
loˇl_hash
 = 
NULL
;

1394 
	}
}

1396 
	$b©adv_â_globÆ_öô
(
b©adv_¥iv
 *
b©_¥iv
)

1398 i‡(
b©_¥iv
->
â
.
globÆ_hash
)

1401 
b©_¥iv
->
â
.
globÆ_hash
 = 
	`b©adv_hash_√w
(1024);

1403 i‡(!
b©_¥iv
->
â
.
globÆ_hash
)

1404  -
ENOMEM
;

1406 
	`b©adv_hash_£t_lock_˛ass
(
b©_¥iv
->
â
.
globÆ_hash
,

1407 &
b©adv_â_globÆ_hash_lock_˛ass_key
);

1410 
	}
}

1412 
	$b©adv_â_ch™ges_li°_‰ì
(
b©adv_¥iv
 *
b©_¥iv
)

1414 
b©adv_â_ch™ge_node
 *
íåy
, *
ß„
;

1416 
	`•ö_lock_bh
(&
b©_¥iv
->
â
.
ch™ges_li°_lock
);

1418 
	`li°_f‹_óch_íåy_ß„
(
íåy
, 
ß„
, &
b©_¥iv
->
â
.
ch™ges_li°
,

1419 
li°
) {

1420 
	`li°_dñ
(&
íåy
->
li°
);

1421 
	`kmem_ˇche_‰ì
(
b©adv_â_ch™ge_ˇche
, 
íåy
);

1424 
	`WRITE_ONCE
(
b©_¥iv
->
â
.
loˇl_ch™ges
, 0);

1425 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
â
.
ch™ges_li°_lock
);

1426 
	}
}

1439 
b©adv_â_‹ig_li°_íåy
 *

1440 
	$b©adv_â_globÆ_‹ig_íåy_föd
(c⁄° 
b©adv_â_globÆ_íåy
 *
íåy
,

1441 c⁄° 
b©adv_‹ig_node
 *
‹ig_node
)

1443 
b©adv_â_‹ig_li°_íåy
 *
tmp_‹ig_íåy
, *
‹ig_íåy
 = 
NULL
;

1444 c⁄° 
hli°_hód
 *
hód
;

1446 
	`rcu_ªad_lock
();

1447 
hód
 = &
íåy
->
‹ig_li°
;

1448 
	`hli°_f‹_óch_íåy_rcu
(
tmp_‹ig_íåy
, 
hód
, 
li°
) {

1449 i‡(
tmp_‹ig_íåy
->
‹ig_node
 != orig_node)

1451 i‡(!
	`kªf_gë_u∆ess_zîo
(&
tmp_‹ig_íåy
->
ªfcou¡
))

1454 
‹ig_íåy
 = 
tmp_‹ig_íåy
;

1457 
	`rcu_ªad_u∆ock
();

1459  
‹ig_íåy
;

1460 
	}
}

1474 
boﬁ


1475 
	$b©adv_â_globÆ_íåy_has_‹ig
(c⁄° 
b©adv_â_globÆ_íåy
 *
íåy
,

1476 c⁄° 
b©adv_‹ig_node
 *
‹ig_node
,

1477 
u8
 *
Êags
)

1479 
b©adv_â_‹ig_li°_íåy
 *
‹ig_íåy
;

1480 
boﬁ
 
found
 = 
Ál£
;

1482 
‹ig_íåy
 = 
	`b©adv_â_globÆ_‹ig_íåy_föd
(
íåy
, 
‹ig_node
);

1483 i‡(
‹ig_íåy
) {

1484 
found
 = 
åue
;

1486 i‡(
Êags
)

1487 *
Êags
 = 
‹ig_íåy
->flags;

1489 
	`b©adv_â_‹ig_li°_íåy_put
(
‹ig_íåy
);

1492  
found
;

1493 
	}
}

1503 
	$b©adv_â_globÆ_sync_Êags
(
b©adv_â_globÆ_íåy
 *
â_globÆ
)

1505 
b©adv_â_‹ig_li°_íåy
 *
‹ig_íåy
;

1506 c⁄° 
hli°_hód
 *
hód
;

1507 
u16
 
Êags
 = 
BATADV_NO_FLAGS
;

1509 
	`rcu_ªad_lock
();

1510 
hód
 = &
â_globÆ
->
‹ig_li°
;

1511 
	`hli°_f‹_óch_íåy_rcu
(
‹ig_íåy
, 
hód
, 
li°
)

1512 
Êags
 |
‹ig_íåy
->flags;

1513 
	`rcu_ªad_u∆ock
();

1515 
Êags
 |
â_globÆ
->
comm⁄
.Êag†& (~
BATADV_TT_SYNC_MASK
);

1516 
â_globÆ
->
comm⁄
.
Êags
 = flags;

1517 
	}
}

1527 
	$b©adv_â_globÆ_‹ig_íåy_add
(
b©adv_â_globÆ_íåy
 *
â_globÆ
,

1528 
b©adv_‹ig_node
 *
‹ig_node
, 
âvn
,

1529 
u8
 
Êags
)

1531 
b©adv_â_‹ig_li°_íåy
 *
‹ig_íåy
;

1533 
	`•ö_lock_bh
(&
â_globÆ
->
li°_lock
);

1535 
‹ig_íåy
 = 
	`b©adv_â_globÆ_‹ig_íåy_föd
(
â_globÆ
, 
‹ig_node
);

1536 i‡(
‹ig_íåy
) {

1540 
‹ig_íåy
->
âvn
 =Åtvn;

1541 
‹ig_íåy
->
Êags
 = flags;

1542 
sync_Êags
;

1545 
‹ig_íåy
 = 
	`kmem_ˇche_zÆloc
(
b©adv_â_‹ig_ˇche
, 
GFP_ATOMIC
);

1546 i‡(!
‹ig_íåy
)

1547 
out
;

1549 
	`INIT_HLIST_NODE
(&
‹ig_íåy
->
li°
);

1550 
	`kªf_gë
(&
‹ig_node
->
ªfcou¡
);

1551 
	`b©adv_â_globÆ_size_öc
(
‹ig_node
, 
â_globÆ
->
comm⁄
.
vid
);

1552 
‹ig_íåy
->
‹ig_node
 = orig_node;

1553 
‹ig_íåy
->
âvn
 =Åtvn;

1554 
‹ig_íåy
->
Êags
 = flags;

1555 
	`kªf_öô
(&
‹ig_íåy
->
ªfcou¡
);

1557 
	`kªf_gë
(&
‹ig_íåy
->
ªfcou¡
);

1558 
	`hli°_add_hód_rcu
(&
‹ig_íåy
->
li°
,

1559 &
â_globÆ
->
‹ig_li°
);

1560 
	`©omic_öc
(&
â_globÆ
->
‹ig_li°_cou¡
);

1562 
sync_Êags
:

1563 
	`b©adv_â_globÆ_sync_Êags
(
â_globÆ
);

1564 
out
:

1565 
	`b©adv_â_‹ig_li°_íåy_put
(
‹ig_íåy
);

1567 
	`•ö_u∆ock_bh
(&
â_globÆ
->
li°_lock
);

1568 
	}
}

1589 
boﬁ
 
	$b©adv_â_globÆ_add
(
b©adv_¥iv
 *
b©_¥iv
,

1590 
b©adv_‹ig_node
 *
‹ig_node
,

1591 c⁄° *
â_addr
,

1592 
vid
, 
u16
 
Êags
, 
u8
 
âvn
)

1594 
b©adv_â_globÆ_íåy
 *
â_globÆ_íåy
;

1595 
b©adv_â_loˇl_íåy
 *
â_loˇl_íåy
;

1596 
boﬁ
 
ªt
 = 
Ál£
;

1597 
hash_added
;

1598 
b©adv_â_comm⁄_íåy
 *
comm⁄
;

1599 
u16
 
loˇl_Êags
;

1602 i‡(
	`b©adv_bœ_is_backb⁄e_gw_‹ig
(
b©_¥iv
, 
‹ig_node
->
‹ig
, 
vid
))

1603  
åue
;

1605 
â_globÆ_íåy
 = 
	`b©adv_â_globÆ_hash_föd
(
b©_¥iv
, 
â_addr
, 
vid
);

1606 
â_loˇl_íåy
 = 
	`b©adv_â_loˇl_hash_föd
(
b©_¥iv
, 
â_addr
, 
vid
);

1612 i‡((
Êags
 & 
BATADV_TT_CLIENT_TEMP
Ë&& 
â_loˇl_íåy
 &&

1613 !(
â_loˇl_íåy
->
comm⁄
.
Êags
 & 
BATADV_TT_CLIENT_NEW
))

1614 
out
;

1616 i‡(!
â_globÆ_íåy
) {

1617 
â_globÆ_íåy
 = 
	`kmem_ˇche_zÆloc
(
b©adv_tg_ˇche
,

1618 
GFP_ATOMIC
);

1619 i‡(!
â_globÆ_íåy
)

1620 
out
;

1622 
comm⁄
 = &
â_globÆ_íåy
->common;

1623 
	`ëhî_addr_c›y
(
comm⁄
->
addr
, 
â_addr
);

1624 
comm⁄
->
vid
 = vid;

1626 i‡(!
	`is_mu…iˇ°_ëhî_addr
(
comm⁄
->
addr
))

1627 
comm⁄
->
Êags
 = fœg†& (~
BATADV_TT_SYNC_MASK
);

1629 
â_globÆ_íåy
->
rﬂm_©
 = 0;

1634 i‡(
Êags
 & 
BATADV_TT_CLIENT_ROAM
)

1635 
â_globÆ_íåy
->
rﬂm_©
 = 
jiffõs
;

1636 
	`kªf_öô
(&
comm⁄
->
ªfcou¡
);

1637 
comm⁄
->
added_©
 = 
jiffõs
;

1639 
	`INIT_HLIST_HEAD
(&
â_globÆ_íåy
->
‹ig_li°
);

1640 
	`©omic_£t
(&
â_globÆ_íåy
->
‹ig_li°_cou¡
, 0);

1641 
	`•ö_lock_öô
(&
â_globÆ_íåy
->
li°_lock
);

1643 
	`kªf_gë
(&
comm⁄
->
ªfcou¡
);

1644 
hash_added
 = 
	`b©adv_hash_add
(
b©_¥iv
->
â
.
globÆ_hash
,

1645 
b©adv_com∑ª_â
,

1646 
b©adv_choo£_â
, 
comm⁄
,

1647 &
comm⁄
->
hash_íåy
);

1649 i‡(
	`u∆ikñy
(
hash_added
 != 0)) {

1651 
	`b©adv_â_globÆ_íåy_put
(
â_globÆ_íåy
);

1652 
out_ªmove
;

1655 
comm⁄
 = &
â_globÆ_íåy
->common;

1666 i‡(
Êags
 & 
BATADV_TT_CLIENT_TEMP
) {

1667 i‡(!(
comm⁄
->
Êags
 & 
BATADV_TT_CLIENT_TEMP
))

1668 
out
;

1669 i‡(
	`b©adv_â_globÆ_íåy_has_‹ig
(
â_globÆ_íåy
,

1670 
‹ig_node
, 
NULL
))

1671 
out_ªmove
;

1672 
	`b©adv_â_globÆ_dñ_‹ig_li°
(
â_globÆ_íåy
);

1673 
add_‹ig_íåy
;

1682 i‡(
comm⁄
->
Êags
 & 
BATADV_TT_CLIENT_TEMP
) {

1683 
	`b©adv_â_globÆ_dñ_‹ig_li°
(
â_globÆ_íåy
);

1684 
comm⁄
->
Êags
 &~
BATADV_TT_CLIENT_TEMP
;

1691 i‡(!
	`is_mu…iˇ°_ëhî_addr
(
comm⁄
->
addr
))

1692 
comm⁄
->
Êags
 |Êag†& (~
BATADV_TT_SYNC_MASK
);

1701 i‡(
comm⁄
->
Êags
 & 
BATADV_TT_CLIENT_ROAM
) {

1702 
	`b©adv_â_globÆ_dñ_‹ig_li°
(
â_globÆ_íåy
);

1703 
comm⁄
->
Êags
 &~
BATADV_TT_CLIENT_ROAM
;

1704 
â_globÆ_íåy
->
rﬂm_©
 = 0;

1707 
add_‹ig_íåy
:

1709 
	`b©adv_â_globÆ_‹ig_íåy_add
(
â_globÆ_íåy
, 
‹ig_node
, 
âvn
,

1710 
Êags
 & 
BATADV_TT_SYNC_MASK
);

1712 
	`b©adv_dbg
(
BATADV_DBG_TT
, 
b©_¥iv
,

1714 
comm⁄
->
addr
, 
	`b©adv_¥öt_vid
(comm⁄->
vid
),

1715 
‹ig_node
->
‹ig
);

1716 
ªt
 = 
åue
;

1718 
out_ªmove
:

1722 i‡(
	`is_mu…iˇ°_ëhî_addr
(
â_addr
))

1723 
out
;

1726 
loˇl_Êags
 = 
	`b©adv_â_loˇl_ªmove
(
b©_¥iv
, 
â_addr
, 
vid
,

1728 
Êags
 & 
BATADV_TT_CLIENT_ROAM
);

1729 
â_globÆ_íåy
->
comm⁄
.
Êags
 |
loˇl_Êags
 & 
BATADV_TT_CLIENT_WIFI
;

1731 i‡(!(
Êags
 & 
BATADV_TT_CLIENT_ROAM
))

1735 
â_globÆ_íåy
->
comm⁄
.
Êags
 &~
BATADV_TT_CLIENT_ROAM
;

1737 
out
:

1738 
	`b©adv_â_globÆ_íåy_put
(
â_globÆ_íåy
);

1739 
	`b©adv_â_loˇl_íåy_put
(
â_loˇl_íåy
);

1740  
ªt
;

1741 
	}
}

1751 
b©adv_â_‹ig_li°_íåy
 *

1752 
	$b©adv_å™°abÀ_be°_‹ig
(
b©adv_¥iv
 *
b©_¥iv
,

1753 
b©adv_â_globÆ_íåy
 *
â_globÆ_íåy
)

1755 
b©adv_√igh_node
 *
rouãr
, *
be°_rouãr
 = 
NULL
;

1756 
b©adv_Ægo_›s
 *
bao
 = 
b©_¥iv
->
Ægo_›s
;

1757 
hli°_hód
 *
hód
;

1758 
b©adv_â_‹ig_li°_íåy
 *
‹ig_íåy
, *
be°_íåy
 = 
NULL
;

1760 
hód
 = &
â_globÆ_íåy
->
‹ig_li°
;

1761 
	`hli°_f‹_óch_íåy_rcu
(
‹ig_íåy
, 
hód
, 
li°
) {

1762 
rouãr
 = 
	`b©adv_‹ig_rouãr_gë
(
‹ig_íåy
->
‹ig_node
,

1763 
BATADV_IF_DEFAULT
);

1764 i‡(!
rouãr
)

1767 i‡(
be°_rouãr
 &&

1768 
bao
->
√igh
.
	`cmp
(
rouãr
, 
BATADV_IF_DEFAULT
, 
be°_rouãr
,

1769 
BATADV_IF_DEFAULT
) <= 0) {

1770 
	`b©adv_√igh_node_put
(
rouãr
);

1775 
	`b©adv_√igh_node_put
(
be°_rouãr
);

1777 
be°_íåy
 = 
‹ig_íåy
;

1778 
be°_rouãr
 = 
rouãr
;

1781 
	`b©adv_√igh_node_put
(
be°_rouãr
);

1783  
be°_íåy
;

1784 
	}
}

1798 
	$b©adv_â_globÆ_dump_subíåy
(
sk_buff
 *
msg
, 
u32
 
p‹tid
, u32 
£q
,

1799 
b©adv_â_comm⁄_íåy
 *
comm⁄
,

1800 
b©adv_â_‹ig_li°_íåy
 *
‹ig
,

1801 
boﬁ
 
be°
)

1803 
u16
 
Êags
 = (
comm⁄
->Êag†& (~
BATADV_TT_SYNC_MASK
)Ë| 
‹ig
->flags;

1804 *
hdr
;

1805 
b©adv_‹ig_node_vœn
 *
vœn
;

1806 
u8
 
œ°_âvn
;

1807 
u32
 
¸c
;

1809 
vœn
 = 
	`b©adv_‹ig_node_vœn_gë
(
‹ig
->
‹ig_node
,

1810 
comm⁄
->
vid
);

1811 i‡(!
vœn
)

1814 
¸c
 = 
vœn
->
â
.crc;

1816 
	`b©adv_‹ig_node_vœn_put
(
vœn
);

1818 
hdr
 = 
	`gílmsg_put
(
msg
, 
p‹tid
, 
£q
, &
b©adv_√éök_Ámûy
,

1819 
NLM_F_MULTI
,

1820 
BATADV_CMD_GET_TRANSTABLE_GLOBAL
);

1821 i‡(!
hdr
)

1822  -
ENOBUFS
;

1824 
œ°_âvn
 = 
	`©omic_ªad
(&
‹ig
->
‹ig_node
->last_ttvn);

1826 i‡(
	`∆a_put
(
msg
, 
BATADV_ATTR_TT_ADDRESS
, 
ETH_ALEN
, 
comm⁄
->
addr
) ||

1827 
	`∆a_put
(
msg
, 
BATADV_ATTR_ORIG_ADDRESS
, 
ETH_ALEN
,

1828 
‹ig
->
‹ig_node
->orig) ||

1829 
	`∆a_put_u8
(
msg
, 
BATADV_ATTR_TT_TTVN
, 
‹ig
->
âvn
) ||

1830 
	`∆a_put_u8
(
msg
, 
BATADV_ATTR_TT_LAST_TTVN
, 
œ°_âvn
) ||

1831 
	`∆a_put_u32
(
msg
, 
BATADV_ATTR_TT_CRC32
, 
¸c
) ||

1832 
	`∆a_put_u16
(
msg
, 
BATADV_ATTR_TT_VID
, 
comm⁄
->
vid
) ||

1833 
	`∆a_put_u32
(
msg
, 
BATADV_ATTR_TT_FLAGS
, 
Êags
))

1834 
∆a_put_Áûuª
;

1836 i‡(
be°
 && 
	`∆a_put_Êag
(
msg
, 
BATADV_ATTR_FLAG_BEST
))

1837 
∆a_put_Áûuª
;

1839 
	`gílmsg_íd
(
msg
, 
hdr
);

1842 
∆a_put_Áûuª
:

1843 
	`gílmsg_ˇn˚l
(
msg
, 
hdr
);

1844  -
EMSGSIZE
;

1845 
	}
}

1861 
	$b©adv_â_globÆ_dump_íåy
(
sk_buff
 *
msg
, 
u32
 
p‹tid
, u32 
£q
,

1862 
b©adv_¥iv
 *
b©_¥iv
,

1863 
b©adv_â_comm⁄_íåy
 *
comm⁄
, *
sub_s
)

1865 
b©adv_â_‹ig_li°_íåy
 *
‹ig_íåy
, *
be°_íåy
;

1866 
b©adv_â_globÆ_íåy
 *
globÆ
;

1867 
hli°_hód
 *
hód
;

1868 
sub
 = 0;

1869 
boﬁ
 
be°
;

1871 
globÆ
 = 
	`c⁄èöî_of
(
comm⁄
, 
b©adv_â_globÆ_íåy
, common);

1872 
be°_íåy
 = 
	`b©adv_å™°abÀ_be°_‹ig
(
b©_¥iv
, 
globÆ
);

1873 
hód
 = &
globÆ
->
‹ig_li°
;

1875 
	`hli°_f‹_óch_íåy_rcu
(
‹ig_íåy
, 
hód
, 
li°
) {

1876 i‡(
sub
++ < *
sub_s
)

1879 
be°
 = (
‹ig_íåy
 =
be°_íåy
);

1881 i‡(
	`b©adv_â_globÆ_dump_subíåy
(
msg
, 
p‹tid
, 
£q
, 
comm⁄
,

1882 
‹ig_íåy
, 
be°
)) {

1883 *
sub_s
 = 
sub
 - 1;

1884  -
EMSGSIZE
;

1888 *
sub_s
 = 0;

1890 
	}
}

1905 
	$b©adv_â_globÆ_dump_buckë
(
sk_buff
 *
msg
, 
u32
 
p‹tid
, u32 
£q
,

1906 
b©adv_¥iv
 *
b©_¥iv
,

1907 
hli°_hód
 *
hód
, *
idx_s
, *
sub
)

1909 
b©adv_â_comm⁄_íåy
 *
comm⁄
;

1910 
idx
 = 0;

1912 
	`rcu_ªad_lock
();

1913 
	`hli°_f‹_óch_íåy_rcu
(
comm⁄
, 
hód
, 
hash_íåy
) {

1914 i‡(
idx
++ < *
idx_s
)

1917 i‡(
	`b©adv_â_globÆ_dump_íåy
(
msg
, 
p‹tid
, 
£q
, 
b©_¥iv
,

1918 
comm⁄
, 
sub
)) {

1919 
	`rcu_ªad_u∆ock
();

1920 *
idx_s
 = 
idx
 - 1;

1921  -
EMSGSIZE
;

1924 
	`rcu_ªad_u∆ock
();

1926 *
idx_s
 = 0;

1927 *
sub
 = 0;

1929 
	}
}

1938 
	$b©adv_â_globÆ_dump
(
sk_buff
 *
msg
, 
√éök_ˇŒback
 *
cb
)

1940 
√t_devi˚
 *
mesh_iÁ˚
;

1941 
b©adv_¥iv
 *
b©_¥iv
;

1942 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
 = 
NULL
;

1943 
b©adv_hashèbÀ
 *
hash
;

1944 
hli°_hód
 *
hód
;

1945 
ªt
;

1946 
buckë
 = 
cb
->
¨gs
[0];

1947 
idx
 = 
cb
->
¨gs
[1];

1948 
sub
 = 
cb
->
¨gs
[2];

1949 
p‹tid
 = 
	`NETLINK_CB
(
cb
->
skb
).portid;

1951 
mesh_iÁ˚
 = 
	`b©adv_√éök_gë_meshif
(
cb
);

1952 i‡(
	`IS_ERR
(
mesh_iÁ˚
))

1953  
	`PTR_ERR
(
mesh_iÁ˚
);

1955 
b©_¥iv
 = 
	`√tdev_¥iv
(
mesh_iÁ˚
);

1957 
¥im¨y_if
 = 
	`b©adv_¥im¨y_if_gë_£À˘ed
(
b©_¥iv
);

1958 i‡(!
¥im¨y_if
 ||Örim¨y_if->
if_°©us
 !
BATADV_IF_ACTIVE
) {

1959 
ªt
 = -
ENOENT
;

1960 
out
;

1963 
hash
 = 
b©_¥iv
->
â
.
globÆ_hash
;

1965 
buckë
 < 
hash
->
size
) {

1966 
hód
 = &
hash
->
èbÀ
[
buckë
];

1968 i‡(
	`b©adv_â_globÆ_dump_buckë
(
msg
, 
p‹tid
,

1969 
cb
->
∆h
->
∆msg_£q
, 
b©_¥iv
,

1970 
hód
, &
idx
, &
sub
))

1973 
buckë
++;

1976 
ªt
 = 
msg
->
Àn
;

1978 
out
:

1979 
	`b©adv_h¨dif_put
(
¥im¨y_if
);

1980 
	`dev_put
(
mesh_iÁ˚
);

1982 
cb
->
¨gs
[0] = 
buckë
;

1983 
cb
->
¨gs
[1] = 
idx
;

1984 
cb
->
¨gs
[2] = 
sub
;

1986  
ªt
;

1987 
	}
}

2001 
	$_b©adv_â_globÆ_dñ_‹ig_íåy
(
b©adv_â_globÆ_íåy
 *
â_globÆ_íåy
,

2002 
b©adv_â_‹ig_li°_íåy
 *
‹ig_íåy
)

2004 
	`lockdï_as£π_hñd
(&
â_globÆ_íåy
->
li°_lock
);

2006 
	`b©adv_â_globÆ_size_dec
(
‹ig_íåy
->
‹ig_node
,

2007 
â_globÆ_íåy
->
comm⁄
.
vid
);

2008 
	`©omic_dec
(&
â_globÆ_íåy
->
‹ig_li°_cou¡
);

2012 
	`hli°_dñ_rcu
(&
‹ig_íåy
->
li°
);

2013 
	`b©adv_â_‹ig_li°_íåy_put
(
‹ig_íåy
);

2014 
	}
}

2018 
	$b©adv_â_globÆ_dñ_‹ig_li°
(
b©adv_â_globÆ_íåy
 *
â_globÆ_íåy
)

2020 
hli°_hód
 *
hód
;

2021 
hli°_node
 *
ß„
;

2022 
b©adv_â_‹ig_li°_íåy
 *
‹ig_íåy
;

2024 
	`•ö_lock_bh
(&
â_globÆ_íåy
->
li°_lock
);

2025 
hód
 = &
â_globÆ_íåy
->
‹ig_li°
;

2026 
	`hli°_f‹_óch_íåy_ß„
(
‹ig_íåy
, 
ß„
, 
hód
, 
li°
)

2027 
	`_b©adv_â_globÆ_dñ_‹ig_íåy
(
â_globÆ_íåy
, 
‹ig_íåy
);

2028 
	`•ö_u∆ock_bh
(&
â_globÆ_íåy
->
li°_lock
);

2029 
	}
}

2042 
	$b©adv_â_globÆ_dñ_‹ig_node
(
b©adv_¥iv
 *
b©_¥iv
,

2043 
b©adv_â_globÆ_íåy
 *
â_globÆ_íåy
,

2044 
b©adv_‹ig_node
 *
‹ig_node
,

2045 c⁄° *
mesßge
)

2047 
hli°_hód
 *
hód
;

2048 
hli°_node
 *
ß„
;

2049 
b©adv_â_‹ig_li°_íåy
 *
‹ig_íåy
;

2050 
vid
;

2052 
	`•ö_lock_bh
(&
â_globÆ_íåy
->
li°_lock
);

2053 
hód
 = &
â_globÆ_íåy
->
‹ig_li°
;

2054 
	`hli°_f‹_óch_íåy_ß„
(
‹ig_íåy
, 
ß„
, 
hód
, 
li°
) {

2055 i‡(
‹ig_íåy
->
‹ig_node
 == orig_node) {

2056 
vid
 = 
â_globÆ_íåy
->
comm⁄
.vid;

2057 
	`b©adv_dbg
(
BATADV_DBG_TT
, 
b©_¥iv
,

2059 
‹ig_node
->
‹ig
,

2060 
â_globÆ_íåy
->
comm⁄
.
addr
,

2061 
	`b©adv_¥öt_vid
(
vid
), 
mesßge
);

2062 
	`_b©adv_â_globÆ_dñ_‹ig_íåy
(
â_globÆ_íåy
,

2063 
‹ig_íåy
);

2066 
	`•ö_u∆ock_bh
(&
â_globÆ_íåy
->
li°_lock
);

2067 
	}
}

2074 
	$b©adv_â_globÆ_dñ_rﬂmög
(
b©adv_¥iv
 *
b©_¥iv
,

2075 
b©adv_â_globÆ_íåy
 *
â_globÆ_íåy
,

2076 
b©adv_‹ig_node
 *
‹ig_node
,

2077 c⁄° *
mesßge
)

2079 
boﬁ
 
œ°_íåy
 = 
åue
;

2080 
hli°_hód
 *
hód
;

2081 
b©adv_â_‹ig_li°_íåy
 *
‹ig_íåy
;

2087 
	`rcu_ªad_lock
();

2088 
hód
 = &
â_globÆ_íåy
->
‹ig_li°
;

2089 
	`hli°_f‹_óch_íåy_rcu
(
‹ig_íåy
, 
hód
, 
li°
) {

2090 i‡(
‹ig_íåy
->
‹ig_node
 != orig_node) {

2091 
œ°_íåy
 = 
Ál£
;

2095 
	`rcu_ªad_u∆ock
();

2097 i‡(
œ°_íåy
) {

2099 
â_globÆ_íåy
->
comm⁄
.
Êags
 |
BATADV_TT_CLIENT_ROAM
;

2100 
â_globÆ_íåy
->
rﬂm_©
 = 
jiffõs
;

2105 
	`b©adv_â_globÆ_dñ_‹ig_node
(
b©_¥iv
, 
â_globÆ_íåy
,

2106 
‹ig_node
, 
mesßge
);

2108 
	}
}

2120 
	$b©adv_â_globÆ_dñ
(
b©adv_¥iv
 *
b©_¥iv
,

2121 
b©adv_‹ig_node
 *
‹ig_node
,

2122 c⁄° *
addr
, 
vid
,

2123 c⁄° *
mesßge
, 
boﬁ
 
rﬂmög
)

2125 
b©adv_â_globÆ_íåy
 *
â_globÆ_íåy
;

2126 
b©adv_â_loˇl_íåy
 *
loˇl_íåy
 = 
NULL
;

2128 
â_globÆ_íåy
 = 
	`b©adv_â_globÆ_hash_föd
(
b©_¥iv
, 
addr
, 
vid
);

2129 i‡(!
â_globÆ_íåy
)

2130 
out
;

2132 i‡(!
rﬂmög
) {

2133 
	`b©adv_â_globÆ_dñ_‹ig_node
(
b©_¥iv
, 
â_globÆ_íåy
,

2134 
‹ig_node
, 
mesßge
);

2136 i‡(
	`hli°_em±y
(&
â_globÆ_íåy
->
‹ig_li°
))

2137 
	`b©adv_â_globÆ_‰ì
(
b©_¥iv
, 
â_globÆ_íåy
,

2138 
mesßge
);

2140 
out
;

2156 
loˇl_íåy
 = 
	`b©adv_â_loˇl_hash_föd
(
b©_¥iv
,

2157 
â_globÆ_íåy
->
comm⁄
.
addr
,

2158 
vid
);

2159 i‡(
loˇl_íåy
) {

2161 
	`b©adv_â_globÆ_dñ_‹ig_li°
(
â_globÆ_íåy
);

2162 
	`b©adv_â_globÆ_‰ì
(
b©_¥iv
, 
â_globÆ_íåy
, 
mesßge
);

2165 
	`b©adv_â_globÆ_dñ_rﬂmög
(
b©_¥iv
, 
â_globÆ_íåy
,

2166 
‹ig_node
, 
mesßge
);

2169 
out
:

2170 
	`b©adv_â_globÆ_íåy_put
(
â_globÆ_íåy
);

2171 
	`b©adv_â_loˇl_íåy_put
(
loˇl_íåy
);

2172 
	}
}

2183 
	$b©adv_â_globÆ_dñ_‹ig
(
b©adv_¥iv
 *
b©_¥iv
,

2184 
b©adv_‹ig_node
 *
‹ig_node
,

2185 
s32
 
m©ch_vid
,

2186 c⁄° *
mesßge
)

2188 
b©adv_â_globÆ_íåy
 *
â_globÆ
;

2189 
b©adv_â_comm⁄_íåy
 *
â_comm⁄_íåy
;

2190 
u32
 
i
;

2191 
b©adv_hashèbÀ
 *
hash
 = 
b©_¥iv
->
â
.
globÆ_hash
;

2192 
hli°_node
 *
ß„
;

2193 
hli°_hód
 *
hód
;

2194 
•ölock_t
 *
li°_lock
;

2195 
vid
;

2197 i‡(!
hash
)

2200 
i
 = 0; i < 
hash
->
size
; i++) {

2201 
hód
 = &
hash
->
èbÀ
[
i
];

2202 
li°_lock
 = &
hash
->
li°_locks
[
i
];

2204 
	`•ö_lock_bh
(
li°_lock
);

2205 
	`hli°_f‹_óch_íåy_ß„
(
â_comm⁄_íåy
, 
ß„
,

2206 
hód
, 
hash_íåy
) {

2208 i‡(
m©ch_vid
 >0 && 
â_comm⁄_íåy
->
vid
 != match_vid)

2211 
â_globÆ
 = 
	`c⁄èöî_of
(
â_comm⁄_íåy
,

2212 
b©adv_â_globÆ_íåy
,

2213 
comm⁄
);

2215 
	`b©adv_â_globÆ_dñ_‹ig_node
(
b©_¥iv
, 
â_globÆ
,

2216 
‹ig_node
, 
mesßge
);

2218 i‡(
	`hli°_em±y
(&
â_globÆ
->
‹ig_li°
)) {

2219 
vid
 = 
â_globÆ
->
comm⁄
.vid;

2220 
	`b©adv_dbg
(
BATADV_DBG_TT
, 
b©_¥iv
,

2222 
â_globÆ
->
comm⁄
.
addr
,

2223 
	`b©adv_¥öt_vid
(
vid
), 
mesßge
);

2224 
	`hli°_dñ_rcu
(&
â_comm⁄_íåy
->
hash_íåy
);

2225 
	`b©adv_â_globÆ_íåy_put
(
â_globÆ
);

2228 
	`•ö_u∆ock_bh
(
li°_lock
);

2230 
	`˛ór_bô
(
BATADV_ORIG_CAPA_HAS_TT
, &
‹ig_node
->
ˇ∑_öôülized
);

2231 
	}
}

2233 
boﬁ
 
	$b©adv_â_globÆ_to_purge
(
b©adv_â_globÆ_íåy
 *
â_globÆ
,

2234 **
msg
)

2236 
boﬁ
 
purge
 = 
Ál£
;

2237 
rﬂm_timeout
 = 
BATADV_TT_CLIENT_ROAM_TIMEOUT
;

2238 
ãmp_timeout
 = 
BATADV_TT_CLIENT_TEMP_TIMEOUT
;

2240 i‡((
â_globÆ
->
comm⁄
.
Êags
 & 
BATADV_TT_CLIENT_ROAM
) &&

2241 
	`b©adv_has_timed_out
(
â_globÆ
->
rﬂm_©
, 
rﬂm_timeout
)) {

2242 
purge
 = 
åue
;

2243 *
msg
 = "RoamingÅimeout\n";

2246 i‡((
â_globÆ
->
comm⁄
.
Êags
 & 
BATADV_TT_CLIENT_TEMP
) &&

2247 
	`b©adv_has_timed_out
(
â_globÆ
->
comm⁄
.
added_©
, 
ãmp_timeout
)) {

2248 
purge
 = 
åue
;

2249 *
msg
 = "Temporary clientÅimeout\n";

2252  
purge
;

2253 
	}
}

2255 
	$b©adv_â_globÆ_purge
(
b©adv_¥iv
 *
b©_¥iv
)

2257 
b©adv_hashèbÀ
 *
hash
 = 
b©_¥iv
->
â
.
globÆ_hash
;

2258 
hli°_hód
 *
hód
;

2259 
hli°_node
 *
node_tmp
;

2260 
•ölock_t
 *
li°_lock
;

2261 
u32
 
i
;

2262 *
msg
 = 
NULL
;

2263 
b©adv_â_comm⁄_íåy
 *
â_comm⁄
;

2264 
b©adv_â_globÆ_íåy
 *
â_globÆ
;

2266 
i
 = 0; i < 
hash
->
size
; i++) {

2267 
hód
 = &
hash
->
èbÀ
[
i
];

2268 
li°_lock
 = &
hash
->
li°_locks
[
i
];

2270 
	`•ö_lock_bh
(
li°_lock
);

2271 
	`hli°_f‹_óch_íåy_ß„
(
â_comm⁄
, 
node_tmp
, 
hód
,

2272 
hash_íåy
) {

2273 
â_globÆ
 = 
	`c⁄èöî_of
(
â_comm⁄
,

2274 
b©adv_â_globÆ_íåy
,

2275 
comm⁄
);

2277 i‡(!
	`b©adv_â_globÆ_to_purge
(
â_globÆ
, &
msg
))

2280 
	`b©adv_dbg
(
BATADV_DBG_TT
, 
b©_¥iv
,

2282 
â_globÆ
->
comm⁄
.
addr
,

2283 
	`b©adv_¥öt_vid
(
â_globÆ
->
comm⁄
.
vid
),

2284 
msg
);

2286 
	`hli°_dñ_rcu
(&
â_comm⁄
->
hash_íåy
);

2288 
	`b©adv_â_globÆ_íåy_put
(
â_globÆ
);

2290 
	`•ö_u∆ock_bh
(
li°_lock
);

2292 
	}
}

2294 
	$b©adv_â_globÆ_èbÀ_‰ì
(
b©adv_¥iv
 *
b©_¥iv
)

2296 
b©adv_hashèbÀ
 *
hash
;

2297 
•ölock_t
 *
li°_lock
;

2298 
b©adv_â_comm⁄_íåy
 *
â_comm⁄_íåy
;

2299 
b©adv_â_globÆ_íåy
 *
â_globÆ
;

2300 
hli°_node
 *
node_tmp
;

2301 
hli°_hód
 *
hód
;

2302 
u32
 
i
;

2304 i‡(!
b©_¥iv
->
â
.
globÆ_hash
)

2307 
hash
 = 
b©_¥iv
->
â
.
globÆ_hash
;

2309 
i
 = 0; i < 
hash
->
size
; i++) {

2310 
hód
 = &
hash
->
èbÀ
[
i
];

2311 
li°_lock
 = &
hash
->
li°_locks
[
i
];

2313 
	`•ö_lock_bh
(
li°_lock
);

2314 
	`hli°_f‹_óch_íåy_ß„
(
â_comm⁄_íåy
, 
node_tmp
,

2315 
hód
, 
hash_íåy
) {

2316 
	`hli°_dñ_rcu
(&
â_comm⁄_íåy
->
hash_íåy
);

2317 
â_globÆ
 = 
	`c⁄èöî_of
(
â_comm⁄_íåy
,

2318 
b©adv_â_globÆ_íåy
,

2319 
comm⁄
);

2320 
	`b©adv_â_globÆ_íåy_put
(
â_globÆ
);

2322 
	`•ö_u∆ock_bh
(
li°_lock
);

2325 
	`b©adv_hash_de°roy
(
hash
);

2327 
b©_¥iv
->
â
.
globÆ_hash
 = 
NULL
;

2328 
	}
}

2330 
boﬁ


2331 
	$_b©adv_is_≠_isﬁ©ed
(
b©adv_â_loˇl_íåy
 *
â_loˇl_íåy
,

2332 
b©adv_â_globÆ_íåy
 *
â_globÆ_íåy
)

2334 i‡(
â_loˇl_íåy
->
comm⁄
.
Êags
 & 
BATADV_TT_CLIENT_WIFI
 &&

2335 
â_globÆ_íåy
->
comm⁄
.
Êags
 & 
BATADV_TT_CLIENT_WIFI
)

2336  
åue
;

2339 i‡(
â_loˇl_íåy
->
comm⁄
.
Êags
 & 
BATADV_TT_CLIENT_ISOLA
 &&

2340 
â_globÆ_íåy
->
comm⁄
.
Êags
 & 
BATADV_TT_CLIENT_ISOLA
)

2341  
åue
;

2343  
Ál£
;

2344 
	}
}

2360 
b©adv_‹ig_node
 *
	$b©adv_å™°abÀ_£¨ch
(
b©adv_¥iv
 *
b©_¥iv
,

2361 c⁄° 
u8
 *
§c
,

2362 c⁄° 
u8
 *
addr
,

2363 
vid
)

2365 
b©adv_â_loˇl_íåy
 *
â_loˇl_íåy
 = 
NULL
;

2366 
b©adv_â_globÆ_íåy
 *
â_globÆ_íåy
 = 
NULL
;

2367 
b©adv_‹ig_node
 *
‹ig_node
 = 
NULL
;

2368 
b©adv_â_‹ig_li°_íåy
 *
be°_íåy
;

2370 i‡(
§c
 && 
	`b©adv_vœn_≠_isﬁa_gë
(
b©_¥iv
, 
vid
)) {

2371 
â_loˇl_íåy
 = 
	`b©adv_â_loˇl_hash_föd
(
b©_¥iv
, 
§c
, 
vid
);

2372 i‡(!
â_loˇl_íåy
 ||

2373 (
â_loˇl_íåy
->
comm⁄
.
Êags
 & 
BATADV_TT_CLIENT_PENDING
))

2374 
out
;

2377 
â_globÆ_íåy
 = 
	`b©adv_â_globÆ_hash_föd
(
b©_¥iv
, 
addr
, 
vid
);

2378 i‡(!
â_globÆ_íåy
)

2379 
out
;

2384 i‡(
â_loˇl_íåy
 &&

2385 
	`_b©adv_is_≠_isﬁ©ed
(
â_loˇl_íåy
, 
â_globÆ_íåy
))

2386 
out
;

2388 
	`rcu_ªad_lock
();

2389 
be°_íåy
 = 
	`b©adv_å™°abÀ_be°_‹ig
(
b©_¥iv
, 
â_globÆ_íåy
);

2391 i‡(
be°_íåy
)

2392 
‹ig_node
 = 
be°_íåy
->orig_node;

2393 i‡(
‹ig_node
 && !
	`kªf_gë_u∆ess_zîo
(&‹ig_node->
ªfcou¡
))

2394 
‹ig_node
 = 
NULL
;

2395 
	`rcu_ªad_u∆ock
();

2397 
out
:

2398 
	`b©adv_â_globÆ_íåy_put
(
â_globÆ_íåy
);

2399 
	`b©adv_â_loˇl_íåy_put
(
â_loˇl_íåy
);

2401  
‹ig_node
;

2402 
	}
}

2428 
u32
 
	$b©adv_â_globÆ_¸c
(
b©adv_¥iv
 *
b©_¥iv
,

2429 
b©adv_‹ig_node
 *
‹ig_node
,

2430 
vid
)

2432 
b©adv_hashèbÀ
 *
hash
 = 
b©_¥iv
->
â
.
globÆ_hash
;

2433 
b©adv_â_‹ig_li°_íåy
 *
â_‹ig
;

2434 
b©adv_â_comm⁄_íåy
 *
â_comm⁄
;

2435 
b©adv_â_globÆ_íåy
 *
â_globÆ
;

2436 
hli°_hód
 *
hód
;

2437 
u32
 
i
, 
¸c_tmp
, 
¸c
 = 0;

2438 
u8
 
Êags
;

2439 
__be16
 
tmp_vid
;

2441 
i
 = 0; i < 
hash
->
size
; i++) {

2442 
hód
 = &
hash
->
èbÀ
[
i
];

2444 
	`rcu_ªad_lock
();

2445 
	`hli°_f‹_óch_íåy_rcu
(
â_comm⁄
, 
hód
, 
hash_íåy
) {

2446 
â_globÆ
 = 
	`c⁄èöî_of
(
â_comm⁄
,

2447 
b©adv_â_globÆ_íåy
,

2448 
comm⁄
);

2452 i‡(
â_comm⁄
->
vid
 != vid)

2460 i‡(
â_comm⁄
->
Êags
 & 
BATADV_TT_CLIENT_ROAM
)

2466 i‡(
â_comm⁄
->
Êags
 & 
BATADV_TT_CLIENT_TEMP
)

2472 
â_‹ig
 = 
	`b©adv_â_globÆ_‹ig_íåy_föd
(
â_globÆ
,

2473 
‹ig_node
);

2474 i‡(!
â_‹ig
)

2480 
tmp_vid
 = 
	`ht⁄s
(
â_comm⁄
->
vid
);

2481 
¸c_tmp
 = 
	`¸c32c
(0, &
tmp_vid
, (tmp_vid));

2486 
Êags
 = 
â_‹ig
->flags;

2487 
¸c_tmp
 = 
	`¸c32c
(¸c_tmp, &
Êags
, (flags));

2489 
¸c
 ^
	`¸c32c
(
¸c_tmp
, 
â_comm⁄
->
addr
, 
ETH_ALEN
);

2491 
	`b©adv_â_‹ig_li°_íåy_put
(
â_‹ig
);

2493 
	`rcu_ªad_u∆ock
();

2496  
¸c
;

2497 
	}
}

2509 
u32
 
	$b©adv_â_loˇl_¸c
(
b©adv_¥iv
 *
b©_¥iv
,

2510 
vid
)

2512 
b©adv_hashèbÀ
 *
hash
 = 
b©_¥iv
->
â
.
loˇl_hash
;

2513 
b©adv_â_comm⁄_íåy
 *
â_comm⁄
;

2514 
hli°_hód
 *
hód
;

2515 
u32
 
i
, 
¸c_tmp
, 
¸c
 = 0;

2516 
u8
 
Êags
;

2517 
__be16
 
tmp_vid
;

2519 
i
 = 0; i < 
hash
->
size
; i++) {

2520 
hód
 = &
hash
->
èbÀ
[
i
];

2522 
	`rcu_ªad_lock
();

2523 
	`hli°_f‹_óch_íåy_rcu
(
â_comm⁄
, 
hód
, 
hash_íåy
) {

2527 i‡(
â_comm⁄
->
vid
 != vid)

2533 i‡(
â_comm⁄
->
Êags
 & 
BATADV_TT_CLIENT_NEW
)

2539 
tmp_vid
 = 
	`ht⁄s
(
â_comm⁄
->
vid
);

2540 
¸c_tmp
 = 
	`¸c32c
(0, &
tmp_vid
, (tmp_vid));

2545 
Êags
 = 
â_comm⁄
->Êag†& 
BATADV_TT_SYNC_MASK
;

2546 
¸c_tmp
 = 
	`¸c32c
(¸c_tmp, &
Êags
, (flags));

2548 
¸c
 ^
	`¸c32c
(
¸c_tmp
, 
â_comm⁄
->
addr
, 
ETH_ALEN
);

2550 
	`rcu_ªad_u∆ock
();

2553  
¸c
;

2554 
	}
}

2560 
	$b©adv_â_ªq_node_ªÀa£
(
kªf
 *
ªf
)

2562 
b©adv_â_ªq_node
 *
â_ªq_node
;

2564 
â_ªq_node
 = 
	`c⁄èöî_of
(
ªf
, 
b©adv_â_ªq_node
, 
ªfcou¡
);

2566 
	`kmem_ˇche_‰ì
(
b©adv_â_ªq_ˇche
, 
â_ªq_node
);

2567 
	}
}

2574 
	$b©adv_â_ªq_node_put
(
b©adv_â_ªq_node
 *
â_ªq_node
)

2576 i‡(!
â_ªq_node
)

2579 
	`kªf_put
(&
â_ªq_node
->
ªfcou¡
, 
b©adv_â_ªq_node_ªÀa£
);

2580 
	}
}

2582 
	$b©adv_â_ªq_li°_‰ì
(
b©adv_¥iv
 *
b©_¥iv
)

2584 
b©adv_â_ªq_node
 *
node
;

2585 
hli°_node
 *
ß„
;

2587 
	`•ö_lock_bh
(&
b©_¥iv
->
â
.
ªq_li°_lock
);

2589 
	`hli°_f‹_óch_íåy_ß„
(
node
, 
ß„
, &
b©_¥iv
->
â
.
ªq_li°
, 
li°
) {

2590 
	`hli°_dñ_öô
(&
node
->
li°
);

2591 
	`b©adv_â_ªq_node_put
(
node
);

2594 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
â
.
ªq_li°_lock
);

2595 
	}
}

2597 
	$b©adv_â_ßve_‹ig_buf„r
(
b©adv_¥iv
 *
b©_¥iv
,

2598 
b©adv_‹ig_node
 *
‹ig_node
,

2599 c⁄° *
â_buff
,

2600 
u16
 
â_buff_Àn
)

2605 
	`•ö_lock_bh
(&
‹ig_node
->
â_buff_lock
);

2606 i‡(
â_buff_Àn
 > 0) {

2607 
	`k‰ì
(
‹ig_node
->
â_buff
);

2608 
‹ig_node
->
â_buff_Àn
 = 0;

2609 
‹ig_node
->
â_buff
 = 
	`kmÆloc
(
â_buff_Àn
, 
GFP_ATOMIC
);

2610 i‡(
‹ig_node
->
â_buff
) {

2611 
	`mem˝y
(
‹ig_node
->
â_buff
,Åt_buff, 
â_buff_Àn
);

2612 
‹ig_node
->
â_buff_Àn
 =Åt_buff_len;

2615 
	`•ö_u∆ock_bh
(&
‹ig_node
->
â_buff_lock
);

2616 
	}
}

2618 
	$b©adv_â_ªq_purge
(
b©adv_¥iv
 *
b©_¥iv
)

2620 
b©adv_â_ªq_node
 *
node
;

2621 
hli°_node
 *
ß„
;

2623 
	`•ö_lock_bh
(&
b©_¥iv
->
â
.
ªq_li°_lock
);

2624 
	`hli°_f‹_óch_íåy_ß„
(
node
, 
ß„
, &
b©_¥iv
->
â
.
ªq_li°
, 
li°
) {

2625 i‡(
	`b©adv_has_timed_out
(
node
->
issued_©
,

2626 
BATADV_TT_REQUEST_TIMEOUT
)) {

2627 
	`hli°_dñ_öô
(&
node
->
li°
);

2628 
	`b©adv_â_ªq_node_put
(
node
);

2631 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
â
.
ªq_li°_lock
);

2632 
	}
}

2642 
b©adv_â_ªq_node
 *

2643 
	$b©adv_â_ªq_node_√w
(
b©adv_¥iv
 *
b©_¥iv
,

2644 
b©adv_‹ig_node
 *
‹ig_node
)

2646 
b©adv_â_ªq_node
 *
â_ªq_node_tmp
, *
â_ªq_node
 = 
NULL
;

2648 
	`•ö_lock_bh
(&
b©_¥iv
->
â
.
ªq_li°_lock
);

2649 
	`hli°_f‹_óch_íåy
(
â_ªq_node_tmp
, &
b©_¥iv
->
â
.
ªq_li°
, 
li°
) {

2650 i‡(
	`b©adv_com∑ª_ëh
(
â_ªq_node_tmp
, 
‹ig_node
) &&

2651 !
	`b©adv_has_timed_out
(
â_ªq_node_tmp
->
issued_©
,

2652 
BATADV_TT_REQUEST_TIMEOUT
))

2653 
u∆ock
;

2656 
â_ªq_node
 = 
	`kmem_ˇche_Æloc
(
b©adv_â_ªq_ˇche
, 
GFP_ATOMIC
);

2657 i‡(!
â_ªq_node
)

2658 
u∆ock
;

2660 
	`kªf_öô
(&
â_ªq_node
->
ªfcou¡
);

2661 
	`ëhî_addr_c›y
(
â_ªq_node
->
addr
, 
‹ig_node
->
‹ig
);

2662 
â_ªq_node
->
issued_©
 = 
jiffõs
;

2664 
	`kªf_gë
(&
â_ªq_node
->
ªfcou¡
);

2665 
	`hli°_add_hód
(&
â_ªq_node
->
li°
, &
b©_¥iv
->
â
.
ªq_li°
);

2666 
u∆ock
:

2667 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
â
.
ªq_li°_lock
);

2668  
â_ªq_node
;

2669 
	}
}

2682 
boﬁ
 
	$b©adv_â_loˇl_vÆid
(c⁄° *
íåy_±r
,

2683 c⁄° *
d©a_±r
,

2684 
u8
 *
Êags
)

2686 c⁄° 
b©adv_â_comm⁄_íåy
 *
â_comm⁄_íåy
 = 
íåy_±r
;

2688 i‡(
â_comm⁄_íåy
->
Êags
 & 
BATADV_TT_CLIENT_NEW
)

2689  
Ál£
;

2691 i‡(
Êags
)

2692 *
Êags
 = 
â_comm⁄_íåy
->flags;

2694  
åue
;

2695 
	}
}

2709 
boﬁ
 
	$b©adv_â_globÆ_vÆid
(c⁄° *
íåy_±r
,

2710 c⁄° *
d©a_±r
,

2711 
u8
 *
Êags
)

2713 c⁄° 
b©adv_â_comm⁄_íåy
 *
â_comm⁄_íåy
 = 
íåy_±r
;

2714 c⁄° 
b©adv_â_globÆ_íåy
 *
â_globÆ_íåy
;

2715 c⁄° 
b©adv_‹ig_node
 *
‹ig_node
 = 
d©a_±r
;

2717 i‡(
â_comm⁄_íåy
->
Êags
 & 
BATADV_TT_CLIENT_ROAM
 ||

2718 
â_comm⁄_íåy
->
Êags
 & 
BATADV_TT_CLIENT_TEMP
)

2719  
Ál£
;

2721 
â_globÆ_íåy
 = 
	`c⁄èöî_of
(
â_comm⁄_íåy
,

2722 
b©adv_â_globÆ_íåy
,

2723 
comm⁄
);

2725  
	`b©adv_â_globÆ_íåy_has_‹ig
(
â_globÆ_íåy
, 
‹ig_node
,

2726 
Êags
);

2727 
	}
}

2744 
u16
 
	$b©adv_â_tvlv_gíî©e
(
b©adv_¥iv
 *
b©_¥iv
,

2745 
b©adv_hashèbÀ
 *
hash
,

2746 *
tvlv_buff
, 
u16
 
â_Àn
,

2747 
	$boﬁ
 (*
vÆid_cb
)(const *,

2749 
u8
 *
Êags
),

2750 *
cb_d©a
)

2752 
b©adv_â_comm⁄_íåy
 *
â_comm⁄_íåy
;

2753 
b©adv_tvlv_â_ch™ge
 *
â_ch™ge
;

2754 
hli°_hód
 *
hód
;

2755 
u16
 
â_tŸ
, 
â_num_íåõs
 = 0;

2756 
u8
 
Êags
;

2757 
boﬁ
 
ªt
;

2758 
u32
 
i
;

2760 
â_tŸ
 = 
	`b©adv_â_íåõs
(
â_Àn
);

2761 
â_ch™ge
 = 
tvlv_buff
;

2763 i‡(!
vÆid_cb
)

2764  
â_Àn
;

2766 
	`rcu_ªad_lock
();

2767 
i
 = 0; i < 
hash
->
size
; i++) {

2768 
hód
 = &
hash
->
èbÀ
[
i
];

2770 
	`hli°_f‹_óch_íåy_rcu
(
â_comm⁄_íåy
,

2771 
hód
, 
hash_íåy
) {

2772 i‡(
â_tŸ
 =
â_num_íåõs
)

2775 
ªt
 = 
	`vÆid_cb
(
â_comm⁄_íåy
, 
cb_d©a
, &
Êags
);

2776 i‡(!
ªt
)

2779 
	`ëhî_addr_c›y
(
â_ch™ge
->
addr
, 
â_comm⁄_íåy
->addr);

2780 
â_ch™ge
->
Êags
 = flags;

2781 
â_ch™ge
->
vid
 = 
	`ht⁄s
(
â_comm⁄_íåy
->vid);

2782 
	`mem£t
(
â_ch™ge
->
ª£rved
, 0,

2783 (
â_ch™ge
->
ª£rved
));

2785 
â_num_íåõs
++;

2786 
â_ch™ge
++;

2789 
	`rcu_ªad_u∆ock
();

2791  
	`b©adv_â_Àn
(
â_tŸ
 - 
â_num_íåõs
);

2792 
	}
}

2803 
boﬁ
 
	$b©adv_â_globÆ_check_¸c
(
b©adv_‹ig_node
 *
‹ig_node
,

2804 
b©adv_tvlv_â_vœn_d©a
 *
â_vœn
,

2805 
u16
 
num_vœn
)

2807 
b©adv_tvlv_â_vœn_d©a
 *
â_vœn_tmp
;

2808 
b©adv_‹ig_node_vœn
 *
vœn
;

2809 
i
, 
‹ig_num_vœn
;

2810 
u32
 
¸c
;

2813 
i
 = 0; i < 
num_vœn
; i++) {

2814 
â_vœn_tmp
 = 
â_vœn
 + 
i
;

2819 i‡(
	`b©adv_bœ_is_backb⁄e_gw_‹ig
(
‹ig_node
->
b©_¥iv
,

2820 
‹ig_node
->
‹ig
,

2821 
	`¡ohs
(
â_vœn_tmp
->
vid
)))

2824 
vœn
 = 
	`b©adv_‹ig_node_vœn_gë
(
‹ig_node
,

2825 
	`¡ohs
(
â_vœn_tmp
->
vid
));

2826 i‡(!
vœn
)

2827  
Ál£
;

2829 
¸c
 = 
vœn
->
â
.crc;

2830 
	`b©adv_‹ig_node_vœn_put
(
vœn
);

2832 i‡(
¸c
 !
	`¡ohl
(
â_vœn_tmp
->crc))

2833  
Ál£
;

2839 
	`rcu_ªad_lock
();

2840 
‹ig_num_vœn
 = 0;

2841 
	`hli°_f‹_óch_íåy_rcu
(
vœn
, &
‹ig_node
->
vœn_li°
, 
li°
)

2842 
‹ig_num_vœn
++;

2843 
	`rcu_ªad_u∆ock
();

2845 i‡(
‹ig_num_vœn
 > 
num_vœn
)

2846  
Ál£
;

2848  
åue
;

2849 
	}
}

2855 
	$b©adv_â_loˇl_upd©e_¸c
(
b©adv_¥iv
 *
b©_¥iv
)

2857 
b©adv_meshif_vœn
 *
vœn
;

2860 
	`rcu_ªad_lock
();

2861 
	`hli°_f‹_óch_íåy_rcu
(
vœn
, &
b©_¥iv
->
meshif_vœn_li°
, 
li°
) {

2862 
vœn
->
â
.
¸c
 = 
	`b©adv_â_loˇl_¸c
(
b©_¥iv
, vœn->
vid
);

2864 
	`rcu_ªad_u∆ock
();

2865 
	}
}

2872 
	$b©adv_â_globÆ_upd©e_¸c
(
b©adv_¥iv
 *
b©_¥iv
,

2873 
b©adv_‹ig_node
 *
‹ig_node
)

2875 
b©adv_‹ig_node_vœn
 *
vœn
;

2876 
u32
 
¸c
;

2879 
	`rcu_ªad_lock
();

2880 
	`hli°_f‹_óch_íåy_rcu
(
vœn
, &
‹ig_node
->
vœn_li°
, 
li°
) {

2884 i‡(
	`b©adv_bœ_is_backb⁄e_gw_‹ig
(
b©_¥iv
, 
‹ig_node
->
‹ig
,

2885 
vœn
->
vid
))

2888 
¸c
 = 
	`b©adv_â_globÆ_¸c
(
b©_¥iv
, 
‹ig_node
, 
vœn
->
vid
);

2889 
vœn
->
â
.
¸c
 = crc;

2891 
	`rcu_ªad_u∆ock
();

2892 
	}
}

2906 
boﬁ
 
	$b©adv_£nd_â_ªque°
(
b©adv_¥iv
 *
b©_¥iv
,

2907 
b©adv_‹ig_node
 *
d°_‹ig_node
,

2908 
u8
 
âvn
,

2909 
b©adv_tvlv_â_vœn_d©a
 *
â_vœn
,

2910 
u16
 
num_vœn
, 
boﬁ
 
fuŒ_èbÀ
)

2912 
b©adv_tvlv_â_d©a
 *
tvlv_â_d©a
 = 
NULL
;

2913 
b©adv_â_ªq_node
 *
â_ªq_node
 = 
NULL
;

2914 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
;

2915 
boﬁ
 
ªt
 = 
Ál£
;

2916 
i
, 
size
;

2918 
¥im¨y_if
 = 
	`b©adv_¥im¨y_if_gë_£À˘ed
(
b©_¥iv
);

2919 i‡(!
¥im¨y_if
)

2920 
out
;

2925 
â_ªq_node
 = 
	`b©adv_â_ªq_node_√w
(
b©_¥iv
, 
d°_‹ig_node
);

2926 i‡(!
â_ªq_node
)

2927 
out
;

2929 
size
 = 
	`°ru˘_size
(
tvlv_â_d©a
, 
vœn_d©a
, 
num_vœn
);

2930 
tvlv_â_d©a
 = 
	`kzÆloc
(
size
, 
GFP_ATOMIC
);

2931 i‡(!
tvlv_â_d©a
)

2932 
out
;

2934 
tvlv_â_d©a
->
Êags
 = 
BATADV_TT_REQUEST
;

2935 
tvlv_â_d©a
->
âvn
 =Åtvn;

2936 
tvlv_â_d©a
->
num_vœn
 = 
	`ht⁄s
(num_vlan);

2941 
i
 = 0; i < 
num_vœn
; i++) {

2942 
tvlv_â_d©a
->
vœn_d©a
[
i
].
vid
 = 
â_vœn
->vid;

2943 
tvlv_â_d©a
->
vœn_d©a
[
i
].
¸c
 = 
â_vœn
->crc;

2945 
â_vœn
++;

2948 i‡(
fuŒ_èbÀ
)

2949 
tvlv_â_d©a
->
Êags
 |
BATADV_TT_FULL_TABLE
;

2951 
	`b©adv_dbg
(
BATADV_DBG_TT
, 
b©_¥iv
, "Sending TT_REQUESTÅo %pM [%c]\n",

2952 
d°_‹ig_node
->
‹ig
, 
fuŒ_èbÀ
 ? 'F' : '.');

2954 
	`b©adv_öc_cou¡î
(
b©_¥iv
, 
BATADV_CNT_TT_REQUEST_TX
);

2955 
	`b©adv_tvlv_uniˇ°_£nd
(
b©_¥iv
, 
¥im¨y_if
->
√t_dev
->
dev_addr
,

2956 
d°_‹ig_node
->
‹ig
, 
BATADV_TVLV_TT
, 1,

2957 
tvlv_â_d©a
, 
size
);

2958 
ªt
 = 
åue
;

2960 
out
:

2961 
	`b©adv_h¨dif_put
(
¥im¨y_if
);

2963 i‡(
ªt
 && 
â_ªq_node
) {

2964 
	`•ö_lock_bh
(&
b©_¥iv
->
â
.
ªq_li°_lock
);

2965 i‡(!
	`hli°_unhashed
(&
â_ªq_node
->
li°
)) {

2966 
	`hli°_dñ_öô
(&
â_ªq_node
->
li°
);

2967 
	`b©adv_â_ªq_node_put
(
â_ªq_node
);

2969 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
â
.
ªq_li°_lock
);

2972 
	`b©adv_â_ªq_node_put
(
â_ªq_node
);

2974 
	`k‰ì
(
tvlv_â_d©a
);

2975  
ªt
;

2976 
	}
}

2988 
boﬁ
 
	$b©adv_£nd_Ÿhî_â_ª•⁄£
(
b©adv_¥iv
 *
b©_¥iv
,

2989 
b©adv_tvlv_â_d©a
 *
â_d©a
,

2990 
u8
 *
ªq_§c
, u8 *
ªq_d°
)

2992 
b©adv_‹ig_node
 *
ªq_d°_‹ig_node
;

2993 
b©adv_‹ig_node
 *
ªs_d°_‹ig_node
 = 
NULL
;

2994 
b©adv_tvlv_â_ch™ge
 *
â_ch™ge
;

2995 
b©adv_tvlv_â_d©a
 *
tvlv_â_d©a
 = 
NULL
;

2996 
boﬁ
 
ªt
 = 
Ál£
, 
fuŒ_èbÀ
;

2997 
u8
 
‹ig_âvn
, 
ªq_âvn
;

2998 
u16
 
tvlv_Àn
;

2999 
s32
 
â_Àn
;

3001 
	`b©adv_dbg
(
BATADV_DBG_TT
, 
b©_¥iv
,

3003 
ªq_§c
, 
â_d©a
->
âvn
, 
ªq_d°
,

3004 ((
â_d©a
->
Êags
 & 
BATADV_TT_FULL_TABLE
) ? 'F' : '.'));

3007 
ªq_d°_‹ig_node
 = 
	`b©adv_‹ig_hash_föd
(
b©_¥iv
, 
ªq_d°
);

3008 i‡(!
ªq_d°_‹ig_node
)

3009 
out
;

3011 
ªs_d°_‹ig_node
 = 
	`b©adv_‹ig_hash_föd
(
b©_¥iv
, 
ªq_§c
);

3012 i‡(!
ªs_d°_‹ig_node
)

3013 
out
;

3015 
‹ig_âvn
 = (
u8
)
	`©omic_ªad
(&
ªq_d°_‹ig_node
->
œ°_âvn
);

3016 
ªq_âvn
 = 
â_d©a
->
âvn
;

3019 i‡(
‹ig_âvn
 !
ªq_âvn
 ||

3020 !
	`b©adv_â_globÆ_check_¸c
(
ªq_d°_‹ig_node
, 
â_d©a
->
vœn_d©a
,

3021 
	`¡ohs
(
â_d©a
->
num_vœn
)))

3022 
out
;

3025 i‡(
â_d©a
->
Êags
 & 
BATADV_TT_FULL_TABLE
 ||

3026 !
ªq_d°_‹ig_node
->
â_buff
)

3027 
fuŒ_èbÀ
 = 
åue
;

3029 
fuŒ_èbÀ
 = 
Ál£
;

3034 i‡(!
fuŒ_èbÀ
) {

3035 
	`•ö_lock_bh
(&
ªq_d°_‹ig_node
->
â_buff_lock
);

3036 
â_Àn
 = 
ªq_d°_‹ig_node
->
â_buff_Àn
;

3038 
tvlv_Àn
 = 
	`b©adv_â_¥ï¨e_tvlv_globÆ_d©a
(
ªq_d°_‹ig_node
,

3039 &
tvlv_â_d©a
,

3040 &
â_ch™ge
,

3041 &
â_Àn
);

3042 i‡(!
â_Àn
)

3043 
u∆ock
;

3046 
	`mem˝y
(
â_ch™ge
, 
ªq_d°_‹ig_node
->
â_buff
,

3047 
ªq_d°_‹ig_node
->
â_buff_Àn
);

3048 
	`•ö_u∆ock_bh
(&
ªq_d°_‹ig_node
->
â_buff_lock
);

3053 
â_Àn
 = -1;

3054 
tvlv_Àn
 = 
	`b©adv_â_¥ï¨e_tvlv_globÆ_d©a
(
ªq_d°_‹ig_node
,

3055 &
tvlv_â_d©a
,

3056 &
â_ch™ge
,

3057 &
â_Àn
);

3058 i‡(!
â_Àn
)

3059 
out
;

3062 
tvlv_Àn
 -
	`b©adv_â_tvlv_gíî©e
(
b©_¥iv
,

3063 
b©_¥iv
->
â
.
globÆ_hash
,

3064 
â_ch™ge
, 
â_Àn
,

3065 
b©adv_â_globÆ_vÆid
,

3066 
ªq_d°_‹ig_node
);

3070 
â_Àn
 = (
b©adv_uniˇ°_tvlv_∑ckë
Ë+ 
tvlv_Àn
;

3071 i‡(
â_Àn
 > 
	`©omic_ªad
(&
b©_¥iv
->
∑ckë_size_max
)) {

3072 
	`√t_øãlimôed_fun˘i⁄
(
b©adv_öfo
, 
b©_¥iv
->
mesh_iÁ˚
,

3074 
ªs_d°_‹ig_node
->
‹ig
);

3075 
out
;

3078 
tvlv_â_d©a
->
Êags
 = 
BATADV_TT_RESPONSE
;

3079 
tvlv_â_d©a
->
âvn
 = 
ªq_âvn
;

3081 i‡(
fuŒ_èbÀ
)

3082 
tvlv_â_d©a
->
Êags
 |
BATADV_TT_FULL_TABLE
;

3084 
	`b©adv_dbg
(
BATADV_DBG_TT
, 
b©_¥iv
,

3086 
ªs_d°_‹ig_node
->
‹ig
, 
ªq_d°_‹ig_node
->orig,

3087 
fuŒ_èbÀ
 ? 'F' : '.', 
ªq_âvn
);

3089 
	`b©adv_öc_cou¡î
(
b©_¥iv
, 
BATADV_CNT_TT_RESPONSE_TX
);

3091 
	`b©adv_tvlv_uniˇ°_£nd
(
b©_¥iv
, 
ªq_d°_‹ig_node
->
‹ig
,

3092 
ªq_§c
, 
BATADV_TVLV_TT
, 1, 
tvlv_â_d©a
,

3093 
tvlv_Àn
);

3095 
ªt
 = 
åue
;

3096 
out
;

3098 
u∆ock
:

3099 
	`•ö_u∆ock_bh
(&
ªq_d°_‹ig_node
->
â_buff_lock
);

3101 
out
:

3102 
	`b©adv_‹ig_node_put
(
ªs_d°_‹ig_node
);

3103 
	`b©adv_‹ig_node_put
(
ªq_d°_‹ig_node
);

3104 
	`k‰ì
(
tvlv_â_d©a
);

3105  
ªt
;

3106 
	}
}

3117 
boﬁ
 
	$b©adv_£nd_my_â_ª•⁄£
(
b©adv_¥iv
 *
b©_¥iv
,

3118 
b©adv_tvlv_â_d©a
 *
â_d©a
,

3119 
u8
 *
ªq_§c
)

3121 
b©adv_tvlv_â_d©a
 *
tvlv_â_d©a
 = 
NULL
;

3122 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
 = 
NULL
;

3123 
b©adv_tvlv_â_ch™ge
 *
â_ch™ge
;

3124 
b©adv_‹ig_node
 *
‹ig_node
;

3125 
u8
 
my_âvn
, 
ªq_âvn
;

3126 
u16
 
tvlv_Àn
;

3127 
boﬁ
 
fuŒ_èbÀ
;

3128 
s32
 
â_Àn
;

3130 
	`b©adv_dbg
(
BATADV_DBG_TT
, 
b©_¥iv
,

3132 
ªq_§c
, 
â_d©a
->
âvn
,

3133 ((
â_d©a
->
Êags
 & 
BATADV_TT_FULL_TABLE
) ? 'F' : '.'));

3135 
	`•ö_lock_bh
(&
b©_¥iv
->
â
.
commô_lock
);

3137 
my_âvn
 = (
u8
)
	`©omic_ªad
(&
b©_¥iv
->
â
.
vn
);

3138 
ªq_âvn
 = 
â_d©a
->
âvn
;

3140 
‹ig_node
 = 
	`b©adv_‹ig_hash_föd
(
b©_¥iv
, 
ªq_§c
);

3141 i‡(!
‹ig_node
)

3142 
out
;

3144 
¥im¨y_if
 = 
	`b©adv_¥im¨y_if_gë_£À˘ed
(
b©_¥iv
);

3145 i‡(!
¥im¨y_if
)

3146 
out
;

3151 i‡(
â_d©a
->
Êags
 & 
BATADV_TT_FULL_TABLE
 || 
my_âvn
 !
ªq_âvn
 ||

3152 !
b©_¥iv
->
â
.
œ°_ch™ge£t
)

3153 
fuŒ_èbÀ
 = 
åue
;

3155 
fuŒ_èbÀ
 = 
Ál£
;

3160 i‡(!
fuŒ_èbÀ
) {

3161 
	`•ö_lock_bh
(&
b©_¥iv
->
â
.
œ°_ch™ge£t_lock
);

3163 
â_Àn
 = 
b©_¥iv
->
â
.
œ°_ch™ge£t_Àn
;

3164 
tvlv_Àn
 = 
	`b©adv_â_¥ï¨e_tvlv_loˇl_d©a
(
b©_¥iv
,

3165 &
tvlv_â_d©a
,

3166 &
â_ch™ge
,

3167 &
â_Àn
);

3168 i‡(!
â_Àn
 || !
tvlv_Àn
)

3169 
u∆ock
;

3172 
	`mem˝y
(
â_ch™ge
, 
b©_¥iv
->
â
.
œ°_ch™ge£t
,

3173 
b©_¥iv
->
â
.
œ°_ch™ge£t_Àn
);

3174 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
â
.
œ°_ch™ge£t_lock
);

3176 
ªq_âvn
 = (
u8
)
	`©omic_ªad
(&
b©_¥iv
->
â
.
vn
);

3181 
â_Àn
 = -1;

3182 
tvlv_Àn
 = 
	`b©adv_â_¥ï¨e_tvlv_loˇl_d©a
(
b©_¥iv
,

3183 &
tvlv_â_d©a
,

3184 &
â_ch™ge
,

3185 &
â_Àn
);

3186 i‡(!
â_Àn
 || !
tvlv_Àn
)

3187 
out
;

3190 
tvlv_Àn
 -
	`b©adv_â_tvlv_gíî©e
(
b©_¥iv
,

3191 
b©_¥iv
->
â
.
loˇl_hash
,

3192 
â_ch™ge
, 
â_Àn
,

3193 
b©adv_â_loˇl_vÆid
,

3194 
NULL
);

3197 
tvlv_â_d©a
->
Êags
 = 
BATADV_TT_RESPONSE
;

3198 
tvlv_â_d©a
->
âvn
 = 
ªq_âvn
;

3200 i‡(
fuŒ_èbÀ
)

3201 
tvlv_â_d©a
->
Êags
 |
BATADV_TT_FULL_TABLE
;

3203 
	`b©adv_dbg
(
BATADV_DBG_TT
, 
b©_¥iv
,

3205 
‹ig_node
->
‹ig
, 
fuŒ_èbÀ
 ? 'F' : '.', 
ªq_âvn
);

3207 
	`b©adv_öc_cou¡î
(
b©_¥iv
, 
BATADV_CNT_TT_RESPONSE_TX
);

3209 
	`b©adv_tvlv_uniˇ°_£nd
(
b©_¥iv
, 
¥im¨y_if
->
√t_dev
->
dev_addr
,

3210 
ªq_§c
, 
BATADV_TVLV_TT
, 1, 
tvlv_â_d©a
,

3211 
tvlv_Àn
);

3213 
out
;

3215 
u∆ock
:

3216 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
â
.
œ°_ch™ge£t_lock
);

3217 
out
:

3218 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
â
.
commô_lock
);

3219 
	`b©adv_‹ig_node_put
(
‹ig_node
);

3220 
	`b©adv_h¨dif_put
(
¥im¨y_if
);

3221 
	`k‰ì
(
tvlv_â_d©a
);

3223  
åue
;

3224 
	}
}

3235 
boﬁ
 
	$b©adv_£nd_â_ª•⁄£
(
b©adv_¥iv
 *
b©_¥iv
,

3236 
b©adv_tvlv_â_d©a
 *
â_d©a
,

3237 
u8
 *
ªq_§c
, u8 *
ªq_d°
)

3239 i‡(
	`b©adv_is_my_mac
(
b©_¥iv
, 
ªq_d°
))

3240  
	`b©adv_£nd_my_â_ª•⁄£
(
b©_¥iv
, 
â_d©a
, 
ªq_§c
);

3241  
	`b©adv_£nd_Ÿhî_â_ª•⁄£
(
b©_¥iv
, 
â_d©a
, 
ªq_§c
,

3242 
ªq_d°
);

3243 
	}
}

3245 
	$_b©adv_â_upd©e_ch™ges
(
b©adv_¥iv
 *
b©_¥iv
,

3246 
b©adv_‹ig_node
 *
‹ig_node
,

3247 
b©adv_tvlv_â_ch™ge
 *
â_ch™ge
,

3248 
u16
 
â_num_ch™ges
, 
u8
 
âvn
)

3250 
i
;

3251 
rﬂms
;

3253 
i
 = 0; i < 
â_num_ch™ges
; i++) {

3254 i‡((
â_ch™ge
 + 
i
)->
Êags
 & 
BATADV_TT_CLIENT_DEL
) {

3255 
rﬂms
 = (
â_ch™ge
 + 
i
)->
Êags
 & 
BATADV_TT_CLIENT_ROAM
;

3256 
	`b©adv_â_globÆ_dñ
(
b©_¥iv
, 
‹ig_node
,

3257 (
â_ch™ge
 + 
i
)->
addr
,

3258 
	`¡ohs
((
â_ch™ge
 + 
i
)->
vid
),

3260 
rﬂms
);

3262 i‡(!
	`b©adv_â_globÆ_add
(
b©_¥iv
, 
‹ig_node
,

3263 (
â_ch™ge
 + 
i
)->
addr
,

3264 
	`¡ohs
((
â_ch™ge
 + 
i
)->
vid
),

3265 (
â_ch™ge
 + 
i
)->
Êags
, 
âvn
))

3275 
	`£t_bô
(
BATADV_ORIG_CAPA_HAS_TT
, &
‹ig_node
->
ˇ∑_öôülized
);

3276 
	}
}

3278 
	$b©adv_â_fûl_gèbÀ
(
b©adv_¥iv
 *
b©_¥iv
,

3279 
b©adv_tvlv_â_ch™ge
 *
â_ch™ge
,

3280 
u8
 
âvn
, u8 *
ª•_§c
,

3281 
u16
 
num_íåõs
)

3283 
b©adv_‹ig_node
 *
‹ig_node
;

3285 
‹ig_node
 = 
	`b©adv_‹ig_hash_föd
(
b©_¥iv
, 
ª•_§c
);

3286 i‡(!
‹ig_node
)

3287 
out
;

3290 
	`b©adv_â_globÆ_dñ_‹ig
(
b©_¥iv
, 
‹ig_node
, -1,

3293 
	`_b©adv_â_upd©e_ch™ges
(
b©_¥iv
, 
‹ig_node
, 
â_ch™ge
, 
num_íåõs
,

3294 
âvn
);

3296 
	`•ö_lock_bh
(&
‹ig_node
->
â_buff_lock
);

3297 
	`k‰ì
(
‹ig_node
->
â_buff
);

3298 
‹ig_node
->
â_buff_Àn
 = 0;

3299 
‹ig_node
->
â_buff
 = 
NULL
;

3300 
	`•ö_u∆ock_bh
(&
‹ig_node
->
â_buff_lock
);

3302 
	`©omic_£t
(&
‹ig_node
->
œ°_âvn
, 
âvn
);

3304 
out
:

3305 
	`b©adv_‹ig_node_put
(
‹ig_node
);

3306 
	}
}

3308 
	$b©adv_â_upd©e_ch™ges
(
b©adv_¥iv
 *
b©_¥iv
,

3309 
b©adv_‹ig_node
 *
‹ig_node
,

3310 
u16
 
â_num_ch™ges
, 
u8
 
âvn
,

3311 
b©adv_tvlv_â_ch™ge
 *
â_ch™ge
)

3313 
	`_b©adv_â_upd©e_ch™ges
(
b©_¥iv
, 
‹ig_node
, 
â_ch™ge
,

3314 
â_num_ch™ges
, 
âvn
);

3316 
	`b©adv_â_ßve_‹ig_buf„r
(
b©_¥iv
, 
‹ig_node
, 
â_ch™ge
,

3317 
	`b©adv_â_Àn
(
â_num_ch™ges
));

3318 
	`©omic_£t
(&
‹ig_node
->
œ°_âvn
, 
âvn
);

3319 
	}
}

3329 
boﬁ
 
	$b©adv_is_my_˛õ¡
(
b©adv_¥iv
 *
b©_¥iv
, c⁄° 
u8
 *
addr
,

3330 
vid
)

3332 
b©adv_â_loˇl_íåy
 *
â_loˇl_íåy
;

3333 
boﬁ
 
ªt
 = 
Ál£
;

3335 
â_loˇl_íåy
 = 
	`b©adv_â_loˇl_hash_föd
(
b©_¥iv
, 
addr
, 
vid
);

3336 i‡(!
â_loˇl_íåy
)

3337 
out
;

3341 i‡((
â_loˇl_íåy
->
comm⁄
.
Êags
 & 
BATADV_TT_CLIENT_PENDING
) ||

3342 (
â_loˇl_íåy
->
comm⁄
.
Êags
 & 
BATADV_TT_CLIENT_ROAM
))

3343 
out
;

3344 
ªt
 = 
åue
;

3345 
out
:

3346 
	`b©adv_â_loˇl_íåy_put
(
â_loˇl_íåy
);

3347  
ªt
;

3348 
	}
}

3357 
	$b©adv_h™dÀ_â_ª•⁄£
(
b©adv_¥iv
 *
b©_¥iv
,

3358 
b©adv_tvlv_â_d©a
 *
â_d©a
,

3359 
u8
 *
ª•_§c
, 
u16
 
num_íåõs
)

3361 
b©adv_â_ªq_node
 *
node
;

3362 
hli°_node
 *
ß„
;

3363 
b©adv_‹ig_node
 *
‹ig_node
 = 
NULL
;

3364 
b©adv_tvlv_â_ch™ge
 *
â_ch™ge
;

3365 
u8
 *
tvlv_±r
 = (u8 *)
â_d©a
;

3367 
	`b©adv_dbg
(
BATADV_DBG_TT
, 
b©_¥iv
,

3369 
ª•_§c
, 
â_d©a
->
âvn
, 
num_íåõs
,

3370 ((
â_d©a
->
Êags
 & 
BATADV_TT_FULL_TABLE
) ? 'F' : '.'));

3372 
‹ig_node
 = 
	`b©adv_‹ig_hash_föd
(
b©_¥iv
, 
ª•_§c
);

3373 i‡(!
‹ig_node
)

3374 
out
;

3376 
	`•ö_lock_bh
(&
‹ig_node
->
â_lock
);

3378 
tvlv_±r
 +
	`°ru˘_size
(
â_d©a
, 
vœn_d©a
, 
	`¡ohs
—t_d©a->
num_vœn
));

3380 
â_ch™ge
 = (
b©adv_tvlv_â_ch™ge
 *)
tvlv_±r
;

3381 i‡(
â_d©a
->
Êags
 & 
BATADV_TT_FULL_TABLE
) {

3382 
	`b©adv_â_fûl_gèbÀ
(
b©_¥iv
, 
â_ch™ge
, 
â_d©a
->
âvn
,

3383 
ª•_§c
, 
num_íåõs
);

3385 
	`b©adv_â_upd©e_ch™ges
(
b©_¥iv
, 
‹ig_node
, 
num_íåõs
,

3386 
â_d©a
->
âvn
, 
â_ch™ge
);

3390 
	`b©adv_â_globÆ_upd©e_¸c
(
b©_¥iv
, 
‹ig_node
);

3392 
	`•ö_u∆ock_bh
(&
‹ig_node
->
â_lock
);

3395 
	`•ö_lock_bh
(&
b©_¥iv
->
â
.
ªq_li°_lock
);

3396 
	`hli°_f‹_óch_íåy_ß„
(
node
, 
ß„
, &
b©_¥iv
->
â
.
ªq_li°
, 
li°
) {

3397 i‡(!
	`b©adv_com∑ª_ëh
(
node
->
addr
, 
ª•_§c
))

3399 
	`hli°_dñ_öô
(&
node
->
li°
);

3400 
	`b©adv_â_ªq_node_put
(
node
);

3403 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
â
.
ªq_li°_lock
);

3404 
out
:

3405 
	`b©adv_‹ig_node_put
(
‹ig_node
);

3406 
	}
}

3408 
	$b©adv_â_rﬂm_li°_‰ì
(
b©adv_¥iv
 *
b©_¥iv
)

3410 
b©adv_â_rﬂm_node
 *
node
, *
ß„
;

3412 
	`•ö_lock_bh
(&
b©_¥iv
->
â
.
rﬂm_li°_lock
);

3414 
	`li°_f‹_óch_íåy_ß„
(
node
, 
ß„
, &
b©_¥iv
->
â
.
rﬂm_li°
, 
li°
) {

3415 
	`li°_dñ
(&
node
->
li°
);

3416 
	`kmem_ˇche_‰ì
(
b©adv_â_rﬂm_ˇche
, 
node
);

3419 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
â
.
rﬂm_li°_lock
);

3420 
	}
}

3422 
	$b©adv_â_rﬂm_purge
(
b©adv_¥iv
 *
b©_¥iv
)

3424 
b©adv_â_rﬂm_node
 *
node
, *
ß„
;

3426 
	`•ö_lock_bh
(&
b©_¥iv
->
â
.
rﬂm_li°_lock
);

3427 
	`li°_f‹_óch_íåy_ß„
(
node
, 
ß„
, &
b©_¥iv
->
â
.
rﬂm_li°
, 
li°
) {

3428 i‡(!
	`b©adv_has_timed_out
(
node
->
fú°_time
,

3429 
BATADV_ROAMING_MAX_TIME
))

3432 
	`li°_dñ
(&
node
->
li°
);

3433 
	`kmem_ˇche_‰ì
(
b©adv_â_rﬂm_ˇche
, 
node
);

3435 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
â
.
rﬂm_li°_lock
);

3436 
	}
}

3449 
boﬁ
 
	$b©adv_â_check_rﬂm_cou¡
(
b©adv_¥iv
 *
b©_¥iv
, 
u8
 *
˛õ¡
)

3451 
b©adv_â_rﬂm_node
 *
â_rﬂm_node
;

3452 
boﬁ
 
ªt
 = 
Ál£
;

3454 
	`•ö_lock_bh
(&
b©_¥iv
->
â
.
rﬂm_li°_lock
);

3458 
	`li°_f‹_óch_íåy
(
â_rﬂm_node
, &
b©_¥iv
->
â
.
rﬂm_li°
, 
li°
) {

3459 i‡(!
	`b©adv_com∑ª_ëh
(
â_rﬂm_node
->
addr
, 
˛õ¡
))

3462 i‡(
	`b©adv_has_timed_out
(
â_rﬂm_node
->
fú°_time
,

3463 
BATADV_ROAMING_MAX_TIME
))

3466 i‡(!
	`b©adv_©omic_dec_nŸ_zîo
(&
â_rﬂm_node
->
cou¡î
))

3468 
u∆ock
;

3469 
ªt
 = 
åue
;

3473 i‡(!
ªt
) {

3474 
â_rﬂm_node
 = 
	`kmem_ˇche_Æloc
(
b©adv_â_rﬂm_ˇche
,

3475 
GFP_ATOMIC
);

3476 i‡(!
â_rﬂm_node
)

3477 
u∆ock
;

3479 
â_rﬂm_node
->
fú°_time
 = 
jiffõs
;

3480 
	`©omic_£t
(&
â_rﬂm_node
->
cou¡î
,

3481 
BATADV_ROAMING_MAX_COUNT
 - 1);

3482 
	`ëhî_addr_c›y
(
â_rﬂm_node
->
addr
, 
˛õ¡
);

3484 
	`li°_add
(&
â_rﬂm_node
->
li°
, &
b©_¥iv
->
â
.
rﬂm_li°
);

3485 
ªt
 = 
åue
;

3488 
u∆ock
:

3489 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
â
.
rﬂm_li°_lock
);

3490  
ªt
;

3491 
	}
}

3505 
	$b©adv_£nd_rﬂm_adv
(
b©adv_¥iv
 *
b©_¥iv
, 
u8
 *
˛õ¡
,

3506 
vid
,

3507 
b©adv_‹ig_node
 *
‹ig_node
)

3509 
b©adv_h¨d_iÁ˚
 *
¥im¨y_if
;

3510 
b©adv_tvlv_rﬂm_adv
 
tvlv_rﬂm
;

3512 
¥im¨y_if
 = 
	`b©adv_¥im¨y_if_gë_£À˘ed
(
b©_¥iv
);

3513 i‡(!
¥im¨y_if
)

3514 
out
;

3519 i‡(!
	`b©adv_â_check_rﬂm_cou¡
(
b©_¥iv
, 
˛õ¡
))

3520 
out
;

3522 
	`b©adv_dbg
(
BATADV_DBG_TT
, 
b©_¥iv
,

3524 
‹ig_node
->
‹ig
, 
˛õ¡
, 
	`b©adv_¥öt_vid
(
vid
));

3526 
	`b©adv_öc_cou¡î
(
b©_¥iv
, 
BATADV_CNT_TT_ROAM_ADV_TX
);

3528 
	`mem˝y
(
tvlv_rﬂm
.
˛õ¡
, client, (tvlv_roam.client));

3529 
tvlv_rﬂm
.
vid
 = 
	`ht⁄s
(vid);

3531 
	`b©adv_tvlv_uniˇ°_£nd
(
b©_¥iv
, 
¥im¨y_if
->
√t_dev
->
dev_addr
,

3532 
‹ig_node
->
‹ig
, 
BATADV_TVLV_ROAM
, 1,

3533 &
tvlv_rﬂm
, (tvlv_roam));

3535 
out
:

3536 
	`b©adv_h¨dif_put
(
¥im¨y_if
);

3537 
	}
}

3539 
	$b©adv_â_purge
(
w‹k_°ru˘
 *
w‹k
)

3541 
dñayed_w‹k
 *delayed_work;

3542 
b©adv_¥iv_â
 *
¥iv_â
;

3543 
b©adv_¥iv
 *
b©_¥iv
;

3545 
dñayed_w‹k
 = 
	`to_dñayed_w‹k
(
w‹k
);

3546 
¥iv_â
 = 
	`c⁄èöî_of
(
dñayed_w‹k
, 
b©adv_¥iv_â
, 
w‹k
);

3547 
b©_¥iv
 = 
	`c⁄èöî_of
(
¥iv_â
, 
b©adv_¥iv
, 
â
);

3549 
	`b©adv_â_loˇl_purge
(
b©_¥iv
, 
BATADV_TT_LOCAL_TIMEOUT
);

3550 
	`b©adv_â_globÆ_purge
(
b©_¥iv
);

3551 
	`b©adv_â_ªq_purge
(
b©_¥iv
);

3552 
	`b©adv_â_rﬂm_purge
(
b©_¥iv
);

3554 
	`queue_dñayed_w‹k
(
b©adv_evít_w‹kqueue
, &
b©_¥iv
->
â
.
w‹k
,

3555 
	`m£cs_to_jiffõs
(
BATADV_TT_WORK_PERIOD
));

3556 
	}
}

3562 
	$b©adv_â_‰ì
(
b©adv_¥iv
 *
b©_¥iv
)

3564 
	`b©adv_tvlv_h™dÀr_uƒegi°î
(
b©_¥iv
, 
BATADV_TVLV_ROAM
, 1);

3566 
	`b©adv_tvlv_c⁄èöî_uƒegi°î
(
b©_¥iv
, 
BATADV_TVLV_TT
, 1);

3567 
	`b©adv_tvlv_h™dÀr_uƒegi°î
(
b©_¥iv
, 
BATADV_TVLV_TT
, 1);

3569 
	`ˇn˚l_dñayed_w‹k_sync
(&
b©_¥iv
->
â
.
w‹k
);

3571 
	`b©adv_â_loˇl_èbÀ_‰ì
(
b©_¥iv
);

3572 
	`b©adv_â_globÆ_èbÀ_‰ì
(
b©_¥iv
);

3573 
	`b©adv_â_ªq_li°_‰ì
(
b©_¥iv
);

3574 
	`b©adv_â_ch™ges_li°_‰ì
(
b©_¥iv
);

3575 
	`b©adv_â_rﬂm_li°_‰ì
(
b©_¥iv
);

3577 
	`k‰ì
(
b©_¥iv
->
â
.
œ°_ch™ge£t
);

3578 
	}
}

3588 
	$b©adv_â_loˇl_£t_Êags
(
b©adv_¥iv
 *
b©_¥iv
, 
u16
 
Êags
,

3589 
boﬁ
 
íabÀ
, boﬁ 
cou¡
)

3591 
b©adv_hashèbÀ
 *
hash
 = 
b©_¥iv
->
â
.
loˇl_hash
;

3592 
b©adv_â_comm⁄_íåy
 *
â_comm⁄_íåy
;

3593 
hli°_hód
 *
hód
;

3594 
u32
 
i
;

3596 i‡(!
hash
)

3599 
i
 = 0; i < 
hash
->
size
; i++) {

3600 
hód
 = &
hash
->
èbÀ
[
i
];

3602 
	`rcu_ªad_lock
();

3603 
	`hli°_f‹_óch_íåy_rcu
(
â_comm⁄_íåy
,

3604 
hód
, 
hash_íåy
) {

3605 i‡(
íabÀ
) {

3606 i‡((
â_comm⁄_íåy
->
Êags
 & flags) == flags)

3608 
â_comm⁄_íåy
->
Êags
 |= flags;

3610 i‡(!(
â_comm⁄_íåy
->
Êags
 & flags))

3612 
â_comm⁄_íåy
->
Êags
 &= ~flags;

3615 i‡(!
cou¡
)

3618 
	`b©adv_â_loˇl_size_öc
(
b©_¥iv
,

3619 
â_comm⁄_íåy
->
vid
);

3621 
	`rcu_ªad_u∆ock
();

3623 
	}
}

3626 
	$b©adv_â_loˇl_purge_≥ndög_˛õ¡s
(
b©adv_¥iv
 *
b©_¥iv
)

3628 
b©adv_hashèbÀ
 *
hash
 = 
b©_¥iv
->
â
.
loˇl_hash
;

3629 
b©adv_â_comm⁄_íåy
 *
â_comm⁄
;

3630 
b©adv_â_loˇl_íåy
 *
â_loˇl
;

3631 
hli°_node
 *
node_tmp
;

3632 
hli°_hód
 *
hód
;

3633 
•ölock_t
 *
li°_lock
;

3634 
u32
 
i
;

3636 i‡(!
hash
)

3639 
i
 = 0; i < 
hash
->
size
; i++) {

3640 
hód
 = &
hash
->
èbÀ
[
i
];

3641 
li°_lock
 = &
hash
->
li°_locks
[
i
];

3643 
	`•ö_lock_bh
(
li°_lock
);

3644 
	`hli°_f‹_óch_íåy_ß„
(
â_comm⁄
, 
node_tmp
, 
hód
,

3645 
hash_íåy
) {

3646 i‡(!(
â_comm⁄
->
Êags
 & 
BATADV_TT_CLIENT_PENDING
))

3649 
	`b©adv_dbg
(
BATADV_DBG_TT
, 
b©_¥iv
,

3651 
â_comm⁄
->
addr
,

3652 
	`b©adv_¥öt_vid
(
â_comm⁄
->
vid
));

3654 
	`b©adv_â_loˇl_size_dec
(
b©_¥iv
, 
â_comm⁄
->
vid
);

3655 
	`hli°_dñ_rcu
(&
â_comm⁄
->
hash_íåy
);

3656 
â_loˇl
 = 
	`c⁄èöî_of
(
â_comm⁄
,

3657 
b©adv_â_loˇl_íåy
,

3658 
comm⁄
);

3660 
	`b©adv_â_loˇl_íåy_put
(
â_loˇl
);

3662 
	`•ö_u∆ock_bh
(
li°_lock
);

3664 
	}
}

3673 
	$b©adv_â_loˇl_commô_ch™ges_nﬁock
(
b©adv_¥iv
 *
b©_¥iv
)

3675 
	`lockdï_as£π_hñd
(&
b©_¥iv
->
â
.
commô_lock
);

3677 i‡(
	`READ_ONCE
(
b©_¥iv
->
â
.
loˇl_ch™ges
) == 0) {

3678 i‡(!
	`b©adv_©omic_dec_nŸ_zîo
(&
b©_¥iv
->
â
.
ogm_≠≥nd_˙t
))

3679 
	`b©adv_â_tvlv_c⁄èöî_upd©e
(
b©_¥iv
);

3683 
	`b©adv_â_loˇl_£t_Êags
(
b©_¥iv
, 
BATADV_TT_CLIENT_NEW
, 
Ál£
, 
åue
);

3685 
	`b©adv_â_loˇl_purge_≥ndög_˛õ¡s
(
b©_¥iv
);

3686 
	`b©adv_â_loˇl_upd©e_¸c
(
b©_¥iv
);

3689 
	`©omic_öc
(&
b©_¥iv
->
â
.
vn
);

3690 
	`b©adv_dbg
(
BATADV_DBG_TT
, 
b©_¥iv
,

3692 (
u8
)
	`©omic_ªad
(&
b©_¥iv
->
â
.
vn
));

3695 
	`©omic_£t
(&
b©_¥iv
->
â
.
ogm_≠≥nd_˙t
, 
BATADV_TT_OGM_APPEND_MAX
);

3696 
	`b©adv_â_tvlv_c⁄èöî_upd©e
(
b©_¥iv
);

3697 
	}
}

3704 
	$b©adv_â_loˇl_commô_ch™ges
(
b©adv_¥iv
 *
b©_¥iv
)

3706 
	`•ö_lock_bh
(&
b©_¥iv
->
â
.
commô_lock
);

3707 
	`b©adv_â_loˇl_commô_ch™ges_nﬁock
(
b©_¥iv
);

3708 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
â
.
commô_lock
);

3709 
	}
}

3720 
boﬁ
 
	$b©adv_is_≠_isﬁ©ed
(
b©adv_¥iv
 *
b©_¥iv
, 
u8
 *
§c
, u8 *
d°
,

3721 
vid
)

3723 
b©adv_â_loˇl_íåy
 *
â_loˇl_íåy
;

3724 
b©adv_â_globÆ_íåy
 *
â_globÆ_íåy
;

3725 
b©adv_meshif_vœn
 *
vœn
;

3726 
boﬁ
 
ªt
 = 
Ál£
;

3728 
vœn
 = 
	`b©adv_meshif_vœn_gë
(
b©_¥iv
, 
vid
);

3729 i‡(!
vœn
)

3730  
Ál£
;

3732 i‡(!
	`©omic_ªad
(&
vœn
->
≠_isﬁ©i⁄
))

3733 
vœn_put
;

3735 
â_loˇl_íåy
 = 
	`b©adv_â_loˇl_hash_föd
(
b©_¥iv
, 
d°
, 
vid
);

3736 i‡(!
â_loˇl_íåy
)

3737 
vœn_put
;

3739 
â_globÆ_íåy
 = 
	`b©adv_â_globÆ_hash_föd
(
b©_¥iv
, 
§c
, 
vid
);

3740 i‡(!
â_globÆ_íåy
)

3741 
loˇl_íåy_put
;

3743 i‡(
	`_b©adv_is_≠_isﬁ©ed
(
â_loˇl_íåy
, 
â_globÆ_íåy
))

3744 
ªt
 = 
åue
;

3746 
	`b©adv_â_globÆ_íåy_put
(
â_globÆ_íåy
);

3747 
loˇl_íåy_put
:

3748 
	`b©adv_â_loˇl_íåy_put
(
â_loˇl_íåy
);

3749 
vœn_put
:

3750 
	`b©adv_meshif_vœn_put
(
vœn
);

3751  
ªt
;

3752 
	}
}

3765 
	$b©adv_â_upd©e_‹ig
(
b©adv_¥iv
 *
b©_¥iv
,

3766 
b©adv_‹ig_node
 *
‹ig_node
,

3767 c⁄° *
â_buff
, 
u16
 
â_num_vœn
,

3768 
b©adv_tvlv_â_ch™ge
 *
â_ch™ge
,

3769 
u16
 
â_num_ch™ges
, 
u8
 
âvn
)

3771 
u8
 
‹ig_âvn
 = (u8)
	`©omic_ªad
(&
‹ig_node
->
œ°_âvn
);

3772 
b©adv_tvlv_â_vœn_d©a
 *
â_vœn
;

3773 
boﬁ
 
fuŒ_èbÀ
 = 
åue
;

3774 
boﬁ
 
has_â_öô
;

3776 
â_vœn
 = (
b©adv_tvlv_â_vœn_d©a
 *)
â_buff
;

3777 
has_â_öô
 = 
	`ã°_bô
(
BATADV_ORIG_CAPA_HAS_TT
,

3778 &
‹ig_node
->
ˇ∑_öôülized
);

3783 i‡((!
has_â_öô
 && 
âvn
 =1Ë||Åtv¿- 
‹ig_âvn
 == 1) {

3789 i‡(!
â_num_ch™ges
) {

3790 
fuŒ_èbÀ
 = 
Ál£
;

3791 
ªque°_èbÀ
;

3794 
	`•ö_lock_bh
(&
‹ig_node
->
â_lock
);

3796 
	`b©adv_â_upd©e_ch™ges
(
b©_¥iv
, 
‹ig_node
, 
â_num_ch™ges
,

3797 
âvn
, 
â_ch™ge
);

3803 
	`b©adv_â_globÆ_upd©e_¸c
(
b©_¥iv
, 
‹ig_node
);

3805 
	`•ö_u∆ock_bh
(&
‹ig_node
->
â_lock
);

3816 i‡(!
	`b©adv_â_globÆ_check_¸c
(
‹ig_node
, 
â_vœn
,

3817 
â_num_vœn
))

3818 
ªque°_èbÀ
;

3823 i‡(!
has_â_öô
 || 
âvn
 !
‹ig_âvn
 ||

3824 !
	`b©adv_â_globÆ_check_¸c
(
‹ig_node
, 
â_vœn
,

3825 
â_num_vœn
)) {

3826 
ªque°_èbÀ
:

3827 
	`b©adv_dbg
(
BATADV_DBG_TT
, 
b©_¥iv
,

3829 
‹ig_node
->
‹ig
, 
âvn
, 
‹ig_âvn
,

3830 
â_num_ch™ges
);

3831 
	`b©adv_£nd_â_ªque°
(
b©_¥iv
, 
‹ig_node
, 
âvn
,

3832 
â_vœn
, 
â_num_vœn
,

3833 
fuŒ_èbÀ
);

3837 
	}
}

3849 
boﬁ
 
	$b©adv_â_globÆ_˛õ¡_is_rﬂmög
(
b©adv_¥iv
 *
b©_¥iv
,

3850 
u8
 *
addr
, 
vid
)

3852 
b©adv_â_globÆ_íåy
 *
â_globÆ_íåy
;

3853 
boﬁ
 
ªt
 = 
Ál£
;

3855 
â_globÆ_íåy
 = 
	`b©adv_â_globÆ_hash_föd
(
b©_¥iv
, 
addr
, 
vid
);

3856 i‡(!
â_globÆ_íåy
)

3857 
out
;

3859 
ªt
 = 
â_globÆ_íåy
->
comm⁄
.
Êags
 & 
BATADV_TT_CLIENT_ROAM
;

3860 
	`b©adv_â_globÆ_íåy_put
(
â_globÆ_íåy
);

3861 
out
:

3862  
ªt
;

3863 
	}
}

3875 
boﬁ
 
	$b©adv_â_loˇl_˛õ¡_is_rﬂmög
(
b©adv_¥iv
 *
b©_¥iv
,

3876 
u8
 *
addr
, 
vid
)

3878 
b©adv_â_loˇl_íåy
 *
â_loˇl_íåy
;

3879 
boﬁ
 
ªt
 = 
Ál£
;

3881 
â_loˇl_íåy
 = 
	`b©adv_â_loˇl_hash_föd
(
b©_¥iv
, 
addr
, 
vid
);

3882 i‡(!
â_loˇl_íåy
)

3883 
out
;

3885 
ªt
 = 
â_loˇl_íåy
->
comm⁄
.
Êags
 & 
BATADV_TT_CLIENT_ROAM
;

3886 
	`b©adv_â_loˇl_íåy_put
(
â_loˇl_íåy
);

3887 
out
:

3888  
ªt
;

3889 
	}
}

3900 
boﬁ
 
	$b©adv_â_add_ãmp‹¨y_globÆ_íåy
(
b©adv_¥iv
 *
b©_¥iv
,

3901 
b©adv_‹ig_node
 *
‹ig_node
,

3902 c⁄° *
addr
,

3903 
vid
)

3908 i‡(
	`b©adv_bœ_is_lo›dëe˘_mac
(
addr
))

3909  
Ál£
;

3911 i‡(!
	`b©adv_â_globÆ_add
(
b©_¥iv
, 
‹ig_node
, 
addr
, 
vid
,

3912 
BATADV_TT_CLIENT_TEMP
,

3913 
	`©omic_ªad
(&
‹ig_node
->
œ°_âvn
)))

3914  
Ál£
;

3916 
	`b©adv_dbg
(
BATADV_DBG_TT
, 
b©_¥iv
,

3918 
addr
, 
	`b©adv_¥öt_vid
(
vid
), 
‹ig_node
->
‹ig
);

3920  
åue
;

3921 
	}
}

3931 
	$b©adv_â_loˇl_ªsize_to_mtu
(
√t_devi˚
 *
mesh_iÁ˚
)

3933 
b©adv_¥iv
 *
b©_¥iv
 = 
	`√tdev_¥iv
(
mesh_iÁ˚
);

3934 
∑ckë_size_max
 = 
	`©omic_ªad
(&
b©_¥iv
->packet_size_max);

3935 
èbÀ_size
, 
timeout
 = 
BATADV_TT_LOCAL_TIMEOUT
 / 2;

3936 
boﬁ
 
ªdu˚d
 = 
Ál£
;

3938 
	`•ö_lock_bh
(&
b©_¥iv
->
â
.
commô_lock
);

3940 
timeout
) {

3941 
èbÀ_size
 = 
	`b©adv_â_loˇl_èbÀ_å™smô_size
(
b©_¥iv
);

3942 i‡(
∑ckë_size_max
 >
èbÀ_size
)

3945 
	`b©adv_â_loˇl_purge
(
b©_¥iv
, 
timeout
);

3946 
	`b©adv_â_loˇl_purge_≥ndög_˛õ¡s
(
b©_¥iv
);

3948 
timeout
 /= 2;

3949 
ªdu˚d
 = 
åue
;

3950 
	`√t_øãlimôed_fun˘i⁄
(
b©adv_öfo
, 
mesh_iÁ˚
,

3952 
∑ckë_size_max
);

3958 i‡(
ªdu˚d
)

3959 
	`b©adv_â_loˇl_commô_ch™ges_nﬁock
(
b©_¥iv
);

3961 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
â
.
commô_lock
);

3962 
	}
}

3972 
	$b©adv_â_tvlv_ogm_h™dÀr_v1
(
b©adv_¥iv
 *
b©_¥iv
,

3973 
b©adv_‹ig_node
 *
‹ig
,

3974 
u8
 
Êags
, *
tvlv_vÆue
,

3975 
u16
 
tvlv_vÆue_Àn
)

3977 
b©adv_tvlv_â_ch™ge
 *
â_ch™ge
;

3978 
b©adv_tvlv_â_d©a
 *
â_d©a
;

3979 
u16
 
num_íåõs
, 
num_vœn
;

3980 
size_t
 
â_d©a_sz
;

3982 i‡(
tvlv_vÆue_Àn
 < (*
â_d©a
))

3985 
â_d©a
 = 
tvlv_vÆue
;

3986 
num_vœn
 = 
	`¡ohs
(
â_d©a
->num_vlan);

3988 
â_d©a_sz
 = 
	`°ru˘_size
(
â_d©a
, 
vœn_d©a
, 
num_vœn
);

3989 i‡(
tvlv_vÆue_Àn
 < 
â_d©a_sz
)

3992 
â_ch™ge
 = (
b©adv_tvlv_â_ch™ge
 *)((*)
â_d©a


3993 + 
â_d©a_sz
);

3994 
tvlv_vÆue_Àn
 -
â_d©a_sz
;

3996 
num_íåõs
 = 
	`b©adv_â_íåõs
(
tvlv_vÆue_Àn
);

3998 
	`b©adv_â_upd©e_‹ig
(
b©_¥iv
, 
‹ig
, 
â_d©a
->
vœn_d©a
, 
num_vœn
,

3999 
â_ch™ge
, 
num_íåõs
, 
â_d©a
->
âvn
);

4000 
	}
}

4014 
	$b©adv_â_tvlv_uniˇ°_h™dÀr_v1
(
b©adv_¥iv
 *
b©_¥iv
,

4015 
u8
 *
§c
, u8 *
d°
,

4016 *
tvlv_vÆue
,

4017 
u16
 
tvlv_vÆue_Àn
)

4019 
b©adv_tvlv_â_d©a
 *
â_d©a
;

4020 
u16
 
â_vœn_Àn
, 
â_num_íåõs
;

4021 
â_Êag
;

4022 
boﬁ
 
ªt
;

4024 i‡(
tvlv_vÆue_Àn
 < (*
â_d©a
))

4025  
NET_RX_SUCCESS
;

4027 
â_d©a
 = 
tvlv_vÆue
;

4028 
tvlv_vÆue_Àn
 -(*
â_d©a
);

4030 
â_vœn_Àn
 = 
	`Êex_¨øy_size
(
â_d©a
, 
vœn_d©a
,

4031 
	`¡ohs
(
â_d©a
->
num_vœn
));

4033 i‡(
tvlv_vÆue_Àn
 < 
â_vœn_Àn
)

4034  
NET_RX_SUCCESS
;

4036 
tvlv_vÆue_Àn
 -
â_vœn_Àn
;

4037 
â_num_íåõs
 = 
	`b©adv_â_íåõs
(
tvlv_vÆue_Àn
);

4039 
â_d©a
->
Êags
 & 
BATADV_TT_DATA_TYPE_MASK
) {

4040 
BATADV_TT_REQUEST
:

4041 
	`b©adv_öc_cou¡î
(
b©_¥iv
, 
BATADV_CNT_TT_REQUEST_RX
);

4046 
ªt
 = 
	`b©adv_£nd_â_ª•⁄£
(
b©_¥iv
, 
â_d©a
, 
§c
, 
d°
);

4047 i‡(!
ªt
) {

4048 i‡(
â_d©a
->
Êags
 & 
BATADV_TT_FULL_TABLE
)

4049 
â_Êag
 = 'F';

4051 
â_Êag
 = '.';

4053 
	`b©adv_dbg
(
BATADV_DBG_TT
, 
b©_¥iv
,

4055 
d°
, 
â_Êag
);

4057  
NET_RX_DROP
;

4060 
BATADV_TT_RESPONSE
:

4061 
	`b©adv_öc_cou¡î
(
b©_¥iv
, 
BATADV_CNT_TT_RESPONSE_RX
);

4063 i‡(
	`b©adv_is_my_mac
(
b©_¥iv
, 
d°
)) {

4064 
	`b©adv_h™dÀ_â_ª•⁄£
(
b©_¥iv
, 
â_d©a
,

4065 
§c
, 
â_num_íåõs
);

4066  
NET_RX_SUCCESS
;

4069 i‡(
â_d©a
->
Êags
 & 
BATADV_TT_FULL_TABLE
)

4070 
â_Êag
 = 'F';

4072 
â_Êag
 = '.';

4074 
	`b©adv_dbg
(
BATADV_DBG_TT
, 
b©_¥iv
,

4075 "Routög TT_RESPONSEÅÿ%pM [%c]\n", 
d°
, 
â_Êag
);

4078  
NET_RX_DROP
;

4081  
NET_RX_SUCCESS
;

4082 
	}
}

4096 
	$b©adv_rﬂm_tvlv_uniˇ°_h™dÀr_v1
(
b©adv_¥iv
 *
b©_¥iv
,

4097 
u8
 *
§c
, u8 *
d°
,

4098 *
tvlv_vÆue
,

4099 
u16
 
tvlv_vÆue_Àn
)

4101 
b©adv_tvlv_rﬂm_adv
 *
rﬂmög_adv
;

4102 
b©adv_‹ig_node
 *
‹ig_node
 = 
NULL
;

4108 i‡(!
	`b©adv_is_my_mac
(
b©_¥iv
, 
d°
))

4109  
NET_RX_DROP
;

4111 i‡(
tvlv_vÆue_Àn
 < (*
rﬂmög_adv
))

4112 
out
;

4114 
‹ig_node
 = 
	`b©adv_‹ig_hash_föd
(
b©_¥iv
, 
§c
);

4115 i‡(!
‹ig_node
)

4116 
out
;

4118 
	`b©adv_öc_cou¡î
(
b©_¥iv
, 
BATADV_CNT_TT_ROAM_ADV_RX
);

4119 
rﬂmög_adv
 = 
tvlv_vÆue
;

4121 
	`b©adv_dbg
(
BATADV_DBG_TT
, 
b©_¥iv
,

4123 
§c
, 
rﬂmög_adv
->
˛õ¡
);

4125 
	`b©adv_â_globÆ_add
(
b©_¥iv
, 
‹ig_node
, 
rﬂmög_adv
->
˛õ¡
,

4126 
	`¡ohs
(
rﬂmög_adv
->
vid
), 
BATADV_TT_CLIENT_ROAM
,

4127 
	`©omic_ªad
(&
‹ig_node
->
œ°_âvn
) + 1);

4129 
out
:

4130 
	`b©adv_‹ig_node_put
(
‹ig_node
);

4131  
NET_RX_SUCCESS
;

4132 
	}
}

4140 
	$b©adv_â_öô
(
b©adv_¥iv
 *
b©_¥iv
)

4142 
ªt
;

4145 
	`BUILD_BUG_ON
(!(
BATADV_TT_SYNC_MASK
 & 
BATADV_TT_REMOTE_MASK
));

4147 
ªt
 = 
	`b©adv_â_loˇl_öô
(
b©_¥iv
);

4148 i‡(
ªt
 < 0)

4149  
ªt
;

4151 
ªt
 = 
	`b©adv_â_globÆ_öô
(
b©_¥iv
);

4152 i‡(
ªt
 < 0) {

4153 
	`b©adv_â_loˇl_èbÀ_‰ì
(
b©_¥iv
);

4154  
ªt
;

4157 
	`b©adv_tvlv_h™dÀr_ªgi°î
(
b©_¥iv
, 
b©adv_â_tvlv_ogm_h™dÀr_v1
,

4158 
b©adv_â_tvlv_uniˇ°_h™dÀr_v1
, 
NULL
,

4159 
BATADV_TVLV_TT
, 1, 
BATADV_NO_FLAGS
);

4161 
	`b©adv_tvlv_h™dÀr_ªgi°î
(
b©_¥iv
, 
NULL
,

4162 
b©adv_rﬂm_tvlv_uniˇ°_h™dÀr_v1
, 
NULL
,

4163 
BATADV_TVLV_ROAM
, 1, 
BATADV_NO_FLAGS
);

4165 
	`INIT_DELAYED_WORK
(&
b©_¥iv
->
â
.
w‹k
, 
b©adv_â_purge
);

4166 
	`queue_dñayed_w‹k
(
b©adv_evít_w‹kqueue
, &
b©_¥iv
->
â
.
w‹k
,

4167 
	`m£cs_to_jiffõs
(
BATADV_TT_WORK_PERIOD
));

4170 
	}
}

4181 
boﬁ
 
	$b©adv_â_globÆ_is_isﬁ©ed
(
b©adv_¥iv
 *
b©_¥iv
,

4182 c⁄° 
u8
 *
addr
, 
vid
)

4184 
b©adv_â_globÆ_íåy
 *
â
;

4185 
boﬁ
 
ªt
;

4187 
â
 = 
	`b©adv_â_globÆ_hash_föd
(
b©_¥iv
, 
addr
, 
vid
);

4188 i‡(!
â
)

4189  
Ál£
;

4191 
ªt
 = 
â
->
comm⁄
.
Êags
 & 
BATADV_TT_CLIENT_ISOLA
;

4193 
	`b©adv_â_globÆ_íåy_put
(
â
);

4195  
ªt
;

4196 
	}
}

4203 
__öô
 
	$b©adv_â_ˇche_öô
()

4205 
size_t
 
é_size
 = (
b©adv_â_loˇl_íåy
);

4206 
size_t
 
tg_size
 = (
b©adv_â_globÆ_íåy
);

4207 
size_t
 
â_‹ig_size
 = (
b©adv_â_‹ig_li°_íåy
);

4208 
size_t
 
â_ch™ge_size
 = (
b©adv_â_ch™ge_node
);

4209 
size_t
 
â_ªq_size
 = (
b©adv_â_ªq_node
);

4210 
size_t
 
â_rﬂm_size
 = (
b©adv_â_rﬂm_node
);

4212 
b©adv_é_ˇche
 = 
	`kmem_ˇche_¸óã
("b©adv_é_ˇche", 
é_size
, 0,

4213 
SLAB_HWCACHE_ALIGN
, 
NULL
);

4214 i‡(!
b©adv_é_ˇche
)

4215  -
ENOMEM
;

4217 
b©adv_tg_ˇche
 = 
	`kmem_ˇche_¸óã
("b©adv_tg_ˇche", 
tg_size
, 0,

4218 
SLAB_HWCACHE_ALIGN
, 
NULL
);

4219 i‡(!
b©adv_tg_ˇche
)

4220 
îr_â_é_de°roy
;

4222 
b©adv_â_‹ig_ˇche
 = 
	`kmem_ˇche_¸óã
("batadv_tt_orig_cache",

4223 
â_‹ig_size
, 0,

4224 
SLAB_HWCACHE_ALIGN
, 
NULL
);

4225 i‡(!
b©adv_â_‹ig_ˇche
)

4226 
îr_â_tg_de°roy
;

4228 
b©adv_â_ch™ge_ˇche
 = 
	`kmem_ˇche_¸óã
("batadv_tt_change_cache",

4229 
â_ch™ge_size
, 0,

4230 
SLAB_HWCACHE_ALIGN
, 
NULL
);

4231 i‡(!
b©adv_â_ch™ge_ˇche
)

4232 
îr_â_‹ig_de°roy
;

4234 
b©adv_â_ªq_ˇche
 = 
	`kmem_ˇche_¸óã
("batadv_tt_req_cache",

4235 
â_ªq_size
, 0,

4236 
SLAB_HWCACHE_ALIGN
, 
NULL
);

4237 i‡(!
b©adv_â_ªq_ˇche
)

4238 
îr_â_ch™ge_de°roy
;

4240 
b©adv_â_rﬂm_ˇche
 = 
	`kmem_ˇche_¸óã
("batadv_tt_roam_cache",

4241 
â_rﬂm_size
, 0,

4242 
SLAB_HWCACHE_ALIGN
, 
NULL
);

4243 i‡(!
b©adv_â_rﬂm_ˇche
)

4244 
îr_â_ªq_de°roy
;

4248 
îr_â_ªq_de°roy
:

4249 
	`kmem_ˇche_de°roy
(
b©adv_â_ªq_ˇche
);

4250 
b©adv_â_ªq_ˇche
 = 
NULL
;

4251 
îr_â_ch™ge_de°roy
:

4252 
	`kmem_ˇche_de°roy
(
b©adv_â_ch™ge_ˇche
);

4253 
b©adv_â_ch™ge_ˇche
 = 
NULL
;

4254 
îr_â_‹ig_de°roy
:

4255 
	`kmem_ˇche_de°roy
(
b©adv_â_‹ig_ˇche
);

4256 
b©adv_â_‹ig_ˇche
 = 
NULL
;

4257 
îr_â_tg_de°roy
:

4258 
	`kmem_ˇche_de°roy
(
b©adv_tg_ˇche
);

4259 
b©adv_tg_ˇche
 = 
NULL
;

4260 
îr_â_é_de°roy
:

4261 
	`kmem_ˇche_de°roy
(
b©adv_é_ˇche
);

4262 
b©adv_é_ˇche
 = 
NULL
;

4264  -
ENOMEM
;

4265 
	}
}

4270 
	$b©adv_â_ˇche_de°roy
()

4272 
	`kmem_ˇche_de°roy
(
b©adv_é_ˇche
);

4273 
	`kmem_ˇche_de°roy
(
b©adv_tg_ˇche
);

4274 
	`kmem_ˇche_de°roy
(
b©adv_â_‹ig_ˇche
);

4275 
	`kmem_ˇche_de°roy
(
b©adv_â_ch™ge_ˇche
);

4276 
	`kmem_ˇche_de°roy
(
b©adv_â_ªq_ˇche
);

4277 
	`kmem_ˇche_de°roy
(
b©adv_â_rﬂm_ˇche
);

4278 
	}
}

	@net/batman-adv/translation-table.h

7 #i‚de‡
_NET_BATMAN_ADV_TRANSLATION_TABLE_H_


8 
	#_NET_BATMAN_ADV_TRANSLATION_TABLE_H_


	)

10 
	~"maö.h
"

12 
	~<löux/kªf.h
>

13 
	~<löux/√tdevi˚.h
>

14 
	~<löux/√éök.h
>

15 
	~<löux/skbuff.h
>

16 
	~<löux/ty≥s.h
>

18 
b©adv_â_öô
(
b©adv_¥iv
 *
b©_¥iv
);

19 
boﬁ
 
b©adv_â_loˇl_add
(
√t_devi˚
 *
mesh_iÁ˚
, c⁄° 
u8
 *
addr
,

20 
vid
, 
ifödex
, 
u32
 
m¨k
);

21 
u16
 
b©adv_â_loˇl_ªmove
(
b©adv_¥iv
 *
b©_¥iv
,

22 c⁄° 
u8
 *
addr
, 
vid
,

23 c⁄° *
mesßge
, 
boﬁ
 
rﬂmög
);

24 
b©adv_â_loˇl_dump
(
sk_buff
 *
msg
, 
√éök_ˇŒback
 *
cb
);

25 
b©adv_â_globÆ_dump
(
sk_buff
 *
msg
, 
√éök_ˇŒback
 *
cb
);

26 
b©adv_â_globÆ_dñ_‹ig
(
b©adv_¥iv
 *
b©_¥iv
,

27 
b©adv_‹ig_node
 *
‹ig_node
,

28 
s32
 
m©ch_vid
, c⁄° *
mesßge
);

29 
b©adv_â_globÆ_íåy
 *

30 
b©adv_â_globÆ_hash_föd
(
b©adv_¥iv
 *
b©_¥iv
, c⁄° 
u8
 *
addr
,

31 
vid
);

32 
b©adv_â_globÆ_íåy_ªÀa£
(
kªf
 *
ªf
);

33 
b©adv_â_globÆ_hash_cou¡
(
b©adv_¥iv
 *
b©_¥iv
,

34 c⁄° 
u8
 *
addr
, 
vid
);

35 
b©adv_‹ig_node
 *
b©adv_å™°abÀ_£¨ch
(
b©adv_¥iv
 *
b©_¥iv
,

36 c⁄° 
u8
 *
§c
, c⁄° u8 *
addr
,

37 
vid
);

38 
b©adv_â_‰ì
(
b©adv_¥iv
 *
b©_¥iv
);

39 
boﬁ
 
b©adv_is_my_˛õ¡
(
b©adv_¥iv
 *
b©_¥iv
, c⁄° 
u8
 *
addr
,

40 
vid
);

41 
boﬁ
 
b©adv_is_≠_isﬁ©ed
(
b©adv_¥iv
 *
b©_¥iv
, 
u8
 *
§c
, u8 *
d°
,

42 
vid
);

43 
b©adv_â_loˇl_commô_ch™ges
(
b©adv_¥iv
 *
b©_¥iv
);

44 
boﬁ
 
b©adv_â_globÆ_˛õ¡_is_rﬂmög
(
b©adv_¥iv
 *
b©_¥iv
,

45 
u8
 *
addr
, 
vid
);

46 
boﬁ
 
b©adv_â_loˇl_˛õ¡_is_rﬂmög
(
b©adv_¥iv
 *
b©_¥iv
,

47 
u8
 *
addr
, 
vid
);

48 
b©adv_â_loˇl_ªsize_to_mtu
(
√t_devi˚
 *
mesh_iÁ˚
);

49 
boﬁ
 
b©adv_â_add_ãmp‹¨y_globÆ_íåy
(
b©adv_¥iv
 *
b©_¥iv
,

50 
b©adv_‹ig_node
 *
‹ig_node
,

51 c⁄° *
addr
,

52 
vid
);

53 
boﬁ
 
b©adv_â_globÆ_is_isﬁ©ed
(
b©adv_¥iv
 *
b©_¥iv
,

54 c⁄° 
u8
 *
addr
, 
vid
);

56 
b©adv_â_ˇche_öô
();

57 
b©adv_â_ˇche_de°roy
();

64 
ölöe
 

65 
	$b©adv_â_globÆ_íåy_put
(
b©adv_â_globÆ_íåy
 *
â_globÆ_íåy
)

67 i‡(!
â_globÆ_íåy
)

70 
	`kªf_put
(&
â_globÆ_íåy
->
comm⁄
.
ªfcou¡
,

71 
b©adv_â_globÆ_íåy_ªÀa£
);

72 
	}
}

	@net/batman-adv/tvlv.c

7 
	~"maö.h
"

9 
	~<löux/byã‹dî/gíîic.h
>

10 
	~<löux/c⁄èöî_of.h
>

11 
	~<löux/ëhîdevi˚.h
>

12 
	~<löux/gÂ.h
>

13 
	~<löux/if_ëhî.h
>

14 
	~<löux/kªf.h
>

15 
	~<löux/li°.h
>

16 
	~<löux/lockdï.h
>

17 
	~<löux/√tdevi˚.h
>

18 
	~<löux/pkt_sched.h
>

19 
	~<löux/rculi°.h
>

20 
	~<löux/rcupd©e.h
>

21 
	~<löux/skbuff.h
>

22 
	~<löux/¶ab.h
>

23 
	~<löux/•ölock.h
>

24 
	~<löux/°ddef.h
>

25 
	~<löux/°rög.h
>

26 
	~<löux/ty≥s.h
>

27 
	~<u≠i/löux/b©adv_∑ckë.h
>

29 
	~"‹igö©‹.h
"

30 
	~"£nd.h
"

31 
	~"tvlv.h
"

38 
	$b©adv_tvlv_h™dÀr_ªÀa£
(
kªf
 *
ªf
)

40 
b©adv_tvlv_h™dÀr
 *
tvlv_h™dÀr
;

42 
tvlv_h™dÀr
 = 
	`c⁄èöî_of
(
ªf
, 
b©adv_tvlv_h™dÀr
, 
ªfcou¡
);

43 
	`k‰ì_rcu
(
tvlv_h™dÀr
, 
rcu
);

44 
	}
}

51 
	$b©adv_tvlv_h™dÀr_put
(
b©adv_tvlv_h™dÀr
 *
tvlv_h™dÀr
)

53 i‡(!
tvlv_h™dÀr
)

56 
	`kªf_put
(&
tvlv_h™dÀr
->
ªfcou¡
, 
b©adv_tvlv_h™dÀr_ªÀa£
);

57 
	}
}

68 
b©adv_tvlv_h™dÀr
 *

69 
	$b©adv_tvlv_h™dÀr_gë
(
b©adv_¥iv
 *
b©_¥iv
, 
u8
 
ty≥
, u8 
vîsi⁄
)

71 
b©adv_tvlv_h™dÀr
 *
tvlv_h™dÀr_tmp
, *
tvlv_h™dÀr
 = 
NULL
;

73 
	`rcu_ªad_lock
();

74 
	`hli°_f‹_óch_íåy_rcu
(
tvlv_h™dÀr_tmp
,

75 &
b©_¥iv
->
tvlv
.
h™dÀr_li°
, 
li°
) {

76 i‡(
tvlv_h™dÀr_tmp
->
ty≥
 !=Åype)

79 i‡(
tvlv_h™dÀr_tmp
->
vîsi⁄
 != version)

82 i‡(!
	`kªf_gë_u∆ess_zîo
(&
tvlv_h™dÀr_tmp
->
ªfcou¡
))

85 
tvlv_h™dÀr
 = 
tvlv_h™dÀr_tmp
;

88 
	`rcu_ªad_u∆ock
();

90  
tvlv_h™dÀr
;

91 
	}
}

97 
	$b©adv_tvlv_c⁄èöî_ªÀa£
(
kªf
 *
ªf
)

99 
b©adv_tvlv_c⁄èöî
 *
tvlv
;

101 
tvlv
 = 
	`c⁄èöî_of
(
ªf
, 
b©adv_tvlv_c⁄èöî
, 
ªfcou¡
);

102 
	`k‰ì
(
tvlv
);

103 
	}
}

110 
	$b©adv_tvlv_c⁄èöî_put
(
b©adv_tvlv_c⁄èöî
 *
tvlv
)

112 i‡(!
tvlv
)

115 
	`kªf_put
(&
tvlv
->
ªfcou¡
, 
b©adv_tvlv_c⁄èöî_ªÀa£
);

116 
	}
}

130 
b©adv_tvlv_c⁄èöî
 *

131 
	$b©adv_tvlv_c⁄èöî_gë
(
b©adv_¥iv
 *
b©_¥iv
, 
u8
 
ty≥
, u8 
vîsi⁄
)

133 
b©adv_tvlv_c⁄èöî
 *
tvlv_tmp
, *
tvlv
 = 
NULL
;

135 
	`lockdï_as£π_hñd
(&
b©_¥iv
->
tvlv
.
c⁄èöî_li°_lock
);

137 
	`hli°_f‹_óch_íåy
(
tvlv_tmp
, &
b©_¥iv
->
tvlv
.
c⁄èöî_li°
, 
li°
) {

138 i‡(
tvlv_tmp
->
tvlv_hdr
.
ty≥
 !=Åype)

141 i‡(
tvlv_tmp
->
tvlv_hdr
.
vîsi⁄
 != version)

144 
	`kªf_gë
(&
tvlv_tmp
->
ªfcou¡
);

145 
tvlv
 = 
tvlv_tmp
;

149  
tvlv
;

150 
	}
}

162 
u16
 
	$b©adv_tvlv_c⁄èöî_li°_size
(
b©adv_¥iv
 *
b©_¥iv
)

164 
b©adv_tvlv_c⁄èöî
 *
tvlv
;

165 
u16
 
tvlv_Àn
 = 0;

167 
	`lockdï_as£π_hñd
(&
b©_¥iv
->
tvlv
.
c⁄èöî_li°_lock
);

169 
	`hli°_f‹_óch_íåy
(
tvlv
, &
b©_¥iv
->tvlv.
c⁄èöî_li°
, 
li°
) {

170 
tvlv_Àn
 +(
b©adv_tvlv_hdr
);

171 
tvlv_Àn
 +
	`¡ohs
(
tvlv
->
tvlv_hdr
.
Àn
);

174  
tvlv_Àn
;

175 
	}
}

186 
	$b©adv_tvlv_c⁄èöî_ªmove
(
b©adv_¥iv
 *
b©_¥iv
,

187 
b©adv_tvlv_c⁄èöî
 *
tvlv
)

189 
	`lockdï_as£π_hñd
(&
b©_¥iv
->
tvlv
.
c⁄èöî_li°_lock
);

191 i‡(!
tvlv
)

194 
	`hli°_dñ
(&
tvlv
->
li°
);

197 
	`b©adv_tvlv_c⁄èöî_put
(
tvlv
);

198 
	`b©adv_tvlv_c⁄èöî_put
(
tvlv
);

199 
	}
}

208 
	$b©adv_tvlv_c⁄èöî_uƒegi°î
(
b©adv_¥iv
 *
b©_¥iv
,

209 
u8
 
ty≥
, u8 
vîsi⁄
)

211 
b©adv_tvlv_c⁄èöî
 *
tvlv
;

213 
	`•ö_lock_bh
(&
b©_¥iv
->
tvlv
.
c⁄èöî_li°_lock
);

214 
tvlv
 = 
	`b©adv_tvlv_c⁄èöî_gë
(
b©_¥iv
, 
ty≥
, 
vîsi⁄
);

215 
	`b©adv_tvlv_c⁄èöî_ªmove
(
b©_¥iv
, 
tvlv
);

216 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
tvlv
.
c⁄èöî_li°_lock
);

217 
	}
}

231 
	$b©adv_tvlv_c⁄èöî_ªgi°î
(
b©adv_¥iv
 *
b©_¥iv
,

232 
u8
 
ty≥
, u8 
vîsi⁄
,

233 *
tvlv_vÆue
, 
u16
 
tvlv_vÆue_Àn
)

235 
b©adv_tvlv_c⁄èöî
 *
tvlv_ﬁd
, *
tvlv_√w
;

237 i‡(!
tvlv_vÆue
)

238 
tvlv_vÆue_Àn
 = 0;

240 
tvlv_√w
 = 
	`kzÆloc
((*tvlv_√wË+ 
tvlv_vÆue_Àn
, 
GFP_ATOMIC
);

241 i‡(!
tvlv_√w
)

244 
tvlv_√w
->
tvlv_hdr
.
vîsi⁄
 = version;

245 
tvlv_√w
->
tvlv_hdr
.
ty≥
 =Åype;

246 
tvlv_√w
->
tvlv_hdr
.
Àn
 = 
	`ht⁄s
(
tvlv_vÆue_Àn
);

248 
	`mem˝y
(
tvlv_√w
 + 1, 
tvlv_vÆue
, 
	`¡ohs
—vlv_√w->
tvlv_hdr
.
Àn
));

249 
	`INIT_HLIST_NODE
(&
tvlv_√w
->
li°
);

250 
	`kªf_öô
(&
tvlv_√w
->
ªfcou¡
);

252 
	`•ö_lock_bh
(&
b©_¥iv
->
tvlv
.
c⁄èöî_li°_lock
);

253 
tvlv_ﬁd
 = 
	`b©adv_tvlv_c⁄èöî_gë
(
b©_¥iv
, 
ty≥
, 
vîsi⁄
);

254 
	`b©adv_tvlv_c⁄èöî_ªmove
(
b©_¥iv
, 
tvlv_ﬁd
);

256 
	`kªf_gë
(&
tvlv_√w
->
ªfcou¡
);

257 
	`hli°_add_hód
(&
tvlv_√w
->
li°
, &
b©_¥iv
->
tvlv
.
c⁄èöî_li°
);

258 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
tvlv
.
c⁄èöî_li°_lock
);

261 
	`b©adv_tvlv_c⁄èöî_put
(
tvlv_√w
);

262 
	}
}

276 
boﬁ
 
	$b©adv_tvlv_ªÆloc_∑ckë_buff
(**
∑ckë_buff
,

277 *
∑ckë_buff_Àn
,

278 
mö_∑ckë_Àn
,

279 
addôi⁄Æ_∑ckë_Àn
)

281 *
√w_buff
;

283 
√w_buff
 = 
	`kmÆloc
(
mö_∑ckë_Àn
 + 
addôi⁄Æ_∑ckë_Àn
, 
GFP_ATOMIC
);

286 i‡(!
√w_buff
)

287  
Ál£
;

289 
	`mem˝y
(
√w_buff
, *
∑ckë_buff
, 
mö_∑ckë_Àn
);

290 
	`k‰ì
(*
∑ckë_buff
);

291 *
∑ckë_buff
 = 
√w_buff
;

292 *
∑ckë_buff_Àn
 = 
mö_∑ckë_Àn
 + 
addôi⁄Æ_∑ckë_Àn
;

294  
åue
;

295 
	}
}

311 
u16
 
	$b©adv_tvlv_c⁄èöî_ogm_≠≥nd
(
b©adv_¥iv
 *
b©_¥iv
,

312 **
∑ckë_buff
,

313 *
∑ckë_buff_Àn
, 
∑ckë_mö_Àn
)

315 
b©adv_tvlv_c⁄èöî
 *
tvlv
;

316 
b©adv_tvlv_hdr
 *
tvlv_hdr
;

317 
u16
 
tvlv_vÆue_Àn
;

318 *
tvlv_vÆue
;

319 
boﬁ
 
ªt
;

321 
	`•ö_lock_bh
(&
b©_¥iv
->
tvlv
.
c⁄èöî_li°_lock
);

322 
tvlv_vÆue_Àn
 = 
	`b©adv_tvlv_c⁄èöî_li°_size
(
b©_¥iv
);

324 
ªt
 = 
	`b©adv_tvlv_ªÆloc_∑ckë_buff
(
∑ckë_buff
, 
∑ckë_buff_Àn
,

325 
∑ckë_mö_Àn
, 
tvlv_vÆue_Àn
);

327 i‡(!
ªt
)

328 
íd
;

330 i‡(!
tvlv_vÆue_Àn
)

331 
íd
;

333 
tvlv_vÆue
 = (*
∑ckë_buff
Ë+ 
∑ckë_mö_Àn
;

335 
	`hli°_f‹_óch_íåy
(
tvlv
, &
b©_¥iv
->tvlv.
c⁄èöî_li°
, 
li°
) {

336 
tvlv_hdr
 = 
tvlv_vÆue
;

337 
tvlv_hdr
->
ty≥
 = 
tvlv
->tvlv_hdr.type;

338 
tvlv_hdr
->
vîsi⁄
 = 
tvlv
->tvlv_hdr.version;

339 
tvlv_hdr
->
Àn
 = 
tvlv
->tvlv_hdr.len;

340 
tvlv_vÆue
 = 
tvlv_hdr
 + 1;

341 
	`mem˝y
(
tvlv_vÆue
, 
tvlv
 + 1, 
	`¡ohs
—vlv->
tvlv_hdr
.
Àn
));

342 
tvlv_vÆue
 = (
u8
 *Èvlv_vÆuê+ 
	`¡ohs
(
tvlv
->
tvlv_hdr
.
Àn
);

345 
íd
:

346 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
tvlv
.
c⁄èöî_li°_lock
);

347  
tvlv_vÆue_Àn
;

348 
	}
}

364 
	$b©adv_tvlv_ˇŒ_h™dÀr
(
b©adv_¥iv
 *
b©_¥iv
,

365 
b©adv_tvlv_h™dÀr
 *
tvlv_h™dÀr
,

366 
u8
 
∑ckë_ty≥
,

367 
b©adv_‹ig_node
 *
‹ig_node
,

368 
sk_buff
 *
skb
, *
tvlv_vÆue
,

369 
u16
 
tvlv_vÆue_Àn
)

371 
tvlv_off£t
;

372 
u8
 *
§c
, *
d°
;

374 i‡(!
tvlv_h™dÀr
)

375  
NET_RX_SUCCESS
;

377 
∑ckë_ty≥
) {

378 
BATADV_IV_OGM
:

379 
BATADV_OGM2
:

380 i‡(!
tvlv_h™dÀr
->
ogm_h™dÀr
)

381  
NET_RX_SUCCESS
;

383 i‡(!
‹ig_node
)

384  
NET_RX_SUCCESS
;

386 
tvlv_h™dÀr
->
	`ogm_h™dÀr
(
b©_¥iv
, 
‹ig_node
,

387 
BATADV_NO_FLAGS
,

388 
tvlv_vÆue
, 
tvlv_vÆue_Àn
);

389 
tvlv_h™dÀr
->
Êags
 |
BATADV_TVLV_HANDLER_OGM_CALLED
;

391 
BATADV_UNICAST_TVLV
:

392 i‡(!
skb
)

393  
NET_RX_SUCCESS
;

395 i‡(!
tvlv_h™dÀr
->
uniˇ°_h™dÀr
)

396  
NET_RX_SUCCESS
;

398 
§c
 = ((
b©adv_uniˇ°_tvlv_∑ckë
 *)
skb
->
d©a
)->src;

399 
d°
 = ((
b©adv_uniˇ°_tvlv_∑ckë
 *)
skb
->
d©a
)->dst;

401  
tvlv_h™dÀr
->
	`uniˇ°_h™dÀr
(
b©_¥iv
, 
§c
,

402 
d°
, 
tvlv_vÆue
,

403 
tvlv_vÆue_Àn
);

404 
BATADV_MCAST
:

405 i‡(!
skb
)

406  
NET_RX_SUCCESS
;

408 i‡(!
tvlv_h™dÀr
->
mˇ°_h™dÀr
)

409  
NET_RX_SUCCESS
;

411 
tvlv_off£t
 = (*)
tvlv_vÆue
 - 
skb
->
d©a
;

412 
	`skb_£t_√tw‹k_hódî
(
skb
, 
tvlv_off£t
);

413 
	`skb_£t_å™•‹t_hódî
(
skb
, 
tvlv_off£t
 + 
tvlv_vÆue_Àn
);

415  
tvlv_h™dÀr
->
	`mˇ°_h™dÀr
(
b©_¥iv
, 
skb
);

418  
NET_RX_SUCCESS
;

419 
	}
}

434 
	$b©adv_tvlv_c⁄èöîs_¥o˚ss
(
b©adv_¥iv
 *
b©_¥iv
,

435 
u8
 
∑ckë_ty≥
,

436 
b©adv_‹ig_node
 *
‹ig_node
,

437 
sk_buff
 *
skb
, *
tvlv_vÆue
,

438 
u16
 
tvlv_vÆue_Àn
)

440 
b©adv_tvlv_h™dÀr
 *
tvlv_h™dÀr
;

441 
b©adv_tvlv_hdr
 *
tvlv_hdr
;

442 
u16
 
tvlv_vÆue_c⁄t_Àn
;

443 
u8
 
ci‚Ÿfound
 = 
BATADV_TVLV_HANDLER_OGM_CIFNOTFND
;

444 
ªt
 = 
NET_RX_SUCCESS
;

446 
tvlv_vÆue_Àn
 >(*
tvlv_hdr
)) {

447 
tvlv_hdr
 = 
tvlv_vÆue
;

448 
tvlv_vÆue_c⁄t_Àn
 = 
	`¡ohs
(
tvlv_hdr
->
Àn
);

449 
tvlv_vÆue
 = 
tvlv_hdr
 + 1;

450 
tvlv_vÆue_Àn
 -(*
tvlv_hdr
);

452 i‡(
tvlv_vÆue_c⁄t_Àn
 > 
tvlv_vÆue_Àn
)

455 
tvlv_h™dÀr
 = 
	`b©adv_tvlv_h™dÀr_gë
(
b©_¥iv
,

456 
tvlv_hdr
->
ty≥
,

457 
tvlv_hdr
->
vîsi⁄
);

459 
ªt
 |
	`b©adv_tvlv_ˇŒ_h™dÀr
(
b©_¥iv
, 
tvlv_h™dÀr
,

460 
∑ckë_ty≥
, 
‹ig_node
, 
skb
,

461 
tvlv_vÆue
,

462 
tvlv_vÆue_c⁄t_Àn
);

463 
	`b©adv_tvlv_h™dÀr_put
(
tvlv_h™dÀr
);

464 
tvlv_vÆue
 = (
u8
 *Èvlv_vÆuê+ 
tvlv_vÆue_c⁄t_Àn
;

465 
tvlv_vÆue_Àn
 -
tvlv_vÆue_c⁄t_Àn
;

468 i‡(
∑ckë_ty≥
 !
BATADV_IV_OGM
 &&

469 
∑ckë_ty≥
 !
BATADV_OGM2
)

470  
ªt
;

472 
	`rcu_ªad_lock
();

473 
	`hli°_f‹_óch_íåy_rcu
(
tvlv_h™dÀr
,

474 &
b©_¥iv
->
tvlv
.
h™dÀr_li°
, 
li°
) {

475 i‡(!
tvlv_h™dÀr
->
ogm_h™dÀr
)

478 i‡((
tvlv_h™dÀr
->
Êags
 & 
BATADV_TVLV_HANDLER_OGM_CIFNOTFND
) &&

479 !(
tvlv_h™dÀr
->
Êags
 & 
BATADV_TVLV_HANDLER_OGM_CALLED
))

480 
tvlv_h™dÀr
->
	`ogm_h™dÀr
(
b©_¥iv
, 
‹ig_node
,

481 
ci‚Ÿfound
, 
NULL
, 0);

483 
tvlv_h™dÀr
->
Êags
 &~
BATADV_TVLV_HANDLER_OGM_CALLED
;

485 
	`rcu_ªad_u∆ock
();

487  
NET_RX_SUCCESS
;

488 
	}
}

497 
	$b©adv_tvlv_ogm_ª˚ive
(
b©adv_¥iv
 *
b©_¥iv
,

498 
b©adv_ogm_∑ckë
 *batadv_ogm_packet,

499 
b©adv_‹ig_node
 *
‹ig_node
)

501 *
tvlv_vÆue
;

502 
u16
 
tvlv_vÆue_Àn
;

504 i‡(!
b©adv_ogm_∑ckë
)

507 
tvlv_vÆue_Àn
 = 
	`¡ohs
(
b©adv_ogm_∑ckë
->
tvlv_Àn
);

508 i‡(!
tvlv_vÆue_Àn
)

511 
tvlv_vÆue
 = 
b©adv_ogm_∑ckë
 + 1;

513 
	`b©adv_tvlv_c⁄èöîs_¥o˚ss
(
b©_¥iv
, 
BATADV_IV_OGM
, 
‹ig_node
, 
NULL
,

514 
tvlv_vÆue
, 
tvlv_vÆue_Àn
);

515 
	}
}

535 
	$b©adv_tvlv_h™dÀr_ªgi°î
(
b©adv_¥iv
 *
b©_¥iv
,

536 (*
›å
)(
b©adv_¥iv
 *
b©_¥iv
,

537 
b©adv_‹ig_node
 *
‹ig
,

538 
u8
 
Êags
,

539 *
tvlv_vÆue
,

540 
u16
 
tvlv_vÆue_Àn
),

541 (*
u±r
)(
b©adv_¥iv
 *
b©_¥iv
,

542 
u8
 *
§c
, u8 *
d°
,

543 *
tvlv_vÆue
,

544 
u16
 
tvlv_vÆue_Àn
),

545 (*
m±r
)(
b©adv_¥iv
 *
b©_¥iv
,

546 
sk_buff
 *
skb
),

547 
u8
 
ty≥
, u8 
vîsi⁄
, u8 
Êags
)

549 
b©adv_tvlv_h™dÀr
 *
tvlv_h™dÀr
;

551 
	`•ö_lock_bh
(&
b©_¥iv
->
tvlv
.
h™dÀr_li°_lock
);

553 
tvlv_h™dÀr
 = 
	`b©adv_tvlv_h™dÀr_gë
(
b©_¥iv
, 
ty≥
, 
vîsi⁄
);

554 i‡(
tvlv_h™dÀr
) {

555 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
tvlv
.
h™dÀr_li°_lock
);

556 
	`b©adv_tvlv_h™dÀr_put
(
tvlv_h™dÀr
);

560 
tvlv_h™dÀr
 = 
	`kzÆloc
((*tvlv_h™dÀr), 
GFP_ATOMIC
);

561 i‡(!
tvlv_h™dÀr
) {

562 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
tvlv
.
h™dÀr_li°_lock
);

566 
tvlv_h™dÀr
->
ogm_h™dÀr
 = 
›å
;

567 
tvlv_h™dÀr
->
uniˇ°_h™dÀr
 = 
u±r
;

568 
tvlv_h™dÀr
->
mˇ°_h™dÀr
 = 
m±r
;

569 
tvlv_h™dÀr
->
ty≥
 =Åype;

570 
tvlv_h™dÀr
->
vîsi⁄
 = version;

571 
tvlv_h™dÀr
->
Êags
 = flags;

572 
	`kªf_öô
(&
tvlv_h™dÀr
->
ªfcou¡
);

573 
	`INIT_HLIST_NODE
(&
tvlv_h™dÀr
->
li°
);

575 
	`kªf_gë
(&
tvlv_h™dÀr
->
ªfcou¡
);

576 
	`hli°_add_hód_rcu
(&
tvlv_h™dÀr
->
li°
, &
b©_¥iv
->
tvlv
.
h™dÀr_li°
);

577 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
tvlv
.
h™dÀr_li°_lock
);

580 
	`b©adv_tvlv_h™dÀr_put
(
tvlv_h™dÀr
);

581 
	}
}

590 
	$b©adv_tvlv_h™dÀr_uƒegi°î
(
b©adv_¥iv
 *
b©_¥iv
,

591 
u8
 
ty≥
, u8 
vîsi⁄
)

593 
b©adv_tvlv_h™dÀr
 *
tvlv_h™dÀr
;

595 
tvlv_h™dÀr
 = 
	`b©adv_tvlv_h™dÀr_gë
(
b©_¥iv
, 
ty≥
, 
vîsi⁄
);

596 i‡(!
tvlv_h™dÀr
)

599 
	`b©adv_tvlv_h™dÀr_put
(
tvlv_h™dÀr
);

600 
	`•ö_lock_bh
(&
b©_¥iv
->
tvlv
.
h™dÀr_li°_lock
);

601 
	`hli°_dñ_rcu
(&
tvlv_h™dÀr
->
li°
);

602 
	`•ö_u∆ock_bh
(&
b©_¥iv
->
tvlv
.
h™dÀr_li°_lock
);

603 
	`b©adv_tvlv_h™dÀr_put
(
tvlv_h™dÀr
);

604 
	}
}

617 
	$b©adv_tvlv_uniˇ°_£nd
(
b©adv_¥iv
 *
b©_¥iv
, c⁄° 
u8
 *
§c
,

618 c⁄° 
u8
 *
d°
, u8 
ty≥
, u8 
vîsi⁄
,

619 *
tvlv_vÆue
, 
u16
 
tvlv_vÆue_Àn
)

621 
b©adv_uniˇ°_tvlv_∑ckë
 *
uniˇ°_tvlv_∑ckë
;

622 
b©adv_tvlv_hdr
 *
tvlv_hdr
;

623 
b©adv_‹ig_node
 *
‹ig_node
;

624 
sk_buff
 *
skb
;

625 *
tvlv_buff
;

626 
tvlv_Àn
;

627 
ssize_t
 
hdr_Àn
 = (*
uniˇ°_tvlv_∑ckë
);

629 
‹ig_node
 = 
	`b©adv_‹ig_hash_föd
(
b©_¥iv
, 
d°
);

630 i‡(!
‹ig_node
)

633 
tvlv_Àn
 = (*
tvlv_hdr
Ë+ 
tvlv_vÆue_Àn
;

635 
skb
 = 
	`√tdev_Æloc_skb_ù_Æign
(
NULL
, 
ETH_HLEN
 + 
hdr_Àn
 + 
tvlv_Àn
);

636 i‡(!
skb
)

637 
out
;

639 
skb
->
¥i‹ôy
 = 
TC_PRIO_CONTROL
;

640 
	`skb_ª£rve
(
skb
, 
ETH_HLEN
);

641 
tvlv_buff
 = 
	`skb_put
(
skb
, (*
uniˇ°_tvlv_∑ckë
Ë+ 
tvlv_Àn
);

642 
uniˇ°_tvlv_∑ckë
 = (
b©adv_uniˇ°_tvlv_∑ckë
 *)
tvlv_buff
;

643 
uniˇ°_tvlv_∑ckë
->
∑ckë_ty≥
 = 
BATADV_UNICAST_TVLV
;

644 
uniˇ°_tvlv_∑ckë
->
vîsi⁄
 = 
BATADV_COMPAT_VERSION
;

645 
uniˇ°_tvlv_∑ckë
->
âl
 = 
BATADV_TTL
;

646 
uniˇ°_tvlv_∑ckë
->
ª£rved
 = 0;

647 
uniˇ°_tvlv_∑ckë
->
tvlv_Àn
 = 
	`ht⁄s
(tvlv_len);

648 
uniˇ°_tvlv_∑ckë
->
Æign
 = 0;

649 
	`ëhî_addr_c›y
(
uniˇ°_tvlv_∑ckë
->
§c
, src);

650 
	`ëhî_addr_c›y
(
uniˇ°_tvlv_∑ckë
->
d°
, dst);

652 
tvlv_buff
 = (*)(
uniˇ°_tvlv_∑ckë
 + 1);

653 
tvlv_hdr
 = (
b©adv_tvlv_hdr
 *)
tvlv_buff
;

654 
tvlv_hdr
->
vîsi⁄
 = version;

655 
tvlv_hdr
->
ty≥
 =Åype;

656 
tvlv_hdr
->
Àn
 = 
	`ht⁄s
(
tvlv_vÆue_Àn
);

657 
tvlv_buff
 +(*
tvlv_hdr
);

658 
	`mem˝y
(
tvlv_buff
, 
tvlv_vÆue
, 
tvlv_vÆue_Àn
);

660 
	`b©adv_£nd_skb_to_‹ig
(
skb
, 
‹ig_node
, 
NULL
);

661 
out
:

662 
	`b©adv_‹ig_node_put
(
‹ig_node
);

663 
	}
}

	@net/batman-adv/tvlv.h

7 #i‚de‡
_NET_BATMAN_ADV_TVLV_H_


8 
	#_NET_BATMAN_ADV_TVLV_H_


	)

10 
	~"maö.h
"

12 
	~<löux/skbuff.h
>

13 
	~<löux/ty≥s.h
>

14 
	~<u≠i/löux/b©adv_∑ckë.h
>

16 
b©adv_tvlv_c⁄èöî_ªgi°î
(
b©adv_¥iv
 *
b©_¥iv
,

17 
u8
 
ty≥
, u8 
vîsi⁄
,

18 *
tvlv_vÆue
, 
u16
 
tvlv_vÆue_Àn
);

19 
u16
 
b©adv_tvlv_c⁄èöî_ogm_≠≥nd
(
b©adv_¥iv
 *
b©_¥iv
,

20 **
∑ckë_buff
,

21 *
∑ckë_buff_Àn
, 
∑ckë_mö_Àn
);

22 
b©adv_tvlv_ogm_ª˚ive
(
b©adv_¥iv
 *
b©_¥iv
,

23 
b©adv_ogm_∑ckë
 *batadv_ogm_packet,

24 
b©adv_‹ig_node
 *
‹ig_node
);

25 
b©adv_tvlv_c⁄èöî_uƒegi°î
(
b©adv_¥iv
 *
b©_¥iv
,

26 
u8
 
ty≥
, u8 
vîsi⁄
);

28 
b©adv_tvlv_h™dÀr_ªgi°î
(
b©adv_¥iv
 *
b©_¥iv
,

29 (*
›å
)(
b©adv_¥iv
 *
b©_¥iv
,

30 
b©adv_‹ig_node
 *
‹ig
,

31 
u8
 
Êags
,

32 *
tvlv_vÆue
,

33 
u16
 
tvlv_vÆue_Àn
),

34 (*
u±r
)(
b©adv_¥iv
 *
b©_¥iv
,

35 
u8
 *
§c
, u8 *
d°
,

36 *
tvlv_vÆue
,

37 
u16
 
tvlv_vÆue_Àn
),

38 (*
m±r
)(
b©adv_¥iv
 *
b©_¥iv
,

39 
sk_buff
 *
skb
),

40 
u8
 
ty≥
, u8 
vîsi⁄
, u8 
Êags
);

41 
	`b©adv_tvlv_h™dÀr_uƒegi°î
(
b©adv_¥iv
 *
b©_¥iv
,

42 
u8
 
ty≥
, u8 
vîsi⁄
);

43 
	`b©adv_tvlv_c⁄èöîs_¥o˚ss
(
b©adv_¥iv
 *
b©_¥iv
,

44 
u8
 
∑ckë_ty≥
,

45 
b©adv_‹ig_node
 *
‹ig_node
,

46 
sk_buff
 *
skb
, *
tvlv_buff
,

47 
u16
 
tvlv_buff_Àn
);

48 
	`b©adv_tvlv_uniˇ°_£nd
(
b©adv_¥iv
 *
b©_¥iv
, c⁄° 
u8
 *
§c
,

49 c⁄° 
u8
 *
d°
, u8 
ty≥
, u8 
vîsi⁄
,

50 *
tvlv_vÆue
, 
u16
 
tvlv_vÆue_Àn
);

	@net/batman-adv/types.h

7 #i‚de‡
_NET_BATMAN_ADV_TYPES_H_


8 
	#_NET_BATMAN_ADV_TYPES_H_


	)

10 #i‚de‡
_NET_BATMAN_ADV_MAIN_H_


11 #îr‹ 
⁄ly
 "maö.h" 
ˇn
 
be
 
ö˛uded
 
dúe˘ly


14 
	~<löux/avîage.h
>

15 
	~<löux/bô›s.h
>

16 
	~<löux/compûî.h
>

17 
	~<löux/if.h
>

18 
	~<löux/if_ëhî.h
>

19 
	~<löux/kªf.h
>

20 
	~<löux/muãx.h
>

21 
	~<löux/√tdevi˚.h
>

22 
	~<löux/√éök.h
>

23 
	~<löux/sched.h
>

24 
	~<löux/skbuff.h
>

25 
	~<löux/•ölock.h
>

26 
	~<löux/timî.h
>

27 
	~<löux/ty≥s.h
>

28 
	~<löux/waô.h
>

29 
	~<löux/w‹kqueue.h
>

30 
	~<u≠i/löux/b©adv_∑ckë.h
>

31 
	~<u≠i/löux/b©m™_adv.h
>

33 #ifde‡
CONFIG_BATMAN_ADV_DAT


42 
u16
 
	tb©adv_d©_addr_t
;

49 
	eb©adv_dh˝_ªcùõ¡
 {

51 
	mBATADV_DHCP_NO
 = 0,

54 
	mBATADV_DHCP_TO_SERVER
,

57 
	mBATADV_DHCP_TO_CLIENT
,

64 
	#BATADV_TT_REMOTE_MASK
 0x00FF

	)

70 
	#BATADV_TT_SYNC_MASK
 0x00F0

	)

75 
	sb©adv_h¨d_iÁ˚_b©_iv
 {

77 *
	mogm_buff
;

80 
	mogm_buff_Àn
;

83 
©omic_t
 
	mogm_£qno
;

86 
muãx
 
	mogm_buff_muãx
;

92 
	eb©adv_v_h¨d_iÁ˚_Êags
 {

97 
	mBATADV_FULL_DUPLEX
 = 
BIT
(0),

104 
	mBATADV_WARNING_DEFAULT
 = 
BIT
(1),

110 
	sb©adv_h¨d_iÁ˚_b©_v
 {

112 
©omic_t
 
	mñp_öãrvÆ
;

115 
©omic_t
 
	mñp_£qno
;

118 
sk_buff
 *
	mñp_skb
;

121 
dñayed_w‹k
 
	mñp_wq
;

124 
dñayed_w‹k
 
	maggr_wq
;

127 
sk_buff_hód
 
	maggr_li°
;

130 
	maggr_Àn
;

136 
©omic_t
 
	mthroughput_ovîride
;

139 
u8
 
	mÊags
;

146 
	eb©adv_h¨d_iÁ˚_wifi_Êags
 {

148 
	mBATADV_HARDIF_WIFI_WEXT_DIRECT
 = 
BIT
(0),

151 
	mBATADV_HARDIF_WIFI_CFG80211_DIRECT
 = 
BIT
(1),

156 
	mBATADV_HARDIF_WIFI_WEXT_INDIRECT
 = 
BIT
(2),

162 
	mBATADV_HARDIF_WIFI_CFG80211_INDIRECT
 = 
BIT
(3),

168 
	sb©adv_h¨d_iÁ˚
 {

170 
li°_hód
 
	mli°
;

173 
	mif_°©us
;

178 
u8
 
	mnum_bˇ°s
;

184 
u32
 
	mwifi_Êags
;

187 
√t_devi˚
 *
	m√t_dev
;

190 
√tdevi˚_åackî
 
	mdev_åackî
;

193 
kªf
 
	mªfcou¡
;

199 
∑ckë_ty≥
 
	mb©m™_adv_±y≥
;

205 
√t_devi˚
 *
	mmesh_iÁ˚
;

208 
√tdevi˚_åackî
 
	mmeshif_dev_åackî
;

211 
rcu_hód
 
	mrcu
;

217 
©omic_t
 
	mh›_≥«…y
;

220 
b©adv_h¨d_iÁ˚_b©_iv
 
	mb©_iv
;

222 #ifde‡
CONFIG_BATMAN_ADV_BATMAN_V


224 
b©adv_h¨d_iÁ˚_b©_v
 
	mb©_v
;

230 
hli°_hód
 
	m√igh_li°
;

233 
•ölock_t
 
	m√igh_li°_lock
;

240 
	sb©adv_‹ig_iföfo_b©_iv
 {

245 
DECLARE_BITMAP
(
bˇ°_own
, 
BATADV_TQ_LOCAL_WINDOW_SIZE
);

248 
u8
 
	mbˇ°_own_sum
;

254 
	sb©adv_‹ig_iföfo
 {

256 
hli°_node
 
	mli°
;

259 
b©adv_h¨d_iÁ˚
 *
	mif_outgoög
;

262 
b©adv_√igh_node
 
__rcu
 *
	mrouãr
;

265 
u32
 
	mœ°_ªÆ_£qno
;

268 
u8
 
	mœ°_âl
;

271 
u32
 
	mœ°_£qno_f‹w¨ded
;

274 
	mb©m™_£qno_ª£t
;

277 
b©adv_‹ig_iföfo_b©_iv
 
	mb©_iv
;

280 
kªf
 
	mªfcou¡
;

283 
rcu_hód
 
	mrcu
;

289 
	sb©adv_‰ag_èbÀ_íåy
 {

291 
hli°_hód
 
	m‰agmít_li°
;

294 
•ölock_t
 
	mlock
;

297 
	mtime°amp
;

300 
u16
 
	m£qno
;

303 
u16
 
	msize
;

306 
u16
 
	mtŸÆ_size
;

312 
	sb©adv_‰ag_li°_íåy
 {

314 
hli°_node
 
	mli°
;

317 
sk_buff
 *
	mskb
;

320 
u8
 
	mno
;

326 
	sb©adv_vœn_â
 {

328 
u32
 
	m¸c
;

331 
©omic_t
 
	mnum_íåõs
;

337 
	sb©adv_‹ig_node_vœn
 {

339 
	mvid
;

342 
b©adv_vœn_â
 
	mâ
;

345 
hli°_node
 
	mli°
;

350 
kªf
 
	mªfcou¡
;

353 
rcu_hód
 
	mrcu
;

359 
	sb©adv_‹ig_b©_iv
 {

366 
•ölock_t
 
	mogm_˙t_lock
;

372 
	sb©adv_‹ig_node
 {

374 
u8
 
	m‹ig
[
ETH_ALEN
];

377 
hli°_hód
 
	miföfo_li°
;

382 
b©adv_‹ig_iföfo
 *
	mœ°_b⁄dög_ˇndid©e
;

384 #ifde‡
CONFIG_BATMAN_ADV_DAT


386 
b©adv_d©_addr_t
 
	md©_addr
;

390 
	mœ°_£í
;

395 
	mbˇ°_£qno_ª£t
;

397 #ifde‡
CONFIG_BATMAN_ADV_MCAST


401 
•ölock_t
 
	mmˇ°_h™dÀr_lock
;

404 
u8
 
	mmˇ°_Êags
;

410 
hli°_node
 
	mmˇ°_w™t_Æl_un¢o›abÀs_node
;

416 
hli°_node
 
	mmˇ°_w™t_Æl_ùv4_node
;

421 
hli°_node
 
	mmˇ°_w™t_Æl_ùv6_node
;

427 
hli°_node
 
	mmˇ°_w™t_Æl_πr4_node
;

432 
hli°_node
 
	mmˇ°_w™t_Æl_πr6_node
;

436 
	mˇ∑bûôõs
;

442 
	mˇ∑_öôülized
;

445 
©omic_t
 
	mœ°_âvn
;

448 *
	mâ_buff
;

454 
s16
 
	mâ_buff_Àn
;

457 
•ölock_t
 
	mâ_buff_lock
;

466 
•ölock_t
 
	mâ_lock
;

473 
DECLARE_BITMAP
(
bˇ°_bôs
, 
BATADV_TQ_LOCAL_WINDOW_SIZE
);

479 
u32
 
	mœ°_bˇ°_£qno
;

485 
hli°_hód
 
	m√igh_li°
;

491 
•ölock_t
 
	m√igh_li°_lock
;

494 
hli°_node
 
	mhash_íåy
;

497 
b©adv_¥iv
 *
	mb©_¥iv
;

500 
•ölock_t
 
	mbˇ°_£qno_lock
;

503 
kªf
 
	mªfcou¡
;

506 
rcu_hód
 
	mrcu
;

508 #ifde‡
CONFIG_BATMAN_ADV_NC


510 
li°_hód
 
	mö_codög_li°
;

513 
li°_hód
 
	mout_codög_li°
;

516 
•ölock_t
 
	mö_codög_li°_lock
;

519 
•ölock_t
 
	mout_codög_li°_lock
;

523 
b©adv_‰ag_èbÀ_íåy
 
	m‰agmíts
[
BATADV_FRAG_BUFFER_COUNT
];

529 
hli°_hód
 
	mvœn_li°
;

532 
•ölock_t
 
	mvœn_li°_lock
;

535 
b©adv_‹ig_b©_iv
 
	mb©_iv
;

541 
	eb©adv_‹ig_ˇ∑bûôõs
 {

546 
	mBATADV_ORIG_CAPA_HAS_DAT
,

549 
	mBATADV_ORIG_CAPA_HAS_NC
,

552 
	mBATADV_ORIG_CAPA_HAS_TT
,

558 
	mBATADV_ORIG_CAPA_HAS_MCAST
,

564 
	sb©adv_gw_node
 {

566 
hli°_node
 
	mli°
;

569 
b©adv_‹ig_node
 *
	m‹ig_node
;

572 
u32
 
	mb™dwidth_down
;

575 
u32
 
	mb™dwidth_up
;

578 
kªf
 
	mªfcou¡
;

581 
rcu_hód
 
	mrcu
;

584 
	$DECLARE_EWMA
(
throughput
, 10, 8)

590 
	sb©adv_h¨dif_√igh_node_b©_v
 {

592 
ewma_throughput
 
throughput
;

595 
u32
 
ñp_öãrvÆ
;

598 
u32
 
ñp_œã°_£qno
;

604 
œ°_uniˇ°_tx
;

610 
	sb©adv_h¨dif_√igh_node
 {

612 
hli°_node
 
li°
;

615 
u8
 
addr
[
ETH_ALEN
];

620 
u8
 
‹ig
[
ETH_ALEN
];

623 
b©adv_h¨d_iÁ˚
 *
if_öcomög
;

626 
œ°_£í
;

628 #ifde‡
CONFIG_BATMAN_ADV_BATMAN_V


630 
b©adv_h¨dif_√igh_node_b©_v
 
b©_v
;

634 
kªf
 
ªfcou¡
;

637 
rcu_hód
 
rcu
;

643 
	sb©adv_√igh_node
 {

645 
hli°_node
 
li°
;

648 
b©adv_‹ig_node
 *
‹ig_node
;

651 
u8
 
addr
[
ETH_ALEN
];

654 
hli°_hód
 
iföfo_li°
;

657 
•ölock_t
 
iföfo_lock
;

660 
b©adv_h¨d_iÁ˚
 *
if_öcomög
;

663 
œ°_£í
;

666 
b©adv_h¨dif_√igh_node
 *
h¨dif_√igh
;

669 
kªf
 
ªfcou¡
;

672 
rcu_hód
 
rcu
;

679 
	sb©adv_√igh_iföfo_b©_iv
 {

681 
u8
 
tq_ªcv
[
BATADV_TQ_GLOBAL_WINDOW_SIZE
];

684 
u8
 
tq_ödex
;

689 
u8
 
tq_avg
;

695 
	`DECLARE_BITMAP
(
ªÆ_bôs
, 
BATADV_TQ_LOCAL_WINDOW_SIZE
);

698 
u8
 
ªÆ_∑ckë_cou¡
;

705 
	sb©adv_√igh_iföfo_b©_v
 {

710 
u32
 
throughput
;

713 
u32
 
œ°_£qno
;

719 
	sb©adv_√igh_iföfo
 {

721 
hli°_node
 
li°
;

724 
b©adv_h¨d_iÁ˚
 *
if_outgoög
;

727 
b©adv_√igh_iföfo_b©_iv
 
b©_iv
;

729 #ifde‡
CONFIG_BATMAN_ADV_BATMAN_V


731 
b©adv_√igh_iföfo_b©_v
 
b©_v
;

735 
u8
 
œ°_âl
;

738 
kªf
 
ªfcou¡
;

741 
rcu_hód
 
rcu
;

744 #ifde‡
CONFIG_BATMAN_ADV_BLA


749 
	sb©adv_bˇ°_du∂i°_íåy
 {

751 
u8
 
‹ig
[
ETH_ALEN
];

754 
__be32
 
¸c
;

757 
íåytime
;

764 
	eb©adv_cou¡îs
 {

766 
BATADV_CNT_TX
,

769 
BATADV_CNT_TX_BYTES
,

775 
BATADV_CNT_TX_DROPPED
,

778 
BATADV_CNT_RX
,

781 
BATADV_CNT_RX_BYTES
,

784 
BATADV_CNT_FORWARD
,

789 
BATADV_CNT_FORWARD_BYTES
,

795 
BATADV_CNT_MGMT_TX
,

801 
BATADV_CNT_MGMT_TX_BYTES
,

806 
BATADV_CNT_MGMT_RX
,

812 
BATADV_CNT_MGMT_RX_BYTES
,

815 
BATADV_CNT_FRAG_TX
,

820 
BATADV_CNT_FRAG_TX_BYTES
,

823 
BATADV_CNT_FRAG_RX
,

828 
BATADV_CNT_FRAG_RX_BYTES
,

831 
BATADV_CNT_FRAG_FWD
,

836 
BATADV_CNT_FRAG_FWD_BYTES
,

841 
BATADV_CNT_TT_REQUEST_TX
,

844 
BATADV_CNT_TT_REQUEST_RX
,

850 
BATADV_CNT_TT_RESPONSE_TX
,

855 
BATADV_CNT_TT_RESPONSE_RX
,

861 
BATADV_CNT_TT_ROAM_ADV_TX
,

866 
BATADV_CNT_TT_ROAM_ADV_RX
,

868 #ifde‡
CONFIG_BATMAN_ADV_MCAST


873 
BATADV_CNT_MCAST_TX
,

879 
BATADV_CNT_MCAST_TX_BYTES
,

886 
BATADV_CNT_MCAST_TX_LOCAL
,

893 
BATADV_CNT_MCAST_TX_LOCAL_BYTES
,

898 
BATADV_CNT_MCAST_RX
,

904 
BATADV_CNT_MCAST_RX_BYTES
,

910 
BATADV_CNT_MCAST_RX_LOCAL
,

917 
BATADV_CNT_MCAST_RX_LOCAL_BYTES
,

923 
BATADV_CNT_MCAST_FWD
,

929 
BATADV_CNT_MCAST_FWD_BYTES
,

932 #ifde‡
CONFIG_BATMAN_ADV_DAT


936 
BATADV_CNT_DAT_GET_TX
,

939 
BATADV_CNT_DAT_GET_RX
,

944 
BATADV_CNT_DAT_PUT_TX
,

947 
BATADV_CNT_DAT_PUT_RX
,

953 
BATADV_CNT_DAT_CACHED_REPLY_TX
,

956 #ifde‡
CONFIG_BATMAN_ADV_NC


960 
BATADV_CNT_NC_CODE
,

966 
BATADV_CNT_NC_CODE_BYTES
,

972 
BATADV_CNT_NC_RECODE
,

978 
BATADV_CNT_NC_RECODE_BYTES
,

984 
BATADV_CNT_NC_BUFFER
,

989 
BATADV_CNT_NC_DECODE
,

995 
BATADV_CNT_NC_DECODE_BYTES
,

1001 
BATADV_CNT_NC_DECODE_FAILED
,

1007 
BATADV_CNT_NC_SNIFFED
,

1011 
BATADV_CNT_NUM
,

1017 
	sb©adv_¥iv_â
 {

1019 
©omic_t
 
vn
;

1025 
©omic_t
 
ogm_≠≥nd_˙t
;

1028 
size_t
 
loˇl_ch™ges
;

1033 
li°_hód
 
ch™ges_li°
;

1036 
b©adv_hashèbÀ
 *
loˇl_hash
;

1039 
b©adv_hashèbÀ
 *
globÆ_hash
;

1042 
hli°_hód
 
ªq_li°
;

1048 
li°_hód
 
rﬂm_li°
;

1051 
•ölock_t
 
ch™ges_li°_lock
;

1054 
•ölock_t
 
ªq_li°_lock
;

1057 
•ölock_t
 
rﬂm_li°_lock
;

1060 *
œ°_ch™ge£t
;

1066 
s16
 
œ°_ch™ge£t_Àn
;

1072 
•ölock_t
 
œ°_ch™ge£t_lock
;

1081 
•ölock_t
 
commô_lock
;

1084 
dñayed_w‹k
 
w‹k
;

1087 #ifde‡
CONFIG_BATMAN_ADV_BLA


1092 
	sb©adv_¥iv_bœ
 {

1094 
©omic_t
 
num_ªque°s
;

1099 
b©adv_hashèbÀ
 *
˛aim_hash
;

1104 
b©adv_hashèbÀ
 *
backb⁄e_hash
;

1107 
u8
 
lo›dëe˘_addr
[
ETH_ALEN
];

1112 
lo›dëe˘_œ°time
;

1118 
©omic_t
 
lo›dëe˘_√xt
;

1124 
b©adv_bˇ°_du∂i°_íåy
 
bˇ°_du∂i°
[
BATADV_DUPLIST_SIZE
];

1130 
bˇ°_du∂i°_cuº
;

1136 
•ölock_t
 
bˇ°_du∂i°_lock
;

1139 
b©adv_bœ_˛aim_d°
 
˛aim_de°
;

1142 
dñayed_w‹k
 
w‹k
;

1149 
	sb©adv_¥iv_gw
 {

1151 
hli°_hód
 
g©eway_li°
;

1154 
•ölock_t
 
li°_lock
;

1157 
b©adv_gw_node
 
__rcu
 *
cuº_gw
;

1160 
gíî©i⁄
;

1165 
©omic_t
 
mode
;

1168 
©omic_t
 
£l_˛ass
;

1174 
©omic_t
 
b™dwidth_down
;

1179 
©omic_t
 
b™dwidth_up
;

1182 
©omic_t
 
ª£À˘
;

1188 
	sb©adv_¥iv_tvlv
 {

1193 
hli°_hód
 
c⁄èöî_li°
;

1196 
hli°_hód
 
h™dÀr_li°
;

1199 
•ölock_t
 
c⁄èöî_li°_lock
;

1202 
•ölock_t
 
h™dÀr_li°_lock
;

1205 #ifde‡
CONFIG_BATMAN_ADV_DAT


1210 
	sb©adv_¥iv_d©
 {

1212 
b©adv_d©_addr_t
 
addr
;

1215 
b©adv_hashèbÀ
 *
hash
;

1218 
dñayed_w‹k
 
w‹k
;

1222 #ifde‡
CONFIG_BATMAN_ADV_MCAST


1226 
	sb©adv_mˇ°_quîõr_°©e
 {

1228 
exi°s
:1;

1234 
shadowög
:1;

1240 
	sb©adv_mˇ°_mœ_Êags
 {

1242 
b©adv_mˇ°_quîõr_°©e
 
quîõr_ùv4
;

1245 
b©adv_mˇ°_quîõr_°©e
 
quîõr_ùv6
;

1248 
íabÀd
:1;

1251 
bridged
:1;

1254 
u8
 
tvlv_Êags
;

1260 
	sb©adv_¥iv_mˇ°
 {

1265 
hli°_hód
 
mœ_li°
;

1271 
hli°_hód
 
w™t_Æl_un¢o›abÀs_li°
;

1277 
hli°_hód
 
w™t_Æl_ùv4_li°
;

1283 
hli°_hód
 
w™t_Æl_ùv6_li°
;

1289 
hli°_hód
 
w™t_Æl_πr4_li°
;

1295 
hli°_hód
 
w™t_Æl_πr6_li°
;

1300 
b©adv_mˇ°_mœ_Êags
 
mœ_Êags
;

1305 
•ölock_t
 
mœ_lock
;

1311 
©omic_t
 
num_w™t_Æl_un¢o›abÀs
;

1314 
©omic_t
 
num_w™t_Æl_ùv4
;

1317 
©omic_t
 
num_w™t_Æl_ùv6
;

1320 
©omic_t
 
num_w™t_Æl_πr4
;

1323 
©omic_t
 
num_w™t_Æl_πr6
;

1329 
©omic_t
 
num_no_mc_±y≥_ˇ∑
;

1335 
•ölock_t
 
w™t_li°s_lock
;

1338 
dñayed_w‹k
 
w‹k
;

1345 
	sb©adv_¥iv_nc
 {

1347 
dñayed_w‹k
 
w‹k
;

1352 
u8
 
mö_tq
;

1358 
u32
 
max_fwd_dñay
;

1363 
u32
 
max_buf„r_time
;

1368 
time°amp_fwd_Êush
;

1374 
time°amp_¢if„d_purge
;

1381 
b©adv_hashèbÀ
 *
codög_hash
;

1389 
b©adv_hashèbÀ
 *
decodög_hash
;

1399 
	sb©adv_ç_u«cked
 {

1401 
u32
 
£qno
;

1404 
u16
 
Àn
;

1407 
li°_hód
 
li°
;

1413 
	eb©adv_ç_mëî_rﬁe
 {

1415 
BATADV_TP_RECEIVER
,

1418 
BATADV_TP_SENDER


1424 
	sb©adv_ç_v¨s
 {

1426 
hli°_node
 
li°
;

1429 
timî_li°
 
timî
;

1432 
b©adv_¥iv
 *
b©_¥iv
;

1435 
°¨t_time
;

1438 
u8
 
Ÿhî_íd
[
ETH_ALEN
];

1441 
b©adv_ç_mëî_rﬁe
 
rﬁe
;

1444 
©omic_t
 
£ndög
;

1447 
b©adv_ç_mëî_ªas⁄
 
ªas⁄
;

1450 
dñayed_w‹k
 
föish_w‹k
;

1453 
u32
 
ã°_Àngth
;

1456 
u8
 
£ssi⁄
[2];

1459 
u8
 
icmp_uid
;

1464 
u16
 
dec_cwnd
;

1467 
u32
 
cwnd
;

1470 
•ölock_t
 
cwnd_lock
;

1476 
u32
 
ss_thªshﬁd
;

1479 
©omic_t
 
œ°_acked
;

1482 
u32
 
œ°_£¡
;

1485 
©omic64_t
 
tŸ_£¡
;

1488 
©omic_t
 
dup_acks
;

1491 
Á°_ªcovîy
:1;

1494 
u32
 
ªcovî
;

1497 
u32
 
πo
;

1500 
u32
 
§â
;

1503 
u32
 
πtv¨
;

1509 
waô_queue_hód_t
 
m‹e_byãs
;

1512 
u32
 
¥î™dom_off£t
;

1515 
•ölock_t
 
¥î™dom_lock
;

1520 
u32
 
œ°_ªcv
;

1523 
li°_hód
 
u«cked_li°
;

1526 
•ölock_t
 
u«cked_lock
;

1529 
œ°_ªcv_time
;

1532 
kªf
 
ªfcou¡
;

1535 
rcu_hód
 
rcu
;

1541 
	sb©adv_meshif_vœn
 {

1543 
b©adv_¥iv
 *
b©_¥iv
;

1546 
vid
;

1549 
©omic_t
 
≠_isﬁ©i⁄
;

1552 
b©adv_vœn_â
 
â
;

1555 
hli°_node
 
li°
;

1560 
kªf
 
ªfcou¡
;

1563 
rcu_hód
 
rcu
;

1569 
	sb©adv_¥iv_b©_v
 {

1571 *
ogm_buff
;

1574 
ogm_buff_Àn
;

1577 
©omic_t
 
ogm_£qno
;

1580 
muãx
 
ogm_buff_muãx
;

1583 
dñayed_w‹k
 
ogm_wq
;

1589 
	sb©adv_¥iv
 {

1594 
©omic_t
 
mesh_°©e
;

1597 
√t_devi˚
 *
mesh_iÁ˚
;

1603 
mtu_£t_by_u£r
;

1609 
u64
 
__≥r˝u
 *
b©_cou¡îs
;

1614 
©omic_t
 
aggªg©ed_ogms
;

1617 
©omic_t
 
b⁄dög
;

1623 
©omic_t
 
‰agmíèti⁄
;

1630 
©omic_t
 
∑ckë_size_max
;

1636 
©omic_t
 
‰ag_£qno
;

1638 #ifde‡
CONFIG_BATMAN_ADV_BLA


1643 
©omic_t
 
bridge_lo›_avoid™˚
;

1646 #ifde‡
CONFIG_BATMAN_ADV_DAT


1651 
©omic_t
 
di°ribuãd_¨p_èbÀ
;

1654 #ifde‡
CONFIG_BATMAN_ADV_MCAST


1659 
©omic_t
 
mu…iˇ°_mode
;

1665 
©omic_t
 
mu…iˇ°_Ánout
;

1669 
©omic_t
 
‹ig_öãrvÆ
;

1675 
©omic_t
 
h›_≥«…y
;

1677 #ifde‡
CONFIG_BATMAN_ADV_DEBUG


1679 
©omic_t
 
log_Àvñ
;

1686 
u32
 
isﬁ©i⁄_m¨k
;

1692 
u32
 
isﬁ©i⁄_m¨k_mask
;

1695 
©omic_t
 
bˇ°_£qno
;

1701 
©omic_t
 
bˇ°_queue_À·
;

1704 
©omic_t
 
b©m™_queue_À·
;

1707 
hli°_hód
 
f‹w_b©_li°
;

1713 
hli°_hód
 
f‹w_bˇ°_li°
;

1716 
hli°_hód
 
ç_li°
;

1719 
b©adv_hashèbÀ
 *
‹ig_hash
;

1722 
•ölock_t
 
f‹w_b©_li°_lock
;

1725 
•ölock_t
 
f‹w_bˇ°_li°_lock
;

1728 
•ölock_t
 
ç_li°_lock
;

1731 
©omic_t
 
ç_num
;

1734 
dñayed_w‹k
 
‹ig_w‹k
;

1740 
b©adv_h¨d_iÁ˚
 
__rcu
 *
¥im¨y_if
;

1743 
b©adv_Ægo_›s
 *
Ægo_›s
;

1749 
hli°_hód
 
meshif_vœn_li°
;

1752 
•ölock_t
 
meshif_vœn_li°_lock
;

1754 #ifde‡
CONFIG_BATMAN_ADV_BLA


1756 
b©adv_¥iv_bœ
 
bœ
;

1760 
b©adv_¥iv_gw
 
gw
;

1763 
b©adv_¥iv_â
 
â
;

1766 
b©adv_¥iv_tvlv
 
tvlv
;

1768 #ifde‡
CONFIG_BATMAN_ADV_DAT


1770 
b©adv_¥iv_d©
 
d©
;

1773 #ifde‡
CONFIG_BATMAN_ADV_MCAST


1775 
b©adv_¥iv_mˇ°
 
mˇ°
;

1778 #ifde‡
CONFIG_BATMAN_ADV_NC


1782 
©omic_t
 
√tw‹k_codög
;

1785 
b©adv_¥iv_nc
 
nc
;

1788 #ifde‡
CONFIG_BATMAN_ADV_BATMAN_V


1790 
b©adv_¥iv_b©_v
 
b©_v
;

1794 #ifde‡
CONFIG_BATMAN_ADV_BLA


1799 
	sb©adv_bœ_backb⁄e_gw
 {

1804 
u8
 
‹ig
[
ETH_ALEN
];

1807 
vid
;

1810 
hli°_node
 
hash_íåy
;

1813 
b©adv_¥iv
 *
b©_¥iv
;

1816 
œ°time
;

1823 
©omic_t
 
waô_≥riods
;

1830 
©omic_t
 
ªque°_£¡
;

1833 
u16
 
¸c
;

1836 
•ölock_t
 
¸c_lock
;

1839 
w‹k_°ru˘
 
ªp‹t_w‹k
;

1842 
kªf
 
ªfcou¡
;

1845 
rcu_hód
 
rcu
;

1851 
	sb©adv_bœ_˛aim
 {

1853 
u8
 
addr
[
ETH_ALEN
];

1856 
vid
;

1859 
b©adv_bœ_backb⁄e_gw
 *
backb⁄e_gw
;

1862 
•ölock_t
 
backb⁄e_lock
;

1865 
œ°time
;

1868 
hli°_node
 
hash_íåy
;

1871 
rcu_hód
 
rcu
;

1874 
kªf
 
ªfcou¡
;

1881 
	sb©adv_â_comm⁄_íåy
 {

1883 
u8
 
addr
[
ETH_ALEN
];

1886 
vid
;

1892 
hli°_node
 
hash_íåy
;

1895 
u16
 
Êags
;

1898 
added_©
;

1901 
kªf
 
ªfcou¡
;

1904 
rcu_hód
 
rcu
;

1910 
	sb©adv_â_loˇl_íåy
 {

1912 
b©adv_â_comm⁄_íåy
 
comm⁄
;

1915 
œ°_£í
;

1918 
b©adv_meshif_vœn
 *
vœn
;

1924 
	sb©adv_â_globÆ_íåy
 {

1926 
b©adv_â_comm⁄_íåy
 
comm⁄
;

1929 
hli°_hód
 
‹ig_li°
;

1932 
©omic_t
 
‹ig_li°_cou¡
;

1935 
•ölock_t
 
li°_lock
;

1938 
rﬂm_©
;

1944 
	sb©adv_â_‹ig_li°_íåy
 {

1946 
b©adv_‹ig_node
 *
‹ig_node
;

1952 
u8
 
âvn
;

1955 
u8
 
Êags
;

1958 
hli°_node
 
li°
;

1961 
kªf
 
ªfcou¡
;

1964 
rcu_hód
 
rcu
;

1970 
	sb©adv_â_ch™ge_node
 {

1972 
li°_hód
 
li°
;

1975 
b©adv_tvlv_â_ch™ge
 
ch™ge
;

1981 
	sb©adv_â_ªq_node
 {

1985 
u8
 
addr
[
ETH_ALEN
];

1988 
issued_©
;

1991 
kªf
 
ªfcou¡
;

1994 
hli°_node
 
li°
;

2000 
	sb©adv_â_rﬂm_node
 {

2002 
u8
 
addr
[
ETH_ALEN
];

2008 
©omic_t
 
cou¡î
;

2013 
fú°_time
;

2016 
li°_hód
 
li°
;

2022 
	sb©adv_nc_node
 {

2024 
li°_hód
 
li°
;

2027 
u8
 
addr
[
ETH_ALEN
];

2030 
kªf
 
ªfcou¡
;

2033 
rcu_hód
 
rcu
;

2036 
b©adv_‹ig_node
 *
‹ig_node
;

2039 
œ°_£í
;

2045 
	sb©adv_nc_∑th
 {

2047 
hli°_node
 
hash_íåy
;

2050 
rcu_hód
 
rcu
;

2053 
kªf
 
ªfcou¡
;

2056 
li°_hód
 
∑ckë_li°
;

2059 
•ölock_t
 
∑ckë_li°_lock
;

2062 
u8
 
√xt_h›
[
ETH_ALEN
];

2065 
u8
 
¥ev_h›
[
ETH_ALEN
];

2068 
œ°_vÆid
;

2075 
	sb©adv_nc_∑ckë
 {

2077 
li°_hód
 
li°
;

2080 
__be32
 
∑ckë_id
;

2086 
time°amp
;

2089 
b©adv_√igh_node
 *
√igh_node
;

2092 
sk_buff
 *
skb
;

2095 
b©adv_nc_∑th
 *
nc_∑th
;

2102 
	sb©adv_skb_cb
 {

2107 
decoded
:1;

2110 
num_bˇ°s
;

2116 
	sb©adv_f‹w_∑ckë
 {

2121 
hli°_node
 
li°
;

2124 
hli°_node
 
˛ónup_li°
;

2127 
£nd_time
;

2133 
u8
 
own
;

2136 
sk_buff
 *
skb
;

2139 
u16
 
∑ckë_Àn
;

2142 
	`DECLARE_BITMAP
(
dúe˘_lök_Êags
, 
BATADV_MAX_AGGREGATION_PACKETS
);

2145 
u8
 
num_∑ckës
;

2148 
dñayed_w‹k
 delayed_work;

2154 
b©adv_h¨d_iÁ˚
 *
if_öcomög
;

2160 
b©adv_h¨d_iÁ˚
 *
if_outgoög
;

2163 
©omic_t
 *
queue_À·
;

2169 
	sb©adv_Ægo_iÁ˚_›s
 {

2174 (*
a˘iv©e
)(
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
);

2177 (*
íabÀ
)(
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
);

2180 (*
íabÀd
)(
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
);

2183 (*
dißbÀ
)(
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
);

2189 (*
upd©e_mac
)(
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
);

2192 (*
¥im¨y_£t
)(
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
);

2198 
	sb©adv_Ægo_√igh_›s
 {

2200 (*
h¨dif_öô
)(
b©adv_h¨dif_√igh_node
 *
√igh
);

2206 (*
cmp
)(
b©adv_√igh_node
 *
√igh1
,

2207 
b©adv_h¨d_iÁ˚
 *
if_outgoög1
,

2208 
b©adv_√igh_node
 *
√igh2
,

2209 
b©adv_h¨d_iÁ˚
 *
if_outgoög2
);

2216 
	`boﬁ
 (*
is_simû¨_‹_bëãr
)(
b©adv_√igh_node
 *
√igh1
,

2217 
b©adv_h¨d_iÁ˚
 *
if_outgoög1
,

2218 
b©adv_√igh_node
 *
√igh2
,

2219 
b©adv_h¨d_iÁ˚
 *
if_outgoög2
);

2222 (*
dump
)(
sk_buff
 *
msg
, 
√éök_ˇŒback
 *
cb
,

2223 
b©adv_¥iv
 *
¥iv
,

2224 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
);

2230 
	sb©adv_Ægo_‹ig_›s
 {

2232 (*
dump
)(
sk_buff
 *
msg
, 
√éök_ˇŒback
 *
cb
,

2233 
b©adv_¥iv
 *
¥iv
,

2234 
b©adv_h¨d_iÁ˚
 *
h¨d_iÁ˚
);

2240 
	sb©adv_Ægo_gw_›s
 {

2242 (*
öô_£l_˛ass
)(
b©adv_¥iv
 *
b©_¥iv
);

2247 
u32
 
£l_˛ass_max
;

2253 
b©adv_gw_node
 *(*
gë_be°_gw_node
)

2254 (
b©adv_¥iv
 *
b©_¥iv
);

2260 
	`boﬁ
 (*
is_ñigibÀ
)(
b©adv_¥iv
 *
b©_¥iv
,

2261 
b©adv_‹ig_node
 *
cuº_gw_‹ig
,

2262 
b©adv_‹ig_node
 *
‹ig_node
);

2265 (*
dump
)(
sk_buff
 *
msg
, 
√éök_ˇŒback
 *
cb
,

2266 
b©adv_¥iv
 *
¥iv
);

2272 
	sb©adv_Ægo_›s
 {

2274 
hli°_node
 
li°
;

2277 *
«me
;

2280 
b©adv_Ægo_iÁ˚_›s
 
iÁ˚
;

2283 
b©adv_Ægo_√igh_›s
 
√igh
;

2286 
b©adv_Ægo_‹ig_›s
 
‹ig
;

2289 
b©adv_Ægo_gw_›s
 
gw
;

2296 
	sb©adv_d©_íåy
 {

2298 
__be32
 
ù
;

2301 
u8
 
mac_addr
[
ETH_ALEN
];

2304 
vid
;

2309 
œ°_upd©e
;

2312 
hli°_node
 
hash_íåy
;

2315 
kªf
 
ªfcou¡
;

2318 
rcu_hód
 
rcu
;

2324 
	sb©adv_hw_addr
 {

2326 
hli°_node
 
li°
;

2329 
addr
[
ETH_ALEN
];

2335 
	sb©adv_d©_ˇndid©e
 {

2342 
ty≥
;

2348 
b©adv_‹ig_node
 *
‹ig_node
;

2354 
	sb©adv_tvlv_c⁄èöî
 {

2356 
hli°_node
 
li°
;

2359 
b©adv_tvlv_hdr
 
tvlv_hdr
;

2362 
kªf
 
ªfcou¡
;

2368 
	sb©adv_tvlv_h™dÀr
 {

2370 
hli°_node
 
li°
;

2376 (*
ogm_h™dÀr
)(
b©adv_¥iv
 *
b©_¥iv
,

2377 
b©adv_‹ig_node
 *
‹ig
,

2378 
u8
 
Êags
, *
tvlv_vÆue
, 
u16
 
tvlv_vÆue_Àn
);

2384 (*
uniˇ°_h™dÀr
)(
b©adv_¥iv
 *
b©_¥iv
,

2385 
u8
 *
§c
, u8 *
d°
,

2386 *
tvlv_vÆue
, 
u16
 
tvlv_vÆue_Àn
);

2392 (*
mˇ°_h™dÀr
)(
b©adv_¥iv
 *
b©_¥iv
, 
sk_buff
 *
skb
);

2395 
u8
 
ty≥
;

2398 
u8
 
vîsi⁄
;

2401 
u8
 
Êags
;

2404 
kªf
 
ªfcou¡
;

2407 
rcu_hód
 
rcu
;

2413 
	eb©adv_tvlv_h™dÀr_Êags
 {

2418 
BATADV_TVLV_HANDLER_OGM_CIFNOTFND
 = 
	`BIT
(1),

2425 
BATADV_TVLV_HANDLER_OGM_CALLED
 = 
	`BIT
(2),

	@/usr/include/linux/errno.h

1 
	~<asm/î∫o.h
>

	@/usr/include/linux/ethtool.h

14 #i‚de‡
_LINUX_ETHTOOL_H


15 
	#_LINUX_ETHTOOL_H


	)

17 
	~<löux/c⁄°.h
>

18 
	~<löux/ty≥s.h
>

19 
	~<löux/if_ëhî.h
>

21 
	~<limôs.h
>

103 
	sëhtoﬁ_cmd
 {

104 
__u32
 
	mcmd
;

105 
__u32
 
	msuµ‹ãd
;

106 
__u32
 
	madvîtisög
;

107 
__u16
 
	m•ìd
;

108 
__u8
 
	mdu∂ex
;

109 
__u8
 
	mp‹t
;

110 
__u8
 
	mphy_addªss
;

111 
__u8
 
	må™s˚ivî
;

112 
__u8
 
	maut⁄eg
;

113 
__u8
 
	mmdio_suµ‹t
;

114 
__u32
 
	mmaxtxpkt
;

115 
__u32
 
	mmaxrxpkt
;

116 
__u16
 
	m•ìd_hi
;

117 
__u8
 
	mëh_ç_mdix
;

118 
__u8
 
	mëh_ç_mdix_˘æ
;

119 
__u32
 
	mÕ_advîtisög
;

120 
__u32
 
	mª£rved
[2];

123 
__ölöe__
 
	$ëhtoﬁ_cmd_•ìd_£t
(
ëhtoﬁ_cmd
 *
ï
,

124 
__u32
 
•ìd
)

126 
ï
->
•ìd
 = (
__u16
)(speed & 0xFFFF);

127 
ï
->
•ìd_hi
 = (
__u16
)(
•ìd
 >> 16);

128 
	}
}

130 
__ölöe__
 
__u32
 
	$ëhtoﬁ_cmd_•ìd
(c⁄° 
ëhtoﬁ_cmd
 *
ï
)

132  (
ï
->
•ìd_hi
 << 16Ë|Ép->
•ìd
;

133 
	}
}

140 
	#ETH_MDIO_SUPPORTS_C22
 1

	)

147 
	#ETH_MDIO_SUPPORTS_C45
 2

	)

149 
	#ETHTOOL_FWVERS_LEN
 32

	)

150 
	#ETHTOOL_BUSINFO_LEN
 32

	)

151 
	#ETHTOOL_EROMVERS_LEN
 32

	)

183 
	sëhtoﬁ_drvöfo
 {

184 
__u32
 
	mcmd
;

185 
	mdrivî
[32];

186 
	mvîsi⁄
[32];

187 
	mfw_vîsi⁄
[
ETHTOOL_FWVERS_LEN
];

188 
	mbus_öfo
[
ETHTOOL_BUSINFO_LEN
];

189 
	mîom_vîsi⁄
[
ETHTOOL_EROMVERS_LEN
];

190 
	mª£rved2
[12];

191 
__u32
 
	mn_¥iv_Êags
;

192 
__u32
 
	mn_°©s
;

193 
__u32
 
	mã°öfo_Àn
;

194 
__u32
 
	mìdump_Àn
;

195 
__u32
 
	mªgdump_Àn
;

198 
	#SOPASS_MAX
 6

	)

209 
	sëhtoﬁ_wﬁöfo
 {

210 
__u32
 
	mcmd
;

211 
__u32
 
	msuµ‹ãd
;

212 
__u32
 
	mwﬁ›ts
;

213 
__u8
 
	ms›ass
[
SOPASS_MAX
];

217 
	sëhtoﬁ_vÆue
 {

218 
__u32
 
	mcmd
;

219 
__u32
 
	md©a
;

222 
	#PFC_STORM_PREVENTION_AUTO
 0xffff

	)

223 
	#PFC_STORM_PREVENTION_DISABLE
 0

	)

225 
	etu«bÀ_id
 {

226 
	mETHTOOL_ID_UNSPEC
,

227 
	mETHTOOL_RX_COPYBREAK
,

228 
	mETHTOOL_TX_COPYBREAK
,

229 
	mETHTOOL_PFC_PREVENTION_TOUT
,

230 
	mETHTOOL_TX_COPYBREAK_BUF_SIZE
,

235 
	m__ETHTOOL_TUNABLE_COUNT
,

238 
	etu«bÀ_ty≥_id
 {

239 
	mETHTOOL_TUNABLE_UNSPEC
,

240 
	mETHTOOL_TUNABLE_U8
,

241 
	mETHTOOL_TUNABLE_U16
,

242 
	mETHTOOL_TUNABLE_U32
,

243 
	mETHTOOL_TUNABLE_U64
,

244 
	mETHTOOL_TUNABLE_STRING
,

245 
	mETHTOOL_TUNABLE_S8
,

246 
	mETHTOOL_TUNABLE_S16
,

247 
	mETHTOOL_TUNABLE_S32
,

248 
	mETHTOOL_TUNABLE_S64
,

251 
	sëhtoﬁ_tu«bÀ
 {

252 
__u32
 
	mcmd
;

253 
__u32
 
	mid
;

254 
__u32
 
	mty≥_id
;

255 
__u32
 
	mÀn
;

256 *
	md©a
[];

259 
	#DOWNSHIFT_DEV_DEFAULT_COUNT
 0xff

	)

260 
	#DOWNSHIFT_DEV_DISABLE
 0

	)

266 
	#ETHTOOL_PHY_FAST_LINK_DOWN_ON
 0

	)

267 
	#ETHTOOL_PHY_FAST_LINK_DOWN_OFF
 0xff

	)

286 
	#ETHTOOL_PHY_EDPD_DFLT_TX_MSECS
 0xffff

	)

287 
	#ETHTOOL_PHY_EDPD_NO_TX
 0xff„

	)

288 
	#ETHTOOL_PHY_EDPD_DISABLE
 0

	)

290 
	ephy_tu«bÀ_id
 {

291 
	mETHTOOL_PHY_ID_UNSPEC
,

292 
	mETHTOOL_PHY_DOWNSHIFT
,

293 
	mETHTOOL_PHY_FAST_LINK_DOWN
,

294 
	mETHTOOL_PHY_EDPD
,

299 
	m__ETHTOOL_PHY_TUNABLE_COUNT
,

317 
	sëhtoﬁ_ªgs
 {

318 
__u32
 
	mcmd
;

319 
__u32
 
	mvîsi⁄
;

320 
__u32
 
	mÀn
;

321 
__u8
 
	md©a
[];

342 
	sëhtoﬁ_ì¥om
 {

343 
__u32
 
	mcmd
;

344 
__u32
 
	mmagic
;

345 
__u32
 
	moff£t
;

346 
__u32
 
	mÀn
;

347 
__u8
 
	md©a
[];

368 
	sëhtoﬁ_ìe
 {

369 
__u32
 
	mcmd
;

370 
__u32
 
	msuµ‹ãd
;

371 
__u32
 
	madvîti£d
;

372 
__u32
 
	mÕ_advîti£d
;

373 
__u32
 
	mìe_a˘ive
;

374 
__u32
 
	mìe_íabÀd
;

375 
__u32
 
	mtx_Õi_íabÀd
;

376 
__u32
 
	mtx_Õi_timî
;

377 
__u32
 
	mª£rved
[2];

391 
	sëhtoﬁ_modöfo
 {

392 
__u32
 
	mcmd
;

393 
__u32
 
	mty≥
;

394 
__u32
 
	mì¥om_Àn
;

395 
__u32
 
	mª£rved
[8];

471 
	sëhtoﬁ_cﬂÀs˚
 {

472 
__u32
 
	mcmd
;

473 
__u32
 
	mrx_cﬂÀs˚_u£cs
;

474 
__u32
 
	mrx_max_cﬂÀs˚d_‰ames
;

475 
__u32
 
	mrx_cﬂÀs˚_u£cs_úq
;

476 
__u32
 
	mrx_max_cﬂÀs˚d_‰ames_úq
;

477 
__u32
 
	mtx_cﬂÀs˚_u£cs
;

478 
__u32
 
	mtx_max_cﬂÀs˚d_‰ames
;

479 
__u32
 
	mtx_cﬂÀs˚_u£cs_úq
;

480 
__u32
 
	mtx_max_cﬂÀs˚d_‰ames_úq
;

481 
__u32
 
	m°©s_block_cﬂÀs˚_u£cs
;

482 
__u32
 
	mu£_ad≠tive_rx_cﬂÀs˚
;

483 
__u32
 
	mu£_ad≠tive_tx_cﬂÀs˚
;

484 
__u32
 
	mpkt_øã_low
;

485 
__u32
 
	mrx_cﬂÀs˚_u£cs_low
;

486 
__u32
 
	mrx_max_cﬂÀs˚d_‰ames_low
;

487 
__u32
 
	mtx_cﬂÀs˚_u£cs_low
;

488 
__u32
 
	mtx_max_cﬂÀs˚d_‰ames_low
;

489 
__u32
 
	mpkt_øã_high
;

490 
__u32
 
	mrx_cﬂÀs˚_u£cs_high
;

491 
__u32
 
	mrx_max_cﬂÀs˚d_‰ames_high
;

492 
__u32
 
	mtx_cﬂÀs˚_u£cs_high
;

493 
__u32
 
	mtx_max_cﬂÀs˚d_‰ames_high
;

494 
__u32
 
	møã_ßm∂e_öãrvÆ
;

522 
	sëhtoﬁ_rög∑øm
 {

523 
__u32
 
	mcmd
;

524 
__u32
 
	mrx_max_≥ndög
;

525 
__u32
 
	mrx_möi_max_≥ndög
;

526 
__u32
 
	mrx_jumbo_max_≥ndög
;

527 
__u32
 
	mtx_max_≥ndög
;

528 
__u32
 
	mrx_≥ndög
;

529 
__u32
 
	mrx_möi_≥ndög
;

530 
__u32
 
	mrx_jumbo_≥ndög
;

531 
__u32
 
	mtx_≥ndög
;

550 
	sëhtoﬁ_ch™√ls
 {

551 
__u32
 
	mcmd
;

552 
__u32
 
	mmax_rx
;

553 
__u32
 
	mmax_tx
;

554 
__u32
 
	mmax_Ÿhî
;

555 
__u32
 
	mmax_comböed
;

556 
__u32
 
	mrx_cou¡
;

557 
__u32
 
	mtx_cou¡
;

558 
__u32
 
	mŸhî_cou¡
;

559 
__u32
 
	mcomböed_cou¡
;

584 
	sëhtoﬁ_∑u£∑øm
 {

585 
__u32
 
	mcmd
;

586 
__u32
 
	maut⁄eg
;

587 
__u32
 
	mrx_∑u£
;

588 
__u32
 
	mtx_∑u£
;

592 
	eëhtoﬁ_lök_ext_°©e
 {

593 
	mETHTOOL_LINK_EXT_STATE_AUTONEG
,

594 
	mETHTOOL_LINK_EXT_STATE_LINK_TRAINING_FAILURE
,

595 
	mETHTOOL_LINK_EXT_STATE_LINK_LOGICAL_MISMATCH
,

596 
	mETHTOOL_LINK_EXT_STATE_BAD_SIGNAL_INTEGRITY
,

597 
	mETHTOOL_LINK_EXT_STATE_NO_CABLE
,

598 
	mETHTOOL_LINK_EXT_STATE_CABLE_ISSUE
,

599 
	mETHTOOL_LINK_EXT_STATE_EEPROM_ISSUE
,

600 
	mETHTOOL_LINK_EXT_STATE_CALIBRATION_FAILURE
,

601 
	mETHTOOL_LINK_EXT_STATE_POWER_BUDGET_EXCEEDED
,

602 
	mETHTOOL_LINK_EXT_STATE_OVERHEAT
,

603 
	mETHTOOL_LINK_EXT_STATE_MODULE
,

607 
	eëhtoﬁ_lök_ext_sub°©e_aut⁄eg
 {

608 
	mETHTOOL_LINK_EXT_SUBSTATE_AN_NO_PARTNER_DETECTED
 = 1,

609 
	mETHTOOL_LINK_EXT_SUBSTATE_AN_ACK_NOT_RECEIVED
,

610 
	mETHTOOL_LINK_EXT_SUBSTATE_AN_NEXT_PAGE_EXCHANGE_FAILED
,

611 
	mETHTOOL_LINK_EXT_SUBSTATE_AN_NO_PARTNER_DETECTED_FORCE_MODE
,

612 
	mETHTOOL_LINK_EXT_SUBSTATE_AN_FEC_MISMATCH_DURING_OVERRIDE
,

613 
	mETHTOOL_LINK_EXT_SUBSTATE_AN_NO_HCD
,

618 
	eëhtoﬁ_lök_ext_sub°©e_lök_åaöög
 {

619 
	mETHTOOL_LINK_EXT_SUBSTATE_LT_KR_FRAME_LOCK_NOT_ACQUIRED
 = 1,

620 
	mETHTOOL_LINK_EXT_SUBSTATE_LT_KR_LINK_INHIBIT_TIMEOUT
,

621 
	mETHTOOL_LINK_EXT_SUBSTATE_LT_KR_LINK_PARTNER_DID_NOT_SET_RECEIVER_READY
,

622 
	mETHTOOL_LINK_EXT_SUBSTATE_LT_REMOTE_FAULT
,

627 
	eëhtoﬁ_lök_ext_sub°©e_lök_logiˇl_mism©ch
 {

628 
	mETHTOOL_LINK_EXT_SUBSTATE_LLM_PCS_DID_NOT_ACQUIRE_BLOCK_LOCK
 = 1,

629 
	mETHTOOL_LINK_EXT_SUBSTATE_LLM_PCS_DID_NOT_ACQUIRE_AM_LOCK
,

630 
	mETHTOOL_LINK_EXT_SUBSTATE_LLM_PCS_DID_NOT_GET_ALIGN_STATUS
,

631 
	mETHTOOL_LINK_EXT_SUBSTATE_LLM_FC_FEC_IS_NOT_LOCKED
,

632 
	mETHTOOL_LINK_EXT_SUBSTATE_LLM_RS_FEC_IS_NOT_LOCKED
,

637 
	eëhtoﬁ_lök_ext_sub°©e_bad_sig«l_öãgrôy
 {

638 
	mETHTOOL_LINK_EXT_SUBSTATE_BSI_LARGE_NUMBER_OF_PHYSICAL_ERRORS
 = 1,

639 
	mETHTOOL_LINK_EXT_SUBSTATE_BSI_UNSUPPORTED_RATE
,

640 
	mETHTOOL_LINK_EXT_SUBSTATE_BSI_SERDES_REFERENCE_CLOCK_LOST
,

641 
	mETHTOOL_LINK_EXT_SUBSTATE_BSI_SERDES_ALOS
,

645 
	eëhtoﬁ_lök_ext_sub°©e_ˇbÀ_issue
 {

646 
	mETHTOOL_LINK_EXT_SUBSTATE_CI_UNSUPPORTED_CABLE
 = 1,

647 
	mETHTOOL_LINK_EXT_SUBSTATE_CI_CABLE_TEST_FAILURE
,

651 
	eëhtoﬁ_lök_ext_sub°©e_moduÀ
 {

652 
	mETHTOOL_LINK_EXT_SUBSTATE_MODULE_CMIS_NOT_READY
 = 1,

655 
	#ETH_GSTRING_LEN
 32

	)

687 
	eëhtoﬁ_°rög£t
 {

688 
	mETH_SS_TEST
 = 0,

689 
	mETH_SS_STATS
,

690 
	mETH_SS_PRIV_FLAGS
,

691 
	mETH_SS_NTUPLE_FILTERS
,

692 
	mETH_SS_FEATURES
,

693 
	mETH_SS_RSS_HASH_FUNCS
,

694 
	mETH_SS_TUNABLES
,

695 
	mETH_SS_PHY_STATS
,

696 
	mETH_SS_PHY_TUNABLES
,

697 
	mETH_SS_LINK_MODES
,

698 
	mETH_SS_MSG_CLASSES
,

699 
	mETH_SS_WOL_MODES
,

700 
	mETH_SS_SOF_TIMESTAMPING
,

701 
	mETH_SS_TS_TX_TYPES
,

702 
	mETH_SS_TS_RX_FILTERS
,

703 
	mETH_SS_UDP_TUNNEL_TYPES
,

704 
	mETH_SS_STATS_STD
,

705 
	mETH_SS_STATS_ETH_PHY
,

706 
	mETH_SS_STATS_ETH_MAC
,

707 
	mETH_SS_STATS_ETH_CTRL
,

708 
	mETH_SS_STATS_RMON
,

709 
	mETH_SS_STATS_PHY
,

710 
	mETH_SS_TS_FLAGS
,

713 
	mETH_SS_COUNT


728 
	eëhtoﬁ_mac_°©s_§c
 {

729 
	mETHTOOL_MAC_STATS_SRC_AGGREGATE
,

730 
	mETHTOOL_MAC_STATS_SRC_EMAC
,

731 
	mETHTOOL_MAC_STATS_SRC_PMAC
,

742 
	eëhtoﬁ_moduÀ_powî_mode_pﬁicy
 {

743 
	mETHTOOL_MODULE_POWER_MODE_POLICY_HIGH
 = 1,

744 
	mETHTOOL_MODULE_POWER_MODE_POLICY_AUTO
,

752 
	eëhtoﬁ_moduÀ_powî_mode
 {

753 
	mETHTOOL_MODULE_POWER_MODE_LOW
 = 1,

754 
	mETHTOOL_MODULE_POWER_MODE_HIGH
,

774 
	eëhtoﬁ_c33_p£_ext_°©e
 {

775 
	mETHTOOL_C33_PSE_EXT_STATE_ERROR_CONDITION
 = 1,

776 
	mETHTOOL_C33_PSE_EXT_STATE_MR_MPS_VALID
,

777 
	mETHTOOL_C33_PSE_EXT_STATE_MR_PSE_ENABLE
,

778 
	mETHTOOL_C33_PSE_EXT_STATE_OPTION_DETECT_TED
,

779 
	mETHTOOL_C33_PSE_EXT_STATE_OPTION_VPORT_LIM
,

780 
	mETHTOOL_C33_PSE_EXT_STATE_OVLD_DETECTED
,

781 
	mETHTOOL_C33_PSE_EXT_STATE_PD_DLL_POWER_TYPE
,

782 
	mETHTOOL_C33_PSE_EXT_STATE_POWER_NOT_AVAILABLE
,

783 
	mETHTOOL_C33_PSE_EXT_STATE_SHORT_DETECTED
,

799 
	eëhtoﬁ_c33_p£_ext_sub°©e_mr_mps_vÆid
 {

800 
	mETHTOOL_C33_PSE_EXT_SUBSTATE_MR_MPS_VALID_DETECTED_UNDERLOAD
 = 1,

801 
	mETHTOOL_C33_PSE_EXT_SUBSTATE_MR_MPS_VALID_CONNECTION_OPEN
,

832 
	eëhtoﬁ_c33_p£_ext_sub°©e_îr‹_c⁄dôi⁄
 {

833 
	mETHTOOL_C33_PSE_EXT_SUBSTATE_ERROR_CONDITION_NON_EXISTING_PORT
 = 1,

834 
	mETHTOOL_C33_PSE_EXT_SUBSTATE_ERROR_CONDITION_UNDEFINED_PORT
,

835 
	mETHTOOL_C33_PSE_EXT_SUBSTATE_ERROR_CONDITION_INTERNAL_HW_FAULT
,

836 
	mETHTOOL_C33_PSE_EXT_SUBSTATE_ERROR_CONDITION_COMM_ERROR_AFTER_FORCE_ON
,

837 
	mETHTOOL_C33_PSE_EXT_SUBSTATE_ERROR_CONDITION_UNKNOWN_PORT_STATUS
,

838 
	mETHTOOL_C33_PSE_EXT_SUBSTATE_ERROR_CONDITION_HOST_CRASH_TURN_OFF
,

839 
	mETHTOOL_C33_PSE_EXT_SUBSTATE_ERROR_CONDITION_HOST_CRASH_FORCE_SHUTDOWN
,

840 
	mETHTOOL_C33_PSE_EXT_SUBSTATE_ERROR_CONDITION_CONFIG_CHANGE
,

841 
	mETHTOOL_C33_PSE_EXT_SUBSTATE_ERROR_CONDITION_DETECTED_OVER_TEMP
,

854 
	eëhtoﬁ_c33_p£_ext_sub°©e_mr_p£_íabÀ
 {

855 
	mETHTOOL_C33_PSE_EXT_SUBSTATE_MR_PSE_ENABLE_DISABLE_PIN_ACTIVE
 = 1,

870 
	eëhtoﬁ_c33_p£_ext_sub°©e_›ti⁄_dëe˘_ãd
 {

871 
	mETHTOOL_C33_PSE_EXT_SUBSTATE_OPTION_DETECT_TED_DET_IN_PROCESS
 = 1,

872 
	mETHTOOL_C33_PSE_EXT_SUBSTATE_OPTION_DETECT_TED_CONNECTION_CHECK_ERROR
,

889 
	eëhtoﬁ_c33_p£_ext_sub°©e_›ti⁄_vp‹t_lim
 {

890 
	mETHTOOL_C33_PSE_EXT_SUBSTATE_OPTION_VPORT_LIM_HIGH_VOLTAGE
 = 1,

891 
	mETHTOOL_C33_PSE_EXT_SUBSTATE_OPTION_VPORT_LIM_LOW_VOLTAGE
,

892 
	mETHTOOL_C33_PSE_EXT_SUBSTATE_OPTION_VPORT_LIM_VOLTAGE_INJECTION
,

905 
	eëhtoﬁ_c33_p£_ext_sub°©e_ovld_dëe˘ed
 {

906 
	mETHTOOL_C33_PSE_EXT_SUBSTATE_OVLD_DETECTED_OVERLOAD
 = 1,

927 
	eëhtoﬁ_c33_p£_ext_sub°©e_powî_nŸ_avaûabÀ
 {

928 
	mETHTOOL_C33_PSE_EXT_SUBSTATE_POWER_NOT_AVAILABLE_BUDGET_EXCEEDED
 = 1,

929 
	mETHTOOL_C33_PSE_EXT_SUBSTATE_POWER_NOT_AVAILABLE_PORT_PW_LIMIT_EXCEEDS_CONTROLLER_BUDGET
,

930 
	mETHTOOL_C33_PSE_EXT_SUBSTATE_POWER_NOT_AVAILABLE_PD_REQUEST_EXCEEDS_PORT_LIMIT
,

931 
	mETHTOOL_C33_PSE_EXT_SUBSTATE_POWER_NOT_AVAILABLE_HW_PW_LIMIT
,

944 
	eëhtoﬁ_c33_p£_ext_sub°©e_sh‹t_dëe˘ed
 {

945 
	mETHTOOL_C33_PSE_EXT_SUBSTATE_SHORT_DETECTED_SHORT_CONDITION
 = 1,

954 
	eëhtoﬁ_p£_ty≥s
 {

955 
	mETHTOOL_PSE_UNKNOWN
 = 1 << 0,

956 
	mETHTOOL_PSE_PODL
 = 1 << 1,

957 
	mETHTOOL_PSE_C33
 = 1 << 2,

967 
	eëhtoﬁ_c33_p£_admö_°©e
 {

968 
	mETHTOOL_C33_PSE_ADMIN_STATE_UNKNOWN
 = 1,

969 
	mETHTOOL_C33_PSE_ADMIN_STATE_DISABLED
,

970 
	mETHTOOL_C33_PSE_ADMIN_STATE_ENABLED
,

993 
	eëhtoﬁ_c33_p£_pw_d_°©us
 {

994 
	mETHTOOL_C33_PSE_PW_D_STATUS_UNKNOWN
 = 1,

995 
	mETHTOOL_C33_PSE_PW_D_STATUS_DISABLED
,

996 
	mETHTOOL_C33_PSE_PW_D_STATUS_SEARCHING
,

997 
	mETHTOOL_C33_PSE_PW_D_STATUS_DELIVERING
,

998 
	mETHTOOL_C33_PSE_PW_D_STATUS_TEST
,

999 
	mETHTOOL_C33_PSE_PW_D_STATUS_FAULT
,

1000 
	mETHTOOL_C33_PSE_PW_D_STATUS_OTHERFAULT
,

1011 
	eëhtoﬁ_podl_p£_admö_°©e
 {

1012 
	mETHTOOL_PODL_PSE_ADMIN_STATE_UNKNOWN
 = 1,

1013 
	mETHTOOL_PODL_PSE_ADMIN_STATE_DISABLED
,

1014 
	mETHTOOL_PODL_PSE_ADMIN_STATE_ENABLED
,

1038 
	eëhtoﬁ_podl_p£_pw_d_°©us
 {

1039 
	mETHTOOL_PODL_PSE_PW_D_STATUS_UNKNOWN
 = 1,

1040 
	mETHTOOL_PODL_PSE_PW_D_STATUS_DISABLED
,

1041 
	mETHTOOL_PODL_PSE_PW_D_STATUS_SEARCHING
,

1042 
	mETHTOOL_PODL_PSE_PW_D_STATUS_DELIVERING
,

1043 
	mETHTOOL_PODL_PSE_PW_D_STATUS_SLEEP
,

1044 
	mETHTOOL_PODL_PSE_PW_D_STATUS_IDLE
,

1045 
	mETHTOOL_PODL_PSE_PW_D_STATUS_ERROR
,

1064 
	eëhtoﬁ_mm_vîify_°©us
 {

1065 
	mETHTOOL_MM_VERIFY_STATUS_UNKNOWN
,

1066 
	mETHTOOL_MM_VERIFY_STATUS_INITIAL
,

1067 
	mETHTOOL_MM_VERIFY_STATUS_VERIFYING
,

1068 
	mETHTOOL_MM_VERIFY_STATUS_SUCCEEDED
,

1069 
	mETHTOOL_MM_VERIFY_STATUS_FAILED
,

1070 
	mETHTOOL_MM_VERIFY_STATUS_DISABLED
,

1084 
	eëhtoﬁ_moduÀ_fw_Êash_°©us
 {

1085 
	mETHTOOL_MODULE_FW_FLASH_STATUS_STARTED
 = 1,

1086 
	mETHTOOL_MODULE_FW_FLASH_STATUS_IN_PROGRESS
,

1087 
	mETHTOOL_MODULE_FW_FLASH_STATUS_COMPLETED
,

1088 
	mETHTOOL_MODULE_FW_FLASH_STATUS_ERROR
,

1103 
	sëhtoﬁ_g°rögs
 {

1104 
__u32
 
	mcmd
;

1105 
__u32
 
	m°rög_£t
;

1106 
__u32
 
	mÀn
;

1107 
__u8
 
	md©a
[];

1128 
	sëhtoﬁ_s£t_öfo
 {

1129 
__u32
 
	mcmd
;

1130 
__u32
 
	mª£rved
;

1131 
__u64
 
	ms£t_mask
;

1132 
__u32
 
	md©a
[];

1145 
	eëhtoﬁ_ã°_Êags
 {

1146 
	mETH_TEST_FL_OFFLINE
 = (1 << 0),

1147 
	mETH_TEST_FL_FAILED
 = (1 << 1),

1148 
	mETH_TEST_FL_EXTERNAL_LB
 = (1 << 2),

1149 
	mETH_TEST_FL_EXTERNAL_LB_DONE
 = (1 << 3),

1167 
	sëhtoﬁ_ã°
 {

1168 
__u32
 
	mcmd
;

1169 
__u32
 
	mÊags
;

1170 
__u32
 
	mª£rved
;

1171 
__u32
 
	mÀn
;

1172 
__u64
 
	md©a
[];

1186 
	sëhtoﬁ_°©s
 {

1187 
__u32
 
	mcmd
;

1188 
__u32
 
	mn_°©s
;

1189 
__u64
 
	md©a
[];

1203 
	sëhtoﬁ_≥rm_addr
 {

1204 
__u32
 
	mcmd
;

1205 
__u32
 
	msize
;

1206 
__u8
 
	md©a
[];

1218 
	eëhtoﬁ_Êags
 {

1219 
	mETH_FLAG_TXVLAN
 = (1 << 7),

1220 
	mETH_FLAG_RXVLAN
 = (1 << 8),

1221 
	mETH_FLAG_LRO
 = (1 << 15),

1222 
	mETH_FLAG_NTUPLE
 = (1 << 27),

1223 
	mETH_FLAG_RXHASH
 = (1 << 28),

1242 
	sëhtoﬁ_t˝ù4_•ec
 {

1243 
__be32
 
	mù4§c
;

1244 
__be32
 
	mù4d°
;

1245 
__be16
 
	mp§c
;

1246 
__be16
 
	mpd°
;

1247 
__u8
 
	mtos
;

1259 
	sëhtoﬁ_ah_e•ù4_•ec
 {

1260 
__be32
 
	mù4§c
;

1261 
__be32
 
	mù4d°
;

1262 
__be32
 
	m•i
;

1263 
__u8
 
	mtos
;

1266 
	#ETH_RX_NFC_IP4
 1

	)

1277 
	sëhtoﬁ_u§ù4_•ec
 {

1278 
__be32
 
	mù4§c
;

1279 
__be32
 
	mù4d°
;

1280 
__be32
 
	ml4_4_byãs
;

1281 
__u8
 
	mtos
;

1282 
__u8
 
	mù_vî
;

1283 
__u8
 
	m¥Ÿo
;

1296 
	sëhtoﬁ_t˝ù6_•ec
 {

1297 
__be32
 
	mù6§c
[4];

1298 
__be32
 
	mù6d°
[4];

1299 
__be16
 
	mp§c
;

1300 
__be16
 
	mpd°
;

1301 
__u8
 
	mt˛ass
;

1313 
	sëhtoﬁ_ah_e•ù6_•ec
 {

1314 
__be32
 
	mù6§c
[4];

1315 
__be32
 
	mù6d°
[4];

1316 
__be32
 
	m•i
;

1317 
__u8
 
	mt˛ass
;

1328 
	sëhtoﬁ_u§ù6_•ec
 {

1329 
__be32
 
	mù6§c
[4];

1330 
__be32
 
	mù6d°
[4];

1331 
__be32
 
	ml4_4_byãs
;

1332 
__u8
 
	mt˛ass
;

1333 
__u8
 
	ml4_¥Ÿo
;

1336 
	uëhtoﬁ_Êow_uni⁄
 {

1337 
ëhtoﬁ_t˝ù4_•ec
 
	mt˝_ù4_•ec
;

1338 
ëhtoﬁ_t˝ù4_•ec
 
	mudp_ù4_•ec
;

1339 
ëhtoﬁ_t˝ù4_•ec
 
	ms˘p_ù4_•ec
;

1340 
ëhtoﬁ_ah_e•ù4_•ec
 
	mah_ù4_•ec
;

1341 
ëhtoﬁ_ah_e•ù4_•ec
 
	me•_ù4_•ec
;

1342 
ëhtoﬁ_u§ù4_•ec
 
	mu§_ù4_•ec
;

1343 
ëhtoﬁ_t˝ù6_•ec
 
	mt˝_ù6_•ec
;

1344 
ëhtoﬁ_t˝ù6_•ec
 
	mudp_ù6_•ec
;

1345 
ëhtoﬁ_t˝ù6_•ec
 
	ms˘p_ù6_•ec
;

1346 
ëhtoﬁ_ah_e•ù6_•ec
 
	mah_ù6_•ec
;

1347 
ëhtoﬁ_ah_e•ù6_•ec
 
	me•_ù6_•ec
;

1348 
ëhtoﬁ_u§ù6_•ec
 
	mu§_ù6_•ec
;

1349 
ëhhdr
 
	mëhî_•ec
;

1350 
__u8
 
	mhd©a
[52];

1365 
	sëhtoﬁ_Êow_ext
 {

1366 
__u8
 
	m∑ddög
[2];

1367 
	mh_de°
[
ETH_ALEN
];

1368 
__be16
 
	mvœn_ëy≥
;

1369 
__be16
 
	mvœn_tci
;

1370 
__be32
 
	md©a
[2];

1390 
	sëhtoﬁ_rx_Êow_•ec
 {

1391 
__u32
 
	mÊow_ty≥
;

1392 
ëhtoﬁ_Êow_uni⁄
 
	mh_u
;

1393 
ëhtoﬁ_Êow_ext
 
	mh_ext
;

1394 
ëhtoﬁ_Êow_uni⁄
 
	mm_u
;

1395 
ëhtoﬁ_Êow_ext
 
	mm_ext
;

1396 
__u64
 
	mrög_cookõ
;

1397 
__u32
 
	mloˇti⁄
;

1411 
	#ETHTOOL_RX_FLOW_SPEC_RING
 0x00000000FFFFFFFFLL

	)

1412 
	#ETHTOOL_RX_FLOW_SPEC_RING_VF
 0x000000FF00000000LL

	)

1413 
	#ETHTOOL_RX_FLOW_SPEC_RING_VF_OFF
 32

	)

1414 
__ölöe__
 
__u64
 
	$ëhtoﬁ_gë_Êow_•ec_rög
(
__u64
 
rög_cookõ
)

1416  
ETHTOOL_RX_FLOW_SPEC_RING
 & 
rög_cookõ
;

1417 
	}
}

1419 
__ölöe__
 
__u64
 
	$ëhtoﬁ_gë_Êow_•ec_rög_vf
(
__u64
 
rög_cookõ
)

1421  (
ETHTOOL_RX_FLOW_SPEC_RING_VF
 & 
rög_cookõ
) >>

1422 
ETHTOOL_RX_FLOW_SPEC_RING_VF_OFF
;

1423 
	}
}

1486 
	sëhtoﬁ_rxnfc
 {

1487 
__u32
 
	mcmd
;

1488 
__u32
 
	mÊow_ty≥
;

1489 
__u64
 
	md©a
;

1490 
ëhtoﬁ_rx_Êow_•ec
 
	mfs
;

1492 
__u32
 
	mruÀ_˙t
;

1493 
__u32
 
	mrss_c⁄ãxt
;

1495 
__u32
 
	mruÀ_locs
[];

1512 
	sëhtoﬁ_rxfh_ödú
 {

1513 
__u32
 
	mcmd
;

1514 
__u32
 
	msize
;

1515 
__u32
 
	mrög_ödex
[];

1550 
	sëhtoﬁ_rxfh
 {

1551 
__u32
 
	mcmd
;

1552 
__u32
 
	mrss_c⁄ãxt
;

1553 
__u32
 
	mödú_size
;

1554 
__u32
 
	mkey_size
;

1555 
__u8
 
	mhfunc
;

1556 
__u8
 
	möput_x‰m
;

1557 
__u8
 
	mrsvd8
[2];

1558 
__u32
 
	mrsvd32
;

1559 
__u32
 
	mrss_c⁄fig
[];

1561 
	#ETH_RXFH_CONTEXT_ALLOC
 0xffffffff

	)

1562 
	#ETH_RXFH_INDIR_NO_CHANGE
 0xffffffff

	)

1580 
	sëhtoﬁ_rx_¡u∂e_Êow_•ec
 {

1581 
__u32
 
	mÊow_ty≥
;

1583 
ëhtoﬁ_t˝ù4_•ec
 
	mt˝_ù4_•ec
;

1584 
ëhtoﬁ_t˝ù4_•ec
 
	mudp_ù4_•ec
;

1585 
ëhtoﬁ_t˝ù4_•ec
 
	ms˘p_ù4_•ec
;

1586 
ëhtoﬁ_ah_e•ù4_•ec
 
	mah_ù4_•ec
;

1587 
ëhtoﬁ_ah_e•ù4_•ec
 
	me•_ù4_•ec
;

1588 
ëhtoﬁ_u§ù4_•ec
 
	mu§_ù4_•ec
;

1589 
ëhhdr
 
	mëhî_•ec
;

1590 
__u8
 
	mhd©a
[72];

1591 } 
	mh_u
, 
	mm_u
;

1593 
__u16
 
	mvœn_èg
;

1594 
__u16
 
	mvœn_èg_mask
;

1595 
__u64
 
	md©a
;

1596 
__u64
 
	md©a_mask
;

1598 
__s32
 
	ma˘i⁄
;

1599 
	#ETHTOOL_RXNTUPLE_ACTION_DROP
 (-1Ë

	)

1600 
	#ETHTOOL_RXNTUPLE_ACTION_CLEAR
 (-2Ë

	)

1608 
	sëhtoﬁ_rx_¡u∂e
 {

1609 
__u32
 
	mcmd
;

1610 
ëhtoﬁ_rx_¡u∂e_Êow_•ec
 
	mfs
;

1613 
	#ETHTOOL_FLASH_MAX_FILENAME
 128

	)

1614 
	eëhtoﬁ_Êash_›_ty≥
 {

1615 
	mETHTOOL_FLASH_ALL_REGIONS
 = 0,

1619 
	sëhtoﬁ_Êash
 {

1620 
__u32
 
	mcmd
;

1621 
__u32
 
	mªgi⁄
;

1622 
	md©a
[
ETHTOOL_FLASH_MAX_FILENAME
];

1639 
	sëhtoﬁ_dump
 {

1640 
__u32
 
	mcmd
;

1641 
__u32
 
	mvîsi⁄
;

1642 
__u32
 
	mÊag
;

1643 
__u32
 
	mÀn
;

1644 
__u8
 
	md©a
[];

1647 
	#ETH_FW_DUMP_DISABLE
 0

	)

1658 
	sëhtoﬁ_gë_„©uªs_block
 {

1659 
__u32
 
	mavaûabÀ
;

1660 
__u32
 
	mªque°ed
;

1661 
__u32
 
	ma˘ive
;

1662 
__u32
 
	m√vî_ch™ged
;

1673 
	sëhtoﬁ_g„©uªs
 {

1674 
__u32
 
	mcmd
;

1675 
__u32
 
	msize
;

1676 
ëhtoﬁ_gë_„©uªs_block
 
	m„©uªs
[];

1684 
	sëhtoﬁ_£t_„©uªs_block
 {

1685 
__u32
 
	mvÆid
;

1686 
__u32
 
	mªque°ed
;

1695 
	sëhtoﬁ_s„©uªs
 {

1696 
__u32
 
	mcmd
;

1697 
__u32
 
	msize
;

1698 
ëhtoﬁ_£t_„©uªs_block
 
	m„©uªs
[];

1721 
	sëhtoﬁ_ts_öfo
 {

1722 
__u32
 
	mcmd
;

1723 
__u32
 
	mso_time°ampög
;

1724 
__s32
 
	mphc_ödex
;

1725 
__u32
 
	mtx_ty≥s
;

1726 
__u32
 
	mtx_ª£rved
[3];

1727 
__u32
 
	mrx_fûãrs
;

1728 
__u32
 
	mrx_ª£rved
[3];

1756 
	eëhtoﬁ_s„©uªs_ªtvÆ_bôs
 {

1757 
	mETHTOOL_F_UNSUPPORTED__BIT
,

1758 
	mETHTOOL_F_WISH__BIT
,

1759 
	mETHTOOL_F_COMPAT__BIT
,

1762 
	#ETHTOOL_F_UNSUPPORTED
 (1 << 
ETHTOOL_F_UNSUPPORTED__BIT
)

	)

1763 
	#ETHTOOL_F_WISH
 (1 << 
ETHTOOL_F_WISH__BIT
)

	)

1764 
	#ETHTOOL_F_COMPAT
 (1 << 
ETHTOOL_F_COMPAT__BIT
)

	)

1766 
	#MAX_NUM_QUEUE
 4096

	)

1775 
	sëhtoﬁ_≥r_queue_›
 {

1776 
__u32
 
	mcmd
;

1777 
__u32
 
	msub_comm™d
;

1778 
__u32
 
	mqueue_mask
[
__KERNEL_DIV_ROUND_UP
(
MAX_NUM_QUEUE
, 32)];

1779 
	md©a
[];

1811 
	sëhtoﬁ_„˝¨am
 {

1812 
__u32
 
	mcmd
;

1814 
__u32
 
	ma˘ive_„c
;

1815 
__u32
 
	m„c
;

1816 
__u32
 
	mª£rved
;

1832 
	eëhtoﬁ_„c_c⁄fig_bôs
 {

1833 
	mETHTOOL_FEC_NONE_BIT
,

1834 
	mETHTOOL_FEC_AUTO_BIT
,

1835 
	mETHTOOL_FEC_OFF_BIT
,

1836 
	mETHTOOL_FEC_RS_BIT
,

1837 
	mETHTOOL_FEC_BASER_BIT
,

1838 
	mETHTOOL_FEC_LLRS_BIT
,

1841 
	#ETHTOOL_FEC_NONE
 (1 << 
ETHTOOL_FEC_NONE_BIT
)

	)

1842 
	#ETHTOOL_FEC_AUTO
 (1 << 
ETHTOOL_FEC_AUTO_BIT
)

	)

1843 
	#ETHTOOL_FEC_OFF
 (1 << 
ETHTOOL_FEC_OFF_BIT
)

	)

1844 
	#ETHTOOL_FEC_RS
 (1 << 
ETHTOOL_FEC_RS_BIT
)

	)

1845 
	#ETHTOOL_FEC_BASER
 (1 << 
ETHTOOL_FEC_BASER_BIT
)

	)

1846 
	#ETHTOOL_FEC_LLRS
 (1 << 
ETHTOOL_FEC_LLRS_BIT
)

	)

1849 
	#ETHTOOL_GSET
 0x00000001

	)

1852 
	#ETHTOOL_SSET
 0x00000002

	)

1855 
	#ETHTOOL_GDRVINFO
 0x00000003

	)

1856 
	#ETHTOOL_GREGS
 0x00000004

	)

1857 
	#ETHTOOL_GWOL
 0x00000005

	)

1858 
	#ETHTOOL_SWOL
 0x00000006

	)

1859 
	#ETHTOOL_GMSGLVL
 0x00000007

	)

1860 
	#ETHTOOL_SMSGLVL
 0x00000008

	)

1861 
	#ETHTOOL_NWAY_RST
 0x00000009

	)

1864 
	#ETHTOOL_GLINK
 0x0000000a

	)

1865 
	#ETHTOOL_GEEPROM
 0x0000000b

	)

1866 
	#ETHTOOL_SEEPROM
 0x0000000¯

	)

1867 
	#ETHTOOL_GCOALESCE
 0x0000000ê

	)

1868 
	#ETHTOOL_SCOALESCE
 0x0000000‡

	)

1869 
	#ETHTOOL_GRINGPARAM
 0x00000010

	)

1870 
	#ETHTOOL_SRINGPARAM
 0x00000011

	)

1871 
	#ETHTOOL_GPAUSEPARAM
 0x00000012

	)

1872 
	#ETHTOOL_SPAUSEPARAM
 0x00000013

	)

1873 
	#ETHTOOL_GRXCSUM
 0x00000014

	)

1874 
	#ETHTOOL_SRXCSUM
 0x00000015

	)

1875 
	#ETHTOOL_GTXCSUM
 0x00000016

	)

1876 
	#ETHTOOL_STXCSUM
 0x00000017

	)

1877 
	#ETHTOOL_GSG
 0x00000018

	)

1879 
	#ETHTOOL_SSG
 0x00000019

	)

1881 
	#ETHTOOL_TEST
 0x0000001®

	)

1882 
	#ETHTOOL_GSTRINGS
 0x0000001b

	)

1883 
	#ETHTOOL_PHYS_ID
 0x0000001¯

	)

1884 
	#ETHTOOL_GSTATS
 0x0000001d

	)

1885 
	#ETHTOOL_GTSO
 0x0000001ê

	)

1886 
	#ETHTOOL_STSO
 0x0000001‡

	)

1887 
	#ETHTOOL_GPERMADDR
 0x00000020

	)

1888 
	#ETHTOOL_GUFO
 0x00000021

	)

1889 
	#ETHTOOL_SUFO
 0x00000022

	)

1890 
	#ETHTOOL_GGSO
 0x00000023

	)

1891 
	#ETHTOOL_SGSO
 0x00000024

	)

1892 
	#ETHTOOL_GFLAGS
 0x00000025

	)

1893 
	#ETHTOOL_SFLAGS
 0x00000026

	)

1894 
	#ETHTOOL_GPFLAGS
 0x00000027

	)

1895 
	#ETHTOOL_SPFLAGS
 0x00000028

	)

1897 
	#ETHTOOL_GRXFH
 0x00000029

	)

1898 
	#ETHTOOL_SRXFH
 0x0000002®

	)

1899 
	#ETHTOOL_GGRO
 0x0000002b

	)

1900 
	#ETHTOOL_SGRO
 0x0000002¯

	)

1901 
	#ETHTOOL_GRXRINGS
 0x0000002d

	)

1902 
	#ETHTOOL_GRXCLSRLCNT
 0x0000002ê

	)

1903 
	#ETHTOOL_GRXCLSRULE
 0x0000002‡

	)

1904 
	#ETHTOOL_GRXCLSRLALL
 0x00000030

	)

1905 
	#ETHTOOL_SRXCLSRLDEL
 0x00000031

	)

1906 
	#ETHTOOL_SRXCLSRLINS
 0x00000032

	)

1907 
	#ETHTOOL_FLASHDEV
 0x00000033

	)

1908 
	#ETHTOOL_RESET
 0x00000034

	)

1909 
	#ETHTOOL_SRXNTUPLE
 0x00000035

	)

1910 
	#ETHTOOL_GRXNTUPLE
 0x00000036

	)

1911 
	#ETHTOOL_GSSET_INFO
 0x00000037

	)

1912 
	#ETHTOOL_GRXFHINDIR
 0x00000038

	)

1913 
	#ETHTOOL_SRXFHINDIR
 0x00000039

	)

1915 
	#ETHTOOL_GFEATURES
 0x0000003®

	)

1916 
	#ETHTOOL_SFEATURES
 0x0000003b

	)

1917 
	#ETHTOOL_GCHANNELS
 0x0000003¯

	)

1918 
	#ETHTOOL_SCHANNELS
 0x0000003d

	)

1919 
	#ETHTOOL_SET_DUMP
 0x0000003ê

	)

1920 
	#ETHTOOL_GET_DUMP_FLAG
 0x0000003‡

	)

1921 
	#ETHTOOL_GET_DUMP_DATA
 0x00000040

	)

1922 
	#ETHTOOL_GET_TS_INFO
 0x00000041

	)

1923 
	#ETHTOOL_GMODULEINFO
 0x00000042

	)

1924 
	#ETHTOOL_GMODULEEEPROM
 0x00000043

	)

1925 
	#ETHTOOL_GEEE
 0x00000044

	)

1926 
	#ETHTOOL_SEEE
 0x00000045

	)

1928 
	#ETHTOOL_GRSSH
 0x00000046

	)

1929 
	#ETHTOOL_SRSSH
 0x00000047

	)

1930 
	#ETHTOOL_GTUNABLE
 0x00000048

	)

1931 
	#ETHTOOL_STUNABLE
 0x00000049

	)

1932 
	#ETHTOOL_GPHYSTATS
 0x0000004®

	)

1934 
	#ETHTOOL_PERQUEUE
 0x0000004b

	)

1936 
	#ETHTOOL_GLINKSETTINGS
 0x0000004¯

	)

1937 
	#ETHTOOL_SLINKSETTINGS
 0x0000004d

	)

1938 
	#ETHTOOL_PHY_GTUNABLE
 0x0000004ê

	)

1939 
	#ETHTOOL_PHY_STUNABLE
 0x0000004‡

	)

1940 
	#ETHTOOL_GFECPARAM
 0x00000050

	)

1941 
	#ETHTOOL_SFECPARAM
 0x00000051

	)

1944 
	#SPARC_ETH_GSET
 
ETHTOOL_GSET


	)

1945 
	#SPARC_ETH_SSET
 
ETHTOOL_SSET


	)

1948 
	eëhtoﬁ_lök_mode_bô_ödi˚s
 {

1949 
	mETHTOOL_LINK_MODE_10ba£T_HÆf_BIT
 = 0,

1950 
	mETHTOOL_LINK_MODE_10ba£T_FuŒ_BIT
 = 1,

1951 
	mETHTOOL_LINK_MODE_100ba£T_HÆf_BIT
 = 2,

1952 
	mETHTOOL_LINK_MODE_100ba£T_FuŒ_BIT
 = 3,

1953 
	mETHTOOL_LINK_MODE_1000ba£T_HÆf_BIT
 = 4,

1954 
	mETHTOOL_LINK_MODE_1000ba£T_FuŒ_BIT
 = 5,

1955 
	mETHTOOL_LINK_MODE_Aut⁄eg_BIT
 = 6,

1956 
	mETHTOOL_LINK_MODE_TP_BIT
 = 7,

1957 
	mETHTOOL_LINK_MODE_AUI_BIT
 = 8,

1958 
	mETHTOOL_LINK_MODE_MII_BIT
 = 9,

1959 
	mETHTOOL_LINK_MODE_FIBRE_BIT
 = 10,

1960 
	mETHTOOL_LINK_MODE_BNC_BIT
 = 11,

1961 
	mETHTOOL_LINK_MODE_10000ba£T_FuŒ_BIT
 = 12,

1962 
	mETHTOOL_LINK_MODE_Pau£_BIT
 = 13,

1963 
	mETHTOOL_LINK_MODE_Asym_Pau£_BIT
 = 14,

1964 
	mETHTOOL_LINK_MODE_2500ba£X_FuŒ_BIT
 = 15,

1965 
	mETHTOOL_LINK_MODE_Back∂™e_BIT
 = 16,

1966 
	mETHTOOL_LINK_MODE_1000ba£KX_FuŒ_BIT
 = 17,

1967 
	mETHTOOL_LINK_MODE_10000ba£KX4_FuŒ_BIT
 = 18,

1968 
	mETHTOOL_LINK_MODE_10000ba£KR_FuŒ_BIT
 = 19,

1969 
	mETHTOOL_LINK_MODE_10000ba£R_FEC_BIT
 = 20,

1970 
	mETHTOOL_LINK_MODE_20000ba£MLD2_FuŒ_BIT
 = 21,

1971 
	mETHTOOL_LINK_MODE_20000ba£KR2_FuŒ_BIT
 = 22,

1972 
	mETHTOOL_LINK_MODE_40000ba£KR4_FuŒ_BIT
 = 23,

1973 
	mETHTOOL_LINK_MODE_40000ba£CR4_FuŒ_BIT
 = 24,

1974 
	mETHTOOL_LINK_MODE_40000ba£SR4_FuŒ_BIT
 = 25,

1975 
	mETHTOOL_LINK_MODE_40000ba£LR4_FuŒ_BIT
 = 26,

1976 
	mETHTOOL_LINK_MODE_56000ba£KR4_FuŒ_BIT
 = 27,

1977 
	mETHTOOL_LINK_MODE_56000ba£CR4_FuŒ_BIT
 = 28,

1978 
	mETHTOOL_LINK_MODE_56000ba£SR4_FuŒ_BIT
 = 29,

1979 
	mETHTOOL_LINK_MODE_56000ba£LR4_FuŒ_BIT
 = 30,

1980 
	mETHTOOL_LINK_MODE_25000ba£CR_FuŒ_BIT
 = 31,

1988 
	mETHTOOL_LINK_MODE_25000ba£KR_FuŒ_BIT
 = 32,

1989 
	mETHTOOL_LINK_MODE_25000ba£SR_FuŒ_BIT
 = 33,

1990 
	mETHTOOL_LINK_MODE_50000ba£CR2_FuŒ_BIT
 = 34,

1991 
	mETHTOOL_LINK_MODE_50000ba£KR2_FuŒ_BIT
 = 35,

1992 
	mETHTOOL_LINK_MODE_100000ba£KR4_FuŒ_BIT
 = 36,

1993 
	mETHTOOL_LINK_MODE_100000ba£SR4_FuŒ_BIT
 = 37,

1994 
	mETHTOOL_LINK_MODE_100000ba£CR4_FuŒ_BIT
 = 38,

1995 
	mETHTOOL_LINK_MODE_100000ba£LR4_ER4_FuŒ_BIT
 = 39,

1996 
	mETHTOOL_LINK_MODE_50000ba£SR2_FuŒ_BIT
 = 40,

1997 
	mETHTOOL_LINK_MODE_1000ba£X_FuŒ_BIT
 = 41,

1998 
	mETHTOOL_LINK_MODE_10000ba£CR_FuŒ_BIT
 = 42,

1999 
	mETHTOOL_LINK_MODE_10000ba£SR_FuŒ_BIT
 = 43,

2000 
	mETHTOOL_LINK_MODE_10000ba£LR_FuŒ_BIT
 = 44,

2001 
	mETHTOOL_LINK_MODE_10000ba£LRM_FuŒ_BIT
 = 45,

2002 
	mETHTOOL_LINK_MODE_10000ba£ER_FuŒ_BIT
 = 46,

2003 
	mETHTOOL_LINK_MODE_2500ba£T_FuŒ_BIT
 = 47,

2004 
	mETHTOOL_LINK_MODE_5000ba£T_FuŒ_BIT
 = 48,

2006 
	mETHTOOL_LINK_MODE_FEC_NONE_BIT
 = 49,

2007 
	mETHTOOL_LINK_MODE_FEC_RS_BIT
 = 50,

2008 
	mETHTOOL_LINK_MODE_FEC_BASER_BIT
 = 51,

2009 
	mETHTOOL_LINK_MODE_50000ba£KR_FuŒ_BIT
 = 52,

2010 
	mETHTOOL_LINK_MODE_50000ba£SR_FuŒ_BIT
 = 53,

2011 
	mETHTOOL_LINK_MODE_50000ba£CR_FuŒ_BIT
 = 54,

2012 
	mETHTOOL_LINK_MODE_50000ba£LR_ER_FR_FuŒ_BIT
 = 55,

2013 
	mETHTOOL_LINK_MODE_50000ba£DR_FuŒ_BIT
 = 56,

2014 
	mETHTOOL_LINK_MODE_100000ba£KR2_FuŒ_BIT
 = 57,

2015 
	mETHTOOL_LINK_MODE_100000ba£SR2_FuŒ_BIT
 = 58,

2016 
	mETHTOOL_LINK_MODE_100000ba£CR2_FuŒ_BIT
 = 59,

2017 
	mETHTOOL_LINK_MODE_100000ba£LR2_ER2_FR2_FuŒ_BIT
 = 60,

2018 
	mETHTOOL_LINK_MODE_100000ba£DR2_FuŒ_BIT
 = 61,

2019 
	mETHTOOL_LINK_MODE_200000ba£KR4_FuŒ_BIT
 = 62,

2020 
	mETHTOOL_LINK_MODE_200000ba£SR4_FuŒ_BIT
 = 63,

2021 
	mETHTOOL_LINK_MODE_200000ba£LR4_ER4_FR4_FuŒ_BIT
 = 64,

2022 
	mETHTOOL_LINK_MODE_200000ba£DR4_FuŒ_BIT
 = 65,

2023 
	mETHTOOL_LINK_MODE_200000ba£CR4_FuŒ_BIT
 = 66,

2024 
	mETHTOOL_LINK_MODE_100ba£T1_FuŒ_BIT
 = 67,

2025 
	mETHTOOL_LINK_MODE_1000ba£T1_FuŒ_BIT
 = 68,

2026 
	mETHTOOL_LINK_MODE_400000ba£KR8_FuŒ_BIT
 = 69,

2027 
	mETHTOOL_LINK_MODE_400000ba£SR8_FuŒ_BIT
 = 70,

2028 
	mETHTOOL_LINK_MODE_400000ba£LR8_ER8_FR8_FuŒ_BIT
 = 71,

2029 
	mETHTOOL_LINK_MODE_400000ba£DR8_FuŒ_BIT
 = 72,

2030 
	mETHTOOL_LINK_MODE_400000ba£CR8_FuŒ_BIT
 = 73,

2031 
	mETHTOOL_LINK_MODE_FEC_LLRS_BIT
 = 74,

2032 
	mETHTOOL_LINK_MODE_100000ba£KR_FuŒ_BIT
 = 75,

2033 
	mETHTOOL_LINK_MODE_100000ba£SR_FuŒ_BIT
 = 76,

2034 
	mETHTOOL_LINK_MODE_100000ba£LR_ER_FR_FuŒ_BIT
 = 77,

2035 
	mETHTOOL_LINK_MODE_100000ba£CR_FuŒ_BIT
 = 78,

2036 
	mETHTOOL_LINK_MODE_100000ba£DR_FuŒ_BIT
 = 79,

2037 
	mETHTOOL_LINK_MODE_200000ba£KR2_FuŒ_BIT
 = 80,

2038 
	mETHTOOL_LINK_MODE_200000ba£SR2_FuŒ_BIT
 = 81,

2039 
	mETHTOOL_LINK_MODE_200000ba£LR2_ER2_FR2_FuŒ_BIT
 = 82,

2040 
	mETHTOOL_LINK_MODE_200000ba£DR2_FuŒ_BIT
 = 83,

2041 
	mETHTOOL_LINK_MODE_200000ba£CR2_FuŒ_BIT
 = 84,

2042 
	mETHTOOL_LINK_MODE_400000ba£KR4_FuŒ_BIT
 = 85,

2043 
	mETHTOOL_LINK_MODE_400000ba£SR4_FuŒ_BIT
 = 86,

2044 
	mETHTOOL_LINK_MODE_400000ba£LR4_ER4_FR4_FuŒ_BIT
 = 87,

2045 
	mETHTOOL_LINK_MODE_400000ba£DR4_FuŒ_BIT
 = 88,

2046 
	mETHTOOL_LINK_MODE_400000ba£CR4_FuŒ_BIT
 = 89,

2047 
	mETHTOOL_LINK_MODE_100ba£FX_HÆf_BIT
 = 90,

2048 
	mETHTOOL_LINK_MODE_100ba£FX_FuŒ_BIT
 = 91,

2049 
	mETHTOOL_LINK_MODE_10ba£T1L_FuŒ_BIT
 = 92,

2050 
	mETHTOOL_LINK_MODE_800000ba£CR8_FuŒ_BIT
 = 93,

2051 
	mETHTOOL_LINK_MODE_800000ba£KR8_FuŒ_BIT
 = 94,

2052 
	mETHTOOL_LINK_MODE_800000ba£DR8_FuŒ_BIT
 = 95,

2053 
	mETHTOOL_LINK_MODE_800000ba£DR8_2_FuŒ_BIT
 = 96,

2054 
	mETHTOOL_LINK_MODE_800000ba£SR8_FuŒ_BIT
 = 97,

2055 
	mETHTOOL_LINK_MODE_800000ba£VR8_FuŒ_BIT
 = 98,

2056 
	mETHTOOL_LINK_MODE_10ba£T1S_FuŒ_BIT
 = 99,

2057 
	mETHTOOL_LINK_MODE_10ba£T1S_HÆf_BIT
 = 100,

2058 
	mETHTOOL_LINK_MODE_10ba£T1S_P2MP_HÆf_BIT
 = 101,

2059 
	mETHTOOL_LINK_MODE_10ba£T1BRR_FuŒ_BIT
 = 102,

2062 
	m__ETHTOOL_LINK_MODE_MASK_NBITS


2065 
	#__ETHTOOL_LINK_MODE_LEGACY_MASK
(
ba£_«me
) \

2066 (1UL << (
ETHTOOL_LINK_MODE_
 ## 
ba£_«me
 ## 
_BIT
))

	)

2072 
	#SUPPORTED_10ba£T_HÆf
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(10ba
£T_HÆf
)

	)

2073 
	#SUPPORTED_10ba£T_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(10ba
£T_FuŒ
)

	)

2074 
	#SUPPORTED_100ba£T_HÆf
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(100ba
£T_HÆf
)

	)

2075 
	#SUPPORTED_100ba£T_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(100ba
£T_FuŒ
)

	)

2076 
	#SUPPORTED_1000ba£T_HÆf
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(1000ba
£T_HÆf
)

	)

2077 
	#SUPPORTED_1000ba£T_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(1000ba
£T_FuŒ
)

	)

2078 
	#SUPPORTED_Aut⁄eg
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
Aut⁄eg
)

	)

2079 
	#SUPPORTED_TP
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
TP
)

	)

2080 
	#SUPPORTED_AUI
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
AUI
)

	)

2081 
	#SUPPORTED_MII
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
MII
)

	)

2082 
	#SUPPORTED_FIBRE
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
FIBRE
)

	)

2083 
	#SUPPORTED_BNC
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
BNC
)

	)

2084 
	#SUPPORTED_10000ba£T_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(10000ba
£T_FuŒ
)

	)

2085 
	#SUPPORTED_Pau£
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
Pau£
)

	)

2086 
	#SUPPORTED_Asym_Pau£
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
Asym_Pau£
)

	)

2087 
	#SUPPORTED_2500ba£X_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(2500ba
£X_FuŒ
)

	)

2088 
	#SUPPORTED_Back∂™e
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
Back∂™e
)

	)

2089 
	#SUPPORTED_1000ba£KX_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(1000ba
£KX_FuŒ
)

	)

2090 
	#SUPPORTED_10000ba£KX4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(10000ba
£KX4_FuŒ
)

	)

2091 
	#SUPPORTED_10000ba£KR_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(10000ba
£KR_FuŒ
)

	)

2092 
	#SUPPORTED_10000ba£R_FEC
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(10000ba
£R_FEC
)

	)

2093 
	#SUPPORTED_20000ba£MLD2_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(20000ba
£MLD2_FuŒ
)

	)

2094 
	#SUPPORTED_20000ba£KR2_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(20000ba
£KR2_FuŒ
)

	)

2095 
	#SUPPORTED_40000ba£KR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(40000ba
£KR4_FuŒ
)

	)

2096 
	#SUPPORTED_40000ba£CR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(40000ba
£CR4_FuŒ
)

	)

2097 
	#SUPPORTED_40000ba£SR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(40000ba
£SR4_FuŒ
)

	)

2098 
	#SUPPORTED_40000ba£LR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(40000ba
£LR4_FuŒ
)

	)

2099 
	#SUPPORTED_56000ba£KR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(56000ba
£KR4_FuŒ
)

	)

2100 
	#SUPPORTED_56000ba£CR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(56000ba
£CR4_FuŒ
)

	)

2101 
	#SUPPORTED_56000ba£SR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(56000ba
£SR4_FuŒ
)

	)

2102 
	#SUPPORTED_56000ba£LR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(56000ba
£LR4_FuŒ
)

	)

2112 
	#ADVERTISED_10ba£T_HÆf
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(10ba
£T_HÆf
)

	)

2113 
	#ADVERTISED_10ba£T_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(10ba
£T_FuŒ
)

	)

2114 
	#ADVERTISED_100ba£T_HÆf
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(100ba
£T_HÆf
)

	)

2115 
	#ADVERTISED_100ba£T_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(100ba
£T_FuŒ
)

	)

2116 
	#ADVERTISED_1000ba£T_HÆf
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(1000ba
£T_HÆf
)

	)

2117 
	#ADVERTISED_1000ba£T_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(1000ba
£T_FuŒ
)

	)

2118 
	#ADVERTISED_Aut⁄eg
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
Aut⁄eg
)

	)

2119 
	#ADVERTISED_TP
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
TP
)

	)

2120 
	#ADVERTISED_AUI
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
AUI
)

	)

2121 
	#ADVERTISED_MII
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
MII
)

	)

2122 
	#ADVERTISED_FIBRE
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
FIBRE
)

	)

2123 
	#ADVERTISED_BNC
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
BNC
)

	)

2124 
	#ADVERTISED_10000ba£T_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(10000ba
£T_FuŒ
)

	)

2125 
	#ADVERTISED_Pau£
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
Pau£
)

	)

2126 
	#ADVERTISED_Asym_Pau£
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
Asym_Pau£
)

	)

2127 
	#ADVERTISED_2500ba£X_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(2500ba
£X_FuŒ
)

	)

2128 
	#ADVERTISED_Back∂™e
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(
Back∂™e
)

	)

2129 
	#ADVERTISED_1000ba£KX_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(1000ba
£KX_FuŒ
)

	)

2130 
	#ADVERTISED_10000ba£KX4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(10000ba
£KX4_FuŒ
)

	)

2131 
	#ADVERTISED_10000ba£KR_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(10000ba
£KR_FuŒ
)

	)

2132 
	#ADVERTISED_10000ba£R_FEC
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(10000ba
£R_FEC
)

	)

2133 
	#ADVERTISED_20000ba£MLD2_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(20000ba
£MLD2_FuŒ
)

	)

2134 
	#ADVERTISED_20000ba£KR2_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(20000ba
£KR2_FuŒ
)

	)

2135 
	#ADVERTISED_40000ba£KR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(40000ba
£KR4_FuŒ
)

	)

2136 
	#ADVERTISED_40000ba£CR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(40000ba
£CR4_FuŒ
)

	)

2137 
	#ADVERTISED_40000ba£SR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(40000ba
£SR4_FuŒ
)

	)

2138 
	#ADVERTISED_40000ba£LR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(40000ba
£LR4_FuŒ
)

	)

2139 
	#ADVERTISED_56000ba£KR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(56000ba
£KR4_FuŒ
)

	)

2140 
	#ADVERTISED_56000ba£CR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(56000ba
£CR4_FuŒ
)

	)

2141 
	#ADVERTISED_56000ba£SR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(56000ba
£SR4_FuŒ
)

	)

2142 
	#ADVERTISED_56000ba£LR4_FuŒ
 
	`__ETHTOOL_LINK_MODE_LEGACY_MASK
(56000ba
£LR4_FuŒ
)

	)

2157 
	#SPEED_10
 10

	)

2158 
	#SPEED_100
 100

	)

2159 
	#SPEED_1000
 1000

	)

2160 
	#SPEED_2500
 2500

	)

2161 
	#SPEED_5000
 5000

	)

2162 
	#SPEED_10000
 10000

	)

2163 
	#SPEED_14000
 14000

	)

2164 
	#SPEED_20000
 20000

	)

2165 
	#SPEED_25000
 25000

	)

2166 
	#SPEED_40000
 40000

	)

2167 
	#SPEED_50000
 50000

	)

2168 
	#SPEED_56000
 56000

	)

2169 
	#SPEED_100000
 100000

	)

2170 
	#SPEED_200000
 200000

	)

2171 
	#SPEED_400000
 400000

	)

2172 
	#SPEED_800000
 800000

	)

2174 
	#SPEED_UNKNOWN
 -1

	)

2176 
__ölöe__
 
	$ëhtoﬁ_vÆid©e_•ìd
(
__u32
 
•ìd
)

2178  
•ìd
 <
INT_MAX
 || s≥ed =(
__u32
)
SPEED_UNKNOWN
;

2179 
	}
}

2182 
	#DUPLEX_HALF
 0x00

	)

2183 
	#DUPLEX_FULL
 0x01

	)

2184 
	#DUPLEX_UNKNOWN
 0xff

	)

2186 
__ölöe__
 
	$ëhtoﬁ_vÆid©e_du∂ex
(
__u8
 
du∂ex
)

2188 
du∂ex
) {

2189 
DUPLEX_HALF
:

2190 
DUPLEX_FULL
:

2191 
DUPLEX_UNKNOWN
:

2196 
	}
}

2198 
	#MASTER_SLAVE_CFG_UNSUPPORTED
 0

	)

2199 
	#MASTER_SLAVE_CFG_UNKNOWN
 1

	)

2200 
	#MASTER_SLAVE_CFG_MASTER_PREFERRED
 2

	)

2201 
	#MASTER_SLAVE_CFG_SLAVE_PREFERRED
 3

	)

2202 
	#MASTER_SLAVE_CFG_MASTER_FORCE
 4

	)

2203 
	#MASTER_SLAVE_CFG_SLAVE_FORCE
 5

	)

2204 
	#MASTER_SLAVE_STATE_UNSUPPORTED
 0

	)

2205 
	#MASTER_SLAVE_STATE_UNKNOWN
 1

	)

2206 
	#MASTER_SLAVE_STATE_MASTER
 2

	)

2207 
	#MASTER_SLAVE_STATE_SLAVE
 3

	)

2208 
	#MASTER_SLAVE_STATE_ERR
 4

	)

2216 
	#RATE_MATCH_NONE
 0

	)

2218 
	#RATE_MATCH_PAUSE
 1

	)

2220 
	#RATE_MATCH_CRS
 2

	)

2222 
	#RATE_MATCH_OPEN_LOOP
 3

	)

2225 
	#PORT_TP
 0x00

	)

2226 
	#PORT_AUI
 0x01

	)

2227 
	#PORT_MII
 0x02

	)

2228 
	#PORT_FIBRE
 0x03

	)

2229 
	#PORT_BNC
 0x04

	)

2230 
	#PORT_DA
 0x05

	)

2231 
	#PORT_NONE
 0xef

	)

2232 
	#PORT_OTHER
 0xff

	)

2235 
	#XCVR_INTERNAL
 0x00

	)

2236 
	#XCVR_EXTERNAL
 0x01

	)

2237 
	#XCVR_DUMMY1
 0x02

	)

2238 
	#XCVR_DUMMY2
 0x03

	)

2239 
	#XCVR_DUMMY3
 0x04

	)

2242 
	#AUTONEG_DISABLE
 0x00

	)

2243 
	#AUTONEG_ENABLE
 0x01

	)

2248 
	#ETH_TP_MDI_INVALID
 0x00

	)

2249 
	#ETH_TP_MDI
 0x01

	)

2250 
	#ETH_TP_MDI_X
 0x02

	)

2251 
	#ETH_TP_MDI_AUTO
 0x03

	)

2254 
	#WAKE_PHY
 (1 << 0)

	)

2255 
	#WAKE_UCAST
 (1 << 1)

	)

2256 
	#WAKE_MCAST
 (1 << 2)

	)

2257 
	#WAKE_BCAST
 (1 << 3)

	)

2258 
	#WAKE_ARP
 (1 << 4)

	)

2259 
	#WAKE_MAGIC
 (1 << 5)

	)

2260 
	#WAKE_MAGICSECURE
 (1 << 6Ë

	)

2261 
	#WAKE_FILTER
 (1 << 7)

	)

2263 
	#WOL_MODE_COUNT
 8

	)

2271 
	#RXH_XFRM_SYM_XOR
 (1 << 0)

	)

2272 
	#RXH_XFRM_NO_CHANGE
 0xff

	)

2275 
	#TCP_V4_FLOW
 0x01

	)

2276 
	#UDP_V4_FLOW
 0x02

	)

2277 
	#SCTP_V4_FLOW
 0x03

	)

2278 
	#AH_ESP_V4_FLOW
 0x04

	)

2279 
	#TCP_V6_FLOW
 0x05

	)

2280 
	#UDP_V6_FLOW
 0x06

	)

2281 
	#SCTP_V6_FLOW
 0x07

	)

2282 
	#AH_ESP_V6_FLOW
 0x08

	)

2283 
	#AH_V4_FLOW
 0x09

	)

2284 
	#ESP_V4_FLOW
 0x0®

	)

2285 
	#AH_V6_FLOW
 0x0b

	)

2286 
	#ESP_V6_FLOW
 0x0¯

	)

2287 
	#IPV4_USER_FLOW
 0x0d

	)

2288 
	#IP_USER_FLOW
 
IPV4_USER_FLOW


	)

2289 
	#IPV6_USER_FLOW
 0x0ê

	)

2290 
	#IPV4_FLOW
 0x10

	)

2291 
	#IPV6_FLOW
 0x11

	)

2292 
	#ETHER_FLOW
 0x12

	)

2299 
	#GTPU_V4_FLOW
 0x13

	)

2300 
	#GTPU_V6_FLOW
 0x14

	)

2308 
	#GTPC_V4_FLOW
 0x15

	)

2309 
	#GTPC_V6_FLOW
 0x16

	)

2316 
	#GTPC_TEID_V4_FLOW
 0x17

	)

2317 
	#GTPC_TEID_V6_FLOW
 0x18

	)

2324 
	#GTPU_EH_V4_FLOW
 0x19

	)

2325 
	#GTPU_EH_V6_FLOW
 0x1®

	)

2335 
	#GTPU_UL_V4_FLOW
 0x1b

	)

2336 
	#GTPU_UL_V6_FLOW
 0x1¯

	)

2337 
	#GTPU_DL_V4_FLOW
 0x1d

	)

2338 
	#GTPU_DL_V6_FLOW
 0x1ê

	)

2341 
	#FLOW_EXT
 0x80000000

	)

2342 
	#FLOW_MAC_EXT
 0x40000000

	)

2344 
	#FLOW_RSS
 0x20000000

	)

2347 
	#RXH_L2DA
 (1 << 1)

	)

2348 
	#RXH_VLAN
 (1 << 2)

	)

2349 
	#RXH_L3_PROTO
 (1 << 3)

	)

2350 
	#RXH_IP_SRC
 (1 << 4)

	)

2351 
	#RXH_IP_DST
 (1 << 5)

	)

2352 
	#RXH_L4_B_0_1
 (1 << 6Ë

	)

2353 
	#RXH_L4_B_2_3
 (1 << 7Ë

	)

2354 
	#RXH_GTP_TEID
 (1 << 8Ë

	)

2355 
	#RXH_DISCARD
 (1 << 31)

	)

2357 
	#RX_CLS_FLOW_DISC
 0xffffffffffffffffULL

	)

2358 
	#RX_CLS_FLOW_WAKE
 0xffffffffffffff„ULL

	)

2361 
	#RX_CLS_LOC_SPECIAL
 0x80000000

	)

2362 
	#RX_CLS_LOC_ANY
 0xffffffff

	)

2363 
	#RX_CLS_LOC_FIRST
 0xffffff„

	)

2364 
	#RX_CLS_LOC_LAST
 0xfffffffd

	)

2367 
	#ETH_MODULE_SFF_8079
 0x1

	)

2368 
	#ETH_MODULE_SFF_8079_LEN
 256

	)

2369 
	#ETH_MODULE_SFF_8472
 0x2

	)

2370 
	#ETH_MODULE_SFF_8472_LEN
 512

	)

2371 
	#ETH_MODULE_SFF_8636
 0x3

	)

2372 
	#ETH_MODULE_SFF_8636_LEN
 256

	)

2373 
	#ETH_MODULE_SFF_8436
 0x4

	)

2374 
	#ETH_MODULE_SFF_8436_LEN
 256

	)

2376 
	#ETH_MODULE_SFF_8636_MAX_LEN
 640

	)

2377 
	#ETH_MODULE_SFF_8436_MAX_LEN
 640

	)

2386 
	eëhtoﬁ_ª£t_Êags
 {

2392 
	mETH_RESET_MGMT
 = 1 << 0,

2393 
	mETH_RESET_IRQ
 = 1 << 1,

2394 
	mETH_RESET_DMA
 = 1 << 2,

2395 
	mETH_RESET_FILTER
 = 1 << 3,

2396 
	mETH_RESET_OFFLOAD
 = 1 << 4,

2397 
	mETH_RESET_MAC
 = 1 << 5,

2398 
	mETH_RESET_PHY
 = 1 << 6,

2399 
	mETH_RESET_RAM
 = 1 << 7,

2401 
	mETH_RESET_AP
 = 1 << 8,

2403 
	mETH_RESET_DEDICATED
 = 0x0000ffff,

2405 
	mETH_RESET_ALL
 = 0xffffffff,

2408 
	#ETH_RESET_SHARED_SHIFT
 16

	)

2515 
	sëhtoﬁ_lök_£âögs
 {

2516 
__u32
 
	mcmd
;

2517 
__u32
 
	m•ìd
;

2518 
__u8
 
	mdu∂ex
;

2519 
__u8
 
	mp‹t
;

2520 
__u8
 
	mphy_addªss
;

2521 
__u8
 
	maut⁄eg
;

2522 
__u8
 
	mmdio_suµ‹t
;

2523 
__u8
 
	mëh_ç_mdix
;

2524 
__u8
 
	mëh_ç_mdix_˘æ
;

2525 
__s8
 
	mlök_mode_masks_nw‹ds
;

2526 
__u8
 
	må™s˚ivî
;

2527 
__u8
 
	mma°î_¶ave_cfg
;

2528 
__u8
 
	mma°î_¶ave_°©e
;

2529 
__u8
 
	møã_m©chög
;

2530 
__u32
 
	mª£rved
[7];

2536 
__u32
 
	mlök_mode_masks
[];

2554 
	ephy_up°ªam
 {

2555 
	mPHY_UPSTREAM_MAC
,

2556 
	mPHY_UPSTREAM_PHY
,

	@/usr/include/linux/icmpv6.h

2 #i‚de‡
_LINUX_ICMPV6_H


3 
	#_LINUX_ICMPV6_H


	)

5 
	~<löux/ty≥s.h
>

6 
	~<asm/byã‹dî.h
>

8 
	sicmp6hdr
 {

10 
__u8
 
	micmp6_ty≥
;

11 
__u8
 
	micmp6_code
;

12 
__sum16
 
	micmp6_cksum
;

16 
__be32
 
	mun_d©a32
[1];

17 
__be16
 
	mun_d©a16
[2];

18 
__u8
 
	mun_d©a8
[4];

20 
	sicmpv6_echo
 {

21 
__be16
 
	midítifõr
;

22 
__be16
 
	m£quí˚
;

23 } 
	mu_echo
;

25 
	sicmpv6_nd_advt
 {

26 #i‡
deföed
(
__LITTLE_ENDIAN_BITFIELD
)

27 
__u32
 
	mª£rved
:5,

28 
	movîride
:1,

29 
	msﬁicôed
:1,

30 
	mrouãr
:1,

31 
	mª£rved2
:24;

32 #ñi‡
deföed
(
__BIG_ENDIAN_BITFIELD
)

33 
__u32
 
	mrouãr
:1,

34 
	msﬁicôed
:1,

35 
	movîride
:1,

36 
	mª£rved
:29;

40 } 
	mu_nd_advt
;

42 
	sicmpv6_nd_ø
 {

43 
__u8
 
	mh›_limô
;

44 #i‡
deföed
(
__LITTLE_ENDIAN_BITFIELD
)

45 
__u8
 
	mª£rved
:3,

46 
	mrouãr_¥ef
:2,

47 
	mhome_agít
:1,

48 
	mŸhî
:1,

49 
	mm™aged
:1;

51 #ñi‡
deföed
(
__BIG_ENDIAN_BITFIELD
)

52 
__u8
 
	mm™aged
:1,

53 
	mŸhî
:1,

54 
	mhome_agít
:1,

55 
	mrouãr_¥ef
:2,

56 
	mª£rved
:3;

60 
__be16
 
	mπ_li„time
;

61 } 
	mu_nd_ø
;

63 } 
	micmp6_d©aun
;

65 
	#icmp6_idítifõr
 
icmp6_d©aun
.
u_echo
.
idítifõr


	)

66 
	#icmp6_£quí˚
 
icmp6_d©aun
.
u_echo
.
£quí˚


	)

67 
	#icmp6_poöãr
 
icmp6_d©aun
.
un_d©a32
[0]

	)

68 
	#icmp6_mtu
 
icmp6_d©aun
.
un_d©a32
[0]

	)

69 
	#icmp6_unu£d
 
icmp6_d©aun
.
un_d©a32
[0]

	)

70 
	#icmp6_maxdñay
 
icmp6_d©aun
.
un_d©a16
[0]

	)

71 
	#icmp6_d©agøm_Àn
 
icmp6_d©aun
.
un_d©a8
[0]

	)

72 
	#icmp6_rouãr
 
icmp6_d©aun
.
u_nd_advt
.
rouãr


	)

73 
	#icmp6_sﬁicôed
 
icmp6_d©aun
.
u_nd_advt
.
sﬁicôed


	)

74 
	#icmp6_ovîride
 
icmp6_d©aun
.
u_nd_advt
.
ovîride


	)

75 
	#icmp6_ndis¸e£rved
 
icmp6_d©aun
.
u_nd_advt
.
ª£rved


	)

76 
	#icmp6_h›_limô
 
icmp6_d©aun
.
u_nd_ø
.
h›_limô


	)

77 
	#icmp6_addrc⁄f_m™aged
 
icmp6_d©aun
.
u_nd_ø
.
m™aged


	)

78 
	#icmp6_addrc⁄f_Ÿhî
 
icmp6_d©aun
.
u_nd_ø
.
Ÿhî


	)

79 
	#icmp6_π_li„time
 
icmp6_d©aun
.
u_nd_ø
.
π_li„time


	)

80 
	#icmp6_rouãr_¥ef
 
icmp6_d©aun
.
u_nd_ø
.
rouãr_¥ef


	)

84 
	#ICMPV6_ROUTER_PREF_LOW
 0x3

	)

85 
	#ICMPV6_ROUTER_PREF_MEDIUM
 0x0

	)

86 
	#ICMPV6_ROUTER_PREF_HIGH
 0x1

	)

87 
	#ICMPV6_ROUTER_PREF_INVALID
 0x2

	)

89 
	#ICMPV6_DEST_UNREACH
 1

	)

90 
	#ICMPV6_PKT_TOOBIG
 2

	)

91 
	#ICMPV6_TIME_EXCEED
 3

	)

92 
	#ICMPV6_PARAMPROB
 4

	)

94 
	#ICMPV6_ERRMSG_MAX
 127

	)

96 
	#ICMPV6_INFOMSG_MASK
 0x80

	)

98 
	#ICMPV6_ECHO_REQUEST
 128

	)

99 
	#ICMPV6_ECHO_REPLY
 129

	)

100 
	#ICMPV6_MGM_QUERY
 130

	)

101 
	#ICMPV6_MGM_REPORT
 131

	)

102 
	#ICMPV6_MGM_REDUCTION
 132

	)

104 
	#ICMPV6_NI_QUERY
 139

	)

105 
	#ICMPV6_NI_REPLY
 140

	)

107 
	#ICMPV6_MLD2_REPORT
 143

	)

109 
	#ICMPV6_DHAAD_REQUEST
 144

	)

110 
	#ICMPV6_DHAAD_REPLY
 145

	)

111 
	#ICMPV6_MOBILE_PREFIX_SOL
 146

	)

112 
	#ICMPV6_MOBILE_PREFIX_ADV
 147

	)

114 
	#ICMPV6_MRDISC_ADV
 151

	)

115 
	#ICMPV6_MRDISC_SOL
 152

	)

117 
	#ICMPV6_MSG_MAX
 255

	)

122 
	#ICMPV6_NOROUTE
 0

	)

123 
	#ICMPV6_ADM_PROHIBITED
 1

	)

124 
	#ICMPV6_NOT_NEIGHBOUR
 2

	)

125 
	#ICMPV6_ADDR_UNREACH
 3

	)

126 
	#ICMPV6_PORT_UNREACH
 4

	)

127 
	#ICMPV6_POLICY_FAIL
 5

	)

128 
	#ICMPV6_REJECT_ROUTE
 6

	)

133 
	#ICMPV6_EXC_HOPLIMIT
 0

	)

134 
	#ICMPV6_EXC_FRAGTIME
 1

	)

139 
	#ICMPV6_HDR_FIELD
 0

	)

140 
	#ICMPV6_UNK_NEXTHDR
 1

	)

141 
	#ICMPV6_UNK_OPTION
 2

	)

142 
	#ICMPV6_HDR_INCOMP
 3

	)

145 
	#ICMPV6_EXT_ECHO_REQUEST
 160

	)

146 
	#ICMPV6_EXT_ECHO_REPLY
 161

	)

151 
	#ICMPV6_FILTER
 1

	)

157 
	#ICMPV6_FILTER_BLOCK
 1

	)

158 
	#ICMPV6_FILTER_PASS
 2

	)

159 
	#ICMPV6_FILTER_BLOCKOTHERS
 3

	)

160 
	#ICMPV6_FILTER_PASSONLY
 4

	)

162 
	sicmp6_fûãr
 {

163 
__u32
 
	md©a
[8];

169 
	#MLD2_MODE_IS_INCLUDE
 1

	)

170 
	#MLD2_MODE_IS_EXCLUDE
 2

	)

171 
	#MLD2_CHANGE_TO_INCLUDE
 3

	)

172 
	#MLD2_CHANGE_TO_EXCLUDE
 4

	)

173 
	#MLD2_ALLOW_NEW_SOURCES
 5

	)

174 
	#MLD2_BLOCK_OLD_SOURCES
 6

	)

176 
	#MLD2_ALL_MCR_INIT
 { { { 0xff,0x02,0,0,0,0,0,0,0,0,0,0,0,0,0,0x16 } } }

	)

	@/usr/include/linux/if.h

20 #i‚de‡
_LINUX_IF_H


21 
	#_LINUX_IF_H


	)

23 
	~<löux/libc-com∑t.h
>

24 
	~<löux/ty≥s.h
>

25 
	~<löux/sockë.h
>

28 
	~<sys/sockë.h
>

30 #i‡
__UAPI_DEF_IF_IFNAMSIZ


31 
	#IFNAMSIZ
 16

	)

33 
	#IFALIASZ
 256

	)

34 
	#ALTIFNAMSIZ
 128

	)

35 
	~<löux/hdlc/io˘l.h
>

38 #i‡
__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO
 != 0 || \

39 
	g__UAPI_DEF_IF_NET_DEVICE_FLAGS
 != 0

80 
	e√t_devi˚_Êags
 {

82 #i‡
__UAPI_DEF_IF_NET_DEVICE_FLAGS


83 
IFF_UP
 = 1<<0,

84 
	mIFF_BROADCAST
 = 1<<1,

85 
	mIFF_DEBUG
 = 1<<2,

86 
	mIFF_LOOPBACK
 = 1<<3,

87 
	mIFF_POINTOPOINT
 = 1<<4,

88 
	mIFF_NOTRAILERS
 = 1<<5,

89 
	mIFF_RUNNING
 = 1<<6,

90 
	mIFF_NOARP
 = 1<<7,

91 
	mIFF_PROMISC
 = 1<<8,

92 
	mIFF_ALLMULTI
 = 1<<9,

93 
	mIFF_MASTER
 = 1<<10,

94 
	mIFF_SLAVE
 = 1<<11,

95 
	mIFF_MULTICAST
 = 1<<12,

96 
	mIFF_PORTSEL
 = 1<<13,

97 
	mIFF_AUTOMEDIA
 = 1<<14,

98 
	mIFF_DYNAMIC
 = 1<<15,

100 #i‡
__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO


101 
	mIFF_LOWER_UP
 = 1<<16,

102 
	mIFF_DORMANT
 = 1<<17,

103 
	mIFF_ECHO
 = 1<<18,

109 #i‡
__UAPI_DEF_IF_NET_DEVICE_FLAGS


110 
	#IFF_UP
 
IFF_UP


	)

111 
	#IFF_BROADCAST
 
IFF_BROADCAST


	)

112 
	#IFF_DEBUG
 
IFF_DEBUG


	)

113 
	#IFF_LOOPBACK
 
IFF_LOOPBACK


	)

114 
	#IFF_POINTOPOINT
 
IFF_POINTOPOINT


	)

115 
	#IFF_NOTRAILERS
 
IFF_NOTRAILERS


	)

116 
	#IFF_RUNNING
 
IFF_RUNNING


	)

117 
	#IFF_NOARP
 
IFF_NOARP


	)

118 
	#IFF_PROMISC
 
IFF_PROMISC


	)

119 
	#IFF_ALLMULTI
 
IFF_ALLMULTI


	)

120 
	#IFF_MASTER
 
IFF_MASTER


	)

121 
	#IFF_SLAVE
 
IFF_SLAVE


	)

122 
	#IFF_MULTICAST
 
IFF_MULTICAST


	)

123 
	#IFF_PORTSEL
 
IFF_PORTSEL


	)

124 
	#IFF_AUTOMEDIA
 
IFF_AUTOMEDIA


	)

125 
	#IFF_DYNAMIC
 
IFF_DYNAMIC


	)

128 #i‡
__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO


129 
	#IFF_LOWER_UP
 
IFF_LOWER_UP


	)

130 
	#IFF_DORMANT
 
IFF_DORMANT


	)

131 
	#IFF_ECHO
 
IFF_ECHO


	)

134 
	#IFF_VOLATILE
 (
IFF_LOOPBACK
|
IFF_POINTOPOINT
|
IFF_BROADCAST
|
IFF_ECHO
|\

135 
IFF_MASTER
|
IFF_SLAVE
|
IFF_RUNNING
|
IFF_LOWER_UP
|
IFF_DORMANT
)

	)

137 
	#IF_GET_IFACE
 0x0001

	)

138 
	#IF_GET_PROTO
 0x0002

	)

141 
	#IF_IFACE_V35
 0x1000

	)

142 
	#IF_IFACE_V24
 0x1001

	)

143 
	#IF_IFACE_X21
 0x1002

	)

144 
	#IF_IFACE_T1
 0x1003

	)

145 
	#IF_IFACE_E1
 0x1004

	)

146 
	#IF_IFACE_SYNC_SERIAL
 0x1005

	)

147 
	#IF_IFACE_X21D
 0x1006

	)

150 
	#IF_PROTO_HDLC
 0x2000

	)

151 
	#IF_PROTO_PPP
 0x2001

	)

152 
	#IF_PROTO_CISCO
 0x2002

	)

153 
	#IF_PROTO_FR
 0x2003

	)

154 
	#IF_PROTO_FR_ADD_PVC
 0x2004

	)

155 
	#IF_PROTO_FR_DEL_PVC
 0x2005

	)

156 
	#IF_PROTO_X25
 0x2006

	)

157 
	#IF_PROTO_HDLC_ETH
 0x2007

	)

158 
	#IF_PROTO_FR_ADD_ETH_PVC
 0x2008

	)

159 
	#IF_PROTO_FR_DEL_ETH_PVC
 0x2009

	)

160 
	#IF_PROTO_FR_PVC
 0x200A

	)

161 
	#IF_PROTO_FR_ETH_PVC
 0x200B

	)

162 
	#IF_PROTO_RAW
 0x200C

	)

166 
	mIF_OPER_UNKNOWN
,

167 
	mIF_OPER_NOTPRESENT
,

168 
	mIF_OPER_DOWN
,

169 
	mIF_OPER_LOWERLAYERDOWN
,

170 
	mIF_OPER_TESTING
,

171 
	mIF_OPER_DORMANT
,

172 
	mIF_OPER_UP
,

177 
	mIF_LINK_MODE_DEFAULT
,

178 
	mIF_LINK_MODE_DORMANT
,

179 
	mIF_LINK_MODE_TESTING
,

193 #i‡
__UAPI_DEF_IF_IFMAP


194 
	sifm≠
 {

195 
	mmem_°¨t
;

196 
	mmem_íd
;

197 
	mba£_addr
;

198 
	múq
;

199 
	mdma
;

200 
	mp‹t
;

205 
	sif_£âögs
 {

206 
	mty≥
;

207 
	msize
;

210 
øw_hdlc_¥Ÿo
 *
	møw_hdlc
;

211 
cisco_¥Ÿo
 *
	mcisco
;

212 
‰_¥Ÿo
 *
	m‰
;

213 
‰_¥Ÿo_pvc
 *
	m‰_pvc
;

214 
‰_¥Ÿo_pvc_öfo
 *
	m‰_pvc_öfo
;

215 
x25_hdlc_¥Ÿo
 *
	mx25
;

218 
sync_£rül_£âögs
 *
	msync
;

219 
ã1_£âögs
 *
	mã1
;

220 } 
	mifs_ifsu
;

231 #i‡
__UAPI_DEF_IF_IFREQ


232 
	si‰eq
 {

233 
	#IFHWADDRLEN
 6

	)

236 
	mi‰n_«me
[
IFNAMSIZ
];

237 } 
	mi‰_i‰n
;

240 
sockaddr
 
	mi‰u_addr
;

241 
sockaddr
 
	mi‰u_d°addr
;

242 
sockaddr
 
	mi‰u_brﬂdaddr
;

243 
sockaddr
 
	mi‰u_√tmask
;

244 
sockaddr
 
	mi‰u_hwaddr
;

245 
	mi‰u_Êags
;

246 
	mi‰u_ivÆue
;

247 
	mi‰u_mtu
;

248 
ifm≠
 
	mi‰u_m≠
;

249 
	mi‰u_¶ave
[
IFNAMSIZ
];

250 
	mi‰u_√w«me
[
IFNAMSIZ
];

251 * 
	mi‰u_d©a
;

252 
if_£âögs
 
	mi‰u_£âögs
;

253 } 
	mi‰_i‰u
;

257 
	#i‰_«me
 
i‰_i‰n
.
i‰n_«me


	)

258 
	#i‰_hwaddr
 
i‰_i‰u
.
i‰u_hwaddr


	)

259 
	#i‰_addr
 
i‰_i‰u
.
i‰u_addr


	)

260 
	#i‰_d°addr
 
i‰_i‰u
.
i‰u_d°addr


	)

261 
	#i‰_brﬂdaddr
 
i‰_i‰u
.
i‰u_brﬂdaddr


	)

262 
	#i‰_√tmask
 
i‰_i‰u
.
i‰u_√tmask


	)

263 
	#i‰_Êags
 
i‰_i‰u
.
i‰u_Êags


	)

264 
	#i‰_mëric
 
i‰_i‰u
.
i‰u_ivÆue


	)

265 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mtu


	)

266 
	#i‰_m≠
 
i‰_i‰u
.
i‰u_m≠


	)

267 
	#i‰_¶ave
 
i‰_i‰u
.
i‰u_¶ave


	)

268 
	#i‰_d©a
 
i‰_i‰u
.
i‰u_d©a


	)

269 
	#i‰_ifödex
 
i‰_i‰u
.
i‰u_ivÆue


	)

270 
	#i‰_b™dwidth
 
i‰_i‰u
.
i‰u_ivÆue


	)

271 
	#i‰_qÀn
 
i‰_i‰u
.
i‰u_ivÆue


	)

272 
	#i‰_√w«me
 
i‰_i‰u
.
i‰u_√w«me


	)

273 
	#i‰_£âögs
 
i‰_i‰u
.
i‰u_£âögs


	)

283 #i‡
__UAPI_DEF_IF_IFCONF


284 
	sifc⁄f
 {

285 
	mifc_Àn
;

287 *
	mifcu_buf
;

288 
i‰eq
 *
	mifcu_ªq
;

289 } 
	mifc_ifcu
;

293 
	#ifc_buf
 
ifc_ifcu
.
ifcu_buf


	)

294 
	#ifc_ªq
 
ifc_ifcu
.
ifcu_ªq


	)

	@/usr/include/linux/if_arp.h

24 #i‚de‡
_LINUX_IF_ARP_H


25 
	#_LINUX_IF_ARP_H


	)

27 
	~<löux/√tdevi˚.h
>

30 
	#ARPHRD_NETROM
 0

	)

31 
	#ARPHRD_ETHER
 1

	)

32 
	#ARPHRD_EETHER
 2

	)

33 
	#ARPHRD_AX25
 3

	)

34 
	#ARPHRD_PRONET
 4

	)

35 
	#ARPHRD_CHAOS
 5

	)

36 
	#ARPHRD_IEEE802
 6

	)

37 
	#ARPHRD_ARCNET
 7

	)

38 
	#ARPHRD_APPLETLK
 8

	)

39 
	#ARPHRD_DLCI
 15

	)

40 
	#ARPHRD_ATM
 19

	)

41 
	#ARPHRD_METRICOM
 23

	)

42 
	#ARPHRD_IEEE1394
 24

	)

43 
	#ARPHRD_EUI64
 27

	)

44 
	#ARPHRD_INFINIBAND
 32

	)

47 
	#ARPHRD_SLIP
 256

	)

48 
	#ARPHRD_CSLIP
 257

	)

49 
	#ARPHRD_SLIP6
 258

	)

50 
	#ARPHRD_CSLIP6
 259

	)

51 
	#ARPHRD_RSRVD
 260

	)

52 
	#ARPHRD_ADAPT
 264

	)

53 
	#ARPHRD_ROSE
 270

	)

54 
	#ARPHRD_X25
 271

	)

55 
	#ARPHRD_HWX25
 272

	)

56 
	#ARPHRD_CAN
 280

	)

57 
	#ARPHRD_MCTP
 290

	)

58 
	#ARPHRD_PPP
 512

	)

59 
	#ARPHRD_CISCO
 513

	)

60 
	#ARPHRD_HDLC
 
ARPHRD_CISCO


	)

61 
	#ARPHRD_LAPB
 516

	)

62 
	#ARPHRD_DDCMP
 517

	)

63 
	#ARPHRD_RAWHDLC
 518

	)

64 
	#ARPHRD_RAWIP
 519

	)

66 
	#ARPHRD_TUNNEL
 768

	)

67 
	#ARPHRD_TUNNEL6
 769

	)

68 
	#ARPHRD_FRAD
 770

	)

69 
	#ARPHRD_SKIP
 771

	)

70 
	#ARPHRD_LOOPBACK
 772

	)

71 
	#ARPHRD_LOCALTLK
 773

	)

72 
	#ARPHRD_FDDI
 774

	)

73 
	#ARPHRD_BIF
 775

	)

74 
	#ARPHRD_SIT
 776

	)

75 
	#ARPHRD_IPDDP
 777

	)

76 
	#ARPHRD_IPGRE
 778

	)

77 
	#ARPHRD_PIMREG
 779

	)

78 
	#ARPHRD_HIPPI
 780

	)

79 
	#ARPHRD_ASH
 781

	)

80 
	#ARPHRD_ECONET
 782

	)

81 
	#ARPHRD_IRDA
 783

	)

83 
	#ARPHRD_FCPP
 784

	)

84 
	#ARPHRD_FCAL
 785

	)

85 
	#ARPHRD_FCPL
 786

	)

86 
	#ARPHRD_FCFABRIC
 787

	)

88 
	#ARPHRD_IEEE802_TR
 800

	)

89 
	#ARPHRD_IEEE80211
 801

	)

90 
	#ARPHRD_IEEE80211_PRISM
 802

	)

91 
	#ARPHRD_IEEE80211_RADIOTAP
 803

	)

92 
	#ARPHRD_IEEE802154
 804

	)

93 
	#ARPHRD_IEEE802154_MONITOR
 805

	)

95 
	#ARPHRD_PHONET
 820

	)

96 
	#ARPHRD_PHONET_PIPE
 821

	)

97 
	#ARPHRD_CAIF
 822

	)

98 
	#ARPHRD_IP6GRE
 823

	)

99 
	#ARPHRD_NETLINK
 824

	)

100 
	#ARPHRD_6LOWPAN
 825

	)

101 
	#ARPHRD_VSOCKMON
 826

	)

103 
	#ARPHRD_VOID
 0xFFFF

	)

104 
	#ARPHRD_NONE
 0xFFFE

	)

107 
	#ARPOP_REQUEST
 1

	)

108 
	#ARPOP_REPLY
 2

	)

109 
	#ARPOP_RREQUEST
 3

	)

110 
	#ARPOP_RREPLY
 4

	)

111 
	#ARPOP_InREQUEST
 8

	)

112 
	#ARPOP_InREPLY
 9

	)

113 
	#ARPOP_NAK
 10

	)

117 
	s¨¥eq
 {

118 
sockaddr
 
	m¨p_∑
;

119 
sockaddr
 
	m¨p_ha
;

120 
	m¨p_Êags
;

121 
sockaddr
 
	m¨p_√tmask
;

122 
	m¨p_dev
[
IFNAMSIZ
];

125 
	s¨¥eq_ﬁd
 {

126 
sockaddr
 
	m¨p_∑
;

127 
sockaddr
 
	m¨p_ha
;

128 
	m¨p_Êags
;

129 
sockaddr
 
	m¨p_√tmask
;

133 
	#ATF_COM
 0x02

	)

134 
	#ATF_PERM
 0x04

	)

135 
	#ATF_PUBL
 0x08

	)

136 
	#ATF_USETRAILERS
 0x10

	)

137 
	#ATF_NETMASK
 0x20

	)

139 
	#ATF_DONTPUB
 0x40

	)

145 
	s¨phdr
 {

146 
__be16
 
	m¨_hrd
;

147 
__be16
 
	m¨_¥o
;

148 
	m¨_h 
;

149 
	m¨_∂n
;

150 
__be16
 
	m¨_›
;

156 
	m¨_sha
[
ETH_ALEN
];

157 
	m¨_sù
[4];

158 
	m¨_tha
[
ETH_ALEN
];

159 
	m¨_tù
[4];

	@/usr/include/linux/if_bridge.h

14 #i‚de‡
_LINUX_IF_BRIDGE_H


15 
	#_LINUX_IF_BRIDGE_H


	)

17 
	~<löux/ty≥s.h
>

18 
	~<löux/if_ëhî.h
>

19 
	~<löux/ö6.h
>

21 
	#SYSFS_BRIDGE_ATTR
 "bridge"

	)

22 
	#SYSFS_BRIDGE_FDB
 "brf‹w¨d"

	)

23 
	#SYSFS_BRIDGE_PORT_SUBDIR
 "brif"

	)

24 
	#SYSFS_BRIDGE_PORT_ATTR
 "bΩ‹t"

	)

25 
	#SYSFS_BRIDGE_PORT_LINK
 "bridge"

	)

27 
	#BRCTL_VERSION
 1

	)

29 
	#BRCTL_GET_VERSION
 0

	)

30 
	#BRCTL_GET_BRIDGES
 1

	)

31 
	#BRCTL_ADD_BRIDGE
 2

	)

32 
	#BRCTL_DEL_BRIDGE
 3

	)

33 
	#BRCTL_ADD_IF
 4

	)

34 
	#BRCTL_DEL_IF
 5

	)

35 
	#BRCTL_GET_BRIDGE_INFO
 6

	)

36 
	#BRCTL_GET_PORT_LIST
 7

	)

37 
	#BRCTL_SET_BRIDGE_FORWARD_DELAY
 8

	)

38 
	#BRCTL_SET_BRIDGE_HELLO_TIME
 9

	)

39 
	#BRCTL_SET_BRIDGE_MAX_AGE
 10

	)

40 
	#BRCTL_SET_AGEING_TIME
 11

	)

41 
	#BRCTL_SET_GC_INTERVAL
 12

	)

42 
	#BRCTL_GET_PORT_INFO
 13

	)

43 
	#BRCTL_SET_BRIDGE_STP_STATE
 14

	)

44 
	#BRCTL_SET_BRIDGE_PRIORITY
 15

	)

45 
	#BRCTL_SET_PORT_PRIORITY
 16

	)

46 
	#BRCTL_SET_PATH_COST
 17

	)

47 
	#BRCTL_GET_FDB_ENTRIES
 18

	)

49 
	#BR_STATE_DISABLED
 0

	)

50 
	#BR_STATE_LISTENING
 1

	)

51 
	#BR_STATE_LEARNING
 2

	)

52 
	#BR_STATE_FORWARDING
 3

	)

53 
	#BR_STATE_BLOCKING
 4

	)

55 
	s__bridge_öfo
 {

56 
__u64
 
	mdesig«ãd_roŸ
;

57 
__u64
 
	mbridge_id
;

58 
__u32
 
	mroŸ_∑th_co°
;

59 
__u32
 
	mmax_age
;

60 
__u32
 
	mhñlo_time
;

61 
__u32
 
	mf‹w¨d_dñay
;

62 
__u32
 
	mbridge_max_age
;

63 
__u32
 
	mbridge_hñlo_time
;

64 
__u32
 
	mbridge_f‹w¨d_dñay
;

65 
__u8
 
	mt›ﬁogy_ch™ge
;

66 
__u8
 
	mt›ﬁogy_ch™ge_dëe˘ed
;

67 
__u8
 
	mroŸ_p‹t
;

68 
__u8
 
	m°p_íabÀd
;

69 
__u32
 
	mageög_time
;

70 
__u32
 
	mgc_öãrvÆ
;

71 
__u32
 
	mhñlo_timî_vÆue
;

72 
__u32
 
	mt˙_timî_vÆue
;

73 
__u32
 
	mt›ﬁogy_ch™ge_timî_vÆue
;

74 
__u32
 
	mgc_timî_vÆue
;

77 
	s__p‹t_öfo
 {

78 
__u64
 
	mdesig«ãd_roŸ
;

79 
__u64
 
	mdesig«ãd_bridge
;

80 
__u16
 
	mp‹t_id
;

81 
__u16
 
	mdesig«ãd_p‹t
;

82 
__u32
 
	m∑th_co°
;

83 
__u32
 
	mdesig«ãd_co°
;

84 
__u8
 
	m°©e
;

85 
__u8
 
	mt›_ch™ge_ack
;

86 
__u8
 
	mc⁄fig_≥ndög
;

87 
__u8
 
	munu£d0
;

88 
__u32
 
	mmesßge_age_timî_vÆue
;

89 
__u32
 
	mf‹w¨d_dñay_timî_vÆue
;

90 
__u32
 
	mhﬁd_timî_vÆue
;

93 
	s__fdb_íåy
 {

94 
__u8
 
	mmac_addr
[
ETH_ALEN
];

95 
__u8
 
	mp‹t_no
;

96 
__u8
 
	mis_loˇl
;

97 
__u32
 
	mageög_timî_vÆue
;

98 
__u8
 
	mp‹t_hi
;

99 
__u8
 
	m∑d0
;

100 
__u16
 
	munu£d
;

104 
	#BRIDGE_FLAGS_MASTER
 1

	)

105 
	#BRIDGE_FLAGS_SELF
 2

	)

107 
	#BRIDGE_MODE_VEB
 0

	)

108 
	#BRIDGE_MODE_VEPA
 1

	)

109 
	#BRIDGE_MODE_UNDEF
 0xFFFF

	)

119 
	mIFLA_BRIDGE_FLAGS
,

120 
	mIFLA_BRIDGE_MODE
,

121 
	mIFLA_BRIDGE_VLAN_INFO
,

122 
	mIFLA_BRIDGE_VLAN_TUNNEL_INFO
,

123 
	mIFLA_BRIDGE_MRP
,

124 
	mIFLA_BRIDGE_CFM
,

125 
	mIFLA_BRIDGE_MST
,

126 
	m__IFLA_BRIDGE_MAX
,

128 
	#IFLA_BRIDGE_MAX
 (
__IFLA_BRIDGE_MAX
 - 1)

	)

130 
	#BRIDGE_VLAN_INFO_MASTER
 (1<<0Ë

	)

131 
	#BRIDGE_VLAN_INFO_PVID
 (1<<1Ë

	)

132 
	#BRIDGE_VLAN_INFO_UNTAGGED
 (1<<2Ë

	)

133 
	#BRIDGE_VLAN_INFO_RANGE_BEGIN
 (1<<3Ë

	)

134 
	#BRIDGE_VLAN_INFO_RANGE_END
 (1<<4Ë

	)

135 
	#BRIDGE_VLAN_INFO_BRENTRY
 (1<<5Ë

	)

136 
	#BRIDGE_VLAN_INFO_ONLY_OPTS
 (1<<6Ë

	)

138 
	sbridge_vœn_öfo
 {

139 
__u16
 
	mÊags
;

140 
__u16
 
	mvid
;

144 
	mIFLA_BRIDGE_VLAN_TUNNEL_UNSPEC
,

145 
	mIFLA_BRIDGE_VLAN_TUNNEL_ID
,

146 
	mIFLA_BRIDGE_VLAN_TUNNEL_VID
,

147 
	mIFLA_BRIDGE_VLAN_TUNNEL_FLAGS
,

148 
	m__IFLA_BRIDGE_VLAN_TUNNEL_MAX
,

151 
	#IFLA_BRIDGE_VLAN_TUNNEL_MAX
 (
__IFLA_BRIDGE_VLAN_TUNNEL_MAX
 - 1)

	)

153 
	sbridge_vœn_x°©s
 {

154 
__u64
 
	mrx_byãs
;

155 
__u64
 
	mrx_∑ckës
;

156 
__u64
 
	mtx_byãs
;

157 
__u64
 
	mtx_∑ckës
;

158 
__u16
 
	mvid
;

159 
__u16
 
	mÊags
;

160 
__u32
 
	m∑d2
;

164 
	mIFLA_BRIDGE_MRP_UNSPEC
,

165 
	mIFLA_BRIDGE_MRP_INSTANCE
,

166 
	mIFLA_BRIDGE_MRP_PORT_STATE
,

167 
	mIFLA_BRIDGE_MRP_PORT_ROLE
,

168 
	mIFLA_BRIDGE_MRP_RING_STATE
,

169 
	mIFLA_BRIDGE_MRP_RING_ROLE
,

170 
	mIFLA_BRIDGE_MRP_START_TEST
,

171 
	mIFLA_BRIDGE_MRP_INFO
,

172 
	mIFLA_BRIDGE_MRP_IN_ROLE
,

173 
	mIFLA_BRIDGE_MRP_IN_STATE
,

174 
	mIFLA_BRIDGE_MRP_START_IN_TEST
,

175 
	m__IFLA_BRIDGE_MRP_MAX
,

178 
	#IFLA_BRIDGE_MRP_MAX
 (
__IFLA_BRIDGE_MRP_MAX
 - 1)

	)

181 
	mIFLA_BRIDGE_MRP_INSTANCE_UNSPEC
,

182 
	mIFLA_BRIDGE_MRP_INSTANCE_RING_ID
,

183 
	mIFLA_BRIDGE_MRP_INSTANCE_P_IFINDEX
,

184 
	mIFLA_BRIDGE_MRP_INSTANCE_S_IFINDEX
,

185 
	mIFLA_BRIDGE_MRP_INSTANCE_PRIO
,

186 
	m__IFLA_BRIDGE_MRP_INSTANCE_MAX
,

189 
	#IFLA_BRIDGE_MRP_INSTANCE_MAX
 (
__IFLA_BRIDGE_MRP_INSTANCE_MAX
 - 1)

	)

192 
	mIFLA_BRIDGE_MRP_PORT_STATE_UNSPEC
,

193 
	mIFLA_BRIDGE_MRP_PORT_STATE_STATE
,

194 
	m__IFLA_BRIDGE_MRP_PORT_STATE_MAX
,

197 
	#IFLA_BRIDGE_MRP_PORT_STATE_MAX
 (
__IFLA_BRIDGE_MRP_PORT_STATE_MAX
 - 1)

	)

200 
	mIFLA_BRIDGE_MRP_PORT_ROLE_UNSPEC
,

201 
	mIFLA_BRIDGE_MRP_PORT_ROLE_ROLE
,

202 
	m__IFLA_BRIDGE_MRP_PORT_ROLE_MAX
,

205 
	#IFLA_BRIDGE_MRP_PORT_ROLE_MAX
 (
__IFLA_BRIDGE_MRP_PORT_ROLE_MAX
 - 1)

	)

208 
	mIFLA_BRIDGE_MRP_RING_STATE_UNSPEC
,

209 
	mIFLA_BRIDGE_MRP_RING_STATE_RING_ID
,

210 
	mIFLA_BRIDGE_MRP_RING_STATE_STATE
,

211 
	m__IFLA_BRIDGE_MRP_RING_STATE_MAX
,

214 
	#IFLA_BRIDGE_MRP_RING_STATE_MAX
 (
__IFLA_BRIDGE_MRP_RING_STATE_MAX
 - 1)

	)

217 
	mIFLA_BRIDGE_MRP_RING_ROLE_UNSPEC
,

218 
	mIFLA_BRIDGE_MRP_RING_ROLE_RING_ID
,

219 
	mIFLA_BRIDGE_MRP_RING_ROLE_ROLE
,

220 
	m__IFLA_BRIDGE_MRP_RING_ROLE_MAX
,

223 
	#IFLA_BRIDGE_MRP_RING_ROLE_MAX
 (
__IFLA_BRIDGE_MRP_RING_ROLE_MAX
 - 1)

	)

226 
	mIFLA_BRIDGE_MRP_START_TEST_UNSPEC
,

227 
	mIFLA_BRIDGE_MRP_START_TEST_RING_ID
,

228 
	mIFLA_BRIDGE_MRP_START_TEST_INTERVAL
,

229 
	mIFLA_BRIDGE_MRP_START_TEST_MAX_MISS
,

230 
	mIFLA_BRIDGE_MRP_START_TEST_PERIOD
,

231 
	mIFLA_BRIDGE_MRP_START_TEST_MONITOR
,

232 
	m__IFLA_BRIDGE_MRP_START_TEST_MAX
,

235 
	#IFLA_BRIDGE_MRP_START_TEST_MAX
 (
__IFLA_BRIDGE_MRP_START_TEST_MAX
 - 1)

	)

238 
	mIFLA_BRIDGE_MRP_INFO_UNSPEC
,

239 
	mIFLA_BRIDGE_MRP_INFO_RING_ID
,

240 
	mIFLA_BRIDGE_MRP_INFO_P_IFINDEX
,

241 
	mIFLA_BRIDGE_MRP_INFO_S_IFINDEX
,

242 
	mIFLA_BRIDGE_MRP_INFO_PRIO
,

243 
	mIFLA_BRIDGE_MRP_INFO_RING_STATE
,

244 
	mIFLA_BRIDGE_MRP_INFO_RING_ROLE
,

245 
	mIFLA_BRIDGE_MRP_INFO_TEST_INTERVAL
,

246 
	mIFLA_BRIDGE_MRP_INFO_TEST_MAX_MISS
,

247 
	mIFLA_BRIDGE_MRP_INFO_TEST_MONITOR
,

248 
	mIFLA_BRIDGE_MRP_INFO_I_IFINDEX
,

249 
	mIFLA_BRIDGE_MRP_INFO_IN_STATE
,

250 
	mIFLA_BRIDGE_MRP_INFO_IN_ROLE
,

251 
	mIFLA_BRIDGE_MRP_INFO_IN_TEST_INTERVAL
,

252 
	mIFLA_BRIDGE_MRP_INFO_IN_TEST_MAX_MISS
,

253 
	m__IFLA_BRIDGE_MRP_INFO_MAX
,

256 
	#IFLA_BRIDGE_MRP_INFO_MAX
 (
__IFLA_BRIDGE_MRP_INFO_MAX
 - 1)

	)

259 
	mIFLA_BRIDGE_MRP_IN_STATE_UNSPEC
,

260 
	mIFLA_BRIDGE_MRP_IN_STATE_IN_ID
,

261 
	mIFLA_BRIDGE_MRP_IN_STATE_STATE
,

262 
	m__IFLA_BRIDGE_MRP_IN_STATE_MAX
,

265 
	#IFLA_BRIDGE_MRP_IN_STATE_MAX
 (
__IFLA_BRIDGE_MRP_IN_STATE_MAX
 - 1)

	)

268 
	mIFLA_BRIDGE_MRP_IN_ROLE_UNSPEC
,

269 
	mIFLA_BRIDGE_MRP_IN_ROLE_RING_ID
,

270 
	mIFLA_BRIDGE_MRP_IN_ROLE_IN_ID
,

271 
	mIFLA_BRIDGE_MRP_IN_ROLE_ROLE
,

272 
	mIFLA_BRIDGE_MRP_IN_ROLE_I_IFINDEX
,

273 
	m__IFLA_BRIDGE_MRP_IN_ROLE_MAX
,

276 
	#IFLA_BRIDGE_MRP_IN_ROLE_MAX
 (
__IFLA_BRIDGE_MRP_IN_ROLE_MAX
 - 1)

	)

279 
	mIFLA_BRIDGE_MRP_START_IN_TEST_UNSPEC
,

280 
	mIFLA_BRIDGE_MRP_START_IN_TEST_IN_ID
,

281 
	mIFLA_BRIDGE_MRP_START_IN_TEST_INTERVAL
,

282 
	mIFLA_BRIDGE_MRP_START_IN_TEST_MAX_MISS
,

283 
	mIFLA_BRIDGE_MRP_START_IN_TEST_PERIOD
,

284 
	m__IFLA_BRIDGE_MRP_START_IN_TEST_MAX
,

287 
	#IFLA_BRIDGE_MRP_START_IN_TEST_MAX
 (
__IFLA_BRIDGE_MRP_START_IN_TEST_MAX
 - 1)

	)

289 
	sbr_mΩ_ö°™˚
 {

290 
__u32
 
	mrög_id
;

291 
__u32
 
	mp_ifödex
;

292 
__u32
 
	ms_ifödex
;

293 
__u16
 
	m¥io
;

296 
	sbr_mΩ_rög_°©e
 {

297 
__u32
 
	mrög_id
;

298 
__u32
 
	mrög_°©e
;

301 
	sbr_mΩ_rög_rﬁe
 {

302 
__u32
 
	mrög_id
;

303 
__u32
 
	mrög_rﬁe
;

306 
	sbr_mΩ_°¨t_ã°
 {

307 
__u32
 
	mrög_id
;

308 
__u32
 
	möãrvÆ
;

309 
__u32
 
	mmax_miss
;

310 
__u32
 
	m≥riod
;

311 
__u32
 
	mm⁄ô‹
;

314 
	sbr_mΩ_ö_°©e
 {

315 
__u32
 
	mö_°©e
;

316 
__u16
 
	mö_id
;

319 
	sbr_mΩ_ö_rﬁe
 {

320 
__u32
 
	mrög_id
;

321 
__u32
 
	mö_rﬁe
;

322 
__u32
 
	mi_ifödex
;

323 
__u16
 
	mö_id
;

326 
	sbr_mΩ_°¨t_ö_ã°
 {

327 
__u32
 
	möãrvÆ
;

328 
__u32
 
	mmax_miss
;

329 
__u32
 
	m≥riod
;

330 
__u16
 
	mö_id
;

334 
	mIFLA_BRIDGE_CFM_UNSPEC
,

335 
	mIFLA_BRIDGE_CFM_MEP_CREATE
,

336 
	mIFLA_BRIDGE_CFM_MEP_DELETE
,

337 
	mIFLA_BRIDGE_CFM_MEP_CONFIG
,

338 
	mIFLA_BRIDGE_CFM_CC_CONFIG
,

339 
	mIFLA_BRIDGE_CFM_CC_PEER_MEP_ADD
,

340 
	mIFLA_BRIDGE_CFM_CC_PEER_MEP_REMOVE
,

341 
	mIFLA_BRIDGE_CFM_CC_RDI
,

342 
	mIFLA_BRIDGE_CFM_CC_CCM_TX
,

343 
	mIFLA_BRIDGE_CFM_MEP_CREATE_INFO
,

344 
	mIFLA_BRIDGE_CFM_MEP_CONFIG_INFO
,

345 
	mIFLA_BRIDGE_CFM_CC_CONFIG_INFO
,

346 
	mIFLA_BRIDGE_CFM_CC_RDI_INFO
,

347 
	mIFLA_BRIDGE_CFM_CC_CCM_TX_INFO
,

348 
	mIFLA_BRIDGE_CFM_CC_PEER_MEP_INFO
,

349 
	mIFLA_BRIDGE_CFM_MEP_STATUS_INFO
,

350 
	mIFLA_BRIDGE_CFM_CC_PEER_STATUS_INFO
,

351 
	m__IFLA_BRIDGE_CFM_MAX
,

354 
	#IFLA_BRIDGE_CFM_MAX
 (
__IFLA_BRIDGE_CFM_MAX
 - 1)

	)

357 
	mIFLA_BRIDGE_CFM_MEP_CREATE_UNSPEC
,

358 
	mIFLA_BRIDGE_CFM_MEP_CREATE_INSTANCE
,

359 
	mIFLA_BRIDGE_CFM_MEP_CREATE_DOMAIN
,

360 
	mIFLA_BRIDGE_CFM_MEP_CREATE_DIRECTION
,

361 
	mIFLA_BRIDGE_CFM_MEP_CREATE_IFINDEX
,

362 
	m__IFLA_BRIDGE_CFM_MEP_CREATE_MAX
,

365 
	#IFLA_BRIDGE_CFM_MEP_CREATE_MAX
 (
__IFLA_BRIDGE_CFM_MEP_CREATE_MAX
 - 1)

	)

368 
	mIFLA_BRIDGE_CFM_MEP_DELETE_UNSPEC
,

369 
	mIFLA_BRIDGE_CFM_MEP_DELETE_INSTANCE
,

370 
	m__IFLA_BRIDGE_CFM_MEP_DELETE_MAX
,

373 
	#IFLA_BRIDGE_CFM_MEP_DELETE_MAX
 (
__IFLA_BRIDGE_CFM_MEP_DELETE_MAX
 - 1)

	)

376 
	mIFLA_BRIDGE_CFM_MEP_CONFIG_UNSPEC
,

377 
	mIFLA_BRIDGE_CFM_MEP_CONFIG_INSTANCE
,

378 
	mIFLA_BRIDGE_CFM_MEP_CONFIG_UNICAST_MAC
,

379 
	mIFLA_BRIDGE_CFM_MEP_CONFIG_MDLEVEL
,

380 
	mIFLA_BRIDGE_CFM_MEP_CONFIG_MEPID
,

381 
	m__IFLA_BRIDGE_CFM_MEP_CONFIG_MAX
,

384 
	#IFLA_BRIDGE_CFM_MEP_CONFIG_MAX
 (
__IFLA_BRIDGE_CFM_MEP_CONFIG_MAX
 - 1)

	)

387 
	mIFLA_BRIDGE_CFM_CC_CONFIG_UNSPEC
,

388 
	mIFLA_BRIDGE_CFM_CC_CONFIG_INSTANCE
,

389 
	mIFLA_BRIDGE_CFM_CC_CONFIG_ENABLE
,

390 
	mIFLA_BRIDGE_CFM_CC_CONFIG_EXP_INTERVAL
,

391 
	mIFLA_BRIDGE_CFM_CC_CONFIG_EXP_MAID
,

392 
	m__IFLA_BRIDGE_CFM_CC_CONFIG_MAX
,

395 
	#IFLA_BRIDGE_CFM_CC_CONFIG_MAX
 (
__IFLA_BRIDGE_CFM_CC_CONFIG_MAX
 - 1)

	)

398 
	mIFLA_BRIDGE_CFM_CC_PEER_MEP_UNSPEC
,

399 
	mIFLA_BRIDGE_CFM_CC_PEER_MEP_INSTANCE
,

400 
	mIFLA_BRIDGE_CFM_CC_PEER_MEPID
,

401 
	m__IFLA_BRIDGE_CFM_CC_PEER_MEP_MAX
,

404 
	#IFLA_BRIDGE_CFM_CC_PEER_MEP_MAX
 (
__IFLA_BRIDGE_CFM_CC_PEER_MEP_MAX
 - 1)

	)

407 
	mIFLA_BRIDGE_CFM_CC_RDI_UNSPEC
,

408 
	mIFLA_BRIDGE_CFM_CC_RDI_INSTANCE
,

409 
	mIFLA_BRIDGE_CFM_CC_RDI_RDI
,

410 
	m__IFLA_BRIDGE_CFM_CC_RDI_MAX
,

413 
	#IFLA_BRIDGE_CFM_CC_RDI_MAX
 (
__IFLA_BRIDGE_CFM_CC_RDI_MAX
 - 1)

	)

416 
	mIFLA_BRIDGE_CFM_CC_CCM_TX_UNSPEC
,

417 
	mIFLA_BRIDGE_CFM_CC_CCM_TX_INSTANCE
,

418 
	mIFLA_BRIDGE_CFM_CC_CCM_TX_DMAC
,

419 
	mIFLA_BRIDGE_CFM_CC_CCM_TX_SEQ_NO_UPDATE
,

420 
	mIFLA_BRIDGE_CFM_CC_CCM_TX_PERIOD
,

421 
	mIFLA_BRIDGE_CFM_CC_CCM_TX_IF_TLV
,

422 
	mIFLA_BRIDGE_CFM_CC_CCM_TX_IF_TLV_VALUE
,

423 
	mIFLA_BRIDGE_CFM_CC_CCM_TX_PORT_TLV
,

424 
	mIFLA_BRIDGE_CFM_CC_CCM_TX_PORT_TLV_VALUE
,

425 
	m__IFLA_BRIDGE_CFM_CC_CCM_TX_MAX
,

428 
	#IFLA_BRIDGE_CFM_CC_CCM_TX_MAX
 (
__IFLA_BRIDGE_CFM_CC_CCM_TX_MAX
 - 1)

	)

431 
	mIFLA_BRIDGE_CFM_MEP_STATUS_UNSPEC
,

432 
	mIFLA_BRIDGE_CFM_MEP_STATUS_INSTANCE
,

433 
	mIFLA_BRIDGE_CFM_MEP_STATUS_OPCODE_UNEXP_SEEN
,

434 
	mIFLA_BRIDGE_CFM_MEP_STATUS_VERSION_UNEXP_SEEN
,

435 
	mIFLA_BRIDGE_CFM_MEP_STATUS_RX_LEVEL_LOW_SEEN
,

436 
	m__IFLA_BRIDGE_CFM_MEP_STATUS_MAX
,

439 
	#IFLA_BRIDGE_CFM_MEP_STATUS_MAX
 (
__IFLA_BRIDGE_CFM_MEP_STATUS_MAX
 - 1)

	)

442 
	mIFLA_BRIDGE_CFM_CC_PEER_STATUS_UNSPEC
,

443 
	mIFLA_BRIDGE_CFM_CC_PEER_STATUS_INSTANCE
,

444 
	mIFLA_BRIDGE_CFM_CC_PEER_STATUS_PEER_MEPID
,

445 
	mIFLA_BRIDGE_CFM_CC_PEER_STATUS_CCM_DEFECT
,

446 
	mIFLA_BRIDGE_CFM_CC_PEER_STATUS_RDI
,

447 
	mIFLA_BRIDGE_CFM_CC_PEER_STATUS_PORT_TLV_VALUE
,

448 
	mIFLA_BRIDGE_CFM_CC_PEER_STATUS_IF_TLV_VALUE
,

449 
	mIFLA_BRIDGE_CFM_CC_PEER_STATUS_SEEN
,

450 
	mIFLA_BRIDGE_CFM_CC_PEER_STATUS_TLV_SEEN
,

451 
	mIFLA_BRIDGE_CFM_CC_PEER_STATUS_SEQ_UNEXP_SEEN
,

452 
	m__IFLA_BRIDGE_CFM_CC_PEER_STATUS_MAX
,

455 
	#IFLA_BRIDGE_CFM_CC_PEER_STATUS_MAX
 (
__IFLA_BRIDGE_CFM_CC_PEER_STATUS_MAX
 - 1)

	)

458 
	mIFLA_BRIDGE_MST_UNSPEC
,

459 
	mIFLA_BRIDGE_MST_ENTRY
,

460 
	m__IFLA_BRIDGE_MST_MAX
,

462 
	#IFLA_BRIDGE_MST_MAX
 (
__IFLA_BRIDGE_MST_MAX
 - 1)

	)

465 
	mIFLA_BRIDGE_MST_ENTRY_UNSPEC
,

466 
	mIFLA_BRIDGE_MST_ENTRY_MSTI
,

467 
	mIFLA_BRIDGE_MST_ENTRY_STATE
,

468 
	m__IFLA_BRIDGE_MST_ENTRY_MAX
,

470 
	#IFLA_BRIDGE_MST_ENTRY_MAX
 (
__IFLA_BRIDGE_MST_ENTRY_MAX
 - 1)

	)

472 
	sbridge_°p_x°©s
 {

473 
__u64
 
	må™sôi⁄_blk
;

474 
__u64
 
	må™sôi⁄_fwd
;

475 
__u64
 
	mrx_bpdu
;

476 
__u64
 
	mtx_bpdu
;

477 
__u64
 
	mrx_t˙
;

478 
__u64
 
	mtx_t˙
;

482 
	sbr_vœn_msg
 {

483 
__u8
 
	mÁmûy
;

484 
__u8
 
	mª£rved1
;

485 
__u16
 
	mª£rved2
;

486 
__u32
 
	mifödex
;

490 
	mBRIDGE_VLANDB_DUMP_UNSPEC
,

491 
	mBRIDGE_VLANDB_DUMP_FLAGS
,

492 
	m__BRIDGE_VLANDB_DUMP_MAX
,

494 
	#BRIDGE_VLANDB_DUMP_MAX
 (
__BRIDGE_VLANDB_DUMP_MAX
 - 1)

	)

497 
	#BRIDGE_VLANDB_DUMPF_STATS
 (1 << 0Ë

	)

498 
	#BRIDGE_VLANDB_DUMPF_GLOBAL
 (1 << 1Ë

	)

511 
	mBRIDGE_VLANDB_UNSPEC
,

512 
	mBRIDGE_VLANDB_ENTRY
,

513 
	mBRIDGE_VLANDB_GLOBAL_OPTIONS
,

514 
	m__BRIDGE_VLANDB_MAX
,

516 
	#BRIDGE_VLANDB_MAX
 (
__BRIDGE_VLANDB_MAX
 - 1)

	)

519 
	mBRIDGE_VLANDB_ENTRY_UNSPEC
,

520 
	mBRIDGE_VLANDB_ENTRY_INFO
,

521 
	mBRIDGE_VLANDB_ENTRY_RANGE
,

522 
	mBRIDGE_VLANDB_ENTRY_STATE
,

523 
	mBRIDGE_VLANDB_ENTRY_TUNNEL_INFO
,

524 
	mBRIDGE_VLANDB_ENTRY_STATS
,

525 
	mBRIDGE_VLANDB_ENTRY_MCAST_ROUTER
,

526 
	mBRIDGE_VLANDB_ENTRY_MCAST_N_GROUPS
,

527 
	mBRIDGE_VLANDB_ENTRY_MCAST_MAX_GROUPS
,

528 
	mBRIDGE_VLANDB_ENTRY_NEIGH_SUPPRESS
,

529 
	m__BRIDGE_VLANDB_ENTRY_MAX
,

531 
	#BRIDGE_VLANDB_ENTRY_MAX
 (
__BRIDGE_VLANDB_ENTRY_MAX
 - 1)

	)

541 
	mBRIDGE_VLANDB_TINFO_UNSPEC
,

542 
	mBRIDGE_VLANDB_TINFO_ID
,

543 
	mBRIDGE_VLANDB_TINFO_CMD
,

544 
	m__BRIDGE_VLANDB_TINFO_MAX
,

546 
	#BRIDGE_VLANDB_TINFO_MAX
 (
__BRIDGE_VLANDB_TINFO_MAX
 - 1)

	)

557 
	mBRIDGE_VLANDB_STATS_UNSPEC
,

558 
	mBRIDGE_VLANDB_STATS_RX_BYTES
,

559 
	mBRIDGE_VLANDB_STATS_RX_PACKETS
,

560 
	mBRIDGE_VLANDB_STATS_TX_BYTES
,

561 
	mBRIDGE_VLANDB_STATS_TX_PACKETS
,

562 
	mBRIDGE_VLANDB_STATS_PAD
,

563 
	m__BRIDGE_VLANDB_STATS_MAX
,

565 
	#BRIDGE_VLANDB_STATS_MAX
 (
__BRIDGE_VLANDB_STATS_MAX
 - 1)

	)

568 
	mBRIDGE_VLANDB_GOPTS_UNSPEC
,

569 
	mBRIDGE_VLANDB_GOPTS_ID
,

570 
	mBRIDGE_VLANDB_GOPTS_RANGE
,

571 
	mBRIDGE_VLANDB_GOPTS_MCAST_SNOOPING
,

572 
	mBRIDGE_VLANDB_GOPTS_MCAST_IGMP_VERSION
,

573 
	mBRIDGE_VLANDB_GOPTS_MCAST_MLD_VERSION
,

574 
	mBRIDGE_VLANDB_GOPTS_MCAST_LAST_MEMBER_CNT
,

575 
	mBRIDGE_VLANDB_GOPTS_MCAST_STARTUP_QUERY_CNT
,

576 
	mBRIDGE_VLANDB_GOPTS_MCAST_LAST_MEMBER_INTVL
,

577 
	mBRIDGE_VLANDB_GOPTS_PAD
,

578 
	mBRIDGE_VLANDB_GOPTS_MCAST_MEMBERSHIP_INTVL
,

579 
	mBRIDGE_VLANDB_GOPTS_MCAST_QUERIER_INTVL
,

580 
	mBRIDGE_VLANDB_GOPTS_MCAST_QUERY_INTVL
,

581 
	mBRIDGE_VLANDB_GOPTS_MCAST_QUERY_RESPONSE_INTVL
,

582 
	mBRIDGE_VLANDB_GOPTS_MCAST_STARTUP_QUERY_INTVL
,

583 
	mBRIDGE_VLANDB_GOPTS_MCAST_QUERIER
,

584 
	mBRIDGE_VLANDB_GOPTS_MCAST_ROUTER_PORTS
,

585 
	mBRIDGE_VLANDB_GOPTS_MCAST_QUERIER_STATE
,

586 
	mBRIDGE_VLANDB_GOPTS_MSTI
,

587 
	m__BRIDGE_VLANDB_GOPTS_MAX


589 
	#BRIDGE_VLANDB_GOPTS_MAX
 (
__BRIDGE_VLANDB_GOPTS_MAX
 - 1)

	)

608 
	mMDBA_UNSPEC
,

609 
	mMDBA_MDB
,

610 
	mMDBA_ROUTER
,

611 
	m__MDBA_MAX
,

613 
	#MDBA_MAX
 (
__MDBA_MAX
 - 1)

	)

616 
	mMDBA_MDB_UNSPEC
,

617 
	mMDBA_MDB_ENTRY
,

618 
	m__MDBA_MDB_MAX
,

620 
	#MDBA_MDB_MAX
 (
__MDBA_MDB_MAX
 - 1)

	)

623 
	mMDBA_MDB_ENTRY_UNSPEC
,

624 
	mMDBA_MDB_ENTRY_INFO
,

625 
	m__MDBA_MDB_ENTRY_MAX
,

627 
	#MDBA_MDB_ENTRY_MAX
 (
__MDBA_MDB_ENTRY_MAX
 - 1)

	)

631 
	mMDBA_MDB_EATTR_UNSPEC
,

632 
	mMDBA_MDB_EATTR_TIMER
,

633 
	mMDBA_MDB_EATTR_SRC_LIST
,

634 
	mMDBA_MDB_EATTR_GROUP_MODE
,

635 
	mMDBA_MDB_EATTR_SOURCE
,

636 
	mMDBA_MDB_EATTR_RTPROT
,

637 
	mMDBA_MDB_EATTR_DST
,

638 
	mMDBA_MDB_EATTR_DST_PORT
,

639 
	mMDBA_MDB_EATTR_VNI
,

640 
	mMDBA_MDB_EATTR_IFINDEX
,

641 
	mMDBA_MDB_EATTR_SRC_VNI
,

642 
	m__MDBA_MDB_EATTR_MAX


644 
	#MDBA_MDB_EATTR_MAX
 (
__MDBA_MDB_EATTR_MAX
 - 1)

	)

648 
	mMDBA_MDB_SRCLIST_UNSPEC
,

649 
	mMDBA_MDB_SRCLIST_ENTRY
,

650 
	m__MDBA_MDB_SRCLIST_MAX


652 
	#MDBA_MDB_SRCLIST_MAX
 (
__MDBA_MDB_SRCLIST_MAX
 - 1)

	)

658 
	mMDBA_MDB_SRCATTR_UNSPEC
,

659 
	mMDBA_MDB_SRCATTR_ADDRESS
,

660 
	mMDBA_MDB_SRCATTR_TIMER
,

661 
	m__MDBA_MDB_SRCATTR_MAX


663 
	#MDBA_MDB_SRCATTR_MAX
 (
__MDBA_MDB_SRCATTR_MAX
 - 1)

	)

667 
	mMDB_RTR_TYPE_DISABLED
,

668 
	mMDB_RTR_TYPE_TEMP_QUERY
,

669 
	mMDB_RTR_TYPE_PERM
,

670 
	mMDB_RTR_TYPE_TEMP


674 
	mMDBA_ROUTER_UNSPEC
,

675 
	mMDBA_ROUTER_PORT
,

676 
	m__MDBA_ROUTER_MAX
,

678 
	#MDBA_ROUTER_MAX
 (
__MDBA_ROUTER_MAX
 - 1)

	)

682 
	mMDBA_ROUTER_PATTR_UNSPEC
,

683 
	mMDBA_ROUTER_PATTR_TIMER
,

684 
	mMDBA_ROUTER_PATTR_TYPE
,

685 
	mMDBA_ROUTER_PATTR_INET_TIMER
,

686 
	mMDBA_ROUTER_PATTR_INET6_TIMER
,

687 
	mMDBA_ROUTER_PATTR_VID
,

688 
	m__MDBA_ROUTER_PATTR_MAX


690 
	#MDBA_ROUTER_PATTR_MAX
 (
__MDBA_ROUTER_PATTR_MAX
 - 1)

	)

692 
	sbr_p‹t_msg
 {

693 
__u8
 
	mÁmûy
;

694 
__u32
 
	mifödex
;

697 
	sbr_mdb_íåy
 {

698 
__u32
 
	mifödex
;

699 
	#MDB_TEMPORARY
 0

	)

700 
	#MDB_PERMANENT
 1

	)

701 
__u8
 
	m°©e
;

702 
	#MDB_FLAGS_OFFLOAD
 (1 << 0)

	)

703 
	#MDB_FLAGS_FAST_LEAVE
 (1 << 1)

	)

704 
	#MDB_FLAGS_STAR_EXCL
 (1 << 2)

	)

705 
	#MDB_FLAGS_BLOCKED
 (1 << 3)

	)

706 
__u8
 
	mÊags
;

707 
__u16
 
	mvid
;

710 
__be32
 
	mù4
;

711 
ö6_addr
 
	mù6
;

712 
	mmac_addr
[
ETH_ALEN
];

713 } 
	mu
;

714 
__be16
 
	m¥Ÿo
;

715 } 
	maddr
;

719 
	mMDBA_SET_ENTRY_UNSPEC
,

720 
	mMDBA_SET_ENTRY
,

721 
	mMDBA_SET_ENTRY_ATTRS
,

722 
	m__MDBA_SET_ENTRY_MAX
,

724 
	#MDBA_SET_ENTRY_MAX
 (
__MDBA_SET_ENTRY_MAX
 - 1)

	)

737 
	mMDBA_GET_ENTRY_UNSPEC
,

738 
	mMDBA_GET_ENTRY
,

739 
	mMDBA_GET_ENTRY_ATTRS
,

740 
	m__MDBA_GET_ENTRY_MAX
,

742 
	#MDBA_GET_ENTRY_MAX
 (
__MDBA_GET_ENTRY_MAX
 - 1)

	)

750 
	mMDBE_ATTR_UNSPEC
,

751 
	mMDBE_ATTR_SOURCE
,

752 
	mMDBE_ATTR_SRC_LIST
,

753 
	mMDBE_ATTR_GROUP_MODE
,

754 
	mMDBE_ATTR_RTPROT
,

755 
	mMDBE_ATTR_DST
,

756 
	mMDBE_ATTR_DST_PORT
,

757 
	mMDBE_ATTR_VNI
,

758 
	mMDBE_ATTR_IFINDEX
,

759 
	mMDBE_ATTR_SRC_VNI
,

760 
	mMDBE_ATTR_STATE_MASK
,

761 
	m__MDBE_ATTR_MAX
,

763 
	#MDBE_ATTR_MAX
 (
__MDBE_ATTR_MAX
 - 1)

	)

767 
	mMDBE_SRC_LIST_UNSPEC
,

768 
	mMDBE_SRC_LIST_ENTRY
,

769 
	m__MDBE_SRC_LIST_MAX
,

771 
	#MDBE_SRC_LIST_MAX
 (
__MDBE_SRC_LIST_MAX
 - 1)

	)

777 
	mMDBE_SRCATTR_UNSPEC
,

778 
	mMDBE_SRCATTR_ADDRESS
,

779 
	m__MDBE_SRCATTR_MAX
,

781 
	#MDBE_SRCATTR_MAX
 (
__MDBE_SRCATTR_MAX
 - 1)

	)

785 
	mBRIDGE_XSTATS_UNSPEC
,

786 
	mBRIDGE_XSTATS_VLAN
,

787 
	mBRIDGE_XSTATS_MCAST
,

788 
	mBRIDGE_XSTATS_PAD
,

789 
	mBRIDGE_XSTATS_STP
,

790 
	m__BRIDGE_XSTATS_MAX


792 
	#BRIDGE_XSTATS_MAX
 (
__BRIDGE_XSTATS_MAX
 - 1)

	)

795 
	mBR_MCAST_DIR_RX
,

796 
	mBR_MCAST_DIR_TX
,

797 
	mBR_MCAST_DIR_SIZE


801 
	sbr_mˇ°_°©s
 {

802 
__u64
 
	migmp_v1quîõs
[
BR_MCAST_DIR_SIZE
];

803 
__u64
 
	migmp_v2quîõs
[
BR_MCAST_DIR_SIZE
];

804 
__u64
 
	migmp_v3quîõs
[
BR_MCAST_DIR_SIZE
];

805 
__u64
 
	migmp_Àaves
[
BR_MCAST_DIR_SIZE
];

806 
__u64
 
	migmp_v1ªp‹ts
[
BR_MCAST_DIR_SIZE
];

807 
__u64
 
	migmp_v2ªp‹ts
[
BR_MCAST_DIR_SIZE
];

808 
__u64
 
	migmp_v3ªp‹ts
[
BR_MCAST_DIR_SIZE
];

809 
__u64
 
	migmp_∑r£_îr‹s
;

811 
__u64
 
	mmld_v1quîõs
[
BR_MCAST_DIR_SIZE
];

812 
__u64
 
	mmld_v2quîõs
[
BR_MCAST_DIR_SIZE
];

813 
__u64
 
	mmld_Àaves
[
BR_MCAST_DIR_SIZE
];

814 
__u64
 
	mmld_v1ªp‹ts
[
BR_MCAST_DIR_SIZE
];

815 
__u64
 
	mmld_v2ªp‹ts
[
BR_MCAST_DIR_SIZE
];

816 
__u64
 
	mmld_∑r£_îr‹s
;

818 
__u64
 
	mmˇ°_byãs
[
BR_MCAST_DIR_SIZE
];

819 
__u64
 
	mmˇ°_∑ckës
[
BR_MCAST_DIR_SIZE
];

829 
	ebr_boﬁ›t_id
 {

830 
	mBR_BOOLOPT_NO_LL_LEARN
,

831 
	mBR_BOOLOPT_MCAST_VLAN_SNOOPING
,

832 
	mBR_BOOLOPT_MST_ENABLE
,

833 
	mBR_BOOLOPT_MAX


841 
	sbr_boﬁ›t_mu…i
 {

842 
__u32
 
	m›tvÆ
;

843 
__u32
 
	m›tmask
;

847 
	mBRIDGE_QUERIER_UNSPEC
,

848 
	mBRIDGE_QUERIER_IP_ADDRESS
,

849 
	mBRIDGE_QUERIER_IP_PORT
,

850 
	mBRIDGE_QUERIER_IP_OTHER_TIMER
,

851 
	mBRIDGE_QUERIER_PAD
,

852 
	mBRIDGE_QUERIER_IPV6_ADDRESS
,

853 
	mBRIDGE_QUERIER_IPV6_PORT
,

854 
	mBRIDGE_QUERIER_IPV6_OTHER_TIMER
,

855 
	m__BRIDGE_QUERIER_MAX


857 
	#BRIDGE_QUERIER_MAX
 (
__BRIDGE_QUERIER_MAX
 - 1)

	)

	@/usr/include/linux/if_ether.h

22 #i‚de‡
_LINUX_IF_ETHER_H


23 
	#_LINUX_IF_ETHER_H


	)

25 
	~<löux/ty≥s.h
>

32 
	#ETH_ALEN
 6

	)

33 
	#ETH_TLEN
 2

	)

34 
	#ETH_HLEN
 14

	)

35 
	#ETH_ZLEN
 60

	)

36 
	#ETH_DATA_LEN
 1500

	)

37 
	#ETH_FRAME_LEN
 1514

	)

38 
	#ETH_FCS_LEN
 4

	)

40 
	#ETH_MIN_MTU
 68

	)

41 
	#ETH_MAX_MTU
 0xFFFFU

	)

47 
	#ETH_P_LOOP
 0x0060

	)

48 
	#ETH_P_PUP
 0x0200

	)

49 
	#ETH_P_PUPAT
 0x0201

	)

50 
	#ETH_P_TSN
 0x22F0

	)

51 
	#ETH_P_ERSPAN2
 0x22EB

	)

52 
	#ETH_P_IP
 0x0800

	)

53 
	#ETH_P_X25
 0x0805

	)

54 
	#ETH_P_ARP
 0x0806

	)

55 
	#ETH_P_BPQ
 0x08FF

	)

56 
	#ETH_P_IEEEPUP
 0x0a00

	)

57 
	#ETH_P_IEEEPUPAT
 0x0a01

	)

58 
	#ETH_P_BATMAN
 0x4305

	)

59 
	#ETH_P_DEC
 0x6000

	)

60 
	#ETH_P_DNA_DL
 0x6001

	)

61 
	#ETH_P_DNA_RC
 0x6002

	)

62 
	#ETH_P_DNA_RT
 0x6003

	)

63 
	#ETH_P_LAT
 0x6004

	)

64 
	#ETH_P_DIAG
 0x6005

	)

65 
	#ETH_P_CUST
 0x6006

	)

66 
	#ETH_P_SCA
 0x6007

	)

67 
	#ETH_P_TEB
 0x6558

	)

68 
	#ETH_P_RARP
 0x8035

	)

69 
	#ETH_P_ATALK
 0x809B

	)

70 
	#ETH_P_AARP
 0x80F3

	)

71 
	#ETH_P_8021Q
 0x8100

	)

72 
	#ETH_P_ERSPAN
 0x88BE

	)

73 
	#ETH_P_IPX
 0x8137

	)

74 
	#ETH_P_IPV6
 0x86DD

	)

75 
	#ETH_P_PAUSE
 0x8808

	)

76 
	#ETH_P_SLOW
 0x8809

	)

77 
	#ETH_P_WCCP
 0x883E

	)

79 
	#ETH_P_MPLS_UC
 0x8847

	)

80 
	#ETH_P_MPLS_MC
 0x8848

	)

81 
	#ETH_P_ATMMPOA
 0x884¯

	)

82 
	#ETH_P_PPP_DISC
 0x8863

	)

83 
	#ETH_P_PPP_SES
 0x8864

	)

84 
	#ETH_P_LINK_CTL
 0x886¯

	)

85 
	#ETH_P_ATMFATE
 0x8884

	)

88 
	#ETH_P_PAE
 0x888E

	)

89 
	#ETH_P_PROFINET
 0x8892

	)

90 
	#ETH_P_REALTEK
 0x8899

	)

91 
	#ETH_P_AOE
 0x88A2

	)

92 
	#ETH_P_ETHERCAT
 0x88A4

	)

93 
	#ETH_P_8021AD
 0x88A8

	)

94 
	#ETH_P_802_EX1
 0x88B5

	)

95 
	#ETH_P_PREAUTH
 0x88C7

	)

96 
	#ETH_P_TIPC
 0x88CA

	)

97 
	#ETH_P_LLDP
 0x88CC

	)

98 
	#ETH_P_MRP
 0x88E3

	)

99 
	#ETH_P_MACSEC
 0x88E5

	)

100 
	#ETH_P_8021AH
 0x88E7

	)

101 
	#ETH_P_MVRP
 0x88F5

	)

102 
	#ETH_P_1588
 0x88F7

	)

103 
	#ETH_P_NCSI
 0x88F8

	)

104 
	#ETH_P_PRP
 0x88FB

	)

105 
	#ETH_P_CFM
 0x8902

	)

106 
	#ETH_P_FCOE
 0x8906

	)

107 
	#ETH_P_IBOE
 0x8915

	)

108 
	#ETH_P_TDLS
 0x890D

	)

109 
	#ETH_P_FIP
 0x8914

	)

110 
	#ETH_P_80221
 0x8917

	)

111 
	#ETH_P_HSR
 0x892F

	)

112 
	#ETH_P_NSH
 0x894F

	)

113 
	#ETH_P_LOOPBACK
 0x9000

	)

114 
	#ETH_P_QINQ1
 0x9100

	)

115 
	#ETH_P_QINQ2
 0x9200

	)

116 
	#ETH_P_QINQ3
 0x9300

	)

117 
	#ETH_P_EDSA
 0xDADA

	)

118 
	#ETH_P_DSA_8021Q
 0xDADB

	)

119 
	#ETH_P_DSA_A5PSW
 0xE001

	)

120 
	#ETH_P_IFE
 0xED3E

	)

121 
	#ETH_P_AF_IUCV
 0xFBFB

	)

123 
	#ETH_P_802_3_MIN
 0x0600

	)

130 
	#ETH_P_802_3
 0x0001

	)

131 
	#ETH_P_AX25
 0x0002

	)

132 
	#ETH_P_ALL
 0x0003

	)

133 
	#ETH_P_802_2
 0x0004

	)

134 
	#ETH_P_SNAP
 0x0005

	)

135 
	#ETH_P_DDCMP
 0x0006

	)

136 
	#ETH_P_WAN_PPP
 0x0007

	)

137 
	#ETH_P_PPP_MP
 0x0008

	)

138 
	#ETH_P_LOCALTALK
 0x0009

	)

139 
	#ETH_P_CAN
 0x000C

	)

140 
	#ETH_P_CANFD
 0x000D

	)

141 
	#ETH_P_CANXL
 0x000E

	)

142 
	#ETH_P_PPPTALK
 0x0010

	)

143 
	#ETH_P_TR_802_2
 0x0011

	)

144 
	#ETH_P_MOBITEX
 0x0015

	)

145 
	#ETH_P_CONTROL
 0x0016

	)

146 
	#ETH_P_IRDA
 0x0017

	)

147 
	#ETH_P_ECONET
 0x0018

	)

148 
	#ETH_P_HDLC
 0x0019

	)

149 
	#ETH_P_ARCNET
 0x001A

	)

150 
	#ETH_P_DSA
 0x001B

	)

151 
	#ETH_P_TRAILER
 0x001C

	)

152 
	#ETH_P_PHONET
 0x00F5

	)

153 
	#ETH_P_IEEE802154
 0x00F6

	)

154 
	#ETH_P_CAIF
 0x00F7

	)

155 
	#ETH_P_XDSA
 0x00F8

	)

156 
	#ETH_P_MAP
 0x00F9

	)

159 
	#ETH_P_MCTP
 0x00FA

	)

168 #i‚de‡
__UAPI_DEF_ETHHDR


169 
	#__UAPI_DEF_ETHHDR
 1

	)

172 #i‡
__UAPI_DEF_ETHHDR


173 
	sëhhdr
 {

174 
	mh_de°
[
ETH_ALEN
];

175 
	mh_sour˚
[
ETH_ALEN
];

176 
__be16
 
	mh_¥Ÿo
;

177 } 
__©åibuã__
((
∑cked
));

	@/usr/include/linux/if_packet.h

2 #i‚de‡
__LINUX_IF_PACKET_H


3 
	#__LINUX_IF_PACKET_H


	)

5 
	~<asm/byã‹dî.h
>

6 
	~<löux/ty≥s.h
>

8 
	ssockaddr_pkt
 {

9 
	m•kt_Ámûy
;

10 
	m•kt_devi˚
[14];

11 
__be16
 
	m•kt_¥Ÿocﬁ
;

14 
	ssockaddr_Œ
 {

15 
	m¶l_Ámûy
;

16 
__be16
 
	m¶l_¥Ÿocﬁ
;

17 
	m¶l_ifödex
;

18 
	m¶l_h©y≥
;

19 
	m¶l_pkây≥
;

20 
	m¶l_hÆí
;

21 
	m¶l_addr
[8];

26 
	#PACKET_HOST
 0

	)

27 
	#PACKET_BROADCAST
 1

	)

28 
	#PACKET_MULTICAST
 2

	)

29 
	#PACKET_OTHERHOST
 3

	)

30 
	#PACKET_OUTGOING
 4

	)

31 
	#PACKET_LOOPBACK
 5

	)

32 
	#PACKET_USER
 6

	)

33 
	#PACKET_KERNEL
 7

	)

35 
	#PACKET_FASTROUTE
 6

	)

39 
	#PACKET_ADD_MEMBERSHIP
 1

	)

40 
	#PACKET_DROP_MEMBERSHIP
 2

	)

41 
	#PACKET_RECV_OUTPUT
 3

	)

43 
	#PACKET_RX_RING
 5

	)

44 
	#PACKET_STATISTICS
 6

	)

45 
	#PACKET_COPY_THRESH
 7

	)

46 
	#PACKET_AUXDATA
 8

	)

47 
	#PACKET_ORIGDEV
 9

	)

48 
	#PACKET_VERSION
 10

	)

49 
	#PACKET_HDRLEN
 11

	)

50 
	#PACKET_RESERVE
 12

	)

51 
	#PACKET_TX_RING
 13

	)

52 
	#PACKET_LOSS
 14

	)

53 
	#PACKET_VNET_HDR
 15

	)

54 
	#PACKET_TX_TIMESTAMP
 16

	)

55 
	#PACKET_TIMESTAMP
 17

	)

56 
	#PACKET_FANOUT
 18

	)

57 
	#PACKET_TX_HAS_OFF
 19

	)

58 
	#PACKET_QDISC_BYPASS
 20

	)

59 
	#PACKET_ROLLOVER_STATS
 21

	)

60 
	#PACKET_FANOUT_DATA
 22

	)

61 
	#PACKET_IGNORE_OUTGOING
 23

	)

62 
	#PACKET_VNET_HDR_SZ
 24

	)

64 
	#PACKET_FANOUT_HASH
 0

	)

65 
	#PACKET_FANOUT_LB
 1

	)

66 
	#PACKET_FANOUT_CPU
 2

	)

67 
	#PACKET_FANOUT_ROLLOVER
 3

	)

68 
	#PACKET_FANOUT_RND
 4

	)

69 
	#PACKET_FANOUT_QM
 5

	)

70 
	#PACKET_FANOUT_CBPF
 6

	)

71 
	#PACKET_FANOUT_EBPF
 7

	)

72 
	#PACKET_FANOUT_FLAG_ROLLOVER
 0x1000

	)

73 
	#PACKET_FANOUT_FLAG_UNIQUEID
 0x2000

	)

74 
	#PACKET_FANOUT_FLAG_IGNORE_OUTGOING
 0x4000

	)

75 
	#PACKET_FANOUT_FLAG_DEFRAG
 0x8000

	)

77 
	sçackë_°©s
 {

78 
	mç_∑ckës
;

79 
	mç_dr›s
;

82 
	sçackë_°©s_v3
 {

83 
	mç_∑ckës
;

84 
	mç_dr›s
;

85 
	mç_‰ìze_q_˙t
;

88 
	sçackë_rﬁlovî_°©s
 {

89 
__Æig√d_u64
 
	mç_Æl
;

90 
__Æig√d_u64
 
	mç_huge
;

91 
__Æig√d_u64
 
	mç_Áûed
;

94 
	uçackë_°©s_u
 {

95 
çackë_°©s
 
	m°©s1
;

96 
çackë_°©s_v3
 
	m°©s3
;

99 
	sçackë_auxd©a
 {

100 
__u32
 
	mç_°©us
;

101 
__u32
 
	mç_Àn
;

102 
__u32
 
	mç_¢≠Àn
;

103 
__u16
 
	mç_mac
;

104 
__u16
 
	mç_√t
;

105 
__u16
 
	mç_vœn_tci
;

106 
__u16
 
	mç_vœn_çid
;

110 
	#TP_STATUS_KERNEL
 0

	)

111 
	#TP_STATUS_USER
 (1 << 0)

	)

112 
	#TP_STATUS_COPY
 (1 << 1)

	)

113 
	#TP_STATUS_LOSING
 (1 << 2)

	)

114 
	#TP_STATUS_CSUMNOTREADY
 (1 << 3)

	)

115 
	#TP_STATUS_VLAN_VALID
 (1 << 4Ë

	)

116 
	#TP_STATUS_BLK_TMO
 (1 << 5)

	)

117 
	#TP_STATUS_VLAN_TPID_VALID
 (1 << 6Ë

	)

118 
	#TP_STATUS_CSUM_VALID
 (1 << 7)

	)

119 
	#TP_STATUS_GSO_TCP
 (1 << 8)

	)

122 
	#TP_STATUS_AVAILABLE
 0

	)

123 
	#TP_STATUS_SEND_REQUEST
 (1 << 0)

	)

124 
	#TP_STATUS_SENDING
 (1 << 1)

	)

125 
	#TP_STATUS_WRONG_FORMAT
 (1 << 2)

	)

128 
	#TP_STATUS_TS_SOFTWARE
 (1 << 29)

	)

129 
	#TP_STATUS_TS_SYS_HARDWARE
 (1 << 30Ë

	)

130 
	#TP_STATUS_TS_RAW_HARDWARE
 (1U << 31)

	)

133 
	#TP_FT_REQ_FILL_RXHASH
 0x1

	)

135 
	sçackë_hdr
 {

136 
	mç_°©us
;

137 
	mç_Àn
;

138 
	mç_¢≠Àn
;

139 
	mç_mac
;

140 
	mç_√t
;

141 
	mç_£c
;

142 
	mç_u£c
;

145 
	#TPACKET_ALIGNMENT
 16

	)

146 
	#TPACKET_ALIGN
(
x
Ë(((x)+
TPACKET_ALIGNMENT
-1)&~(TPACKET_ALIGNMENT-1))

	)

147 
	#TPACKET_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë_hdr
)Ë+ (
sockaddr_Œ
))

	)

149 
	sçackë2_hdr
 {

150 
__u32
 
	mç_°©us
;

151 
__u32
 
	mç_Àn
;

152 
__u32
 
	mç_¢≠Àn
;

153 
__u16
 
	mç_mac
;

154 
__u16
 
	mç_√t
;

155 
__u32
 
	mç_£c
;

156 
__u32
 
	mç_n£c
;

157 
__u16
 
	mç_vœn_tci
;

158 
__u16
 
	mç_vœn_çid
;

159 
__u8
 
	mç_∑ddög
[4];

162 
	sçackë_hdr_v¨ü¡1
 {

163 
__u32
 
	mç_rxhash
;

164 
__u32
 
	mç_vœn_tci
;

165 
__u16
 
	mç_vœn_çid
;

166 
__u16
 
	mç_∑ddög
;

169 
	sçackë3_hdr
 {

170 
__u32
 
	mç_√xt_off£t
;

171 
__u32
 
	mç_£c
;

172 
__u32
 
	mç_n£c
;

173 
__u32
 
	mç_¢≠Àn
;

174 
__u32
 
	mç_Àn
;

175 
__u32
 
	mç_°©us
;

176 
__u16
 
	mç_mac
;

177 
__u16
 
	mç_√t
;

180 
çackë_hdr_v¨ü¡1
 
	mhv1
;

182 
__u8
 
	mç_∑ddög
[8];

185 
	sçackë_bd_ts
 {

186 
	mts_£c
;

188 
	mts_u£c
;

189 
	mts_n£c
;

193 
	sçackë_hdr_v1
 {

194 
__u32
 
	mblock_°©us
;

195 
__u32
 
	mnum_pkts
;

196 
__u32
 
	moff£t_to_fú°_pkt
;

201 
__u32
 
	mblk_Àn
;

212 
__Æig√d_u64
 
	m£q_num
;

239 
çackë_bd_ts
 
	mts_fú°_pkt
, 
	mts_œ°_pkt
;

242 
	uçackë_bd_hódî_u
 {

243 
çackë_hdr_v1
 
	mbh1
;

246 
	sçackë_block_desc
 {

247 
__u32
 
	mvîsi⁄
;

248 
__u32
 
	moff£t_to_¥iv
;

249 
çackë_bd_hódî_u
 
	mhdr
;

252 
	#TPACKET2_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë2_hdr
)Ë+ (
sockaddr_Œ
))

	)

253 
	#TPACKET3_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë3_hdr
)Ë+ (
sockaddr_Œ
))

	)

255 
	eçackë_vîsi⁄s
 {

256 
	mTPACKET_V1
,

257 
	mTPACKET_V2
,

258 
	mTPACKET_V3


275 
	sçackë_ªq
 {

276 
	mç_block_size
;

277 
	mç_block_ƒ
;

278 
	mç_‰ame_size
;

279 
	mç_‰ame_ƒ
;

282 
	sçackë_ªq3
 {

283 
	mç_block_size
;

284 
	mç_block_ƒ
;

285 
	mç_‰ame_size
;

286 
	mç_‰ame_ƒ
;

287 
	mç_ªtúe_blk_tov
;

288 
	mç_sizeof_¥iv
;

289 
	mç_„©uª_ªq_w‹d
;

292 
	uçackë_ªq_u
 {

293 
çackë_ªq
 
	mªq
;

294 
çackë_ªq3
 
	mªq3
;

297 
	s∑ckë_mªq
 {

298 
	mmr_ifödex
;

299 
	mmr_ty≥
;

300 
	mmr_Æí
;

301 
	mmr_addªss
[8];

304 
	sÁnout_¨gs
 {

305 #i‡
deföed
(
__LITTLE_ENDIAN_BITFIELD
)

306 
__u16
 
	mid
;

307 
__u16
 
	mty≥_Êags
;

309 
__u16
 
	mty≥_Êags
;

310 
__u16
 
	mid
;

312 
__u32
 
	mmax_num_membîs
;

315 
	#PACKET_MR_MULTICAST
 0

	)

316 
	#PACKET_MR_PROMISC
 1

	)

317 
	#PACKET_MR_ALLMULTI
 2

	)

318 
	#PACKET_MR_UNICAST
 3

	)

	@/usr/include/linux/if_vlan.h

14 #i‚de‡
_LINUX_IF_VLAN_H_


15 
	#_LINUX_IF_VLAN_H_


	)

21 
	evœn_io˘l_cmds
 {

22 
	mADD_VLAN_CMD
,

23 
	mDEL_VLAN_CMD
,

24 
	mSET_VLAN_INGRESS_PRIORITY_CMD
,

25 
	mSET_VLAN_EGRESS_PRIORITY_CMD
,

26 
	mGET_VLAN_INGRESS_PRIORITY_CMD
,

27 
	mGET_VLAN_EGRESS_PRIORITY_CMD
,

28 
	mSET_VLAN_NAME_TYPE_CMD
,

29 
	mSET_VLAN_FLAG_CMD
,

30 
	mGET_VLAN_REALDEV_NAME_CMD
,

31 
	mGET_VLAN_VID_CMD


34 
	evœn_Êags
 {

35 
	mVLAN_FLAG_REORDER_HDR
 = 0x1,

36 
	mVLAN_FLAG_GVRP
 = 0x2,

37 
	mVLAN_FLAG_LOOSE_BINDING
 = 0x4,

38 
	mVLAN_FLAG_MVRP
 = 0x8,

39 
	mVLAN_FLAG_BRIDGE_BINDING
 = 0x10,

42 
	evœn_«me_ty≥s
 {

43 
	mVLAN_NAME_TYPE_PLUS_VID
,

44 
	mVLAN_NAME_TYPE_RAW_PLUS_VID
,

45 
	mVLAN_NAME_TYPE_PLUS_VID_NO_PAD
,

46 
	mVLAN_NAME_TYPE_RAW_PLUS_VID_NO_PAD
,

47 
	mVLAN_NAME_TYPE_HIGHEST


50 
	svœn_io˘l_¨gs
 {

51 
	mcmd
;

52 
	mdevi˚1
[24];

55 
	mdevi˚2
[24];

56 
	mVID
;

57 
	mskb_¥i‹ôy
;

58 
	m«me_ty≥
;

59 
	mböd_ty≥
;

60 
	mÊag
;

61 } 
	mu
;

63 
	mvœn_qos
;

	@/usr/include/linux/igmp.h

17 #i‚de‡
_LINUX_IGMP_H


18 
	#_LINUX_IGMP_H


	)

20 
	~<löux/ty≥s.h
>

21 
	~<asm/byã‹dî.h
>

31 
	sigmphdr
 {

32 
__u8
 
	mty≥
;

33 
__u8
 
	mcode
;

34 
__sum16
 
	mcsum
;

35 
__be32
 
	mgroup
;

39 
	#IGMPV3_MODE_IS_INCLUDE
 1

	)

40 
	#IGMPV3_MODE_IS_EXCLUDE
 2

	)

41 
	#IGMPV3_CHANGE_TO_INCLUDE
 3

	)

42 
	#IGMPV3_CHANGE_TO_EXCLUDE
 4

	)

43 
	#IGMPV3_ALLOW_NEW_SOURCES
 5

	)

44 
	#IGMPV3_BLOCK_OLD_SOURCES
 6

	)

46 
	sigmpv3_gªc
 {

47 
__u8
 
	mgªc_ty≥
;

48 
__u8
 
	mgªc_auxw‹ds
;

49 
__be16
 
	mgªc_n§cs
;

50 
__be32
 
	mgªc_mˇ
;

51 
__be32
 
	mgªc_§c
[];

54 
	sigmpv3_ªp‹t
 {

55 
__u8
 
	mty≥
;

56 
__u8
 
	mªsv1
;

57 
__sum16
 
	mcsum
;

58 
__be16
 
	mªsv2
;

59 
__be16
 
	mngªc
;

60 
igmpv3_gªc
 
	mgªc
[];

63 
	sigmpv3_quîy
 {

64 
__u8
 
	mty≥
;

65 
__u8
 
	mcode
;

66 
__sum16
 
	mcsum
;

67 
__be32
 
	mgroup
;

68 #i‡
deföed
(
__LITTLE_ENDIAN_BITFIELD
)

69 
__u8
 
	mqrv
:3,

70 
	msuµªss
:1,

71 
	mªsv
:4;

72 #ñi‡
deföed
(
__BIG_ENDIAN_BITFIELD
)

73 
__u8
 
	mªsv
:4,

74 
	msuµªss
:1,

75 
	mqrv
:3;

79 
__u8
 
	mqqic
;

80 
__be16
 
	mn§cs
;

81 
__be32
 
	m§cs
[];

84 
	#IGMP_HOST_MEMBERSHIP_QUERY
 0x11

	)

85 
	#IGMP_HOST_MEMBERSHIP_REPORT
 0x12

	)

86 
	#IGMP_DVMRP
 0x13

	)

87 
	#IGMP_PIM
 0x14

	)

88 
	#IGMP_TRACE
 0x15

	)

89 
	#IGMPV2_HOST_MEMBERSHIP_REPORT
 0x16

	)

90 
	#IGMP_HOST_LEAVE_MESSAGE
 0x17

	)

91 
	#IGMPV3_HOST_MEMBERSHIP_REPORT
 0x22

	)

93 
	#IGMP_MTRACE_RESP
 0x1e

	)

94 
	#IGMP_MTRACE
 0x1f

	)

96 
	#IGMP_MRDISC_ADV
 0x30

	)

102 
	#IGMP_DELAYING_MEMBER
 0x01

	)

103 
	#IGMP_IDLE_MEMBER
 0x02

	)

104 
	#IGMP_LAZY_MEMBER
 0x03

	)

105 
	#IGMP_SLEEPING_MEMBER
 0x04

	)

106 
	#IGMP_AWAKENING_MEMBER
 0x05

	)

108 
	#IGMP_MINLEN
 8

	)

110 
	#IGMP_MAX_HOST_REPORT_DELAY
 10

	)

113 
	#IGMP_TIMER_SCALE
 10

	)

116 
	#IGMP_AGE_THRESHOLD
 400

	)

120 
	#IGMP_ALL_HOSTS
 
	`ht⁄l
(0xE0000001L)

	)

121 
	#IGMP_ALL_ROUTER
 
	`ht⁄l
(0xE0000002L)

	)

122 
	#IGMPV3_ALL_MCR
 
	`ht⁄l
(0xE0000016L)

	)

123 
	#IGMP_LOCAL_GROUP
 
	`ht⁄l
(0xE0000000L)

	)

124 
	#IGMP_LOCAL_GROUP_MASK
 
	`ht⁄l
(0xFFFFFF00L)

	)

	@/usr/include/linux/in.h

19 #i‚de‡
_LINUX_IN_H


20 
	#_LINUX_IN_H


	)

22 
	~<löux/ty≥s.h
>

23 
	~<löux/°ddef.h
>

24 
	~<löux/libc-com∑t.h
>

25 
	~<löux/sockë.h
>

27 #i‡
__UAPI_DEF_IN_IPPROTO


30 
	mIPPROTO_IP
 = 0,

31 
	#IPPROTO_IP
 
IPPROTO_IP


	)

32 
	mIPPROTO_ICMP
 = 1,

33 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

34 
	mIPPROTO_IGMP
 = 2,

35 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

36 
	mIPPROTO_IPIP
 = 4,

37 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

38 
	mIPPROTO_TCP
 = 6,

39 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

40 
	mIPPROTO_EGP
 = 8,

41 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

42 
	mIPPROTO_PUP
 = 12,

43 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

44 
	mIPPROTO_UDP
 = 17,

45 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

46 
	mIPPROTO_IDP
 = 22,

47 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

48 
	mIPPROTO_TP
 = 29,

49 
	#IPPROTO_TP
 
IPPROTO_TP


	)

50 
	mIPPROTO_DCCP
 = 33,

51 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

52 
	mIPPROTO_IPV6
 = 41,

53 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

54 
	mIPPROTO_RSVP
 = 46,

55 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

56 
	mIPPROTO_GRE
 = 47,

57 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

58 
	mIPPROTO_ESP
 = 50,

59 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

60 
	mIPPROTO_AH
 = 51,

61 
	#IPPROTO_AH
 
IPPROTO_AH


	)

62 
	mIPPROTO_MTP
 = 92,

63 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

64 
	mIPPROTO_BEETPH
 = 94,

65 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

66 
	mIPPROTO_ENCAP
 = 98,

67 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

68 
	mIPPROTO_PIM
 = 103,

69 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

70 
	mIPPROTO_COMP
 = 108,

71 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

72 
	mIPPROTO_L2TP
 = 115,

73 
	#IPPROTO_L2TP
 
IPPROTO_L2TP


	)

74 
	mIPPROTO_SCTP
 = 132,

75 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

76 
	mIPPROTO_UDPLITE
 = 136,

77 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

78 
	mIPPROTO_MPLS
 = 137,

79 
	#IPPROTO_MPLS
 
IPPROTO_MPLS


	)

80 
	mIPPROTO_ETHERNET
 = 143,

81 
	#IPPROTO_ETHERNET
 
IPPROTO_ETHERNET


	)

82 
	mIPPROTO_AGGFRAG
 = 144,

83 
	#IPPROTO_AGGFRAG
 
IPPROTO_AGGFRAG


	)

84 
	mIPPROTO_RAW
 = 255,

85 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

86 
	mIPPROTO_SMC
 = 256,

87 
	#IPPROTO_SMC
 
IPPROTO_SMC


	)

88 
	mIPPROTO_MPTCP
 = 262,

89 
	#IPPROTO_MPTCP
 
IPPROTO_MPTCP


	)

90 
	mIPPROTO_MAX


94 #i‡
__UAPI_DEF_IN_ADDR


96 
	sö_addr
 {

97 
__be32
 
	ms_addr
;

101 
	#IP_TOS
 1

	)

102 
	#IP_TTL
 2

	)

103 
	#IP_HDRINCL
 3

	)

104 
	#IP_OPTIONS
 4

	)

105 
	#IP_ROUTER_ALERT
 5

	)

106 
	#IP_RECVOPTS
 6

	)

107 
	#IP_RETOPTS
 7

	)

108 
	#IP_PKTINFO
 8

	)

109 
	#IP_PKTOPTIONS
 9

	)

110 
	#IP_MTU_DISCOVER
 10

	)

111 
	#IP_RECVERR
 11

	)

112 
	#IP_RECVTTL
 12

	)

113 
	#IP_RECVTOS
 13

	)

114 
	#IP_MTU
 14

	)

115 
	#IP_FREEBIND
 15

	)

116 
	#IP_IPSEC_POLICY
 16

	)

117 
	#IP_XFRM_POLICY
 17

	)

118 
	#IP_PASSSEC
 18

	)

119 
	#IP_TRANSPARENT
 19

	)

122 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

125 
	#IP_ORIGDSTADDR
 20

	)

126 
	#IP_RECVORIGDSTADDR
 
IP_ORIGDSTADDR


	)

128 
	#IP_MINTTL
 21

	)

129 
	#IP_NODEFRAG
 22

	)

130 
	#IP_CHECKSUM
 23

	)

131 
	#IP_BIND_ADDRESS_NO_PORT
 24

	)

132 
	#IP_RECVFRAGSIZE
 25

	)

133 
	#IP_RECVERR_RFC4884
 26

	)

136 
	#IP_PMTUDISC_DONT
 0

	)

137 
	#IP_PMTUDISC_WANT
 1

	)

138 
	#IP_PMTUDISC_DO
 2

	)

139 
	#IP_PMTUDISC_PROBE
 3

	)

144 
	#IP_PMTUDISC_INTERFACE
 4

	)

148 
	#IP_PMTUDISC_OMIT
 5

	)

150 
	#IP_MULTICAST_IF
 32

	)

151 
	#IP_MULTICAST_TTL
 33

	)

152 
	#IP_MULTICAST_LOOP
 34

	)

153 
	#IP_ADD_MEMBERSHIP
 35

	)

154 
	#IP_DROP_MEMBERSHIP
 36

	)

155 
	#IP_UNBLOCK_SOURCE
 37

	)

156 
	#IP_BLOCK_SOURCE
 38

	)

157 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

158 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

159 
	#IP_MSFILTER
 41

	)

160 
	#MCAST_JOIN_GROUP
 42

	)

161 
	#MCAST_BLOCK_SOURCE
 43

	)

162 
	#MCAST_UNBLOCK_SOURCE
 44

	)

163 
	#MCAST_LEAVE_GROUP
 45

	)

164 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

165 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

166 
	#MCAST_MSFILTER
 48

	)

167 
	#IP_MULTICAST_ALL
 49

	)

168 
	#IP_UNICAST_IF
 50

	)

169 
	#IP_LOCAL_PORT_RANGE
 51

	)

170 
	#IP_PROTOCOL
 52

	)

172 
	#MCAST_EXCLUDE
 0

	)

173 
	#MCAST_INCLUDE
 1

	)

176 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

177 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

181 #i‡
__UAPI_DEF_IP_MREQ


182 
	sù_mªq
 {

183 
ö_addr
 
	mimr_mu…üddr
;

184 
ö_addr
 
	mimr_öãrÁ˚
;

187 
	sù_mªqn
 {

188 
ö_addr
 
	mimr_mu…üddr
;

189 
ö_addr
 
	mimr_addªss
;

190 
	mimr_ifödex
;

193 
	sù_mªq_sour˚
 {

194 
__be32
 
	mimr_mu…üddr
;

195 
__be32
 
	mimr_öãrÁ˚
;

196 
__be32
 
	mimr_sour˚addr
;

199 
	sù_msfûãr
 {

200 
__be32
 
	mimsf_mu…üddr
;

201 
__be32
 
	mimsf_öãrÁ˚
;

202 
__u32
 
	mimsf_fmode
;

203 
__u32
 
	mimsf_num§c
;

205 
__be32
 
	mimsf_¶i°
[1];

206 
__DECLARE_FLEX_ARRAY
(
__be32
, 
imsf_¶i°_Êex
);

210 
	#IP_MSFILTER_SIZE
(
num§c
) \

211 ((
ù_msfûãr
Ë- (
__u32
) \

212 + (
num§c
Ë* (
__u32
))

	)

214 
	sgroup_ªq
 {

215 
__u32
 
	mgr_öãrÁ˚
;

216 
__kî√l_sockaddr_°‹age
 
	mgr_group
;

219 
	sgroup_sour˚_ªq
 {

220 
__u32
 
	mg§_öãrÁ˚
;

221 
__kî√l_sockaddr_°‹age
 
	mg§_group
;

222 
__kî√l_sockaddr_°‹age
 
	mg§_sour˚
;

225 
	sgroup_fûãr
 {

228 
__u32
 
	mgf_öãrÁ˚_aux
;

229 
__kî√l_sockaddr_°‹age
 
	mgf_group_aux
;

230 
__u32
 
	mgf_fmode_aux
;

231 
__u32
 
	mgf_num§c_aux
;

232 
__kî√l_sockaddr_°‹age
 
	mgf_¶i°
[1];

235 
__u32
 
	mgf_öãrÁ˚
;

236 
__kî√l_sockaddr_°‹age
 
	mgf_group
;

237 
__u32
 
	mgf_fmode
;

238 
__u32
 
	mgf_num§c
;

239 
__kî√l_sockaddr_°‹age
 
	mgf_¶i°_Êex
[];

244 
	#GROUP_FILTER_SIZE
(
num§c
) \

245 ((
group_fûãr
Ë- (
__kî√l_sockaddr_°‹age
) \

246 + (
num§c
Ë* (
__kî√l_sockaddr_°‹age
))

	)

249 #i‡
__UAPI_DEF_IN_PKTINFO


250 
	sö_pktöfo
 {

251 
	mùi_ifödex
;

252 
ö_addr
 
	mùi_•ec_d°
;

253 
ö_addr
 
	mùi_addr
;

258 #i‡ 
__UAPI_DEF_SOCKADDR_IN


259 
	#__SOCK_SIZE__
 16

	)

260 
	ssockaddr_ö
 {

261 
__kî√l_ß_Ámûy_t
 
	msö_Ámûy
;

262 
__be16
 
	msö_p‹t
;

263 
ö_addr
 
	msö_addr
;

266 
	m__∑d
[
__SOCK_SIZE__
 - () -

267 (Ë- (
ö_addr
)];

269 
	#sö_zîo
 
__∑d


	)

272 #i‡
__UAPI_DEF_IN_CLASS


278 
	#IN_CLASSA
(
a
Ë((((Ë◊)Ë& 0x80000000Ë=0)

	)

279 
	#IN_CLASSA_NET
 0xff000000

	)

280 
	#IN_CLASSA_NSHIFT
 24

	)

281 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

282 
	#IN_CLASSA_MAX
 128

	)

284 
	#IN_CLASSB
(
a
Ë((((Ë◊)Ë& 0xc0000000Ë=0x80000000)

	)

285 
	#IN_CLASSB_NET
 0xffff0000

	)

286 
	#IN_CLASSB_NSHIFT
 16

	)

287 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

288 
	#IN_CLASSB_MAX
 65536

	)

290 
	#IN_CLASSC
(
a
Ë((((Ë◊)Ë& 0xe0000000Ë=0xc0000000)

	)

291 
	#IN_CLASSC_NET
 0xffffff00

	)

292 
	#IN_CLASSC_NSHIFT
 8

	)

293 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

295 
	#IN_CLASSD
(
a
Ë((((Ë◊)Ë& 0xf0000000Ë=0xe0000000)

	)

296 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

297 
	#IN_MULTICAST_NET
 0xe0000000

	)

299 
	#IN_BADCLASS
(
a
Ë(((Ë◊ËË=()0xffffffff)

	)

300 
	#IN_EXPERIMENTAL
(
a
Ë
	`IN_BADCLASS
(◊))

	)

302 
	#IN_CLASSE
(
a
Ë((((Ë◊)Ë& 0xf0000000Ë=0xf0000000)

	)

303 
	#IN_CLASSE_NET
 0xffffffff

	)

304 
	#IN_CLASSE_NSHIFT
 0

	)

307 
	#INADDR_ANY
 ((Ë0x00000000)

	)

310 
	#INADDR_BROADCAST
 ((Ë0xffffffff)

	)

313 
	#INADDR_NONE
 ((Ë0xffffffff)

	)

316 
	#INADDR_DUMMY
 ((Ë0xc0000008)

	)

319 
	#IN_LOOPBACKNET
 127

	)

322 
	#INADDR_LOOPBACK
 0x7f000001

	)

323 
	#IN_LOOPBACK
(
a
Ë((((Ë◊)Ë& 0xff000000Ë=0x7f000000)

	)

326 
	#INADDR_UNSPEC_GROUP
 0xe0000000U

	)

327 
	#INADDR_ALLHOSTS_GROUP
 0xe0000001U

	)

328 
	#INADDR_ALLRTRS_GROUP
 0xe0000002U

	)

329 
	#INADDR_ALLSNOOPERS_GROUP
 0xe000006aU

	)

330 
	#INADDR_MAX_LOCAL_GROUP
 0xe00000ffU

	)

334 
	~<asm/byã‹dî.h
>

	@/usr/include/linux/in6.h

22 #i‚de‡
_LINUX_IN6_H


23 
	#_LINUX_IN6_H


	)

25 
	~<löux/ty≥s.h
>

26 
	~<löux/libc-com∑t.h
>

32 #i‡
__UAPI_DEF_IN6_ADDR


33 
	sö6_addr
 {

35 
__u8
 
	mu6_addr8
[16];

36 #i‡
__UAPI_DEF_IN6_ADDR_ALT


37 
__be16
 
	mu6_addr16
[8];

38 
__be32
 
	mu6_addr32
[4];

40 } 
	mö6_u
;

41 
	#s6_addr
 
ö6_u
.
u6_addr8


	)

42 #i‡
__UAPI_DEF_IN6_ADDR_ALT


43 
	#s6_addr16
 
ö6_u
.
u6_addr16


	)

44 
	#s6_addr32
 
ö6_u
.
u6_addr32


	)

49 #i‡
__UAPI_DEF_SOCKADDR_IN6


50 
	ssockaddr_ö6
 {

51 
	msö6_Ámûy
;

52 
__be16
 
	msö6_p‹t
;

53 
__be32
 
	msö6_Êowöfo
;

54 
ö6_addr
 
	msö6_addr
;

55 
__u32
 
	msö6_sc›e_id
;

59 #i‡
__UAPI_DEF_IPV6_MREQ


60 
	sùv6_mªq
 {

62 
ö6_addr
 
	mùv6mr_mu…üddr
;

65 
	mùv6mr_ifödex
;

69 
	#ùv6mr_aˇddr
 
ùv6mr_mu…üddr


	)

71 
	sö6_Êowœbñ_ªq
 {

72 
ö6_addr
 
	mÊr_d°
;

73 
__be32
 
	mÊr_œbñ
;

74 
__u8
 
	mÊr_a˘i⁄
;

75 
__u8
 
	mÊr_sh¨e
;

76 
__u16
 
	mÊr_Êags
;

77 
__u16
 
	mÊr_expúes
;

78 
__u16
 
	mÊr_lögî
;

79 
__u32
 
	m__Êr_∑d
;

83 
	#IPV6_FL_A_GET
 0

	)

84 
	#IPV6_FL_A_PUT
 1

	)

85 
	#IPV6_FL_A_RENEW
 2

	)

87 
	#IPV6_FL_F_CREATE
 1

	)

88 
	#IPV6_FL_F_EXCL
 2

	)

89 
	#IPV6_FL_F_REFLECT
 4

	)

90 
	#IPV6_FL_F_REMOTE
 8

	)

92 
	#IPV6_FL_S_NONE
 0

	)

93 
	#IPV6_FL_S_EXCL
 1

	)

94 
	#IPV6_FL_S_PROCESS
 2

	)

95 
	#IPV6_FL_S_USER
 3

	)

96 
	#IPV6_FL_S_ANY
 255

	)

107 
	#IPV6_FLOWINFO_FLOWLABEL
 0x000fffff

	)

108 
	#IPV6_FLOWINFO_PRIORITY
 0x0ff00000

	)

111 
	#IPV6_PRIORITY_UNCHARACTERIZED
 0x0000

	)

112 
	#IPV6_PRIORITY_FILLER
 0x0100

	)

113 
	#IPV6_PRIORITY_UNATTENDED
 0x0200

	)

114 
	#IPV6_PRIORITY_RESERVED1
 0x0300

	)

115 
	#IPV6_PRIORITY_BULK
 0x0400

	)

116 
	#IPV6_PRIORITY_RESERVED2
 0x0500

	)

117 
	#IPV6_PRIORITY_INTERACTIVE
 0x0600

	)

118 
	#IPV6_PRIORITY_CONTROL
 0x0700

	)

119 
	#IPV6_PRIORITY_8
 0x0800

	)

120 
	#IPV6_PRIORITY_9
 0x0900

	)

121 
	#IPV6_PRIORITY_10
 0x0a00

	)

122 
	#IPV6_PRIORITY_11
 0x0b00

	)

123 
	#IPV6_PRIORITY_12
 0x0c00

	)

124 
	#IPV6_PRIORITY_13
 0x0d00

	)

125 
	#IPV6_PRIORITY_14
 0x0e00

	)

126 
	#IPV6_PRIORITY_15
 0x0f00

	)

131 #i‡
__UAPI_DEF_IPPROTO_V6


132 
	#IPPROTO_HOPOPTS
 0

	)

133 
	#IPPROTO_ROUTING
 43

	)

134 
	#IPPROTO_FRAGMENT
 44

	)

135 
	#IPPROTO_ICMPV6
 58

	)

136 
	#IPPROTO_NONE
 59

	)

137 
	#IPPROTO_DSTOPTS
 60

	)

138 
	#IPPROTO_MH
 135

	)

144 
	#IPV6_TLV_PAD1
 0

	)

145 
	#IPV6_TLV_PADN
 1

	)

146 
	#IPV6_TLV_ROUTERALERT
 5

	)

147 
	#IPV6_TLV_CALIPSO
 7

	)

148 
	#IPV6_TLV_IOAM
 49

	)

149 
	#IPV6_TLV_JUMBO
 194

	)

150 
	#IPV6_TLV_HAO
 201

	)

155 #i‡
__UAPI_DEF_IPV6_OPTIONS


156 
	#IPV6_ADDRFORM
 1

	)

157 
	#IPV6_2292PKTINFO
 2

	)

158 
	#IPV6_2292HOPOPTS
 3

	)

159 
	#IPV6_2292DSTOPTS
 4

	)

160 
	#IPV6_2292RTHDR
 5

	)

161 
	#IPV6_2292PKTOPTIONS
 6

	)

162 
	#IPV6_CHECKSUM
 7

	)

163 
	#IPV6_2292HOPLIMIT
 8

	)

164 
	#IPV6_NEXTHOP
 9

	)

165 
	#IPV6_AUTHHDR
 10

	)

166 
	#IPV6_FLOWINFO
 11

	)

168 
	#IPV6_UNICAST_HOPS
 16

	)

169 
	#IPV6_MULTICAST_IF
 17

	)

170 
	#IPV6_MULTICAST_HOPS
 18

	)

171 
	#IPV6_MULTICAST_LOOP
 19

	)

172 
	#IPV6_ADD_MEMBERSHIP
 20

	)

173 
	#IPV6_DROP_MEMBERSHIP
 21

	)

174 
	#IPV6_ROUTER_ALERT
 22

	)

175 
	#IPV6_MTU_DISCOVER
 23

	)

176 
	#IPV6_MTU
 24

	)

177 
	#IPV6_RECVERR
 25

	)

178 
	#IPV6_V6ONLY
 26

	)

179 
	#IPV6_JOIN_ANYCAST
 27

	)

180 
	#IPV6_LEAVE_ANYCAST
 28

	)

181 
	#IPV6_MULTICAST_ALL
 29

	)

182 
	#IPV6_ROUTER_ALERT_ISOLATE
 30

	)

183 
	#IPV6_RECVERR_RFC4884
 31

	)

186 
	#IPV6_PMTUDISC_DONT
 0

	)

187 
	#IPV6_PMTUDISC_WANT
 1

	)

188 
	#IPV6_PMTUDISC_DO
 2

	)

189 
	#IPV6_PMTUDISC_PROBE
 3

	)

193 
	#IPV6_PMTUDISC_INTERFACE
 4

	)

197 
	#IPV6_PMTUDISC_OMIT
 5

	)

200 
	#IPV6_FLOWLABEL_MGR
 32

	)

201 
	#IPV6_FLOWINFO_SEND
 33

	)

203 
	#IPV6_IPSEC_POLICY
 34

	)

204 
	#IPV6_XFRM_POLICY
 35

	)

205 
	#IPV6_HDRINCL
 36

	)

227 
	#IPV6_RECVPKTINFO
 49

	)

228 
	#IPV6_PKTINFO
 50

	)

229 
	#IPV6_RECVHOPLIMIT
 51

	)

230 
	#IPV6_HOPLIMIT
 52

	)

231 
	#IPV6_RECVHOPOPTS
 53

	)

232 
	#IPV6_HOPOPTS
 54

	)

233 
	#IPV6_RTHDRDSTOPTS
 55

	)

234 
	#IPV6_RECVRTHDR
 56

	)

235 
	#IPV6_RTHDR
 57

	)

236 
	#IPV6_RECVDSTOPTS
 58

	)

237 
	#IPV6_DSTOPTS
 59

	)

238 
	#IPV6_RECVPATHMTU
 60

	)

239 
	#IPV6_PATHMTU
 61

	)

240 
	#IPV6_DONTFRAG
 62

	)

242 
	#IPV6_USE_MIN_MTU
 63

	)

258 
	#IPV6_RECVTCLASS
 66

	)

259 
	#IPV6_TCLASS
 67

	)

272 
	#IPV6_AUTOFLOWLABEL
 70

	)

274 
	#IPV6_ADDR_PREFERENCES
 72

	)

276 
	#IPV6_PREFER_SRC_TMP
 0x0001

	)

277 
	#IPV6_PREFER_SRC_PUBLIC
 0x0002

	)

278 
	#IPV6_PREFER_SRC_PUBTMP_DEFAULT
 0x0100

	)

279 
	#IPV6_PREFER_SRC_COA
 0x0004

	)

280 
	#IPV6_PREFER_SRC_HOME
 0x0400

	)

281 
	#IPV6_PREFER_SRC_CGA
 0x0008

	)

282 
	#IPV6_PREFER_SRC_NONCGA
 0x0800

	)

285 
	#IPV6_MINHOPCOUNT
 73

	)

287 
	#IPV6_ORIGDSTADDR
 74

	)

288 
	#IPV6_RECVORIGDSTADDR
 
IPV6_ORIGDSTADDR


	)

289 
	#IPV6_TRANSPARENT
 75

	)

290 
	#IPV6_UNICAST_IF
 76

	)

291 
	#IPV6_RECVFRAGSIZE
 77

	)

292 
	#IPV6_FREEBIND
 78

	)

	@/usr/include/linux/ip.h

18 #i‚de‡
_LINUX_IP_H


19 
	#_LINUX_IP_H


	)

20 
	~<löux/ty≥s.h
>

21 
	~<löux/°ddef.h
>

22 
	~<asm/byã‹dî.h
>

24 
	#IPTOS_TOS_MASK
 0x1E

	)

25 
	#IPTOS_TOS
(
tos
Ë(—os)&
IPTOS_TOS_MASK
)

	)

26 
	#IPTOS_LOWDELAY
 0x10

	)

27 
	#IPTOS_THROUGHPUT
 0x08

	)

28 
	#IPTOS_RELIABILITY
 0x04

	)

29 
	#IPTOS_MINCOST
 0x02

	)

31 
	#IPTOS_PREC_MASK
 0xE0

	)

32 
	#IPTOS_PREC
(
tos
Ë(—os)&
IPTOS_PREC_MASK
)

	)

33 
	#IPTOS_PREC_NETCONTROL
 0xe0

	)

34 
	#IPTOS_PREC_INTERNETCONTROL
 0xc0

	)

35 
	#IPTOS_PREC_CRITIC_ECP
 0xa0

	)

36 
	#IPTOS_PREC_FLASHOVERRIDE
 0x80

	)

37 
	#IPTOS_PREC_FLASH
 0x60

	)

38 
	#IPTOS_PREC_IMMEDIATE
 0x40

	)

39 
	#IPTOS_PREC_PRIORITY
 0x20

	)

40 
	#IPTOS_PREC_ROUTINE
 0x00

	)

44 
	#IPOPT_COPY
 0x80

	)

45 
	#IPOPT_CLASS_MASK
 0x60

	)

46 
	#IPOPT_NUMBER_MASK
 0x1f

	)

48 
	#IPOPT_COPIED
(
o
Ë((o)&
IPOPT_COPY
)

	)

49 
	#IPOPT_CLASS
(
o
Ë((o)&
IPOPT_CLASS_MASK
)

	)

50 
	#IPOPT_NUMBER
(
o
Ë((o)&
IPOPT_NUMBER_MASK
)

	)

52 
	#IPOPT_CONTROL
 0x00

	)

53 
	#IPOPT_RESERVED1
 0x20

	)

54 
	#IPOPT_MEASUREMENT
 0x40

	)

55 
	#IPOPT_RESERVED2
 0x60

	)

57 
	#IPOPT_END
 (0 |
IPOPT_CONTROL
)

	)

58 
	#IPOPT_NOOP
 (1 |
IPOPT_CONTROL
)

	)

59 
	#IPOPT_SEC
 (2 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

60 
	#IPOPT_LSRR
 (3 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

61 
	#IPOPT_TIMESTAMP
 (4 |
IPOPT_MEASUREMENT
)

	)

62 
	#IPOPT_CIPSO
 (6 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

63 
	#IPOPT_RR
 (7 |
IPOPT_CONTROL
)

	)

64 
	#IPOPT_SID
 (8 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

65 
	#IPOPT_SSRR
 (9 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

66 
	#IPOPT_RA
 (20|
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

68 
	#IPVERSION
 4

	)

69 
	#MAXTTL
 255

	)

70 
	#IPDEFTTL
 64

	)

72 
	#IPOPT_OPTVAL
 0

	)

73 
	#IPOPT_OLEN
 1

	)

74 
	#IPOPT_OFFSET
 2

	)

75 
	#IPOPT_MINOFF
 4

	)

76 
	#MAX_IPOPTLEN
 40

	)

77 
	#IPOPT_NOP
 
IPOPT_NOOP


	)

78 
	#IPOPT_EOL
 
IPOPT_END


	)

79 
	#IPOPT_TS
 
IPOPT_TIMESTAMP


	)

81 
	#IPOPT_TS_TSONLY
 0

	)

82 
	#IPOPT_TS_TSANDADDR
 1

	)

83 
	#IPOPT_TS_PRESPEC
 3

	)

85 
	#IPV4_BEET_PHMAXLEN
 8

	)

87 
	sùhdr
 {

88 #i‡
deföed
(
__LITTLE_ENDIAN_BITFIELD
)

89 
__u8
 
	mihl
:4,

90 
	mvîsi⁄
:4;

91 #ñi‡
deföed
 (
__BIG_ENDIAN_BITFIELD
)

92 
__u8
 
	mvîsi⁄
:4,

93 
	mihl
:4;

97 
__u8
 
	mtos
;

98 
__be16
 
	mtŸ_Àn
;

99 
__be16
 
	mid
;

100 
__be16
 
	m‰ag_off
;

101 
__u8
 
	mâl
;

102 
__u8
 
	m¥Ÿocﬁ
;

103 
__sum16
 
	mcheck
;

104 
__°ru˘_group
–, 
addrs
, ,

105 
__be32
 
ßddr
;

106 
__be32
 
daddr
;

112 
	sù_auth_hdr
 {

113 
__u8
 
	m√xthdr
;

114 
__u8
 
	mhdæí
;

115 
__be16
 
	mª£rved
;

116 
__be32
 
	m•i
;

117 
__be32
 
	m£q_no
;

118 
__u8
 
	mauth_d©a
[];

121 
	sù_e•_hdr
 {

122 
__be32
 
	m•i
;

123 
__be32
 
	m£q_no
;

124 
__u8
 
	míc_d©a
[];

127 
	sù_comp_hdr
 {

128 
__u8
 
	m√xthdr
;

129 
__u8
 
	mÊags
;

130 
__be16
 
	m˝i
;

133 
	sù_bìt_phdr
 {

134 
__u8
 
	m√xthdr
;

135 
__u8
 
	mhdæí
;

136 
__u8
 
	m∑dÀn
;

137 
__u8
 
	mª£rved
;

140 
	sù_ùtfs_hdr
 {

141 
__u8
 
	msubty≥
;

142 
__u8
 
	mÊags
;

143 
__be16
 
	mblock_off£t
;

146 
	sù_ùtfs_cc_hdr
 {

147 
__u8
 
	msubty≥
;

148 
__u8
 
	mÊags
;

149 
__be16
 
	mblock_off£t
;

150 
__be32
 
	mloss_øã
;

151 
__be64
 
	mπt_adñay_xdñay
;

152 
__be32
 
	mtvÆ
;

153 
__be32
 
	mãcho
;

159 
	mIPV4_DEVCONF_FORWARDING
=1,

160 
	mIPV4_DEVCONF_MC_FORWARDING
,

161 
	mIPV4_DEVCONF_PROXY_ARP
,

162 
	mIPV4_DEVCONF_ACCEPT_REDIRECTS
,

163 
	mIPV4_DEVCONF_SECURE_REDIRECTS
,

164 
	mIPV4_DEVCONF_SEND_REDIRECTS
,

165 
	mIPV4_DEVCONF_SHARED_MEDIA
,

166 
	mIPV4_DEVCONF_RP_FILTER
,

167 
	mIPV4_DEVCONF_ACCEPT_SOURCE_ROUTE
,

168 
	mIPV4_DEVCONF_BOOTP_RELAY
,

169 
	mIPV4_DEVCONF_LOG_MARTIANS
,

170 
	mIPV4_DEVCONF_TAG
,

171 
	mIPV4_DEVCONF_ARPFILTER
,

172 
	mIPV4_DEVCONF_MEDIUM_ID
,

173 
	mIPV4_DEVCONF_NOXFRM
,

174 
	mIPV4_DEVCONF_NOPOLICY
,

175 
	mIPV4_DEVCONF_FORCE_IGMP_VERSION
,

176 
	mIPV4_DEVCONF_ARP_ANNOUNCE
,

177 
	mIPV4_DEVCONF_ARP_IGNORE
,

178 
	mIPV4_DEVCONF_PROMOTE_SECONDARIES
,

179 
	mIPV4_DEVCONF_ARP_ACCEPT
,

180 
	mIPV4_DEVCONF_ARP_NOTIFY
,

181 
	mIPV4_DEVCONF_ACCEPT_LOCAL
,

182 
	mIPV4_DEVCONF_SRC_VMARK
,

183 
	mIPV4_DEVCONF_PROXY_ARP_PVLAN
,

184 
	mIPV4_DEVCONF_ROUTE_LOCALNET
,

185 
	mIPV4_DEVCONF_IGMPV2_UNSOLICITED_REPORT_INTERVAL
,

186 
	mIPV4_DEVCONF_IGMPV3_UNSOLICITED_REPORT_INTERVAL
,

187 
	mIPV4_DEVCONF_IGNORE_ROUTES_WITH_LINKDOWN
,

188 
	mIPV4_DEVCONF_DROP_UNICAST_IN_L2_MULTICAST
,

189 
	mIPV4_DEVCONF_DROP_GRATUITOUS_ARP
,

190 
	mIPV4_DEVCONF_BC_FORWARDING
,

191 
	mIPV4_DEVCONF_ARP_EVICT_NOCARRIER
,

192 
	m__IPV4_DEVCONF_MAX


195 
	#IPV4_DEVCONF_MAX
 (
__IPV4_DEVCONF_MAX
 - 1)

	)

	@/usr/include/linux/ipv6.h

2 #i‚de‡
_IPV6_H


3 
	#_IPV6_H


	)

5 
	~<löux/libc-com∑t.h
>

6 
	~<löux/ty≥s.h
>

7 
	~<löux/°ddef.h
>

8 
	~<löux/ö6.h
>

9 
	~<asm/byã‹dî.h
>

13 
	#IPV6_MIN_MTU
 1280

	)

21 #i‡
__UAPI_DEF_IN6_PKTINFO


22 
	sö6_pktöfo
 {

23 
ö6_addr
 
	mùi6_addr
;

24 
	mùi6_ifödex
;

28 #i‡
__UAPI_DEF_IP6_MTUINFO


29 
	sù6_mtuöfo
 {

30 
sockaddr_ö6
 
	mù6m_addr
;

31 
__u32
 
	mù6m_mtu
;

35 
	sö6_i‰eq
 {

36 
ö6_addr
 
	mi‰6_addr
;

37 
__u32
 
	mi‰6_¥efixÀn
;

38 
	mi‰6_ifödex
;

41 
	#IPV6_SRCRT_STRICT
 0x01

	)

42 
	#IPV6_SRCRT_TYPE_0
 0

	)

43 
	#IPV6_SRCRT_TYPE_2
 2

	)

44 
	#IPV6_SRCRT_TYPE_3
 3

	)

45 
	#IPV6_SRCRT_TYPE_4
 4

	)

50 
	sùv6_π_hdr
 {

51 
__u8
 
	m√xthdr
;

52 
__u8
 
	mhdæí
;

53 
__u8
 
	mty≥
;

54 
__u8
 
	m£gmíts_À·
;

63 
	sùv6_›t_hdr
 {

64 
__u8
 
	m√xthdr
;

65 
__u8
 
	mhdæí
;

69 } 
__©åibuã__
((
∑cked
));

71 
	#ùv6_de°›t_hdr
 
ùv6_›t_hdr


	)

72 
	#ùv6_h››t_hdr
 
ùv6_›t_hdr


	)

75 
	#IPV6_OPT_ROUTERALERT_MLD
 0x0000

	)

81 
	sπ0_hdr
 {

82 
ùv6_π_hdr
 
	mπ_hdr
;

83 
__u32
 
	mª£rved
;

84 
ö6_addr
 
	maddr
[];

86 
	#π0_ty≥
 
π_hdr
.
ty≥


	)

93 
	sπ2_hdr
 {

94 
ùv6_π_hdr
 
	mπ_hdr
;

95 
__u32
 
	mª£rved
;

96 
ö6_addr
 
	maddr
;

98 
	#π2_ty≥
 
π_hdr
.
ty≥


	)

105 
	sùv6_de°›t_hao
 {

106 
__u8
 
	mty≥
;

107 
__u8
 
	mÀngth
;

108 
ö6_addr
 
	maddr
;

109 } 
__©åibuã__
((
∑cked
));

118 
	sùv6hdr
 {

119 #i‡
deföed
(
__LITTLE_ENDIAN_BITFIELD
)

120 
__u8
 
	m¥i‹ôy
:4,

121 
	mvîsi⁄
:4;

122 #ñi‡
deföed
(
__BIG_ENDIAN_BITFIELD
)

123 
__u8
 
	mvîsi⁄
:4,

124 
	m¥i‹ôy
:4;

128 
__u8
 
	mÊow_lbl
[3];

130 
__be16
 
	m∑ylﬂd_Àn
;

131 
__u8
 
	m√xthdr
;

132 
__u8
 
	mh›_limô
;

134 
__°ru˘_group
–, 
addrs
, ,

135 
ö6_addr
 
ßddr
;

136 
ö6_addr
 
daddr
;

143 
	mDEVCONF_FORWARDING
 = 0,

144 
	mDEVCONF_HOPLIMIT
,

145 
	mDEVCONF_MTU6
,

146 
	mDEVCONF_ACCEPT_RA
,

147 
	mDEVCONF_ACCEPT_REDIRECTS
,

148 
	mDEVCONF_AUTOCONF
,

149 
	mDEVCONF_DAD_TRANSMITS
,

150 
	mDEVCONF_RTR_SOLICITS
,

151 
	mDEVCONF_RTR_SOLICIT_INTERVAL
,

152 
	mDEVCONF_RTR_SOLICIT_DELAY
,

153 
	mDEVCONF_USE_TEMPADDR
,

154 
	mDEVCONF_TEMP_VALID_LFT
,

155 
	mDEVCONF_TEMP_PREFERED_LFT
,

156 
	mDEVCONF_REGEN_MAX_RETRY
,

157 
	mDEVCONF_MAX_DESYNC_FACTOR
,

158 
	mDEVCONF_MAX_ADDRESSES
,

159 
	mDEVCONF_FORCE_MLD_VERSION
,

160 
	mDEVCONF_ACCEPT_RA_DEFRTR
,

161 
	mDEVCONF_ACCEPT_RA_PINFO
,

162 
	mDEVCONF_ACCEPT_RA_RTR_PREF
,

163 
	mDEVCONF_RTR_PROBE_INTERVAL
,

164 
	mDEVCONF_ACCEPT_RA_RT_INFO_MAX_PLEN
,

165 
	mDEVCONF_PROXY_NDP
,

166 
	mDEVCONF_OPTIMISTIC_DAD
,

167 
	mDEVCONF_ACCEPT_SOURCE_ROUTE
,

168 
	mDEVCONF_MC_FORWARDING
,

169 
	mDEVCONF_DISABLE_IPV6
,

170 
	mDEVCONF_ACCEPT_DAD
,

171 
	mDEVCONF_FORCE_TLLAO
,

172 
	mDEVCONF_NDISC_NOTIFY
,

173 
	mDEVCONF_MLDV1_UNSOLICITED_REPORT_INTERVAL
,

174 
	mDEVCONF_MLDV2_UNSOLICITED_REPORT_INTERVAL
,

175 
	mDEVCONF_SUPPRESS_FRAG_NDISC
,

176 
	mDEVCONF_ACCEPT_RA_FROM_LOCAL
,

177 
	mDEVCONF_USE_OPTIMISTIC
,

178 
	mDEVCONF_ACCEPT_RA_MTU
,

179 
	mDEVCONF_STABLE_SECRET
,

180 
	mDEVCONF_USE_OIF_ADDRS_ONLY
,

181 
	mDEVCONF_ACCEPT_RA_MIN_HOP_LIMIT
,

182 
	mDEVCONF_IGNORE_ROUTES_WITH_LINKDOWN
,

183 
	mDEVCONF_DROP_UNICAST_IN_L2_MULTICAST
,

184 
	mDEVCONF_DROP_UNSOLICITED_NA
,

185 
	mDEVCONF_KEEP_ADDR_ON_DOWN
,

186 
	mDEVCONF_RTR_SOLICIT_MAX_INTERVAL
,

187 
	mDEVCONF_SEG6_ENABLED
,

188 
	mDEVCONF_SEG6_REQUIRE_HMAC
,

189 
	mDEVCONF_ENHANCED_DAD
,

190 
	mDEVCONF_ADDR_GEN_MODE
,

191 
	mDEVCONF_DISABLE_POLICY
,

192 
	mDEVCONF_ACCEPT_RA_RT_INFO_MIN_PLEN
,

193 
	mDEVCONF_NDISC_TCLASS
,

194 
	mDEVCONF_RPL_SEG_ENABLED
,

195 
	mDEVCONF_RA_DEFRTR_METRIC
,

196 
	mDEVCONF_IOAM6_ENABLED
,

197 
	mDEVCONF_IOAM6_ID
,

198 
	mDEVCONF_IOAM6_ID_WIDE
,

199 
	mDEVCONF_NDISC_EVICT_NOCARRIER
,

200 
	mDEVCONF_ACCEPT_UNTRACKED_NA
,

201 
	mDEVCONF_ACCEPT_RA_MIN_LFT
,

202 
	mDEVCONF_MAX


	@/usr/include/linux/kernel.h

2 #i‚de‡
_LINUX_KERNEL_H


3 
	#_LINUX_KERNEL_H


	)

5 
	~<löux/sysöfo.h
>

6 
	~<löux/c⁄°.h
>

	@/usr/include/linux/limits.h

2 #i‚de‡
_LINUX_LIMITS_H


3 
	#_LINUX_LIMITS_H


	)

5 
	#NR_OPEN
 1024

	)

7 
	#NGROUPS_MAX
 65536

	)

8 
	#ARG_MAX
 131072

	)

9 
	#LINK_MAX
 127

	)

10 
	#MAX_CANON
 255

	)

11 
	#MAX_INPUT
 255

	)

12 
	#NAME_MAX
 255

	)

13 
	#PATH_MAX
 4096

	)

14 
	#PIPE_BUF
 4096

	)

15 
	#XATTR_NAME_MAX
 255

	)

16 
	#XATTR_SIZE_MAX
 65536

	)

17 
	#XATTR_LIST_MAX
 65536

	)

19 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/module.h

2 #i‚de‡
_LINUX_MODULE_H


3 
	#_LINUX_MODULE_H


	)

6 
	#MODULE_INIT_IGNORE_MODVERSIONS
 1

	)

7 
	#MODULE_INIT_IGNORE_VERMAGIC
 2

	)

8 
	#MODULE_INIT_COMPRESSED_FILE
 4

	)

	@/usr/include/linux/net.h

19 #i‚de‡
_LINUX_NET_H


20 
	#_LINUX_NET_H


	)

22 
	~<löux/sockë.h
>

23 
	~<asm/sockë.h
>

25 
	#NPROTO
 
AF_MAX


	)

27 
	#SYS_SOCKET
 1

	)

28 
	#SYS_BIND
 2

	)

29 
	#SYS_CONNECT
 3

	)

30 
	#SYS_LISTEN
 4

	)

31 
	#SYS_ACCEPT
 5

	)

32 
	#SYS_GETSOCKNAME
 6

	)

33 
	#SYS_GETPEERNAME
 7

	)

34 
	#SYS_SOCKETPAIR
 8

	)

35 
	#SYS_SEND
 9

	)

36 
	#SYS_RECV
 10

	)

37 
	#SYS_SENDTO
 11

	)

38 
	#SYS_RECVFROM
 12

	)

39 
	#SYS_SHUTDOWN
 13

	)

40 
	#SYS_SETSOCKOPT
 14

	)

41 
	#SYS_GETSOCKOPT
 15

	)

42 
	#SYS_SENDMSG
 16

	)

43 
	#SYS_RECVMSG
 17

	)

44 
	#SYS_ACCEPT4
 18

	)

45 
	#SYS_RECVMMSG
 19

	)

46 
	#SYS_SENDMMSG
 20

	)

49 
	mSS_FREE
 = 0,

50 
	mSS_UNCONNECTED
,

51 
	mSS_CONNECTING
,

52 
	mSS_CONNECTED
,

53 
	mSS_DISCONNECTING


54 } 
	tsockë_°©e
;

56 
	#__SO_ACCEPTCON
 (1 << 16Ë

	)

	@/usr/include/linux/netdevice.h

26 #i‚de‡
_LINUX_NETDEVICE_H


27 
	#_LINUX_NETDEVICE_H


	)

29 
	~<löux/if.h
>

30 
	~<löux/if_ëhî.h
>

31 
	~<löux/if_∑ckë.h
>

32 
	~<löux/if_lök.h
>

35 
	#MAX_ADDR_LEN
 32

	)

38 
	#INIT_NETDEV_GROUP
 0

	)

42 
	#NET_NAME_UNKNOWN
 0

	)

43 
	#NET_NAME_ENUM
 1

	)

44 
	#NET_NAME_PREDICTABLE
 2

	)

45 
	#NET_NAME_USER
 3

	)

46 
	#NET_NAME_RENAMED
 4

	)

50 
	mIF_PORT_UNKNOWN
 = 0,

51 
	mIF_PORT_10BASE2
,

52 
	mIF_PORT_10BASET
,

53 
	mIF_PORT_AUI
,

54 
	mIF_PORT_100BASET
,

55 
	mIF_PORT_100BASETX
,

56 
	mIF_PORT_100BASEFX


60 
	#NET_ADDR_PERM
 0

	)

61 
	#NET_ADDR_RANDOM
 1

	)

62 
	#NET_ADDR_STOLEN
 2

	)

63 
	#NET_ADDR_SET
 3

	)

	@/usr/include/linux/netlink.h

2 #i‚de‡
__LINUX_NETLINK_H


3 
	#__LINUX_NETLINK_H


	)

5 
	~<löux/c⁄°.h
>

6 
	~<löux/sockë.h
>

7 
	~<löux/ty≥s.h
>

9 
	#NETLINK_ROUTE
 0

	)

10 
	#NETLINK_UNUSED
 1

	)

11 
	#NETLINK_USERSOCK
 2

	)

12 
	#NETLINK_FIREWALL
 3

	)

13 
	#NETLINK_SOCK_DIAG
 4

	)

14 
	#NETLINK_NFLOG
 5

	)

15 
	#NETLINK_XFRM
 6

	)

16 
	#NETLINK_SELINUX
 7

	)

17 
	#NETLINK_ISCSI
 8

	)

18 
	#NETLINK_AUDIT
 9

	)

19 
	#NETLINK_FIB_LOOKUP
 10

	)

20 
	#NETLINK_CONNECTOR
 11

	)

21 
	#NETLINK_NETFILTER
 12

	)

22 
	#NETLINK_IP6_FW
 13

	)

23 
	#NETLINK_DNRTMSG
 14

	)

24 
	#NETLINK_KOBJECT_UEVENT
 15

	)

25 
	#NETLINK_GENERIC
 16

	)

27 
	#NETLINK_SCSITRANSPORT
 18

	)

28 
	#NETLINK_ECRYPTFS
 19

	)

29 
	#NETLINK_RDMA
 20

	)

30 
	#NETLINK_CRYPTO
 21

	)

31 
	#NETLINK_SMC
 22

	)

33 
	#NETLINK_INET_DIAG
 
NETLINK_SOCK_DIAG


	)

35 
	#MAX_LINKS
 32

	)

37 
	ssockaddr_∆
 {

38 
__kî√l_ß_Ámûy_t
 
	m∆_Ámûy
;

39 
	m∆_∑d
;

40 
__u32
 
	m∆_pid
;

41 
__u32
 
	m∆_groups
;

52 
	s∆msghdr
 {

53 
__u32
 
	m∆msg_Àn
;

54 
__u16
 
	m∆msg_ty≥
;

55 
__u16
 
	m∆msg_Êags
;

56 
__u32
 
	m∆msg_£q
;

57 
__u32
 
	m∆msg_pid
;

62 
	#NLM_F_REQUEST
 0x01

	)

63 
	#NLM_F_MULTI
 0x02

	)

64 
	#NLM_F_ACK
 0x04

	)

65 
	#NLM_F_ECHO
 0x08

	)

66 
	#NLM_F_DUMP_INTR
 0x10

	)

67 
	#NLM_F_DUMP_FILTERED
 0x20

	)

70 
	#NLM_F_ROOT
 0x100

	)

71 
	#NLM_F_MATCH
 0x200

	)

72 
	#NLM_F_ATOMIC
 0x400

	)

73 
	#NLM_F_DUMP
 (
NLM_F_ROOT
|
NLM_F_MATCH
)

	)

76 
	#NLM_F_REPLACE
 0x100

	)

77 
	#NLM_F_EXCL
 0x200

	)

78 
	#NLM_F_CREATE
 0x400

	)

79 
	#NLM_F_APPEND
 0x800

	)

82 
	#NLM_F_NONREC
 0x100

	)

83 
	#NLM_F_BULK
 0x200

	)

86 
	#NLM_F_CAPPED
 0x100

	)

87 
	#NLM_F_ACK_TLVS
 0x200

	)

98 
	#NLMSG_ALIGNTO
 4U

	)

99 
	#NLMSG_ALIGN
(
Àn
Ë–(÷í)+
NLMSG_ALIGNTO
-1Ë& ~(NLMSG_ALIGNTO-1Ë)

	)

100 
	#NLMSG_HDRLEN
 ((Ë
	`NLMSG_ALIGN
((
∆msghdr
)))

	)

101 
	#NLMSG_LENGTH
(
Àn
Ë(÷íË+ 
NLMSG_HDRLEN
)

	)

102 
	#NLMSG_SPACE
(
Àn
Ë
	`NLMSG_ALIGN
(
	`NLMSG_LENGTH
÷í))

	)

103 
	#NLMSG_DATA
(
∆h
Ë((*)(((*ÍlhË+ 
NLMSG_HDRLEN
))

	)

104 
	#NLMSG_NEXT
(
∆h
,
Àn
Ë(÷íË-
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
), \

105 (
∆msghdr
 *)(((*)(
∆h
)) + \

106 
	`NLMSG_ALIGN
((
∆h
)->
∆msg_Àn
)))

	)

107 
	#NLMSG_OK
(
∆h
,
Àn
Ë(÷íË>()(
∆msghdr
) && \

108 (
∆h
)->
∆msg_Àn
 >(
∆msghdr
) && \

109 (
∆h
)->
∆msg_Àn
 <(
Àn
))

	)

110 
	#NLMSG_PAYLOAD
(
∆h
,
Àn
Ë(“lh)->
∆msg_Àn
 - 
	`NLMSG_SPACE
(÷í)))

	)

112 
	#NLMSG_NOOP
 0x1

	)

113 
	#NLMSG_ERROR
 0x2

	)

114 
	#NLMSG_DONE
 0x3

	)

115 
	#NLMSG_OVERRUN
 0x4

	)

117 
	#NLMSG_MIN_TYPE
 0x10

	)

119 
	s∆msgîr
 {

120 
	mîr‹
;

121 
∆msghdr
 
	mmsg
;

150 
	e∆msgîr_©ås
 {

151 
	mNLMSGERR_ATTR_UNUSED
,

152 
	mNLMSGERR_ATTR_MSG
,

153 
	mNLMSGERR_ATTR_OFFS
,

154 
	mNLMSGERR_ATTR_COOKIE
,

155 
	mNLMSGERR_ATTR_POLICY
,

156 
	mNLMSGERR_ATTR_MISS_TYPE
,

157 
	mNLMSGERR_ATTR_MISS_NEST
,

159 
	m__NLMSGERR_ATTR_MAX
,

160 
	mNLMSGERR_ATTR_MAX
 = 
__NLMSGERR_ATTR_MAX
 - 1

163 
	#NETLINK_ADD_MEMBERSHIP
 1

	)

164 
	#NETLINK_DROP_MEMBERSHIP
 2

	)

165 
	#NETLINK_PKTINFO
 3

	)

166 
	#NETLINK_BROADCAST_ERROR
 4

	)

167 
	#NETLINK_NO_ENOBUFS
 5

	)

168 
	#NETLINK_RX_RING
 6

	)

169 
	#NETLINK_TX_RING
 7

	)

170 
	#NETLINK_LISTEN_ALL_NSID
 8

	)

171 
	#NETLINK_LIST_MEMBERSHIPS
 9

	)

172 
	#NETLINK_CAP_ACK
 10

	)

173 
	#NETLINK_EXT_ACK
 11

	)

174 
	#NETLINK_GET_STRICT_CHK
 12

	)

176 
	s∆_pktöfo
 {

177 
__u32
 
	mgroup
;

180 
	s∆_mm≠_ªq
 {

181 
	mnm_block_size
;

182 
	mnm_block_ƒ
;

183 
	mnm_‰ame_size
;

184 
	mnm_‰ame_ƒ
;

187 
	s∆_mm≠_hdr
 {

188 
	mnm_°©us
;

189 
	mnm_Àn
;

190 
__u32
 
	mnm_group
;

192 
__u32
 
	mnm_pid
;

193 
__u32
 
	mnm_uid
;

194 
__u32
 
	mnm_gid
;

197 
	e∆_mm≠_°©us
 {

198 
	mNL_MMAP_STATUS_UNUSED
,

199 
	mNL_MMAP_STATUS_RESERVED
,

200 
	mNL_MMAP_STATUS_VALID
,

201 
	mNL_MMAP_STATUS_COPY
,

202 
	mNL_MMAP_STATUS_SKIP
,

205 
	#NL_MMAP_MSG_ALIGNMENT
 
NLMSG_ALIGNTO


	)

206 
	#NL_MMAP_MSG_ALIGN
(
sz
Ë
	`__ALIGN_KERNEL
(sz, 
NL_MMAP_MSG_ALIGNMENT
)

	)

207 
	#NL_MMAP_HDRLEN
 
	`NL_MMAP_MSG_ALIGN
((
∆_mm≠_hdr
))

	)

209 
	#NET_MAJOR
 36

	)

212 
	mNETLINK_UNCONNECTED
 = 0,

213 
	mNETLINK_CONNECTED
,

225 
	s∆©å
 {

226 
__u16
 
	m∆a_Àn
;

227 
__u16
 
	m∆a_ty≥
;

240 
	#NLA_F_NESTED
 (1 << 15)

	)

241 
	#NLA_F_NET_BYTEORDER
 (1 << 14)

	)

242 
	#NLA_TYPE_MASK
 ~(
NLA_F_NESTED
 | 
NLA_F_NET_BYTEORDER
)

	)

244 
	#NLA_ALIGNTO
 4

	)

245 
	#NLA_ALIGN
(
Àn
Ë((÷íË+ 
NLA_ALIGNTO
 - 1Ë& ~(NLA_ALIGNTO - 1))

	)

246 
	#NLA_HDRLEN
 ((Ë
	`NLA_ALIGN
((
∆©å
)))

	)

261 
	s∆a_bôfõld32
 {

262 
__u32
 
	mvÆue
;

263 
__u32
 
	m£À˘‹
;

300 
	e√éök_©åibuã_ty≥
 {

301 
	mNL_ATTR_TYPE_INVALID
,

303 
	mNL_ATTR_TYPE_FLAG
,

305 
	mNL_ATTR_TYPE_U8
,

306 
	mNL_ATTR_TYPE_U16
,

307 
	mNL_ATTR_TYPE_U32
,

308 
	mNL_ATTR_TYPE_U64
,

310 
	mNL_ATTR_TYPE_S8
,

311 
	mNL_ATTR_TYPE_S16
,

312 
	mNL_ATTR_TYPE_S32
,

313 
	mNL_ATTR_TYPE_S64
,

315 
	mNL_ATTR_TYPE_BINARY
,

316 
	mNL_ATTR_TYPE_STRING
,

317 
	mNL_ATTR_TYPE_NUL_STRING
,

319 
	mNL_ATTR_TYPE_NESTED
,

320 
	mNL_ATTR_TYPE_NESTED_ARRAY
,

322 
	mNL_ATTR_TYPE_BITFIELD32
,

324 
	mNL_ATTR_TYPE_SINT
,

325 
	mNL_ATTR_TYPE_UINT
,

359 
	e√éök_pﬁicy_ty≥_©å
 {

360 
	mNL_POLICY_TYPE_ATTR_UNSPEC
,

361 
	mNL_POLICY_TYPE_ATTR_TYPE
,

362 
	mNL_POLICY_TYPE_ATTR_MIN_VALUE_S
,

363 
	mNL_POLICY_TYPE_ATTR_MAX_VALUE_S
,

364 
	mNL_POLICY_TYPE_ATTR_MIN_VALUE_U
,

365 
	mNL_POLICY_TYPE_ATTR_MAX_VALUE_U
,

366 
	mNL_POLICY_TYPE_ATTR_MIN_LENGTH
,

367 
	mNL_POLICY_TYPE_ATTR_MAX_LENGTH
,

368 
	mNL_POLICY_TYPE_ATTR_POLICY_IDX
,

369 
	mNL_POLICY_TYPE_ATTR_POLICY_MAXTYPE
,

370 
	mNL_POLICY_TYPE_ATTR_BITFIELD32_MASK
,

371 
	mNL_POLICY_TYPE_ATTR_PAD
,

372 
	mNL_POLICY_TYPE_ATTR_MASK
,

375 
	m__NL_POLICY_TYPE_ATTR_MAX
,

376 
	mNL_POLICY_TYPE_ATTR_MAX
 = 
__NL_POLICY_TYPE_ATTR_MAX
 - 1

	@/usr/include/linux/nl80211.h

1 #i‚de‡
__LINUX_NL80211_H


2 
	#__LINUX_NL80211_H


	)

43 
	~<löux/ty≥s.h
>

45 
	#NL80211_GENL_NAME
 "∆80211"

	)

47 
	#NL80211_MULTICAST_GROUP_CONFIG
 "c⁄fig"

	)

48 
	#NL80211_MULTICAST_GROUP_SCAN
 "sˇn"

	)

49 
	#NL80211_MULTICAST_GROUP_REG
 "ªguœt‹y"

	)

50 
	#NL80211_MULTICAST_GROUP_MLME
 "mlme"

	)

51 
	#NL80211_MULTICAST_GROUP_VENDOR
 "víd‹"

	)

52 
	#NL80211_MULTICAST_GROUP_NAN
 "«n"

	)

53 
	#NL80211_MULTICAST_GROUP_TESTMODE
 "ã°mode"

	)

55 
	#NL80211_EDMG_BW_CONFIG_MIN
 4

	)

56 
	#NL80211_EDMG_BW_CONFIG_MAX
 15

	)

57 
	#NL80211_EDMG_CHANNELS_MIN
 1

	)

58 
	#NL80211_EDMG_CHANNELS_MAX
 0x3¯

	)

1342 
	e∆80211_comm™ds
 {

1344 
	mNL80211_CMD_UNSPEC
,

1346 
	mNL80211_CMD_GET_WIPHY
,

1347 
	mNL80211_CMD_SET_WIPHY
,

1348 
	mNL80211_CMD_NEW_WIPHY
,

1349 
	mNL80211_CMD_DEL_WIPHY
,

1351 
	mNL80211_CMD_GET_INTERFACE
,

1352 
	mNL80211_CMD_SET_INTERFACE
,

1353 
	mNL80211_CMD_NEW_INTERFACE
,

1354 
	mNL80211_CMD_DEL_INTERFACE
,

1356 
	mNL80211_CMD_GET_KEY
,

1357 
	mNL80211_CMD_SET_KEY
,

1358 
	mNL80211_CMD_NEW_KEY
,

1359 
	mNL80211_CMD_DEL_KEY
,

1361 
	mNL80211_CMD_GET_BEACON
,

1362 
	mNL80211_CMD_SET_BEACON
,

1363 
	mNL80211_CMD_START_AP
,

1364 
	mNL80211_CMD_NEW_BEACON
 = 
NL80211_CMD_START_AP
,

1365 
	mNL80211_CMD_STOP_AP
,

1366 
	mNL80211_CMD_DEL_BEACON
 = 
NL80211_CMD_STOP_AP
,

1368 
	mNL80211_CMD_GET_STATION
,

1369 
	mNL80211_CMD_SET_STATION
,

1370 
	mNL80211_CMD_NEW_STATION
,

1371 
	mNL80211_CMD_DEL_STATION
,

1373 
	mNL80211_CMD_GET_MPATH
,

1374 
	mNL80211_CMD_SET_MPATH
,

1375 
	mNL80211_CMD_NEW_MPATH
,

1376 
	mNL80211_CMD_DEL_MPATH
,

1378 
	mNL80211_CMD_SET_BSS
,

1380 
	mNL80211_CMD_SET_REG
,

1381 
	mNL80211_CMD_REQ_SET_REG
,

1383 
	mNL80211_CMD_GET_MESH_CONFIG
,

1384 
	mNL80211_CMD_SET_MESH_CONFIG
,

1386 
	mNL80211_CMD_SET_MGMT_EXTRA_IE
 ,

1388 
	mNL80211_CMD_GET_REG
,

1390 
	mNL80211_CMD_GET_SCAN
,

1391 
	mNL80211_CMD_TRIGGER_SCAN
,

1392 
	mNL80211_CMD_NEW_SCAN_RESULTS
,

1393 
	mNL80211_CMD_SCAN_ABORTED
,

1395 
	mNL80211_CMD_REG_CHANGE
,

1397 
	mNL80211_CMD_AUTHENTICATE
,

1398 
	mNL80211_CMD_ASSOCIATE
,

1399 
	mNL80211_CMD_DEAUTHENTICATE
,

1400 
	mNL80211_CMD_DISASSOCIATE
,

1402 
	mNL80211_CMD_MICHAEL_MIC_FAILURE
,

1404 
	mNL80211_CMD_REG_BEACON_HINT
,

1406 
	mNL80211_CMD_JOIN_IBSS
,

1407 
	mNL80211_CMD_LEAVE_IBSS
,

1409 
	mNL80211_CMD_TESTMODE
,

1411 
	mNL80211_CMD_CONNECT
,

1412 
	mNL80211_CMD_ROAM
,

1413 
	mNL80211_CMD_DISCONNECT
,

1415 
	mNL80211_CMD_SET_WIPHY_NETNS
,

1417 
	mNL80211_CMD_GET_SURVEY
,

1418 
	mNL80211_CMD_NEW_SURVEY_RESULTS
,

1420 
	mNL80211_CMD_SET_PMKSA
,

1421 
	mNL80211_CMD_DEL_PMKSA
,

1422 
	mNL80211_CMD_FLUSH_PMKSA
,

1424 
	mNL80211_CMD_REMAIN_ON_CHANNEL
,

1425 
	mNL80211_CMD_CANCEL_REMAIN_ON_CHANNEL
,

1427 
	mNL80211_CMD_SET_TX_BITRATE_MASK
,

1429 
	mNL80211_CMD_REGISTER_FRAME
,

1430 
	mNL80211_CMD_REGISTER_ACTION
 = 
NL80211_CMD_REGISTER_FRAME
,

1431 
	mNL80211_CMD_FRAME
,

1432 
	mNL80211_CMD_ACTION
 = 
NL80211_CMD_FRAME
,

1433 
	mNL80211_CMD_FRAME_TX_STATUS
,

1434 
	mNL80211_CMD_ACTION_TX_STATUS
 = 
NL80211_CMD_FRAME_TX_STATUS
,

1436 
	mNL80211_CMD_SET_POWER_SAVE
,

1437 
	mNL80211_CMD_GET_POWER_SAVE
,

1439 
	mNL80211_CMD_SET_CQM
,

1440 
	mNL80211_CMD_NOTIFY_CQM
,

1442 
	mNL80211_CMD_SET_CHANNEL
,

1443 
	mNL80211_CMD_SET_WDS_PEER
,

1445 
	mNL80211_CMD_FRAME_WAIT_CANCEL
,

1447 
	mNL80211_CMD_JOIN_MESH
,

1448 
	mNL80211_CMD_LEAVE_MESH
,

1450 
	mNL80211_CMD_UNPROT_DEAUTHENTICATE
,

1451 
	mNL80211_CMD_UNPROT_DISASSOCIATE
,

1453 
	mNL80211_CMD_NEW_PEER_CANDIDATE
,

1455 
	mNL80211_CMD_GET_WOWLAN
,

1456 
	mNL80211_CMD_SET_WOWLAN
,

1458 
	mNL80211_CMD_START_SCHED_SCAN
,

1459 
	mNL80211_CMD_STOP_SCHED_SCAN
,

1460 
	mNL80211_CMD_SCHED_SCAN_RESULTS
,

1461 
	mNL80211_CMD_SCHED_SCAN_STOPPED
,

1463 
	mNL80211_CMD_SET_REKEY_OFFLOAD
,

1465 
	mNL80211_CMD_PMKSA_CANDIDATE
,

1467 
	mNL80211_CMD_TDLS_OPER
,

1468 
	mNL80211_CMD_TDLS_MGMT
,

1470 
	mNL80211_CMD_UNEXPECTED_FRAME
,

1472 
	mNL80211_CMD_PROBE_CLIENT
,

1474 
	mNL80211_CMD_REGISTER_BEACONS
,

1476 
	mNL80211_CMD_UNEXPECTED_4ADDR_FRAME
,

1478 
	mNL80211_CMD_SET_NOACK_MAP
,

1480 
	mNL80211_CMD_CH_SWITCH_NOTIFY
,

1482 
	mNL80211_CMD_START_P2P_DEVICE
,

1483 
	mNL80211_CMD_STOP_P2P_DEVICE
,

1485 
	mNL80211_CMD_CONN_FAILED
,

1487 
	mNL80211_CMD_SET_MCAST_RATE
,

1489 
	mNL80211_CMD_SET_MAC_ACL
,

1491 
	mNL80211_CMD_RADAR_DETECT
,

1493 
	mNL80211_CMD_GET_PROTOCOL_FEATURES
,

1495 
	mNL80211_CMD_UPDATE_FT_IES
,

1496 
	mNL80211_CMD_FT_EVENT
,

1498 
	mNL80211_CMD_CRIT_PROTOCOL_START
,

1499 
	mNL80211_CMD_CRIT_PROTOCOL_STOP
,

1501 
	mNL80211_CMD_GET_COALESCE
,

1502 
	mNL80211_CMD_SET_COALESCE
,

1504 
	mNL80211_CMD_CHANNEL_SWITCH
,

1506 
	mNL80211_CMD_VENDOR
,

1508 
	mNL80211_CMD_SET_QOS_MAP
,

1510 
	mNL80211_CMD_ADD_TX_TS
,

1511 
	mNL80211_CMD_DEL_TX_TS
,

1513 
	mNL80211_CMD_GET_MPP
,

1515 
	mNL80211_CMD_JOIN_OCB
,

1516 
	mNL80211_CMD_LEAVE_OCB
,

1518 
	mNL80211_CMD_CH_SWITCH_STARTED_NOTIFY
,

1520 
	mNL80211_CMD_TDLS_CHANNEL_SWITCH
,

1521 
	mNL80211_CMD_TDLS_CANCEL_CHANNEL_SWITCH
,

1523 
	mNL80211_CMD_WIPHY_REG_CHANGE
,

1525 
	mNL80211_CMD_ABORT_SCAN
,

1527 
	mNL80211_CMD_START_NAN
,

1528 
	mNL80211_CMD_STOP_NAN
,

1529 
	mNL80211_CMD_ADD_NAN_FUNCTION
,

1530 
	mNL80211_CMD_DEL_NAN_FUNCTION
,

1531 
	mNL80211_CMD_CHANGE_NAN_CONFIG
,

1532 
	mNL80211_CMD_NAN_MATCH
,

1534 
	mNL80211_CMD_SET_MULTICAST_TO_UNICAST
,

1536 
	mNL80211_CMD_UPDATE_CONNECT_PARAMS
,

1538 
	mNL80211_CMD_SET_PMK
,

1539 
	mNL80211_CMD_DEL_PMK
,

1541 
	mNL80211_CMD_PORT_AUTHORIZED
,

1543 
	mNL80211_CMD_RELOAD_REGDB
,

1545 
	mNL80211_CMD_EXTERNAL_AUTH
,

1547 
	mNL80211_CMD_STA_OPMODE_CHANGED
,

1549 
	mNL80211_CMD_CONTROL_PORT_FRAME
,

1551 
	mNL80211_CMD_GET_FTM_RESPONDER_STATS
,

1553 
	mNL80211_CMD_PEER_MEASUREMENT_START
,

1554 
	mNL80211_CMD_PEER_MEASUREMENT_RESULT
,

1555 
	mNL80211_CMD_PEER_MEASUREMENT_COMPLETE
,

1557 
	mNL80211_CMD_NOTIFY_RADAR
,

1559 
	mNL80211_CMD_UPDATE_OWE_INFO
,

1561 
	mNL80211_CMD_PROBE_MESH_LINK
,

1563 
	mNL80211_CMD_SET_TID_CONFIG
,

1565 
	mNL80211_CMD_UNPROT_BEACON
,

1567 
	mNL80211_CMD_CONTROL_PORT_FRAME_TX_STATUS
,

1569 
	mNL80211_CMD_SET_SAR_SPECS
,

1571 
	mNL80211_CMD_OBSS_COLOR_COLLISION
,

1573 
	mNL80211_CMD_COLOR_CHANGE_REQUEST
,

1575 
	mNL80211_CMD_COLOR_CHANGE_STARTED
,

1576 
	mNL80211_CMD_COLOR_CHANGE_ABORTED
,

1577 
	mNL80211_CMD_COLOR_CHANGE_COMPLETED
,

1579 
	mNL80211_CMD_SET_FILS_AAD
,

1581 
	mNL80211_CMD_ASSOC_COMEBACK
,

1583 
	mNL80211_CMD_ADD_LINK
,

1584 
	mNL80211_CMD_REMOVE_LINK
,

1586 
	mNL80211_CMD_ADD_LINK_STA
,

1587 
	mNL80211_CMD_MODIFY_LINK_STA
,

1588 
	mNL80211_CMD_REMOVE_LINK_STA
,

1590 
	mNL80211_CMD_SET_HW_TIMESTAMP
,

1592 
	mNL80211_CMD_LINKS_REMOVED
,

1594 
	mNL80211_CMD_SET_TID_TO_LINK_MAPPING
,

1596 
	mNL80211_CMD_ASSOC_MLO_RECONF
,

1597 
	mNL80211_CMD_EPCS_CFG
,

1602 
	m__NL80211_CMD_AFTER_LAST
,

1603 
	mNL80211_CMD_MAX
 = 
__NL80211_CMD_AFTER_LAST
 - 1

1610 
	#NL80211_CMD_SET_BSS
 
NL80211_CMD_SET_BSS


	)

1611 
	#NL80211_CMD_SET_MGMT_EXTRA_IE
 
NL80211_CMD_SET_MGMT_EXTRA_IE


	)

1612 
	#NL80211_CMD_REG_CHANGE
 
NL80211_CMD_REG_CHANGE


	)

1613 
	#NL80211_CMD_AUTHENTICATE
 
NL80211_CMD_AUTHENTICATE


	)

1614 
	#NL80211_CMD_ASSOCIATE
 
NL80211_CMD_ASSOCIATE


	)

1615 
	#NL80211_CMD_DEAUTHENTICATE
 
NL80211_CMD_DEAUTHENTICATE


	)

1616 
	#NL80211_CMD_DISASSOCIATE
 
NL80211_CMD_DISASSOCIATE


	)

1617 
	#NL80211_CMD_REG_BEACON_HINT
 
NL80211_CMD_REG_BEACON_HINT


	)

1619 
	#NL80211_ATTR_FEATURE_FLAGS
 
NL80211_ATTR_FEATURE_FLAGS


	)

1622 
	#NL80211_CMD_GET_MESH_PARAMS
 
NL80211_CMD_GET_MESH_CONFIG


	)

1623 
	#NL80211_CMD_SET_MESH_PARAMS
 
NL80211_CMD_SET_MESH_CONFIG


	)

1624 
	#NL80211_MESH_SETUP_VENDOR_PATH_SEL_IE
 
NL80211_MESH_SETUP_IE


	)

2900 
	e∆80211_©ås
 {

2902 
	mNL80211_ATTR_UNSPEC
,

2904 
	mNL80211_ATTR_WIPHY
,

2905 
	mNL80211_ATTR_WIPHY_NAME
,

2907 
	mNL80211_ATTR_IFINDEX
,

2908 
	mNL80211_ATTR_IFNAME
,

2909 
	mNL80211_ATTR_IFTYPE
,

2911 
	mNL80211_ATTR_MAC
,

2913 
	mNL80211_ATTR_KEY_DATA
,

2914 
	mNL80211_ATTR_KEY_IDX
,

2915 
	mNL80211_ATTR_KEY_CIPHER
,

2916 
	mNL80211_ATTR_KEY_SEQ
,

2917 
	mNL80211_ATTR_KEY_DEFAULT
,

2919 
	mNL80211_ATTR_BEACON_INTERVAL
,

2920 
	mNL80211_ATTR_DTIM_PERIOD
,

2921 
	mNL80211_ATTR_BEACON_HEAD
,

2922 
	mNL80211_ATTR_BEACON_TAIL
,

2924 
	mNL80211_ATTR_STA_AID
,

2925 
	mNL80211_ATTR_STA_FLAGS
,

2926 
	mNL80211_ATTR_STA_LISTEN_INTERVAL
,

2927 
	mNL80211_ATTR_STA_SUPPORTED_RATES
,

2928 
	mNL80211_ATTR_STA_VLAN
,

2929 
	mNL80211_ATTR_STA_INFO
,

2931 
	mNL80211_ATTR_WIPHY_BANDS
,

2933 
	mNL80211_ATTR_MNTR_FLAGS
,

2935 
	mNL80211_ATTR_MESH_ID
,

2936 
	mNL80211_ATTR_STA_PLINK_ACTION
,

2937 
	mNL80211_ATTR_MPATH_NEXT_HOP
,

2938 
	mNL80211_ATTR_MPATH_INFO
,

2940 
	mNL80211_ATTR_BSS_CTS_PROT
,

2941 
	mNL80211_ATTR_BSS_SHORT_PREAMBLE
,

2942 
	mNL80211_ATTR_BSS_SHORT_SLOT_TIME
,

2944 
	mNL80211_ATTR_HT_CAPABILITY
,

2946 
	mNL80211_ATTR_SUPPORTED_IFTYPES
,

2948 
	mNL80211_ATTR_REG_ALPHA2
,

2949 
	mNL80211_ATTR_REG_RULES
,

2951 
	mNL80211_ATTR_MESH_CONFIG
,

2953 
	mNL80211_ATTR_BSS_BASIC_RATES
,

2955 
	mNL80211_ATTR_WIPHY_TXQ_PARAMS
,

2956 
	mNL80211_ATTR_WIPHY_FREQ
,

2957 
	mNL80211_ATTR_WIPHY_CHANNEL_TYPE
,

2959 
	mNL80211_ATTR_KEY_DEFAULT_MGMT
,

2961 
	mNL80211_ATTR_MGMT_SUBTYPE
,

2962 
	mNL80211_ATTR_IE
,

2964 
	mNL80211_ATTR_MAX_NUM_SCAN_SSIDS
,

2966 
	mNL80211_ATTR_SCAN_FREQUENCIES
,

2967 
	mNL80211_ATTR_SCAN_SSIDS
,

2968 
	mNL80211_ATTR_GENERATION
,

2969 
	mNL80211_ATTR_BSS
,

2971 
	mNL80211_ATTR_REG_INITIATOR
,

2972 
	mNL80211_ATTR_REG_TYPE
,

2974 
	mNL80211_ATTR_SUPPORTED_COMMANDS
,

2976 
	mNL80211_ATTR_FRAME
,

2977 
	mNL80211_ATTR_SSID
,

2978 
	mNL80211_ATTR_AUTH_TYPE
,

2979 
	mNL80211_ATTR_REASON_CODE
,

2981 
	mNL80211_ATTR_KEY_TYPE
,

2983 
	mNL80211_ATTR_MAX_SCAN_IE_LEN
,

2984 
	mNL80211_ATTR_CIPHER_SUITES
,

2986 
	mNL80211_ATTR_FREQ_BEFORE
,

2987 
	mNL80211_ATTR_FREQ_AFTER
,

2989 
	mNL80211_ATTR_FREQ_FIXED
,

2992 
	mNL80211_ATTR_WIPHY_RETRY_SHORT
,

2993 
	mNL80211_ATTR_WIPHY_RETRY_LONG
,

2994 
	mNL80211_ATTR_WIPHY_FRAG_THRESHOLD
,

2995 
	mNL80211_ATTR_WIPHY_RTS_THRESHOLD
,

2997 
	mNL80211_ATTR_TIMED_OUT
,

2999 
	mNL80211_ATTR_USE_MFP
,

3001 
	mNL80211_ATTR_STA_FLAGS2
,

3003 
	mNL80211_ATTR_CONTROL_PORT
,

3005 
	mNL80211_ATTR_TESTDATA
,

3007 
	mNL80211_ATTR_PRIVACY
,

3009 
	mNL80211_ATTR_DISCONNECTED_BY_AP
,

3010 
	mNL80211_ATTR_STATUS_CODE
,

3012 
	mNL80211_ATTR_CIPHER_SUITES_PAIRWISE
,

3013 
	mNL80211_ATTR_CIPHER_SUITE_GROUP
,

3014 
	mNL80211_ATTR_WPA_VERSIONS
,

3015 
	mNL80211_ATTR_AKM_SUITES
,

3017 
	mNL80211_ATTR_REQ_IE
,

3018 
	mNL80211_ATTR_RESP_IE
,

3020 
	mNL80211_ATTR_PREV_BSSID
,

3022 
	mNL80211_ATTR_KEY
,

3023 
	mNL80211_ATTR_KEYS
,

3025 
	mNL80211_ATTR_PID
,

3027 
	mNL80211_ATTR_4ADDR
,

3029 
	mNL80211_ATTR_SURVEY_INFO
,

3031 
	mNL80211_ATTR_PMKID
,

3032 
	mNL80211_ATTR_MAX_NUM_PMKIDS
,

3034 
	mNL80211_ATTR_DURATION
,

3036 
	mNL80211_ATTR_COOKIE
,

3038 
	mNL80211_ATTR_WIPHY_COVERAGE_CLASS
,

3040 
	mNL80211_ATTR_TX_RATES
,

3042 
	mNL80211_ATTR_FRAME_MATCH
,

3044 
	mNL80211_ATTR_ACK
,

3046 
	mNL80211_ATTR_PS_STATE
,

3048 
	mNL80211_ATTR_CQM
,

3050 
	mNL80211_ATTR_LOCAL_STATE_CHANGE
,

3052 
	mNL80211_ATTR_AP_ISOLATE
,

3054 
	mNL80211_ATTR_WIPHY_TX_POWER_SETTING
,

3055 
	mNL80211_ATTR_WIPHY_TX_POWER_LEVEL
,

3057 
	mNL80211_ATTR_TX_FRAME_TYPES
,

3058 
	mNL80211_ATTR_RX_FRAME_TYPES
,

3059 
	mNL80211_ATTR_FRAME_TYPE
,

3061 
	mNL80211_ATTR_CONTROL_PORT_ETHERTYPE
,

3062 
	mNL80211_ATTR_CONTROL_PORT_NO_ENCRYPT
,

3064 
	mNL80211_ATTR_SUPPORT_IBSS_RSN
,

3066 
	mNL80211_ATTR_WIPHY_ANTENNA_TX
,

3067 
	mNL80211_ATTR_WIPHY_ANTENNA_RX
,

3069 
	mNL80211_ATTR_MCAST_RATE
,

3071 
	mNL80211_ATTR_OFFCHANNEL_TX_OK
,

3073 
	mNL80211_ATTR_BSS_HT_OPMODE
,

3075 
	mNL80211_ATTR_KEY_DEFAULT_TYPES
,

3077 
	mNL80211_ATTR_MAX_REMAIN_ON_CHANNEL_DURATION
,

3079 
	mNL80211_ATTR_MESH_SETUP
,

3081 
	mNL80211_ATTR_WIPHY_ANTENNA_AVAIL_TX
,

3082 
	mNL80211_ATTR_WIPHY_ANTENNA_AVAIL_RX
,

3084 
	mNL80211_ATTR_SUPPORT_MESH_AUTH
,

3085 
	mNL80211_ATTR_STA_PLINK_STATE
,

3087 
	mNL80211_ATTR_WOWLAN_TRIGGERS
,

3088 
	mNL80211_ATTR_WOWLAN_TRIGGERS_SUPPORTED
,

3090 
	mNL80211_ATTR_SCHED_SCAN_INTERVAL
,

3092 
	mNL80211_ATTR_INTERFACE_COMBINATIONS
,

3093 
	mNL80211_ATTR_SOFTWARE_IFTYPES
,

3095 
	mNL80211_ATTR_REKEY_DATA
,

3097 
	mNL80211_ATTR_MAX_NUM_SCHED_SCAN_SSIDS
,

3098 
	mNL80211_ATTR_MAX_SCHED_SCAN_IE_LEN
,

3100 
	mNL80211_ATTR_SCAN_SUPP_RATES
,

3102 
	mNL80211_ATTR_HIDDEN_SSID
,

3104 
	mNL80211_ATTR_IE_PROBE_RESP
,

3105 
	mNL80211_ATTR_IE_ASSOC_RESP
,

3107 
	mNL80211_ATTR_STA_WME
,

3108 
	mNL80211_ATTR_SUPPORT_AP_UAPSD
,

3110 
	mNL80211_ATTR_ROAM_SUPPORT
,

3112 
	mNL80211_ATTR_SCHED_SCAN_MATCH
,

3113 
	mNL80211_ATTR_MAX_MATCH_SETS
,

3115 
	mNL80211_ATTR_PMKSA_CANDIDATE
,

3117 
	mNL80211_ATTR_TX_NO_CCK_RATE
,

3119 
	mNL80211_ATTR_TDLS_ACTION
,

3120 
	mNL80211_ATTR_TDLS_DIALOG_TOKEN
,

3121 
	mNL80211_ATTR_TDLS_OPERATION
,

3122 
	mNL80211_ATTR_TDLS_SUPPORT
,

3123 
	mNL80211_ATTR_TDLS_EXTERNAL_SETUP
,

3125 
	mNL80211_ATTR_DEVICE_AP_SME
,

3127 
	mNL80211_ATTR_DONT_WAIT_FOR_ACK
,

3129 
	mNL80211_ATTR_FEATURE_FLAGS
,

3131 
	mNL80211_ATTR_PROBE_RESP_OFFLOAD
,

3133 
	mNL80211_ATTR_PROBE_RESP
,

3135 
	mNL80211_ATTR_DFS_REGION
,

3137 
	mNL80211_ATTR_DISABLE_HT
,

3138 
	mNL80211_ATTR_HT_CAPABILITY_MASK
,

3140 
	mNL80211_ATTR_NOACK_MAP
,

3142 
	mNL80211_ATTR_INACTIVITY_TIMEOUT
,

3144 
	mNL80211_ATTR_RX_SIGNAL_DBM
,

3146 
	mNL80211_ATTR_BG_SCAN_PERIOD
,

3148 
	mNL80211_ATTR_WDEV
,

3150 
	mNL80211_ATTR_USER_REG_HINT_TYPE
,

3152 
	mNL80211_ATTR_CONN_FAILED_REASON
,

3154 
	mNL80211_ATTR_AUTH_DATA
,

3156 
	mNL80211_ATTR_VHT_CAPABILITY
,

3158 
	mNL80211_ATTR_SCAN_FLAGS
,

3160 
	mNL80211_ATTR_CHANNEL_WIDTH
,

3161 
	mNL80211_ATTR_CENTER_FREQ1
,

3162 
	mNL80211_ATTR_CENTER_FREQ2
,

3164 
	mNL80211_ATTR_P2P_CTWINDOW
,

3165 
	mNL80211_ATTR_P2P_OPPPS
,

3167 
	mNL80211_ATTR_LOCAL_MESH_POWER_MODE
,

3169 
	mNL80211_ATTR_ACL_POLICY
,

3171 
	mNL80211_ATTR_MAC_ADDRS
,

3173 
	mNL80211_ATTR_MAC_ACL_MAX
,

3175 
	mNL80211_ATTR_RADAR_EVENT
,

3177 
	mNL80211_ATTR_EXT_CAPA
,

3178 
	mNL80211_ATTR_EXT_CAPA_MASK
,

3180 
	mNL80211_ATTR_STA_CAPABILITY
,

3181 
	mNL80211_ATTR_STA_EXT_CAPABILITY
,

3183 
	mNL80211_ATTR_PROTOCOL_FEATURES
,

3184 
	mNL80211_ATTR_SPLIT_WIPHY_DUMP
,

3186 
	mNL80211_ATTR_DISABLE_VHT
,

3187 
	mNL80211_ATTR_VHT_CAPABILITY_MASK
,

3189 
	mNL80211_ATTR_MDID
,

3190 
	mNL80211_ATTR_IE_RIC
,

3192 
	mNL80211_ATTR_CRIT_PROT_ID
,

3193 
	mNL80211_ATTR_MAX_CRIT_PROT_DURATION
,

3195 
	mNL80211_ATTR_PEER_AID
,

3197 
	mNL80211_ATTR_COALESCE_RULE
,

3199 
	mNL80211_ATTR_CH_SWITCH_COUNT
,

3200 
	mNL80211_ATTR_CH_SWITCH_BLOCK_TX
,

3201 
	mNL80211_ATTR_CSA_IES
,

3202 
	mNL80211_ATTR_CNTDWN_OFFS_BEACON
,

3203 
	mNL80211_ATTR_CNTDWN_OFFS_PRESP
,

3205 
	mNL80211_ATTR_RXMGMT_FLAGS
,

3207 
	mNL80211_ATTR_STA_SUPPORTED_CHANNELS
,

3209 
	mNL80211_ATTR_STA_SUPPORTED_OPER_CLASSES
,

3211 
	mNL80211_ATTR_HANDLE_DFS
,

3213 
	mNL80211_ATTR_SUPPORT_5_MHZ
,

3214 
	mNL80211_ATTR_SUPPORT_10_MHZ
,

3216 
	mNL80211_ATTR_OPMODE_NOTIF
,

3218 
	mNL80211_ATTR_VENDOR_ID
,

3219 
	mNL80211_ATTR_VENDOR_SUBCMD
,

3220 
	mNL80211_ATTR_VENDOR_DATA
,

3221 
	mNL80211_ATTR_VENDOR_EVENTS
,

3223 
	mNL80211_ATTR_QOS_MAP
,

3225 
	mNL80211_ATTR_MAC_HINT
,

3226 
	mNL80211_ATTR_WIPHY_FREQ_HINT
,

3228 
	mNL80211_ATTR_MAX_AP_ASSOC_STA
,

3230 
	mNL80211_ATTR_TDLS_PEER_CAPABILITY
,

3232 
	mNL80211_ATTR_SOCKET_OWNER
,

3234 
	mNL80211_ATTR_CSA_C_OFFSETS_TX
,

3235 
	mNL80211_ATTR_MAX_CSA_COUNTERS
,

3237 
	mNL80211_ATTR_TDLS_INITIATOR
,

3239 
	mNL80211_ATTR_USE_RRM
,

3241 
	mNL80211_ATTR_WIPHY_DYN_ACK
,

3243 
	mNL80211_ATTR_TSID
,

3244 
	mNL80211_ATTR_USER_PRIO
,

3245 
	mNL80211_ATTR_ADMITTED_TIME
,

3247 
	mNL80211_ATTR_SMPS_MODE
,

3249 
	mNL80211_ATTR_OPER_CLASS
,

3251 
	mNL80211_ATTR_MAC_MASK
,

3253 
	mNL80211_ATTR_WIPHY_SELF_MANAGED_REG
,

3255 
	mNL80211_ATTR_EXT_FEATURES
,

3257 
	mNL80211_ATTR_SURVEY_RADIO_STATS
,

3259 
	mNL80211_ATTR_NETNS_FD
,

3261 
	mNL80211_ATTR_SCHED_SCAN_DELAY
,

3263 
	mNL80211_ATTR_REG_INDOOR
,

3265 
	mNL80211_ATTR_MAX_NUM_SCHED_SCAN_PLANS
,

3266 
	mNL80211_ATTR_MAX_SCAN_PLAN_INTERVAL
,

3267 
	mNL80211_ATTR_MAX_SCAN_PLAN_ITERATIONS
,

3268 
	mNL80211_ATTR_SCHED_SCAN_PLANS
,

3270 
	mNL80211_ATTR_PBSS
,

3272 
	mNL80211_ATTR_BSS_SELECT
,

3274 
	mNL80211_ATTR_STA_SUPPORT_P2P_PS
,

3276 
	mNL80211_ATTR_PAD
,

3278 
	mNL80211_ATTR_IFTYPE_EXT_CAPA
,

3280 
	mNL80211_ATTR_MU_MIMO_GROUP_DATA
,

3281 
	mNL80211_ATTR_MU_MIMO_FOLLOW_MAC_ADDR
,

3283 
	mNL80211_ATTR_SCAN_START_TIME_TSF
,

3284 
	mNL80211_ATTR_SCAN_START_TIME_TSF_BSSID
,

3285 
	mNL80211_ATTR_MEASUREMENT_DURATION
,

3286 
	mNL80211_ATTR_MEASUREMENT_DURATION_MANDATORY
,

3288 
	mNL80211_ATTR_MESH_PEER_AID
,

3290 
	mNL80211_ATTR_NAN_MASTER_PREF
,

3291 
	mNL80211_ATTR_BANDS
,

3292 
	mNL80211_ATTR_NAN_FUNC
,

3293 
	mNL80211_ATTR_NAN_MATCH
,

3295 
	mNL80211_ATTR_FILS_KEK
,

3296 
	mNL80211_ATTR_FILS_NONCES
,

3298 
	mNL80211_ATTR_MULTICAST_TO_UNICAST_ENABLED
,

3300 
	mNL80211_ATTR_BSSID
,

3302 
	mNL80211_ATTR_SCHED_SCAN_RELATIVE_RSSI
,

3303 
	mNL80211_ATTR_SCHED_SCAN_RSSI_ADJUST
,

3305 
	mNL80211_ATTR_TIMEOUT_REASON
,

3307 
	mNL80211_ATTR_FILS_ERP_USERNAME
,

3308 
	mNL80211_ATTR_FILS_ERP_REALM
,

3309 
	mNL80211_ATTR_FILS_ERP_NEXT_SEQ_NUM
,

3310 
	mNL80211_ATTR_FILS_ERP_RRK
,

3311 
	mNL80211_ATTR_FILS_CACHE_ID
,

3313 
	mNL80211_ATTR_PMK
,

3315 
	mNL80211_ATTR_SCHED_SCAN_MULTI
,

3316 
	mNL80211_ATTR_SCHED_SCAN_MAX_REQS
,

3318 
	mNL80211_ATTR_WANT_1X_4WAY_HS
,

3319 
	mNL80211_ATTR_PMKR0_NAME
,

3320 
	mNL80211_ATTR_PORT_AUTHORIZED
,

3322 
	mNL80211_ATTR_EXTERNAL_AUTH_ACTION
,

3323 
	mNL80211_ATTR_EXTERNAL_AUTH_SUPPORT
,

3325 
	mNL80211_ATTR_NSS
,

3326 
	mNL80211_ATTR_ACK_SIGNAL
,

3328 
	mNL80211_ATTR_CONTROL_PORT_OVER_NL80211
,

3330 
	mNL80211_ATTR_TXQ_STATS
,

3331 
	mNL80211_ATTR_TXQ_LIMIT
,

3332 
	mNL80211_ATTR_TXQ_MEMORY_LIMIT
,

3333 
	mNL80211_ATTR_TXQ_QUANTUM
,

3335 
	mNL80211_ATTR_HE_CAPABILITY
,

3337 
	mNL80211_ATTR_FTM_RESPONDER
,

3339 
	mNL80211_ATTR_FTM_RESPONDER_STATS
,

3341 
	mNL80211_ATTR_TIMEOUT
,

3343 
	mNL80211_ATTR_PEER_MEASUREMENTS
,

3345 
	mNL80211_ATTR_AIRTIME_WEIGHT
,

3346 
	mNL80211_ATTR_STA_TX_POWER_SETTING
,

3347 
	mNL80211_ATTR_STA_TX_POWER
,

3349 
	mNL80211_ATTR_SAE_PASSWORD
,

3351 
	mNL80211_ATTR_TWT_RESPONDER
,

3353 
	mNL80211_ATTR_HE_OBSS_PD
,

3355 
	mNL80211_ATTR_WIPHY_EDMG_CHANNELS
,

3356 
	mNL80211_ATTR_WIPHY_EDMG_BW_CONFIG
,

3358 
	mNL80211_ATTR_VLAN_ID
,

3360 
	mNL80211_ATTR_HE_BSS_COLOR
,

3362 
	mNL80211_ATTR_IFTYPE_AKM_SUITES
,

3364 
	mNL80211_ATTR_TID_CONFIG
,

3366 
	mNL80211_ATTR_CONTROL_PORT_NO_PREAUTH
,

3368 
	mNL80211_ATTR_PMK_LIFETIME
,

3369 
	mNL80211_ATTR_PMK_REAUTH_THRESHOLD
,

3371 
	mNL80211_ATTR_RECEIVE_MULTICAST
,

3372 
	mNL80211_ATTR_WIPHY_FREQ_OFFSET
,

3373 
	mNL80211_ATTR_CENTER_FREQ1_OFFSET
,

3374 
	mNL80211_ATTR_SCAN_FREQ_KHZ
,

3376 
	mNL80211_ATTR_HE_6GHZ_CAPABILITY
,

3378 
	mNL80211_ATTR_FILS_DISCOVERY
,

3380 
	mNL80211_ATTR_UNSOL_BCAST_PROBE_RESP
,

3382 
	mNL80211_ATTR_S1G_CAPABILITY
,

3383 
	mNL80211_ATTR_S1G_CAPABILITY_MASK
,

3385 
	mNL80211_ATTR_SAE_PWE
,

3387 
	mNL80211_ATTR_RECONNECT_REQUESTED
,

3389 
	mNL80211_ATTR_SAR_SPEC
,

3391 
	mNL80211_ATTR_DISABLE_HE
,

3393 
	mNL80211_ATTR_OBSS_COLOR_BITMAP
,

3395 
	mNL80211_ATTR_COLOR_CHANGE_COUNT
,

3396 
	mNL80211_ATTR_COLOR_CHANGE_COLOR
,

3397 
	mNL80211_ATTR_COLOR_CHANGE_ELEMS
,

3399 
	mNL80211_ATTR_MBSSID_CONFIG
,

3400 
	mNL80211_ATTR_MBSSID_ELEMS
,

3402 
	mNL80211_ATTR_RADAR_BACKGROUND
,

3404 
	mNL80211_ATTR_AP_SETTINGS_FLAGS
,

3406 
	mNL80211_ATTR_EHT_CAPABILITY
,

3408 
	mNL80211_ATTR_DISABLE_EHT
,

3410 
	mNL80211_ATTR_MLO_LINKS
,

3411 
	mNL80211_ATTR_MLO_LINK_ID
,

3412 
	mNL80211_ATTR_MLD_ADDR
,

3414 
	mNL80211_ATTR_MLO_SUPPORT
,

3416 
	mNL80211_ATTR_MAX_NUM_AKM_SUITES
,

3418 
	mNL80211_ATTR_EML_CAPABILITY
,

3419 
	mNL80211_ATTR_MLD_CAPA_AND_OPS
,

3421 
	mNL80211_ATTR_TX_HW_TIMESTAMP
,

3422 
	mNL80211_ATTR_RX_HW_TIMESTAMP
,

3423 
	mNL80211_ATTR_TD_BITMAP
,

3425 
	mNL80211_ATTR_PUNCT_BITMAP
,

3427 
	mNL80211_ATTR_MAX_HW_TIMESTAMP_PEERS
,

3428 
	mNL80211_ATTR_HW_TIMESTAMP_ENABLED
,

3430 
	mNL80211_ATTR_EMA_RNR_ELEMS
,

3432 
	mNL80211_ATTR_MLO_LINK_DISABLED
,

3434 
	mNL80211_ATTR_BSS_DUMP_INCLUDE_USE_DATA
,

3436 
	mNL80211_ATTR_MLO_TTLM_DLINK
,

3437 
	mNL80211_ATTR_MLO_TTLM_ULINK
,

3439 
	mNL80211_ATTR_ASSOC_SPP_AMSDU
,

3441 
	mNL80211_ATTR_WIPHY_RADIOS
,

3442 
	mNL80211_ATTR_WIPHY_INTERFACE_COMBINATIONS
,

3444 
	mNL80211_ATTR_VIF_RADIO_MASK
,

3446 
	mNL80211_ATTR_SUPPORTED_SELECTORS
,

3448 
	mNL80211_ATTR_MLO_RECONF_REM_LINKS
,

3449 
	mNL80211_ATTR_EPCS
,

3453 
	m__NL80211_ATTR_AFTER_LAST
,

3454 
	mNUM_NL80211_ATTR
 = 
__NL80211_ATTR_AFTER_LAST
,

3455 
	mNL80211_ATTR_MAX
 = 
__NL80211_ATTR_AFTER_LAST
 - 1

3459 
	#NL80211_ATTR_SCAN_GENERATION
 
NL80211_ATTR_GENERATION


	)

3460 
	#NL80211_ATTR_MESH_PARAMS
 
NL80211_ATTR_MESH_CONFIG


	)

3461 
	#NL80211_ATTR_IFACE_SOCKET_OWNER
 
NL80211_ATTR_SOCKET_OWNER


	)

3462 
	#NL80211_ATTR_SAE_DATA
 
NL80211_ATTR_AUTH_DATA


	)

3463 
	#NL80211_ATTR_CSA_C_OFF_BEACON
 
NL80211_ATTR_CNTDWN_OFFS_BEACON


	)

3464 
	#NL80211_ATTR_CSA_C_OFF_PRESP
 
NL80211_ATTR_CNTDWN_OFFS_PRESP


	)

3470 
	#NL80211_CMD_CONNECT
 
NL80211_CMD_CONNECT


	)

3471 
	#NL80211_ATTR_HT_CAPABILITY
 
NL80211_ATTR_HT_CAPABILITY


	)

3472 
	#NL80211_ATTR_BSS_BASIC_RATES
 
NL80211_ATTR_BSS_BASIC_RATES


	)

3473 
	#NL80211_ATTR_WIPHY_TXQ_PARAMS
 
NL80211_ATTR_WIPHY_TXQ_PARAMS


	)

3474 
	#NL80211_ATTR_WIPHY_FREQ
 
NL80211_ATTR_WIPHY_FREQ


	)

3475 
	#NL80211_ATTR_WIPHY_CHANNEL_TYPE
 
NL80211_ATTR_WIPHY_CHANNEL_TYPE


	)

3476 
	#NL80211_ATTR_MGMT_SUBTYPE
 
NL80211_ATTR_MGMT_SUBTYPE


	)

3477 
	#NL80211_ATTR_IE
 
NL80211_ATTR_IE


	)

3478 
	#NL80211_ATTR_REG_INITIATOR
 
NL80211_ATTR_REG_INITIATOR


	)

3479 
	#NL80211_ATTR_REG_TYPE
 
NL80211_ATTR_REG_TYPE


	)

3480 
	#NL80211_ATTR_FRAME
 
NL80211_ATTR_FRAME


	)

3481 
	#NL80211_ATTR_SSID
 
NL80211_ATTR_SSID


	)

3482 
	#NL80211_ATTR_AUTH_TYPE
 
NL80211_ATTR_AUTH_TYPE


	)

3483 
	#NL80211_ATTR_REASON_CODE
 
NL80211_ATTR_REASON_CODE


	)

3484 
	#NL80211_ATTR_CIPHER_SUITES_PAIRWISE
 
NL80211_ATTR_CIPHER_SUITES_PAIRWISE


	)

3485 
	#NL80211_ATTR_CIPHER_SUITE_GROUP
 
NL80211_ATTR_CIPHER_SUITE_GROUP


	)

3486 
	#NL80211_ATTR_WPA_VERSIONS
 
NL80211_ATTR_WPA_VERSIONS


	)

3487 
	#NL80211_ATTR_AKM_SUITES
 
NL80211_ATTR_AKM_SUITES


	)

3488 
	#NL80211_ATTR_KEY
 
NL80211_ATTR_KEY


	)

3489 
	#NL80211_ATTR_KEYS
 
NL80211_ATTR_KEYS


	)

3490 
	#NL80211_ATTR_FEATURE_FLAGS
 
NL80211_ATTR_FEATURE_FLAGS


	)

3492 
	#NL80211_WIPHY_NAME_MAXLEN
 64

	)

3494 
	#NL80211_MAX_SUPP_RATES
 32

	)

3495 
	#NL80211_MAX_SUPP_SELECTORS
 128

	)

3496 
	#NL80211_MAX_SUPP_HT_RATES
 77

	)

3497 
	#NL80211_MAX_SUPP_REG_RULES
 128

	)

3498 
	#NL80211_TKIP_DATA_OFFSET_ENCR_KEY
 0

	)

3499 
	#NL80211_TKIP_DATA_OFFSET_TX_MIC_KEY
 16

	)

3500 
	#NL80211_TKIP_DATA_OFFSET_RX_MIC_KEY
 24

	)

3501 
	#NL80211_HT_CAPABILITY_LEN
 26

	)

3502 
	#NL80211_VHT_CAPABILITY_LEN
 12

	)

3503 
	#NL80211_HE_MIN_CAPABILITY_LEN
 16

	)

3504 
	#NL80211_HE_MAX_CAPABILITY_LEN
 54

	)

3505 
	#NL80211_MAX_NR_CIPHER_SUITES
 5

	)

3511 
	#NL80211_MAX_NR_AKM_SUITES
 2

	)

3512 
	#NL80211_EHT_MIN_CAPABILITY_LEN
 13

	)

3513 
	#NL80211_EHT_MAX_CAPABILITY_LEN
 51

	)

3515 
	#NL80211_MIN_REMAIN_ON_CHANNEL_TIME
 10

	)

3518 
	#NL80211_SCAN_RSSI_THOLD_OFF
 -300

	)

3520 
	#NL80211_CQM_TXE_MAX_INTVL
 1800

	)

3551 
	e∆80211_i·y≥
 {

3552 
	mNL80211_IFTYPE_UNSPECIFIED
,

3553 
	mNL80211_IFTYPE_ADHOC
,

3554 
	mNL80211_IFTYPE_STATION
,

3555 
	mNL80211_IFTYPE_AP
,

3556 
	mNL80211_IFTYPE_AP_VLAN
,

3557 
	mNL80211_IFTYPE_WDS
,

3558 
	mNL80211_IFTYPE_MONITOR
,

3559 
	mNL80211_IFTYPE_MESH_POINT
,

3560 
	mNL80211_IFTYPE_P2P_CLIENT
,

3561 
	mNL80211_IFTYPE_P2P_GO
,

3562 
	mNL80211_IFTYPE_P2P_DEVICE
,

3563 
	mNL80211_IFTYPE_OCB
,

3564 
	mNL80211_IFTYPE_NAN
,

3567 
	mNUM_NL80211_IFTYPES
,

3568 
	mNL80211_IFTYPE_MAX
 = 
NUM_NL80211_IFTYPES
 - 1

3596 
	e∆80211_°a_Êags
 {

3597 
	m__NL80211_STA_FLAG_INVALID
,

3598 
	mNL80211_STA_FLAG_AUTHORIZED
,

3599 
	mNL80211_STA_FLAG_SHORT_PREAMBLE
,

3600 
	mNL80211_STA_FLAG_WME
,

3601 
	mNL80211_STA_FLAG_MFP
,

3602 
	mNL80211_STA_FLAG_AUTHENTICATED
,

3603 
	mNL80211_STA_FLAG_TDLS_PEER
,

3604 
	mNL80211_STA_FLAG_ASSOCIATED
,

3605 
	mNL80211_STA_FLAG_SPP_AMSDU
,

3608 
	m__NL80211_STA_FLAG_AFTER_LAST
,

3609 
	mNL80211_STA_FLAG_MAX
 = 
__NL80211_STA_FLAG_AFTER_LAST
 - 1

3619 
	e∆80211_°a_p2p_ps_°©us
 {

3620 
	mNL80211_P2P_PS_UNSUPPORTED
 = 0,

3621 
	mNL80211_P2P_PS_SUPPORTED
,

3623 
	mNUM_NL80211_P2P_PS_STATUS
,

3626 
	#NL80211_STA_FLAG_MAX_OLD_API
 
NL80211_STA_FLAG_TDLS_PEER


	)

3635 
	s∆80211_°a_Êag_upd©e
 {

3636 
__u32
 
	mmask
;

3637 
__u32
 
	m£t
;

3638 } 
__©åibuã__
((
∑cked
));

3646 
	e∆80211_he_gi
 {

3647 
	mNL80211_RATE_INFO_HE_GI_0_8
,

3648 
	mNL80211_RATE_INFO_HE_GI_1_6
,

3649 
	mNL80211_RATE_INFO_HE_GI_3_2
,

3658 
	e∆80211_he_…f
 {

3659 
	mNL80211_RATE_INFO_HE_1XLTF
,

3660 
	mNL80211_RATE_INFO_HE_2XLTF
,

3661 
	mNL80211_RATE_INFO_HE_4XLTF
,

3674 
	e∆80211_he_ru_Æloc
 {

3675 
	mNL80211_RATE_INFO_HE_RU_ALLOC_26
,

3676 
	mNL80211_RATE_INFO_HE_RU_ALLOC_52
,

3677 
	mNL80211_RATE_INFO_HE_RU_ALLOC_106
,

3678 
	mNL80211_RATE_INFO_HE_RU_ALLOC_242
,

3679 
	mNL80211_RATE_INFO_HE_RU_ALLOC_484
,

3680 
	mNL80211_RATE_INFO_HE_RU_ALLOC_996
,

3681 
	mNL80211_RATE_INFO_HE_RU_ALLOC_2x996
,

3690 
	e∆80211_eht_gi
 {

3691 
	mNL80211_RATE_INFO_EHT_GI_0_8
,

3692 
	mNL80211_RATE_INFO_EHT_GI_1_6
,

3693 
	mNL80211_RATE_INFO_EHT_GI_3_2
,

3715 
	e∆80211_eht_ru_Æloc
 {

3716 
	mNL80211_RATE_INFO_EHT_RU_ALLOC_26
,

3717 
	mNL80211_RATE_INFO_EHT_RU_ALLOC_52
,

3718 
	mNL80211_RATE_INFO_EHT_RU_ALLOC_52P26
,

3719 
	mNL80211_RATE_INFO_EHT_RU_ALLOC_106
,

3720 
	mNL80211_RATE_INFO_EHT_RU_ALLOC_106P26
,

3721 
	mNL80211_RATE_INFO_EHT_RU_ALLOC_242
,

3722 
	mNL80211_RATE_INFO_EHT_RU_ALLOC_484
,

3723 
	mNL80211_RATE_INFO_EHT_RU_ALLOC_484P242
,

3724 
	mNL80211_RATE_INFO_EHT_RU_ALLOC_996
,

3725 
	mNL80211_RATE_INFO_EHT_RU_ALLOC_996P484
,

3726 
	mNL80211_RATE_INFO_EHT_RU_ALLOC_996P484P242
,

3727 
	mNL80211_RATE_INFO_EHT_RU_ALLOC_2x996
,

3728 
	mNL80211_RATE_INFO_EHT_RU_ALLOC_2x996P484
,

3729 
	mNL80211_RATE_INFO_EHT_RU_ALLOC_3x996
,

3730 
	mNL80211_RATE_INFO_EHT_RU_ALLOC_3x996P484
,

3731 
	mNL80211_RATE_INFO_EHT_RU_ALLOC_4x996
,

3789 
	e∆80211_øã_öfo
 {

3790 
	m__NL80211_RATE_INFO_INVALID
,

3791 
	mNL80211_RATE_INFO_BITRATE
,

3792 
	mNL80211_RATE_INFO_MCS
,

3793 
	mNL80211_RATE_INFO_40_MHZ_WIDTH
,

3794 
	mNL80211_RATE_INFO_SHORT_GI
,

3795 
	mNL80211_RATE_INFO_BITRATE32
,

3796 
	mNL80211_RATE_INFO_VHT_MCS
,

3797 
	mNL80211_RATE_INFO_VHT_NSS
,

3798 
	mNL80211_RATE_INFO_80_MHZ_WIDTH
,

3799 
	mNL80211_RATE_INFO_80P80_MHZ_WIDTH
,

3800 
	mNL80211_RATE_INFO_160_MHZ_WIDTH
,

3801 
	mNL80211_RATE_INFO_10_MHZ_WIDTH
,

3802 
	mNL80211_RATE_INFO_5_MHZ_WIDTH
,

3803 
	mNL80211_RATE_INFO_HE_MCS
,

3804 
	mNL80211_RATE_INFO_HE_NSS
,

3805 
	mNL80211_RATE_INFO_HE_GI
,

3806 
	mNL80211_RATE_INFO_HE_DCM
,

3807 
	mNL80211_RATE_INFO_HE_RU_ALLOC
,

3808 
	mNL80211_RATE_INFO_320_MHZ_WIDTH
,

3809 
	mNL80211_RATE_INFO_EHT_MCS
,

3810 
	mNL80211_RATE_INFO_EHT_NSS
,

3811 
	mNL80211_RATE_INFO_EHT_GI
,

3812 
	mNL80211_RATE_INFO_EHT_RU_ALLOC
,

3813 
	mNL80211_RATE_INFO_S1G_MCS
,

3814 
	mNL80211_RATE_INFO_S1G_NSS
,

3815 
	mNL80211_RATE_INFO_1_MHZ_WIDTH
,

3816 
	mNL80211_RATE_INFO_2_MHZ_WIDTH
,

3817 
	mNL80211_RATE_INFO_4_MHZ_WIDTH
,

3818 
	mNL80211_RATE_INFO_8_MHZ_WIDTH
,

3819 
	mNL80211_RATE_INFO_16_MHZ_WIDTH
,

3822 
	m__NL80211_RATE_INFO_AFTER_LAST
,

3823 
	mNL80211_RATE_INFO_MAX
 = 
__NL80211_RATE_INFO_AFTER_LAST
 - 1

3843 
	e∆80211_°a_bss_∑øm
 {

3844 
	m__NL80211_STA_BSS_PARAM_INVALID
,

3845 
	mNL80211_STA_BSS_PARAM_CTS_PROT
,

3846 
	mNL80211_STA_BSS_PARAM_SHORT_PREAMBLE
,

3847 
	mNL80211_STA_BSS_PARAM_SHORT_SLOT_TIME
,

3848 
	mNL80211_STA_BSS_PARAM_DTIM_PERIOD
,

3849 
	mNL80211_STA_BSS_PARAM_BEACON_INTERVAL
,

3852 
	m__NL80211_STA_BSS_PARAM_AFTER_LAST
,

3853 
	mNL80211_STA_BSS_PARAM_MAX
 = 
__NL80211_STA_BSS_PARAM_AFTER_LAST
 - 1

3939 
	e∆80211_°a_öfo
 {

3940 
	m__NL80211_STA_INFO_INVALID
,

3941 
	mNL80211_STA_INFO_INACTIVE_TIME
,

3942 
	mNL80211_STA_INFO_RX_BYTES
,

3943 
	mNL80211_STA_INFO_TX_BYTES
,

3944 
	mNL80211_STA_INFO_LLID
,

3945 
	mNL80211_STA_INFO_PLID
,

3946 
	mNL80211_STA_INFO_PLINK_STATE
,

3947 
	mNL80211_STA_INFO_SIGNAL
,

3948 
	mNL80211_STA_INFO_TX_BITRATE
,

3949 
	mNL80211_STA_INFO_RX_PACKETS
,

3950 
	mNL80211_STA_INFO_TX_PACKETS
,

3951 
	mNL80211_STA_INFO_TX_RETRIES
,

3952 
	mNL80211_STA_INFO_TX_FAILED
,

3953 
	mNL80211_STA_INFO_SIGNAL_AVG
,

3954 
	mNL80211_STA_INFO_RX_BITRATE
,

3955 
	mNL80211_STA_INFO_BSS_PARAM
,

3956 
	mNL80211_STA_INFO_CONNECTED_TIME
,

3957 
	mNL80211_STA_INFO_STA_FLAGS
,

3958 
	mNL80211_STA_INFO_BEACON_LOSS
,

3959 
	mNL80211_STA_INFO_T_OFFSET
,

3960 
	mNL80211_STA_INFO_LOCAL_PM
,

3961 
	mNL80211_STA_INFO_PEER_PM
,

3962 
	mNL80211_STA_INFO_NONPEER_PM
,

3963 
	mNL80211_STA_INFO_RX_BYTES64
,

3964 
	mNL80211_STA_INFO_TX_BYTES64
,

3965 
	mNL80211_STA_INFO_CHAIN_SIGNAL
,

3966 
	mNL80211_STA_INFO_CHAIN_SIGNAL_AVG
,

3967 
	mNL80211_STA_INFO_EXPECTED_THROUGHPUT
,

3968 
	mNL80211_STA_INFO_RX_DROP_MISC
,

3969 
	mNL80211_STA_INFO_BEACON_RX
,

3970 
	mNL80211_STA_INFO_BEACON_SIGNAL_AVG
,

3971 
	mNL80211_STA_INFO_TID_STATS
,

3972 
	mNL80211_STA_INFO_RX_DURATION
,

3973 
	mNL80211_STA_INFO_PAD
,

3974 
	mNL80211_STA_INFO_ACK_SIGNAL
,

3975 
	mNL80211_STA_INFO_ACK_SIGNAL_AVG
,

3976 
	mNL80211_STA_INFO_RX_MPDUS
,

3977 
	mNL80211_STA_INFO_FCS_ERROR_COUNT
,

3978 
	mNL80211_STA_INFO_CONNECTED_TO_GATE
,

3979 
	mNL80211_STA_INFO_TX_DURATION
,

3980 
	mNL80211_STA_INFO_AIRTIME_WEIGHT
,

3981 
	mNL80211_STA_INFO_AIRTIME_LINK_METRIC
,

3982 
	mNL80211_STA_INFO_ASSOC_AT_BOOTTIME
,

3983 
	mNL80211_STA_INFO_CONNECTED_TO_AS
,

3986 
	m__NL80211_STA_INFO_AFTER_LAST
,

3987 
	mNL80211_STA_INFO_MAX
 = 
__NL80211_STA_INFO_AFTER_LAST
 - 1

3991 
	#NL80211_STA_INFO_DATA_ACK_SIGNAL_AVG
 
NL80211_STA_INFO_ACK_SIGNAL_AVG


	)

4009 
	e∆80211_tid_°©s
 {

4010 
	m__NL80211_TID_STATS_INVALID
,

4011 
	mNL80211_TID_STATS_RX_MSDU
,

4012 
	mNL80211_TID_STATS_TX_MSDU
,

4013 
	mNL80211_TID_STATS_TX_MSDU_RETRIES
,

4014 
	mNL80211_TID_STATS_TX_MSDU_FAILED
,

4015 
	mNL80211_TID_STATS_PAD
,

4016 
	mNL80211_TID_STATS_TXQ_STATS
,

4019 
	mNUM_NL80211_TID_STATS
,

4020 
	mNL80211_TID_STATS_MAX
 = 
NUM_NL80211_TID_STATS
 - 1

4042 
	e∆80211_txq_°©s
 {

4043 
	m__NL80211_TXQ_STATS_INVALID
,

4044 
	mNL80211_TXQ_STATS_BACKLOG_BYTES
,

4045 
	mNL80211_TXQ_STATS_BACKLOG_PACKETS
,

4046 
	mNL80211_TXQ_STATS_FLOWS
,

4047 
	mNL80211_TXQ_STATS_DROPS
,

4048 
	mNL80211_TXQ_STATS_ECN_MARKS
,

4049 
	mNL80211_TXQ_STATS_OVERLIMIT
,

4050 
	mNL80211_TXQ_STATS_OVERMEMORY
,

4051 
	mNL80211_TXQ_STATS_COLLISIONS
,

4052 
	mNL80211_TXQ_STATS_TX_BYTES
,

4053 
	mNL80211_TXQ_STATS_TX_PACKETS
,

4054 
	mNL80211_TXQ_STATS_MAX_FLOWS
,

4057 
	mNUM_NL80211_TXQ_STATS
,

4058 
	mNL80211_TXQ_STATS_MAX
 = 
NUM_NL80211_TXQ_STATS
 - 1

4070 
	e∆80211_m∑th_Êags
 {

4071 
	mNL80211_MPATH_FLAG_ACTIVE
 = 1<<0,

4072 
	mNL80211_MPATH_FLAG_RESOLVING
 = 1<<1,

4073 
	mNL80211_MPATH_FLAG_SN_VALID
 = 1<<2,

4074 
	mNL80211_MPATH_FLAG_FIXED
 = 1<<3,

4075 
	mNL80211_MPATH_FLAG_RESOLVED
 = 1<<4,

4099 
	e∆80211_m∑th_öfo
 {

4100 
	m__NL80211_MPATH_INFO_INVALID
,

4101 
	mNL80211_MPATH_INFO_FRAME_QLEN
,

4102 
	mNL80211_MPATH_INFO_SN
,

4103 
	mNL80211_MPATH_INFO_METRIC
,

4104 
	mNL80211_MPATH_INFO_EXPTIME
,

4105 
	mNL80211_MPATH_INFO_FLAGS
,

4106 
	mNL80211_MPATH_INFO_DISCOVERY_TIMEOUT
,

4107 
	mNL80211_MPATH_INFO_DISCOVERY_RETRIES
,

4108 
	mNL80211_MPATH_INFO_HOP_COUNT
,

4109 
	mNL80211_MPATH_INFO_PATH_CHANGE
,

4112 
	m__NL80211_MPATH_INFO_AFTER_LAST
,

4113 
	mNL80211_MPATH_INFO_MAX
 = 
__NL80211_MPATH_INFO_AFTER_LAST
 - 1

4145 
	e∆80211_b™d_i·y≥_©å
 {

4146 
	m__NL80211_BAND_IFTYPE_ATTR_INVALID
,

4148 
	mNL80211_BAND_IFTYPE_ATTR_IFTYPES
,

4149 
	mNL80211_BAND_IFTYPE_ATTR_HE_CAP_MAC
,

4150 
	mNL80211_BAND_IFTYPE_ATTR_HE_CAP_PHY
,

4151 
	mNL80211_BAND_IFTYPE_ATTR_HE_CAP_MCS_SET
,

4152 
	mNL80211_BAND_IFTYPE_ATTR_HE_CAP_PPE
,

4153 
	mNL80211_BAND_IFTYPE_ATTR_HE_6GHZ_CAPA
,

4154 
	mNL80211_BAND_IFTYPE_ATTR_VENDOR_ELEMS
,

4155 
	mNL80211_BAND_IFTYPE_ATTR_EHT_CAP_MAC
,

4156 
	mNL80211_BAND_IFTYPE_ATTR_EHT_CAP_PHY
,

4157 
	mNL80211_BAND_IFTYPE_ATTR_EHT_CAP_MCS_SET
,

4158 
	mNL80211_BAND_IFTYPE_ATTR_EHT_CAP_PPE
,

4161 
	m__NL80211_BAND_IFTYPE_ATTR_AFTER_LAST
,

4162 
	mNL80211_BAND_IFTYPE_ATTR_MAX
 = 
__NL80211_BAND_IFTYPE_ATTR_AFTER_LAST
 - 1

4195 
	e∆80211_b™d_©å
 {

4196 
	m__NL80211_BAND_ATTR_INVALID
,

4197 
	mNL80211_BAND_ATTR_FREQS
,

4198 
	mNL80211_BAND_ATTR_RATES
,

4200 
	mNL80211_BAND_ATTR_HT_MCS_SET
,

4201 
	mNL80211_BAND_ATTR_HT_CAPA
,

4202 
	mNL80211_BAND_ATTR_HT_AMPDU_FACTOR
,

4203 
	mNL80211_BAND_ATTR_HT_AMPDU_DENSITY
,

4205 
	mNL80211_BAND_ATTR_VHT_MCS_SET
,

4206 
	mNL80211_BAND_ATTR_VHT_CAPA
,

4207 
	mNL80211_BAND_ATTR_IFTYPE_DATA
,

4209 
	mNL80211_BAND_ATTR_EDMG_CHANNELS
,

4210 
	mNL80211_BAND_ATTR_EDMG_BW_CONFIG
,

4212 
	mNL80211_BAND_ATTR_S1G_MCS_NSS_SET
,

4213 
	mNL80211_BAND_ATTR_S1G_CAPA
,

4216 
	m__NL80211_BAND_ATTR_AFTER_LAST
,

4217 
	mNL80211_BAND_ATTR_MAX
 = 
__NL80211_BAND_ATTR_AFTER_LAST
 - 1

4220 
	#NL80211_BAND_ATTR_HT_CAPA
 
NL80211_BAND_ATTR_HT_CAPA


	)

4233 
	e∆80211_wmm_ruÀ
 {

4234 
	m__NL80211_WMMR_INVALID
,

4235 
	mNL80211_WMMR_CW_MIN
,

4236 
	mNL80211_WMMR_CW_MAX
,

4237 
	mNL80211_WMMR_AIFSN
,

4238 
	mNL80211_WMMR_TXOP
,

4241 
	m__NL80211_WMMR_LAST
,

4242 
	mNL80211_WMMR_MAX
 = 
__NL80211_WMMR_LAST
 - 1

4339 
	e∆80211_‰equícy_©å
 {

4340 
	m__NL80211_FREQUENCY_ATTR_INVALID
,

4341 
	mNL80211_FREQUENCY_ATTR_FREQ
,

4342 
	mNL80211_FREQUENCY_ATTR_DISABLED
,

4343 
	mNL80211_FREQUENCY_ATTR_NO_IR
,

4344 
	m__NL80211_FREQUENCY_ATTR_NO_IBSS
,

4345 
	mNL80211_FREQUENCY_ATTR_RADAR
,

4346 
	mNL80211_FREQUENCY_ATTR_MAX_TX_POWER
,

4347 
	mNL80211_FREQUENCY_ATTR_DFS_STATE
,

4348 
	mNL80211_FREQUENCY_ATTR_DFS_TIME
,

4349 
	mNL80211_FREQUENCY_ATTR_NO_HT40_MINUS
,

4350 
	mNL80211_FREQUENCY_ATTR_NO_HT40_PLUS
,

4351 
	mNL80211_FREQUENCY_ATTR_NO_80MHZ
,

4352 
	mNL80211_FREQUENCY_ATTR_NO_160MHZ
,

4353 
	mNL80211_FREQUENCY_ATTR_DFS_CAC_TIME
,

4354 
	mNL80211_FREQUENCY_ATTR_INDOOR_ONLY
,

4355 
	mNL80211_FREQUENCY_ATTR_IR_CONCURRENT
,

4356 
	mNL80211_FREQUENCY_ATTR_NO_20MHZ
,

4357 
	mNL80211_FREQUENCY_ATTR_NO_10MHZ
,

4358 
	mNL80211_FREQUENCY_ATTR_WMM
,

4359 
	mNL80211_FREQUENCY_ATTR_NO_HE
,

4360 
	mNL80211_FREQUENCY_ATTR_OFFSET
,

4361 
	mNL80211_FREQUENCY_ATTR_1MHZ
,

4362 
	mNL80211_FREQUENCY_ATTR_2MHZ
,

4363 
	mNL80211_FREQUENCY_ATTR_4MHZ
,

4364 
	mNL80211_FREQUENCY_ATTR_8MHZ
,

4365 
	mNL80211_FREQUENCY_ATTR_16MHZ
,

4366 
	mNL80211_FREQUENCY_ATTR_NO_320MHZ
,

4367 
	mNL80211_FREQUENCY_ATTR_NO_EHT
,

4368 
	mNL80211_FREQUENCY_ATTR_PSD
,

4369 
	mNL80211_FREQUENCY_ATTR_DFS_CONCURRENT
,

4370 
	mNL80211_FREQUENCY_ATTR_NO_6GHZ_VLP_CLIENT
,

4371 
	mNL80211_FREQUENCY_ATTR_NO_6GHZ_AFC_CLIENT
,

4372 
	mNL80211_FREQUENCY_ATTR_CAN_MONITOR
,

4373 
	mNL80211_FREQUENCY_ATTR_ALLOW_6GHZ_VLP_AP
,

4376 
	m__NL80211_FREQUENCY_ATTR_AFTER_LAST
,

4377 
	mNL80211_FREQUENCY_ATTR_MAX
 = 
__NL80211_FREQUENCY_ATTR_AFTER_LAST
 - 1

4380 
	#NL80211_FREQUENCY_ATTR_MAX_TX_POWER
 
NL80211_FREQUENCY_ATTR_MAX_TX_POWER


	)

4381 
	#NL80211_FREQUENCY_ATTR_PASSIVE_SCAN
 
NL80211_FREQUENCY_ATTR_NO_IR


	)

4382 
	#NL80211_FREQUENCY_ATTR_NO_IBSS
 
NL80211_FREQUENCY_ATTR_NO_IR


	)

4383 
	#NL80211_FREQUENCY_ATTR_NO_IR
 
NL80211_FREQUENCY_ATTR_NO_IR


	)

4384 
	#NL80211_FREQUENCY_ATTR_GO_CONCURRENT
 \

4385 
NL80211_FREQUENCY_ATTR_IR_CONCURRENT


	)

4386 
	#NL80211_FREQUENCY_ATTR_NO_UHB_VLP_CLIENT
 \

4387 
NL80211_FREQUENCY_ATTR_NO_6GHZ_VLP_CLIENT


	)

4388 
	#NL80211_FREQUENCY_ATTR_NO_UHB_AFC_CLIENT
 \

4389 
NL80211_FREQUENCY_ATTR_NO_6GHZ_AFC_CLIENT


	)

4401 
	e∆80211_bôøã_©å
 {

4402 
	m__NL80211_BITRATE_ATTR_INVALID
,

4403 
	mNL80211_BITRATE_ATTR_RATE
,

4404 
	mNL80211_BITRATE_ATTR_2GHZ_SHORTPREAMBLE
,

4407 
	m__NL80211_BITRATE_ATTR_AFTER_LAST
,

4408 
	mNL80211_BITRATE_ATTR_MAX
 = 
__NL80211_BITRATE_ATTR_AFTER_LAST
 - 1

4427 
	e∆80211_ªg_öôüt‹
 {

4428 
	mNL80211_REGDOM_SET_BY_CORE
,

4429 
	mNL80211_REGDOM_SET_BY_USER
,

4430 
	mNL80211_REGDOM_SET_BY_DRIVER
,

4431 
	mNL80211_REGDOM_SET_BY_COUNTRY_IE
,

4450 
	e∆80211_ªg_ty≥
 {

4451 
	mNL80211_REGDOM_TYPE_COUNTRY
,

4452 
	mNL80211_REGDOM_TYPE_WORLD
,

4453 
	mNL80211_REGDOM_TYPE_CUSTOM_WORLD
,

4454 
	mNL80211_REGDOM_TYPE_INTERSECTION
,

4484 
	e∆80211_ªg_ruÀ_©å
 {

4485 
	m__NL80211_REG_RULE_ATTR_INVALID
,

4486 
	mNL80211_ATTR_REG_RULE_FLAGS
,

4488 
	mNL80211_ATTR_FREQ_RANGE_START
,

4489 
	mNL80211_ATTR_FREQ_RANGE_END
,

4490 
	mNL80211_ATTR_FREQ_RANGE_MAX_BW
,

4492 
	mNL80211_ATTR_POWER_RULE_MAX_ANT_GAIN
,

4493 
	mNL80211_ATTR_POWER_RULE_MAX_EIRP
,

4495 
	mNL80211_ATTR_DFS_CAC_TIME
,

4497 
	mNL80211_ATTR_POWER_RULE_PSD
,

4500 
	m__NL80211_REG_RULE_ATTR_AFTER_LAST
,

4501 
	mNL80211_REG_RULE_ATTR_MAX
 = 
__NL80211_REG_RULE_ATTR_AFTER_LAST
 - 1

4532 
	e∆80211_sched_sˇn_m©ch_©å
 {

4533 
	m__NL80211_SCHED_SCAN_MATCH_ATTR_INVALID
,

4535 
	mNL80211_SCHED_SCAN_MATCH_ATTR_SSID
,

4536 
	mNL80211_SCHED_SCAN_MATCH_ATTR_RSSI
,

4537 
	mNL80211_SCHED_SCAN_MATCH_ATTR_RELATIVE_RSSI
,

4538 
	mNL80211_SCHED_SCAN_MATCH_ATTR_RSSI_ADJUST
,

4539 
	mNL80211_SCHED_SCAN_MATCH_ATTR_BSSID
,

4540 
	mNL80211_SCHED_SCAN_MATCH_PER_BAND_RSSI
,

4543 
	m__NL80211_SCHED_SCAN_MATCH_ATTR_AFTER_LAST
,

4544 
	mNL80211_SCHED_SCAN_MATCH_ATTR_MAX
 =

4545 
__NL80211_SCHED_SCAN_MATCH_ATTR_AFTER_LAST
 - 1

4549 
	#NL80211_ATTR_SCHED_SCAN_MATCH_SSID
 
NL80211_SCHED_SCAN_MATCH_ATTR_SSID


	)

4586 
	e∆80211_ªg_ruÀ_Êags
 {

4587 
	mNL80211_RRF_NO_OFDM
 = 1<<0,

4588 
	mNL80211_RRF_NO_CCK
 = 1<<1,

4589 
	mNL80211_RRF_NO_INDOOR
 = 1<<2,

4590 
	mNL80211_RRF_NO_OUTDOOR
 = 1<<3,

4591 
	mNL80211_RRF_DFS
 = 1<<4,

4592 
	mNL80211_RRF_PTP_ONLY
 = 1<<5,

4593 
	mNL80211_RRF_PTMP_ONLY
 = 1<<6,

4594 
	mNL80211_RRF_NO_IR
 = 1<<7,

4595 
	m__NL80211_RRF_NO_IBSS
 = 1<<8,

4596 
	mNL80211_RRF_AUTO_BW
 = 1<<11,

4597 
	mNL80211_RRF_IR_CONCURRENT
 = 1<<12,

4598 
	mNL80211_RRF_NO_HT40MINUS
 = 1<<13,

4599 
	mNL80211_RRF_NO_HT40PLUS
 = 1<<14,

4600 
	mNL80211_RRF_NO_80MHZ
 = 1<<15,

4601 
	mNL80211_RRF_NO_160MHZ
 = 1<<16,

4602 
	mNL80211_RRF_NO_HE
 = 1<<17,

4603 
	mNL80211_RRF_NO_320MHZ
 = 1<<18,

4604 
	mNL80211_RRF_NO_EHT
 = 1<<19,

4605 
	mNL80211_RRF_PSD
 = 1<<20,

4606 
	mNL80211_RRF_DFS_CONCURRENT
 = 1<<21,

4607 
	mNL80211_RRF_NO_6GHZ_VLP_CLIENT
 = 1<<22,

4608 
	mNL80211_RRF_NO_6GHZ_AFC_CLIENT
 = 1<<23,

4609 
	mNL80211_RRF_ALLOW_6GHZ_VLP_AP
 = 1<<24,

4612 
	#NL80211_RRF_PASSIVE_SCAN
 
NL80211_RRF_NO_IR


	)

4613 
	#NL80211_RRF_NO_IBSS
 
NL80211_RRF_NO_IR


	)

4614 
	#NL80211_RRF_NO_IR
 
NL80211_RRF_NO_IR


	)

4615 
	#NL80211_RRF_NO_HT40
 (
NL80211_RRF_NO_HT40MINUS
 |\

4616 
NL80211_RRF_NO_HT40PLUS
)

	)

4617 
	#NL80211_RRF_GO_CONCURRENT
 
NL80211_RRF_IR_CONCURRENT


	)

4618 
	#NL80211_RRF_NO_UHB_VLP_CLIENT
 
NL80211_RRF_NO_6GHZ_VLP_CLIENT


	)

4619 
	#NL80211_RRF_NO_UHB_AFC_CLIENT
 
NL80211_RRF_NO_6GHZ_AFC_CLIENT


	)

4622 
	#NL80211_RRF_NO_IR_ALL
 (
NL80211_RRF_NO_IR
 | 
__NL80211_RRF_NO_IBSS
)

	)

4632 
	e∆80211_dfs_ªgi⁄s
 {

4633 
	mNL80211_DFS_UNSET
 = 0,

4634 
	mNL80211_DFS_FCC
 = 1,

4635 
	mNL80211_DFS_ETSI
 = 2,

4636 
	mNL80211_DFS_JP
 = 3,

4656 
	e∆80211_u£r_ªg_höt_ty≥
 {

4657 
	mNL80211_USER_REG_HINT_USER
 = 0,

4658 
	mNL80211_USER_REG_HINT_CELL_BASE
 = 1,

4659 
	mNL80211_USER_REG_HINT_INDOOR
 = 2,

4692 
	e∆80211_survey_öfo
 {

4693 
	m__NL80211_SURVEY_INFO_INVALID
,

4694 
	mNL80211_SURVEY_INFO_FREQUENCY
,

4695 
	mNL80211_SURVEY_INFO_NOISE
,

4696 
	mNL80211_SURVEY_INFO_IN_USE
,

4697 
	mNL80211_SURVEY_INFO_TIME
,

4698 
	mNL80211_SURVEY_INFO_TIME_BUSY
,

4699 
	mNL80211_SURVEY_INFO_TIME_EXT_BUSY
,

4700 
	mNL80211_SURVEY_INFO_TIME_RX
,

4701 
	mNL80211_SURVEY_INFO_TIME_TX
,

4702 
	mNL80211_SURVEY_INFO_TIME_SCAN
,

4703 
	mNL80211_SURVEY_INFO_PAD
,

4704 
	mNL80211_SURVEY_INFO_TIME_BSS_RX
,

4705 
	mNL80211_SURVEY_INFO_FREQUENCY_OFFSET
,

4708 
	m__NL80211_SURVEY_INFO_AFTER_LAST
,

4709 
	mNL80211_SURVEY_INFO_MAX
 = 
__NL80211_SURVEY_INFO_AFTER_LAST
 - 1

4713 
	#NL80211_SURVEY_INFO_CHANNEL_TIME
 
NL80211_SURVEY_INFO_TIME


	)

4714 
	#NL80211_SURVEY_INFO_CHANNEL_TIME_BUSY
 
NL80211_SURVEY_INFO_TIME_BUSY


	)

4715 
	#NL80211_SURVEY_INFO_CHANNEL_TIME_EXT_BUSY
 
NL80211_SURVEY_INFO_TIME_EXT_BUSY


	)

4716 
	#NL80211_SURVEY_INFO_CHANNEL_TIME_RX
 
NL80211_SURVEY_INFO_TIME_RX


	)

4717 
	#NL80211_SURVEY_INFO_CHANNEL_TIME_TX
 
NL80211_SURVEY_INFO_TIME_TX


	)

4739 
	e∆80211_m¡r_Êags
 {

4740 
	m__NL80211_MNTR_FLAG_INVALID
,

4741 
	mNL80211_MNTR_FLAG_FCSFAIL
,

4742 
	mNL80211_MNTR_FLAG_PLCPFAIL
,

4743 
	mNL80211_MNTR_FLAG_CONTROL
,

4744 
	mNL80211_MNTR_FLAG_OTHER_BSS
,

4745 
	mNL80211_MNTR_FLAG_COOK_FRAMES
,

4746 
	mNL80211_MNTR_FLAG_ACTIVE
,

4747 
	mNL80211_MNTR_FLAG_SKIP_TX
,

4750 
	m__NL80211_MNTR_FLAG_AFTER_LAST
,

4751 
	mNL80211_MNTR_FLAG_MAX
 = 
__NL80211_MNTR_FLAG_AFTER_LAST
 - 1

4772 
	e∆80211_mesh_powî_mode
 {

4773 
	mNL80211_MESH_POWER_UNKNOWN
,

4774 
	mNL80211_MESH_POWER_ACTIVE
,

4775 
	mNL80211_MESH_POWER_LIGHT_SLEEP
,

4776 
	mNL80211_MESH_POWER_DEEP_SLEEP
,

4778 
	m__NL80211_MESH_POWER_AFTER_LAST
,

4779 
	mNL80211_MESH_POWER_MAX
 = 
__NL80211_MESH_POWER_AFTER_LAST
 - 1

4905 
	e∆80211_meshc⁄f_∑øms
 {

4906 
	m__NL80211_MESHCONF_INVALID
,

4907 
	mNL80211_MESHCONF_RETRY_TIMEOUT
,

4908 
	mNL80211_MESHCONF_CONFIRM_TIMEOUT
,

4909 
	mNL80211_MESHCONF_HOLDING_TIMEOUT
,

4910 
	mNL80211_MESHCONF_MAX_PEER_LINKS
,

4911 
	mNL80211_MESHCONF_MAX_RETRIES
,

4912 
	mNL80211_MESHCONF_TTL
,

4913 
	mNL80211_MESHCONF_AUTO_OPEN_PLINKS
,

4914 
	mNL80211_MESHCONF_HWMP_MAX_PREQ_RETRIES
,

4915 
	mNL80211_MESHCONF_PATH_REFRESH_TIME
,

4916 
	mNL80211_MESHCONF_MIN_DISCOVERY_TIMEOUT
,

4917 
	mNL80211_MESHCONF_HWMP_ACTIVE_PATH_TIMEOUT
,

4918 
	mNL80211_MESHCONF_HWMP_PREQ_MIN_INTERVAL
,

4919 
	mNL80211_MESHCONF_HWMP_NET_DIAM_TRVS_TIME
,

4920 
	mNL80211_MESHCONF_HWMP_ROOTMODE
,

4921 
	mNL80211_MESHCONF_ELEMENT_TTL
,

4922 
	mNL80211_MESHCONF_HWMP_RANN_INTERVAL
,

4923 
	mNL80211_MESHCONF_GATE_ANNOUNCEMENTS
,

4924 
	mNL80211_MESHCONF_HWMP_PERR_MIN_INTERVAL
,

4925 
	mNL80211_MESHCONF_FORWARDING
,

4926 
	mNL80211_MESHCONF_RSSI_THRESHOLD
,

4927 
	mNL80211_MESHCONF_SYNC_OFFSET_MAX_NEIGHBOR
,

4928 
	mNL80211_MESHCONF_HT_OPMODE
,

4929 
	mNL80211_MESHCONF_HWMP_PATH_TO_ROOT_TIMEOUT
,

4930 
	mNL80211_MESHCONF_HWMP_ROOT_INTERVAL
,

4931 
	mNL80211_MESHCONF_HWMP_CONFIRMATION_INTERVAL
,

4932 
	mNL80211_MESHCONF_POWER_MODE
,

4933 
	mNL80211_MESHCONF_AWAKE_WINDOW
,

4934 
	mNL80211_MESHCONF_PLINK_TIMEOUT
,

4935 
	mNL80211_MESHCONF_CONNECTED_TO_GATE
,

4936 
	mNL80211_MESHCONF_NOLEARN
,

4937 
	mNL80211_MESHCONF_CONNECTED_TO_AS
,

4940 
	m__NL80211_MESHCONF_ATTR_AFTER_LAST
,

4941 
	mNL80211_MESHCONF_ATTR_MAX
 = 
__NL80211_MESHCONF_ATTR_AFTER_LAST
 - 1

4993 
	e∆80211_mesh_£tup_∑øms
 {

4994 
	m__NL80211_MESH_SETUP_INVALID
,

4995 
	mNL80211_MESH_SETUP_ENABLE_VENDOR_PATH_SEL
,

4996 
	mNL80211_MESH_SETUP_ENABLE_VENDOR_METRIC
,

4997 
	mNL80211_MESH_SETUP_IE
,

4998 
	mNL80211_MESH_SETUP_USERSPACE_AUTH
,

4999 
	mNL80211_MESH_SETUP_USERSPACE_AMPE
,

5000 
	mNL80211_MESH_SETUP_ENABLE_VENDOR_SYNC
,

5001 
	mNL80211_MESH_SETUP_USERSPACE_MPM
,

5002 
	mNL80211_MESH_SETUP_AUTH_PROTOCOL
,

5005 
	m__NL80211_MESH_SETUP_ATTR_AFTER_LAST
,

5006 
	mNL80211_MESH_SETUP_ATTR_MAX
 = 
__NL80211_MESH_SETUP_ATTR_AFTER_LAST
 - 1

5023 
	e∆80211_txq_©å
 {

5024 
	m__NL80211_TXQ_ATTR_INVALID
,

5025 
	mNL80211_TXQ_ATTR_AC
,

5026 
	mNL80211_TXQ_ATTR_TXOP
,

5027 
	mNL80211_TXQ_ATTR_CWMIN
,

5028 
	mNL80211_TXQ_ATTR_CWMAX
,

5029 
	mNL80211_TXQ_ATTR_AIFS
,

5032 
	m__NL80211_TXQ_ATTR_AFTER_LAST
,

5033 
	mNL80211_TXQ_ATTR_MAX
 = 
__NL80211_TXQ_ATTR_AFTER_LAST
 - 1

5036 
	e∆80211_ac
 {

5037 
	mNL80211_AC_VO
,

5038 
	mNL80211_AC_VI
,

5039 
	mNL80211_AC_BE
,

5040 
	mNL80211_AC_BK
,

5041 
	mNL80211_NUM_ACS


5045 
	#NL80211_TXQ_ATTR_QUEUE
 
NL80211_TXQ_ATTR_AC


	)

5046 
	#NL80211_TXQ_Q_VO
 
NL80211_AC_VO


	)

5047 
	#NL80211_TXQ_Q_VI
 
NL80211_AC_VI


	)

5048 
	#NL80211_TXQ_Q_BE
 
NL80211_AC_BE


	)

5049 
	#NL80211_TXQ_Q_BK
 
NL80211_AC_BK


	)

5060 
	e∆80211_ch™√l_ty≥
 {

5061 
	mNL80211_CHAN_NO_HT
,

5062 
	mNL80211_CHAN_HT20
,

5063 
	mNL80211_CHAN_HT40MINUS
,

5064 
	mNL80211_CHAN_HT40PLUS


5082 
	e∆80211_key_mode
 {

5083 
	mNL80211_KEY_RX_TX
,

5084 
	mNL80211_KEY_NO_TX
,

5085 
	mNL80211_KEY_SET_TX


5114 
	e∆80211_ch™_width
 {

5115 
	mNL80211_CHAN_WIDTH_20_NOHT
,

5116 
	mNL80211_CHAN_WIDTH_20
,

5117 
	mNL80211_CHAN_WIDTH_40
,

5118 
	mNL80211_CHAN_WIDTH_80
,

5119 
	mNL80211_CHAN_WIDTH_80P80
,

5120 
	mNL80211_CHAN_WIDTH_160
,

5121 
	mNL80211_CHAN_WIDTH_5
,

5122 
	mNL80211_CHAN_WIDTH_10
,

5123 
	mNL80211_CHAN_WIDTH_1
,

5124 
	mNL80211_CHAN_WIDTH_2
,

5125 
	mNL80211_CHAN_WIDTH_4
,

5126 
	mNL80211_CHAN_WIDTH_8
,

5127 
	mNL80211_CHAN_WIDTH_16
,

5128 
	mNL80211_CHAN_WIDTH_320
,

5142 
	e∆80211_bss_sˇn_width
 {

5143 
	mNL80211_BSS_CHAN_WIDTH_20
,

5144 
	mNL80211_BSS_CHAN_WIDTH_10
,

5145 
	mNL80211_BSS_CHAN_WIDTH_5
,

5146 
	mNL80211_BSS_CHAN_WIDTH_1
,

5147 
	mNL80211_BSS_CHAN_WIDTH_2
,

5159 
	e∆80211_bss_u£_f‹
 {

5160 
	mNL80211_BSS_USE_FOR_NORMAL
 = 1 << 0,

5161 
	mNL80211_BSS_USE_FOR_MLD_LINK
 = 1 << 1,

5172 
	e∆80211_bss_ˇ¬Ÿ_u£_ªas⁄s
 {

5173 
	mNL80211_BSS_CANNOT_USE_NSTR_NONPRIMARY
 = 1 << 0,

5174 
	mNL80211_BSS_CANNOT_USE_6GHZ_PWR_MISMATCH
 = 1 << 1,

5177 
	#NL80211_BSS_CANNOT_USE_UHB_PWR_MISMATCH
 \

5178 
NL80211_BSS_CANNOT_USE_6GHZ_PWR_MISMATCH


	)

5243 
	e∆80211_bss
 {

5244 
	m__NL80211_BSS_INVALID
,

5245 
	mNL80211_BSS_BSSID
,

5246 
	mNL80211_BSS_FREQUENCY
,

5247 
	mNL80211_BSS_TSF
,

5248 
	mNL80211_BSS_BEACON_INTERVAL
,

5249 
	mNL80211_BSS_CAPABILITY
,

5250 
	mNL80211_BSS_INFORMATION_ELEMENTS
,

5251 
	mNL80211_BSS_SIGNAL_MBM
,

5252 
	mNL80211_BSS_SIGNAL_UNSPEC
,

5253 
	mNL80211_BSS_STATUS
,

5254 
	mNL80211_BSS_SEEN_MS_AGO
,

5255 
	mNL80211_BSS_BEACON_IES
,

5256 
	mNL80211_BSS_CHAN_WIDTH
,

5257 
	mNL80211_BSS_BEACON_TSF
,

5258 
	mNL80211_BSS_PRESP_DATA
,

5259 
	mNL80211_BSS_LAST_SEEN_BOOTTIME
,

5260 
	mNL80211_BSS_PAD
,

5261 
	mNL80211_BSS_PARENT_TSF
,

5262 
	mNL80211_BSS_PARENT_BSSID
,

5263 
	mNL80211_BSS_CHAIN_SIGNAL
,

5264 
	mNL80211_BSS_FREQUENCY_OFFSET
,

5265 
	mNL80211_BSS_MLO_LINK_ID
,

5266 
	mNL80211_BSS_MLD_ADDR
,

5267 
	mNL80211_BSS_USE_FOR
,

5268 
	mNL80211_BSS_CANNOT_USE_REASONS
,

5271 
	m__NL80211_BSS_AFTER_LAST
,

5272 
	mNL80211_BSS_MAX
 = 
__NL80211_BSS_AFTER_LAST
 - 1

5287 
	e∆80211_bss_°©us
 {

5288 
	mNL80211_BSS_STATUS_AUTHENTICATED
,

5289 
	mNL80211_BSS_STATUS_ASSOCIATED
,

5290 
	mNL80211_BSS_STATUS_IBSS_JOINED
,

5310 
	e∆80211_auth_ty≥
 {

5311 
	mNL80211_AUTHTYPE_OPEN_SYSTEM
,

5312 
	mNL80211_AUTHTYPE_SHARED_KEY
,

5313 
	mNL80211_AUTHTYPE_FT
,

5314 
	mNL80211_AUTHTYPE_NETWORK_EAP
,

5315 
	mNL80211_AUTHTYPE_SAE
,

5316 
	mNL80211_AUTHTYPE_FILS_SK
,

5317 
	mNL80211_AUTHTYPE_FILS_SK_PFS
,

5318 
	mNL80211_AUTHTYPE_FILS_PK
,

5321 
	m__NL80211_AUTHTYPE_NUM
,

5322 
	mNL80211_AUTHTYPE_MAX
 = 
__NL80211_AUTHTYPE_NUM
 - 1,

5323 
	mNL80211_AUTHTYPE_AUTOMATIC


5333 
	e∆80211_key_ty≥
 {

5334 
	mNL80211_KEYTYPE_GROUP
,

5335 
	mNL80211_KEYTYPE_PAIRWISE
,

5336 
	mNL80211_KEYTYPE_PEERKEY
,

5338 
	mNUM_NL80211_KEYTYPES


5347 
	e∆80211_mÂ
 {

5348 
	mNL80211_MFP_NO
,

5349 
	mNL80211_MFP_REQUIRED
,

5350 
	mNL80211_MFP_OPTIONAL
,

5353 
	e∆80211_w∑_vîsi⁄s
 {

5354 
	mNL80211_WPA_VERSION_1
 = 1 << 0,

5355 
	mNL80211_WPA_VERSION_2
 = 1 << 1,

5356 
	mNL80211_WPA_VERSION_3
 = 1 << 2,

5368 
	e∆80211_key_deÁu…_ty≥s
 {

5369 
	m__NL80211_KEY_DEFAULT_TYPE_INVALID
,

5370 
	mNL80211_KEY_DEFAULT_TYPE_UNICAST
,

5371 
	mNL80211_KEY_DEFAULT_TYPE_MULTICAST
,

5373 
	mNUM_NL80211_KEY_DEFAULT_TYPES


5402 
	e∆80211_key_©åibuãs
 {

5403 
	m__NL80211_KEY_INVALID
,

5404 
	mNL80211_KEY_DATA
,

5405 
	mNL80211_KEY_IDX
,

5406 
	mNL80211_KEY_CIPHER
,

5407 
	mNL80211_KEY_SEQ
,

5408 
	mNL80211_KEY_DEFAULT
,

5409 
	mNL80211_KEY_DEFAULT_MGMT
,

5410 
	mNL80211_KEY_TYPE
,

5411 
	mNL80211_KEY_DEFAULT_TYPES
,

5412 
	mNL80211_KEY_MODE
,

5413 
	mNL80211_KEY_DEFAULT_BEACON
,

5416 
	m__NL80211_KEY_AFTER_LAST
,

5417 
	mNL80211_KEY_MAX
 = 
__NL80211_KEY_AFTER_LAST
 - 1

5439 
	e∆80211_tx_øã_©åibuãs
 {

5440 
	m__NL80211_TXRATE_INVALID
,

5441 
	mNL80211_TXRATE_LEGACY
,

5442 
	mNL80211_TXRATE_HT
,

5443 
	mNL80211_TXRATE_VHT
,

5444 
	mNL80211_TXRATE_GI
,

5445 
	mNL80211_TXRATE_HE
,

5446 
	mNL80211_TXRATE_HE_GI
,

5447 
	mNL80211_TXRATE_HE_LTF
,

5450 
	m__NL80211_TXRATE_AFTER_LAST
,

5451 
	mNL80211_TXRATE_MAX
 = 
__NL80211_TXRATE_AFTER_LAST
 - 1

5454 
	#NL80211_TXRATE_MCS
 
NL80211_TXRATE_HT


	)

5455 
	#NL80211_VHT_NSS_MAX
 8

	)

5461 
	s∆80211_txøã_vht
 {

5462 
__u16
 
	mmcs
[
NL80211_VHT_NSS_MAX
];

5465 
	#NL80211_HE_NSS_MAX
 8

	)

5470 
	s∆80211_txøã_he
 {

5471 
__u16
 
	mmcs
[
NL80211_HE_NSS_MAX
];

5474 
	e∆80211_txøã_gi
 {

5475 
	mNL80211_TXRATE_DEFAULT_GI
,

5476 
	mNL80211_TXRATE_FORCE_SGI
,

5477 
	mNL80211_TXRATE_FORCE_LGI
,

5491 
	e∆80211_b™d
 {

5492 
	mNL80211_BAND_2GHZ
,

5493 
	mNL80211_BAND_5GHZ
,

5494 
	mNL80211_BAND_60GHZ
,

5495 
	mNL80211_BAND_6GHZ
,

5496 
	mNL80211_BAND_S1GHZ
,

5497 
	mNL80211_BAND_LC
,

5499 
	mNUM_NL80211_BANDS
,

5507 
	e∆80211_ps_°©e
 {

5508 
	mNL80211_PS_DISABLED
,

5509 
	mNL80211_PS_ENABLED
,

5545 
	e∆80211_©å_cqm
 {

5546 
	m__NL80211_ATTR_CQM_INVALID
,

5547 
	mNL80211_ATTR_CQM_RSSI_THOLD
,

5548 
	mNL80211_ATTR_CQM_RSSI_HYST
,

5549 
	mNL80211_ATTR_CQM_RSSI_THRESHOLD_EVENT
,

5550 
	mNL80211_ATTR_CQM_PKT_LOSS_EVENT
,

5551 
	mNL80211_ATTR_CQM_TXE_RATE
,

5552 
	mNL80211_ATTR_CQM_TXE_PKTS
,

5553 
	mNL80211_ATTR_CQM_TXE_INTVL
,

5554 
	mNL80211_ATTR_CQM_BEACON_LOSS_EVENT
,

5555 
	mNL80211_ATTR_CQM_RSSI_LEVEL
,

5558 
	m__NL80211_ATTR_CQM_AFTER_LAST
,

5559 
	mNL80211_ATTR_CQM_MAX
 = 
__NL80211_ATTR_CQM_AFTER_LAST
 - 1

5570 
	e∆80211_cqm_rssi_thªshﬁd_evít
 {

5571 
	mNL80211_CQM_RSSI_THRESHOLD_EVENT_LOW
,

5572 
	mNL80211_CQM_RSSI_THRESHOLD_EVENT_HIGH
,

5573 
	mNL80211_CQM_RSSI_BEACON_LOSS_EVENT
,

5583 
	e∆80211_tx_powî_£âög
 {

5584 
	mNL80211_TX_POWER_AUTOMATIC
,

5585 
	mNL80211_TX_POWER_LIMITED
,

5586 
	mNL80211_TX_POWER_FIXED
,

5594 
	e∆80211_tid_c⁄fig
 {

5595 
	mNL80211_TID_CONFIG_ENABLE
,

5596 
	mNL80211_TID_CONFIG_DISABLE
,

5604 
	e∆80211_tx_øã_£âög
 {

5605 
	mNL80211_TX_RATE_AUTOMATIC
,

5606 
	mNL80211_TX_RATE_LIMITED
,

5607 
	mNL80211_TX_RATE_FIXED
,

5654 
	e∆80211_tid_c⁄fig_©å
 {

5655 
	m__NL80211_TID_CONFIG_ATTR_INVALID
,

5656 
	mNL80211_TID_CONFIG_ATTR_PAD
,

5657 
	mNL80211_TID_CONFIG_ATTR_VIF_SUPP
,

5658 
	mNL80211_TID_CONFIG_ATTR_PEER_SUPP
,

5659 
	mNL80211_TID_CONFIG_ATTR_OVERRIDE
,

5660 
	mNL80211_TID_CONFIG_ATTR_TIDS
,

5661 
	mNL80211_TID_CONFIG_ATTR_NOACK
,

5662 
	mNL80211_TID_CONFIG_ATTR_RETRY_SHORT
,

5663 
	mNL80211_TID_CONFIG_ATTR_RETRY_LONG
,

5664 
	mNL80211_TID_CONFIG_ATTR_AMPDU_CTRL
,

5665 
	mNL80211_TID_CONFIG_ATTR_RTSCTS_CTRL
,

5666 
	mNL80211_TID_CONFIG_ATTR_AMSDU_CTRL
,

5667 
	mNL80211_TID_CONFIG_ATTR_TX_RATE_TYPE
,

5668 
	mNL80211_TID_CONFIG_ATTR_TX_RATE
,

5671 
	m__NL80211_TID_CONFIG_ATTR_AFTER_LAST
,

5672 
	mNL80211_TID_CONFIG_ATTR_MAX
 = 
__NL80211_TID_CONFIG_ATTR_AFTER_LAST
 - 1

5696 
	e∆80211_∑ckë_∑âîn_©å
 {

5697 
	m__NL80211_PKTPAT_INVALID
,

5698 
	mNL80211_PKTPAT_MASK
,

5699 
	mNL80211_PKTPAT_PATTERN
,

5700 
	mNL80211_PKTPAT_OFFSET
,

5702 
	mNUM_NL80211_PKTPAT
,

5703 
	mMAX_NL80211_PKTPAT
 = 
NUM_NL80211_PKTPAT
 - 1,

5719 
	s∆80211_∑âîn_suµ‹t
 {

5720 
__u32
 
	mmax_∑âîns
;

5721 
__u32
 
	mmö_∑âîn_Àn
;

5722 
__u32
 
	mmax_∑âîn_Àn
;

5723 
__u32
 
	mmax_pkt_off£t
;

5724 } 
__©åibuã__
((
∑cked
));

5727 
	#__NL80211_WOWLAN_PKTPAT_INVALID
 
__NL80211_PKTPAT_INVALID


	)

5728 
	#NL80211_WOWLAN_PKTPAT_MASK
 
NL80211_PKTPAT_MASK


	)

5729 
	#NL80211_WOWLAN_PKTPAT_PATTERN
 
NL80211_PKTPAT_PATTERN


	)

5730 
	#NL80211_WOWLAN_PKTPAT_OFFSET
 
NL80211_PKTPAT_OFFSET


	)

5731 
	#NUM_NL80211_WOWLAN_PKTPAT
 
NUM_NL80211_PKTPAT


	)

5732 
	#MAX_NL80211_WOWLAN_PKTPAT
 
MAX_NL80211_PKTPAT


	)

5733 
	#∆80211_wowœn_∑âîn_suµ‹t
 
∆80211_∑âîn_suµ‹t


	)

5826 
	e∆80211_wowœn_åiggîs
 {

5827 
	m__NL80211_WOWLAN_TRIG_INVALID
,

5828 
	mNL80211_WOWLAN_TRIG_ANY
,

5829 
	mNL80211_WOWLAN_TRIG_DISCONNECT
,

5830 
	mNL80211_WOWLAN_TRIG_MAGIC_PKT
,

5831 
	mNL80211_WOWLAN_TRIG_PKT_PATTERN
,

5832 
	mNL80211_WOWLAN_TRIG_GTK_REKEY_SUPPORTED
,

5833 
	mNL80211_WOWLAN_TRIG_GTK_REKEY_FAILURE
,

5834 
	mNL80211_WOWLAN_TRIG_EAP_IDENT_REQUEST
,

5835 
	mNL80211_WOWLAN_TRIG_4WAY_HANDSHAKE
,

5836 
	mNL80211_WOWLAN_TRIG_RFKILL_RELEASE
,

5837 
	mNL80211_WOWLAN_TRIG_WAKEUP_PKT_80211
,

5838 
	mNL80211_WOWLAN_TRIG_WAKEUP_PKT_80211_LEN
,

5839 
	mNL80211_WOWLAN_TRIG_WAKEUP_PKT_8023
,

5840 
	mNL80211_WOWLAN_TRIG_WAKEUP_PKT_8023_LEN
,

5841 
	mNL80211_WOWLAN_TRIG_TCP_CONNECTION
,

5842 
	mNL80211_WOWLAN_TRIG_WAKEUP_TCP_MATCH
,

5843 
	mNL80211_WOWLAN_TRIG_WAKEUP_TCP_CONNLOST
,

5844 
	mNL80211_WOWLAN_TRIG_WAKEUP_TCP_NOMORETOKENS
,

5845 
	mNL80211_WOWLAN_TRIG_NET_DETECT
,

5846 
	mNL80211_WOWLAN_TRIG_NET_DETECT_RESULTS
,

5847 
	mNL80211_WOWLAN_TRIG_UNPROTECTED_DEAUTH_DISASSOC
,

5850 
	mNUM_NL80211_WOWLAN_TRIG
,

5851 
	mMAX_NL80211_WOWLAN_TRIG
 = 
NUM_NL80211_WOWLAN_TRIG
 - 1

5887 
	s∆80211_wowœn_t˝_d©a_£q
 {

5888 
__u32
 
	m°¨t
, 
	moff£t
, 
	mÀn
;

5898 
	s∆80211_wowœn_t˝_d©a_tokí
 {

5899 
__u32
 
	moff£t
, 
	mÀn
;

5900 
__u8
 
	mtokí_°ªam
[];

5909 
	s∆80211_wowœn_t˝_d©a_tokí_„©uª
 {

5910 
__u32
 
	mmö_Àn
, 
	mmax_Àn
, 
	mbufsize
;

5945 
	e∆80211_wowœn_t˝_©ås
 {

5946 
	m__NL80211_WOWLAN_TCP_INVALID
,

5947 
	mNL80211_WOWLAN_TCP_SRC_IPV4
,

5948 
	mNL80211_WOWLAN_TCP_DST_IPV4
,

5949 
	mNL80211_WOWLAN_TCP_DST_MAC
,

5950 
	mNL80211_WOWLAN_TCP_SRC_PORT
,

5951 
	mNL80211_WOWLAN_TCP_DST_PORT
,

5952 
	mNL80211_WOWLAN_TCP_DATA_PAYLOAD
,

5953 
	mNL80211_WOWLAN_TCP_DATA_PAYLOAD_SEQ
,

5954 
	mNL80211_WOWLAN_TCP_DATA_PAYLOAD_TOKEN
,

5955 
	mNL80211_WOWLAN_TCP_DATA_INTERVAL
,

5956 
	mNL80211_WOWLAN_TCP_WAKE_PAYLOAD
,

5957 
	mNL80211_WOWLAN_TCP_WAKE_MASK
,

5960 
	mNUM_NL80211_WOWLAN_TCP
,

5961 
	mMAX_NL80211_WOWLAN_TCP
 = 
NUM_NL80211_WOWLAN_TCP
 - 1

5973 
	s∆80211_cﬂÀs˚_ruÀ_suµ‹t
 {

5974 
__u32
 
	mmax_ruÀs
;

5975 
∆80211_∑âîn_suµ‹t
 
	m∑t
;

5976 
__u32
 
	mmax_dñay
;

5977 } 
__©åibuã__
((
∑cked
));

5990 
	e∆80211_©å_cﬂÀs˚_ruÀ
 {

5991 
	m__NL80211_COALESCE_RULE_INVALID
,

5992 
	mNL80211_ATTR_COALESCE_RULE_DELAY
,

5993 
	mNL80211_ATTR_COALESCE_RULE_CONDITION
,

5994 
	mNL80211_ATTR_COALESCE_RULE_PKT_PATTERN
,

5997 
	mNUM_NL80211_ATTR_COALESCE_RULE
,

5998 
	mNL80211_ATTR_COALESCE_RULE_MAX
 = 
NUM_NL80211_ATTR_COALESCE_RULE
 - 1

6008 
	e∆80211_cﬂÀs˚_c⁄dôi⁄
 {

6009 
	mNL80211_COALESCE_CONDITION_MATCH
,

6010 
	mNL80211_COALESCE_CONDITION_NO_MATCH


6023 
	e∆80211_iÁ˚_limô_©ås
 {

6024 
	mNL80211_IFACE_LIMIT_UNSPEC
,

6025 
	mNL80211_IFACE_LIMIT_MAX
,

6026 
	mNL80211_IFACE_LIMIT_TYPES
,

6029 
	mNUM_NL80211_IFACE_LIMIT
,

6030 
	mMAX_NL80211_IFACE_LIMIT
 = 
NUM_NL80211_IFACE_LIMIT
 - 1

6082 
	e∆80211_if_combö©i⁄_©ås
 {

6083 
	mNL80211_IFACE_COMB_UNSPEC
,

6084 
	mNL80211_IFACE_COMB_LIMITS
,

6085 
	mNL80211_IFACE_COMB_MAXNUM
,

6086 
	mNL80211_IFACE_COMB_STA_AP_BI_MATCH
,

6087 
	mNL80211_IFACE_COMB_NUM_CHANNELS
,

6088 
	mNL80211_IFACE_COMB_RADAR_DETECT_WIDTHS
,

6089 
	mNL80211_IFACE_COMB_RADAR_DETECT_REGIONS
,

6090 
	mNL80211_IFACE_COMB_BI_MIN_GCD
,

6093 
	mNUM_NL80211_IFACE_COMB
,

6094 
	mMAX_NL80211_IFACE_COMB
 = 
NUM_NL80211_IFACE_COMB
 - 1

6116 
	e∆80211_∂ök_°©e
 {

6117 
	mNL80211_PLINK_LISTEN
,

6118 
	mNL80211_PLINK_OPN_SNT
,

6119 
	mNL80211_PLINK_OPN_RCVD
,

6120 
	mNL80211_PLINK_CNF_RCVD
,

6121 
	mNL80211_PLINK_ESTAB
,

6122 
	mNL80211_PLINK_HOLDING
,

6123 
	mNL80211_PLINK_BLOCKED
,

6126 
	mNUM_NL80211_PLINK_STATES
,

6127 
	mMAX_NL80211_PLINK_STATES
 = 
NUM_NL80211_PLINK_STATES
 - 1

6138 
	e∆80211_∂ök_a˘i⁄
 {

6139 
	mNL80211_PLINK_ACTION_NO_ACTION
,

6140 
	mNL80211_PLINK_ACTION_OPEN
,

6141 
	mNL80211_PLINK_ACTION_BLOCK
,

6143 
	mNUM_NL80211_PLINK_ACTIONS
,

6147 
	#NL80211_KCK_LEN
 16

	)

6148 
	#NL80211_KEK_LEN
 16

	)

6149 
	#NL80211_KCK_EXT_LEN
 24

	)

6150 
	#NL80211_KEK_EXT_LEN
 32

	)

6151 
	#NL80211_KCK_EXT_LEN_32
 32

	)

6152 
	#NL80211_REPLAY_CTR_LEN
 8

	)

6164 
	e∆80211_ªkey_d©a
 {

6165 
	m__NL80211_REKEY_DATA_INVALID
,

6166 
	mNL80211_REKEY_DATA_KEK
,

6167 
	mNL80211_REKEY_DATA_KCK
,

6168 
	mNL80211_REKEY_DATA_REPLAY_CTR
,

6169 
	mNL80211_REKEY_DATA_AKM
,

6172 
	mNUM_NL80211_REKEY_DATA
,

6173 
	mMAX_NL80211_REKEY_DATA
 = 
NUM_NL80211_REKEY_DATA
 - 1

6185 
	e∆80211_hiddí_ssid
 {

6186 
	mNL80211_HIDDEN_SSID_NOT_IN_USE
,

6187 
	mNL80211_HIDDEN_SSID_ZERO_LEN
,

6188 
	mNL80211_HIDDEN_SSID_ZERO_CONTENTS


6201 
	e∆80211_°a_wme_©å
 {

6202 
	m__NL80211_STA_WME_INVALID
,

6203 
	mNL80211_STA_WME_UAPSD_QUEUES
,

6204 
	mNL80211_STA_WME_MAX_SP
,

6207 
	m__NL80211_STA_WME_AFTER_LAST
,

6208 
	mNL80211_STA_WME_MAX
 = 
__NL80211_STA_WME_AFTER_LAST
 - 1

6223 
	e∆80211_pmkß_ˇndid©e_©å
 {

6224 
	m__NL80211_PMKSA_CANDIDATE_INVALID
,

6225 
	mNL80211_PMKSA_CANDIDATE_INDEX
,

6226 
	mNL80211_PMKSA_CANDIDATE_BSSID
,

6227 
	mNL80211_PMKSA_CANDIDATE_PREAUTH
,

6230 
	mNUM_NL80211_PMKSA_CANDIDATE
,

6231 
	mMAX_NL80211_PMKSA_CANDIDATE
 = 
NUM_NL80211_PMKSA_CANDIDATE
 - 1

6242 
	e∆80211_tdls_›î©i⁄
 {

6243 
	mNL80211_TDLS_DISCOVERY_REQ
,

6244 
	mNL80211_TDLS_SETUP
,

6245 
	mNL80211_TDLS_TEARDOWN
,

6246 
	mNL80211_TDLS_ENABLE_LINK
,

6247 
	mNL80211_TDLS_DISABLE_LINK
,

6256 
	e∆80211_≠_sme_„©uªs
 {

6257 
	mNL80211_AP_SME_SA_QUERY_OFFLOAD
 = 1 << 0,

6353 
	e∆80211_„©uª_Êags
 {

6354 
	mNL80211_FEATURE_SK_TX_STATUS
 = 1 << 0,

6355 
	mNL80211_FEATURE_HT_IBSS
 = 1 << 1,

6356 
	mNL80211_FEATURE_INACTIVITY_TIMER
 = 1 << 2,

6357 
	mNL80211_FEATURE_CELL_BASE_REG_HINTS
 = 1 << 3,

6358 
	mNL80211_FEATURE_P2P_DEVICE_NEEDS_CHANNEL
 = 1 << 4,

6359 
	mNL80211_FEATURE_SAE
 = 1 << 5,

6360 
	mNL80211_FEATURE_LOW_PRIORITY_SCAN
 = 1 << 6,

6361 
	mNL80211_FEATURE_SCAN_FLUSH
 = 1 << 7,

6362 
	mNL80211_FEATURE_AP_SCAN
 = 1 << 8,

6363 
	mNL80211_FEATURE_VIF_TXPOWER
 = 1 << 9,

6364 
	mNL80211_FEATURE_NEED_OBSS_SCAN
 = 1 << 10,

6365 
	mNL80211_FEATURE_P2P_GO_CTWIN
 = 1 << 11,

6366 
	mNL80211_FEATURE_P2P_GO_OPPPS
 = 1 << 12,

6368 
	mNL80211_FEATURE_ADVERTISE_CHAN_LIMITS
 = 1 << 14,

6369 
	mNL80211_FEATURE_FULL_AP_CLIENT_STATE
 = 1 << 15,

6370 
	mNL80211_FEATURE_USERSPACE_MPM
 = 1 << 16,

6371 
	mNL80211_FEATURE_ACTIVE_MONITOR
 = 1 << 17,

6372 
	mNL80211_FEATURE_AP_MODE_CHAN_WIDTH_CHANGE
 = 1 << 18,

6373 
	mNL80211_FEATURE_DS_PARAM_SET_IE_IN_PROBES
 = 1 << 19,

6374 
	mNL80211_FEATURE_WFA_TPC_IE_IN_PROBES
 = 1 << 20,

6375 
	mNL80211_FEATURE_QUIET
 = 1 << 21,

6376 
	mNL80211_FEATURE_TX_POWER_INSERTION
 = 1 << 22,

6377 
	mNL80211_FEATURE_ACKTO_ESTIMATION
 = 1 << 23,

6378 
	mNL80211_FEATURE_STATIC_SMPS
 = 1 << 24,

6379 
	mNL80211_FEATURE_DYNAMIC_SMPS
 = 1 << 25,

6380 
	mNL80211_FEATURE_SUPPORTS_WMM_ADMISSION
 = 1 << 26,

6381 
	mNL80211_FEATURE_MAC_ON_CREATE
 = 1 << 27,

6382 
	mNL80211_FEATURE_TDLS_CHANNEL_SWITCH
 = 1 << 28,

6383 
	mNL80211_FEATURE_SCAN_RANDOM_MAC_ADDR
 = 1 << 29,

6384 
	mNL80211_FEATURE_SCHED_SCAN_RANDOM_MAC_ADDR
 = 1 << 30,

6385 
	mNL80211_FEATURE_ND_RANDOM_MAC_ADDR
 = 1U << 31,

6607 
	e∆80211_ext_„©uª_ödex
 {

6608 
	mNL80211_EXT_FEATURE_VHT_IBSS
,

6609 
	mNL80211_EXT_FEATURE_RRM
,

6610 
	mNL80211_EXT_FEATURE_MU_MIMO_AIR_SNIFFER
,

6611 
	mNL80211_EXT_FEATURE_SCAN_START_TIME
,

6612 
	mNL80211_EXT_FEATURE_BSS_PARENT_TSF
,

6613 
	mNL80211_EXT_FEATURE_SET_SCAN_DWELL
,

6614 
	mNL80211_EXT_FEATURE_BEACON_RATE_LEGACY
,

6615 
	mNL80211_EXT_FEATURE_BEACON_RATE_HT
,

6616 
	mNL80211_EXT_FEATURE_BEACON_RATE_VHT
,

6617 
	mNL80211_EXT_FEATURE_FILS_STA
,

6618 
	mNL80211_EXT_FEATURE_MGMT_TX_RANDOM_TA
,

6619 
	mNL80211_EXT_FEATURE_MGMT_TX_RANDOM_TA_CONNECTED
,

6620 
	mNL80211_EXT_FEATURE_SCHED_SCAN_RELATIVE_RSSI
,

6621 
	mNL80211_EXT_FEATURE_CQM_RSSI_LIST
,

6622 
	mNL80211_EXT_FEATURE_FILS_SK_OFFLOAD
,

6623 
	mNL80211_EXT_FEATURE_4WAY_HANDSHAKE_STA_PSK
,

6624 
	mNL80211_EXT_FEATURE_4WAY_HANDSHAKE_STA_1X
,

6625 
	mNL80211_EXT_FEATURE_FILS_MAX_CHANNEL_TIME
,

6626 
	mNL80211_EXT_FEATURE_ACCEPT_BCAST_PROBE_RESP
,

6627 
	mNL80211_EXT_FEATURE_OCE_PROBE_REQ_HIGH_TX_RATE
,

6628 
	mNL80211_EXT_FEATURE_OCE_PROBE_REQ_DEFERRAL_SUPPRESSION
,

6629 
	mNL80211_EXT_FEATURE_MFP_OPTIONAL
,

6630 
	mNL80211_EXT_FEATURE_LOW_SPAN_SCAN
,

6631 
	mNL80211_EXT_FEATURE_LOW_POWER_SCAN
,

6632 
	mNL80211_EXT_FEATURE_HIGH_ACCURACY_SCAN
,

6633 
	mNL80211_EXT_FEATURE_DFS_OFFLOAD
,

6634 
	mNL80211_EXT_FEATURE_CONTROL_PORT_OVER_NL80211
,

6635 
	mNL80211_EXT_FEATURE_ACK_SIGNAL_SUPPORT
,

6637 
	mNL80211_EXT_FEATURE_DATA_ACK_SIGNAL_SUPPORT
 = 
NL80211_EXT_FEATURE_ACK_SIGNAL_SUPPORT
,

6638 
	mNL80211_EXT_FEATURE_TXQS
,

6639 
	mNL80211_EXT_FEATURE_SCAN_RANDOM_SN
,

6640 
	mNL80211_EXT_FEATURE_SCAN_MIN_PREQ_CONTENT
,

6641 
	mNL80211_EXT_FEATURE_CAN_REPLACE_PTK0
,

6642 
	mNL80211_EXT_FEATURE_ENABLE_FTM_RESPONDER
,

6643 
	mNL80211_EXT_FEATURE_AIRTIME_FAIRNESS
,

6644 
	mNL80211_EXT_FEATURE_AP_PMKSA_CACHING
,

6645 
	mNL80211_EXT_FEATURE_SCHED_SCAN_BAND_SPECIFIC_RSSI_THOLD
,

6646 
	mNL80211_EXT_FEATURE_EXT_KEY_ID
,

6647 
	mNL80211_EXT_FEATURE_STA_TX_PWR
,

6648 
	mNL80211_EXT_FEATURE_SAE_OFFLOAD
,

6649 
	mNL80211_EXT_FEATURE_VLAN_OFFLOAD
,

6650 
	mNL80211_EXT_FEATURE_AQL
,

6651 
	mNL80211_EXT_FEATURE_BEACON_PROTECTION
,

6652 
	mNL80211_EXT_FEATURE_CONTROL_PORT_NO_PREAUTH
,

6653 
	mNL80211_EXT_FEATURE_PROTECTED_TWT
,

6654 
	mNL80211_EXT_FEATURE_DEL_IBSS_STA
,

6655 
	mNL80211_EXT_FEATURE_MULTICAST_REGISTRATIONS
,

6656 
	mNL80211_EXT_FEATURE_BEACON_PROTECTION_CLIENT
,

6657 
	mNL80211_EXT_FEATURE_SCAN_FREQ_KHZ
,

6658 
	mNL80211_EXT_FEATURE_CONTROL_PORT_OVER_NL80211_TX_STATUS
,

6659 
	mNL80211_EXT_FEATURE_OPERATING_CHANNEL_VALIDATION
,

6660 
	mNL80211_EXT_FEATURE_4WAY_HANDSHAKE_AP_PSK
,

6661 
	mNL80211_EXT_FEATURE_SAE_OFFLOAD_AP
,

6662 
	mNL80211_EXT_FEATURE_FILS_DISCOVERY
,

6663 
	mNL80211_EXT_FEATURE_UNSOL_BCAST_PROBE_RESP
,

6664 
	mNL80211_EXT_FEATURE_BEACON_RATE_HE
,

6665 
	mNL80211_EXT_FEATURE_SECURE_LTF
,

6666 
	mNL80211_EXT_FEATURE_SECURE_RTT
,

6667 
	mNL80211_EXT_FEATURE_PROT_RANGE_NEGO_AND_MEASURE
,

6668 
	mNL80211_EXT_FEATURE_BSS_COLOR
,

6669 
	mNL80211_EXT_FEATURE_FILS_CRYPTO_OFFLOAD
,

6670 
	mNL80211_EXT_FEATURE_RADAR_BACKGROUND
,

6671 
	mNL80211_EXT_FEATURE_POWERED_ADDR_CHANGE
,

6672 
	mNL80211_EXT_FEATURE_PUNCT
,

6673 
	mNL80211_EXT_FEATURE_SECURE_NAN
,

6674 
	mNL80211_EXT_FEATURE_AUTH_AND_DEAUTH_RANDOM_TA
,

6675 
	mNL80211_EXT_FEATURE_OWE_OFFLOAD
,

6676 
	mNL80211_EXT_FEATURE_OWE_OFFLOAD_AP
,

6677 
	mNL80211_EXT_FEATURE_DFS_CONCURRENT
,

6678 
	mNL80211_EXT_FEATURE_SPP_AMSDU_SUPPORT
,

6681 
	mNUM_NL80211_EXT_FEATURES
,

6682 
	mMAX_NL80211_EXT_FEATURES
 = 
NUM_NL80211_EXT_FEATURES
 - 1

6699 
	e∆80211_¥obe_ª•_ofÊﬂd_suµ‹t_©å
 {

6700 
	mNL80211_PROBE_RESP_OFFLOAD_SUPPORT_WPS
 = 1<<0,

6701 
	mNL80211_PROBE_RESP_OFFLOAD_SUPPORT_WPS2
 = 1<<1,

6702 
	mNL80211_PROBE_RESP_OFFLOAD_SUPPORT_P2P
 = 1<<2,

6703 
	mNL80211_PROBE_RESP_OFFLOAD_SUPPORT_80211U
 = 1<<3,

6712 
	e∆80211_c⁄√˘_Áûed_ªas⁄
 {

6713 
	mNL80211_CONN_FAIL_MAX_CLIENTS
,

6714 
	mNL80211_CONN_FAIL_BLOCKED_CLIENT
,

6725 
	e∆80211_timeout_ªas⁄
 {

6726 
	mNL80211_TIMEOUT_UNSPECIFIED
,

6727 
	mNL80211_TIMEOUT_SCAN
,

6728 
	mNL80211_TIMEOUT_AUTH
,

6729 
	mNL80211_TIMEOUT_ASSOC
,

6804 
	e∆80211_sˇn_Êags
 {

6805 
	mNL80211_SCAN_FLAG_LOW_PRIORITY
 = 1<<0,

6806 
	mNL80211_SCAN_FLAG_FLUSH
 = 1<<1,

6807 
	mNL80211_SCAN_FLAG_AP
 = 1<<2,

6808 
	mNL80211_SCAN_FLAG_RANDOM_ADDR
 = 1<<3,

6809 
	mNL80211_SCAN_FLAG_FILS_MAX_CHANNEL_TIME
 = 1<<4,

6810 
	mNL80211_SCAN_FLAG_ACCEPT_BCAST_PROBE_RESP
 = 1<<5,

6811 
	mNL80211_SCAN_FLAG_OCE_PROBE_REQ_HIGH_TX_RATE
 = 1<<6,

6812 
	mNL80211_SCAN_FLAG_OCE_PROBE_REQ_DEFERRAL_SUPPRESSION
 = 1<<7,

6813 
	mNL80211_SCAN_FLAG_LOW_SPAN
 = 1<<8,

6814 
	mNL80211_SCAN_FLAG_LOW_POWER
 = 1<<9,

6815 
	mNL80211_SCAN_FLAG_HIGH_ACCURACY
 = 1<<10,

6816 
	mNL80211_SCAN_FLAG_RANDOM_SN
 = 1<<11,

6817 
	mNL80211_SCAN_FLAG_MIN_PREQ_CONTENT
 = 1<<12,

6818 
	mNL80211_SCAN_FLAG_FREQ_KHZ
 = 1<<13,

6819 
	mNL80211_SCAN_FLAG_COLOCATED_6GHZ
 = 1<<14,

6835 
	e∆80211_a˛_pﬁicy
 {

6836 
	mNL80211_ACL_POLICY_ACCEPT_UNLESS_LISTED
,

6837 
	mNL80211_ACL_POLICY_DENY_UNLESS_LISTED
,

6852 
	e∆80211_smps_mode
 {

6853 
	mNL80211_SMPS_OFF
,

6854 
	mNL80211_SMPS_STATIC
,

6855 
	mNL80211_SMPS_DYNAMIC
,

6857 
	m__NL80211_SMPS_AFTER_LAST
,

6858 
	mNL80211_SMPS_MAX
 = 
__NL80211_SMPS_AFTER_LAST
 - 1

6882 
	e∆80211_ød¨_evít
 {

6883 
	mNL80211_RADAR_DETECTED
,

6884 
	mNL80211_RADAR_CAC_FINISHED
,

6885 
	mNL80211_RADAR_CAC_ABORTED
,

6886 
	mNL80211_RADAR_NOP_FINISHED
,

6887 
	mNL80211_RADAR_PRE_CAC_EXPIRED
,

6888 
	mNL80211_RADAR_CAC_STARTED
,

6902 
	e∆80211_dfs_°©e
 {

6903 
	mNL80211_DFS_USABLE
,

6904 
	mNL80211_DFS_UNAVAILABLE
,

6905 
	mNL80211_DFS_AVAILABLE
,

6916 
	e∆80211_¥Ÿocﬁ_„©uªs
 {

6917 
	mNL80211_PROTOCOL_FEATURE_SPLIT_WIPHY_DUMP
 = 1 << 0,

6929 
	e∆80211_¸ô_¥Ÿo_id
 {

6930 
	mNL80211_CRIT_PROTO_UNSPEC
,

6931 
	mNL80211_CRIT_PROTO_DHCP
,

6932 
	mNL80211_CRIT_PROTO_EAPOL
,

6933 
	mNL80211_CRIT_PROTO_APIPA
,

6935 
	mNUM_NL80211_CRIT_PROTO


6939 
	#NL80211_CRIT_PROTO_MAX_DURATION
 5000

	)

6952 
	e∆80211_rxmgmt_Êags
 {

6953 
	mNL80211_RXMGMT_FLAG_ANSWERED
 = 1 << 0,

6954 
	mNL80211_RXMGMT_FLAG_EXTERNAL_AUTH
 = 1 << 1,

6962 
	#NL80211_VENDOR_ID_IS_LINUX
 0x80000000

	)

6972 
	s∆80211_víd‹_cmd_öfo
 {

6973 
__u32
 
	mvíd‹_id
;

6974 
__u32
 
	msubcmd
;

6988 
	e∆80211_tdls_≥î_ˇ∑bûôy
 {

6989 
	mNL80211_TDLS_PEER_HT
 = 1<<0,

6990 
	mNL80211_TDLS_PEER_VHT
 = 1<<1,

6991 
	mNL80211_TDLS_PEER_WMM
 = 1<<2,

6992 
	mNL80211_TDLS_PEER_HE
 = 1<<3,

7008 
	e∆80211_sched_sˇn_∂™
 {

7009 
	m__NL80211_SCHED_SCAN_PLAN_INVALID
,

7010 
	mNL80211_SCHED_SCAN_PLAN_INTERVAL
,

7011 
	mNL80211_SCHED_SCAN_PLAN_ITERATIONS
,

7014 
	m__NL80211_SCHED_SCAN_PLAN_AFTER_LAST
,

7015 
	mNL80211_SCHED_SCAN_PLAN_MAX
 =

7016 
__NL80211_SCHED_SCAN_PLAN_AFTER_LAST
 - 1

7026 
	s∆80211_bss_£À˘_rssi_adju°
 {

7027 
__u8
 
	mb™d
;

7028 
__s8
 
	mdñè
;

7029 } 
__©åibuã__
((
∑cked
));

7053 
	e∆80211_bss_£À˘_©å
 {

7054 
	m__NL80211_BSS_SELECT_ATTR_INVALID
,

7055 
	mNL80211_BSS_SELECT_ATTR_RSSI
,

7056 
	mNL80211_BSS_SELECT_ATTR_BAND_PREF
,

7057 
	mNL80211_BSS_SELECT_ATTR_RSSI_ADJUST
,

7060 
	m__NL80211_BSS_SELECT_ATTR_AFTER_LAST
,

7061 
	mNL80211_BSS_SELECT_ATTR_MAX
 = 
__NL80211_BSS_SELECT_ATTR_AFTER_LAST
 - 1

7075 
	e∆80211_«n_fun˘i⁄_ty≥
 {

7076 
	mNL80211_NAN_FUNC_PUBLISH
,

7077 
	mNL80211_NAN_FUNC_SUBSCRIBE
,

7078 
	mNL80211_NAN_FUNC_FOLLOW_UP
,

7081 
	m__NL80211_NAN_FUNC_TYPE_AFTER_LAST
,

7082 
	mNL80211_NAN_FUNC_MAX_TYPE
 = 
__NL80211_NAN_FUNC_TYPE_AFTER_LAST
 - 1,

7093 
	e∆80211_«n_publish_ty≥
 {

7094 
	mNL80211_NAN_SOLICITED_PUBLISH
 = 1 << 0,

7095 
	mNL80211_NAN_UNSOLICITED_PUBLISH
 = 1 << 1,

7107 
	e∆80211_«n_func_ãrm_ªas⁄
 {

7108 
	mNL80211_NAN_FUNC_TERM_REASON_USER_REQUEST
,

7109 
	mNL80211_NAN_FUNC_TERM_REASON_TTL_EXPIRED
,

7110 
	mNL80211_NAN_FUNC_TERM_REASON_ERROR
,

7113 
	#NL80211_NAN_FUNC_SERVICE_ID_LEN
 6

	)

7114 
	#NL80211_NAN_FUNC_SERVICE_SPEC_INFO_MAX_LEN
 0xff

	)

7115 
	#NL80211_NAN_FUNC_SRF_MAX_LEN
 0xff

	)

7159 
	e∆80211_«n_func_©åibuãs
 {

7160 
	m__NL80211_NAN_FUNC_INVALID
,

7161 
	mNL80211_NAN_FUNC_TYPE
,

7162 
	mNL80211_NAN_FUNC_SERVICE_ID
,

7163 
	mNL80211_NAN_FUNC_PUBLISH_TYPE
,

7164 
	mNL80211_NAN_FUNC_PUBLISH_BCAST
,

7165 
	mNL80211_NAN_FUNC_SUBSCRIBE_ACTIVE
,

7166 
	mNL80211_NAN_FUNC_FOLLOW_UP_ID
,

7167 
	mNL80211_NAN_FUNC_FOLLOW_UP_REQ_ID
,

7168 
	mNL80211_NAN_FUNC_FOLLOW_UP_DEST
,

7169 
	mNL80211_NAN_FUNC_CLOSE_RANGE
,

7170 
	mNL80211_NAN_FUNC_TTL
,

7171 
	mNL80211_NAN_FUNC_SERVICE_INFO
,

7172 
	mNL80211_NAN_FUNC_SRF
,

7173 
	mNL80211_NAN_FUNC_RX_MATCH_FILTER
,

7174 
	mNL80211_NAN_FUNC_TX_MATCH_FILTER
,

7175 
	mNL80211_NAN_FUNC_INSTANCE_ID
,

7176 
	mNL80211_NAN_FUNC_TERM_REASON
,

7179 
	mNUM_NL80211_NAN_FUNC_ATTR
,

7180 
	mNL80211_NAN_FUNC_ATTR_MAX
 = 
NUM_NL80211_NAN_FUNC_ATTR
 - 1

7198 
	e∆80211_«n_§f_©åibuãs
 {

7199 
	m__NL80211_NAN_SRF_INVALID
,

7200 
	mNL80211_NAN_SRF_INCLUDE
,

7201 
	mNL80211_NAN_SRF_BF
,

7202 
	mNL80211_NAN_SRF_BF_IDX
,

7203 
	mNL80211_NAN_SRF_MAC_ADDRS
,

7206 
	mNUM_NL80211_NAN_SRF_ATTR
,

7207 
	mNL80211_NAN_SRF_ATTR_MAX
 = 
NUM_NL80211_NAN_SRF_ATTR
 - 1,

7223 
	e∆80211_«n_m©ch_©åibuãs
 {

7224 
	m__NL80211_NAN_MATCH_INVALID
,

7225 
	mNL80211_NAN_MATCH_FUNC_LOCAL
,

7226 
	mNL80211_NAN_MATCH_FUNC_PEER
,

7229 
	mNUM_NL80211_NAN_MATCH_ATTR
,

7230 
	mNL80211_NAN_MATCH_ATTR_MAX
 = 
NUM_NL80211_NAN_MATCH_ATTR
 - 1

7239 
	e∆80211_exã∫Æ_auth_a˘i⁄
 {

7240 
	mNL80211_EXTERNAL_AUTH_START
,

7241 
	mNL80211_EXTERNAL_AUTH_ABORT
,

7258 
	e∆80211_·m_ª•⁄dî_©åibuãs
 {

7259 
	m__NL80211_FTM_RESP_ATTR_INVALID
,

7261 
	mNL80211_FTM_RESP_ATTR_ENABLED
,

7262 
	mNL80211_FTM_RESP_ATTR_LCI
,

7263 
	mNL80211_FTM_RESP_ATTR_CIVICLOC
,

7266 
	m__NL80211_FTM_RESP_ATTR_LAST
,

7267 
	mNL80211_FTM_RESP_ATTR_MAX
 = 
__NL80211_FTM_RESP_ATTR_LAST
 - 1,

7298 
	e∆80211_·m_ª•⁄dî_°©s
 {

7299 
	m__NL80211_FTM_STATS_INVALID
,

7300 
	mNL80211_FTM_STATS_SUCCESS_NUM
,

7301 
	mNL80211_FTM_STATS_PARTIAL_NUM
,

7302 
	mNL80211_FTM_STATS_FAILED_NUM
,

7303 
	mNL80211_FTM_STATS_ASAP_NUM
,

7304 
	mNL80211_FTM_STATS_NON_ASAP_NUM
,

7305 
	mNL80211_FTM_STATS_TOTAL_DURATION_MSEC
,

7306 
	mNL80211_FTM_STATS_UNKNOWN_TRIGGERS_NUM
,

7307 
	mNL80211_FTM_STATS_RESCHEDULE_REQUESTS_NUM
,

7308 
	mNL80211_FTM_STATS_OUT_OF_WINDOW_TRIGGERS_NUM
,

7309 
	mNL80211_FTM_STATS_PAD
,

7312 
	m__NL80211_FTM_STATS_AFTER_LAST
,

7313 
	mNL80211_FTM_STATS_MAX
 = 
__NL80211_FTM_STATS_AFTER_LAST
 - 1

7324 
	e∆80211_¥ómbÀ
 {

7325 
	mNL80211_PREAMBLE_LEGACY
,

7326 
	mNL80211_PREAMBLE_HT
,

7327 
	mNL80211_PREAMBLE_VHT
,

7328 
	mNL80211_PREAMBLE_DMG
,

7329 
	mNL80211_PREAMBLE_HE
,

7342 
	e∆80211_≥î_mósuªmít_ty≥
 {

7343 
	mNL80211_PMSR_TYPE_INVALID
,

7345 
	mNL80211_PMSR_TYPE_FTM
,

7347 
	mNUM_NL80211_PMSR_TYPES
,

7348 
	mNL80211_PMSR_TYPE_MAX
 = 
NUM_NL80211_PMSR_TYPES
 - 1

7359 
	e∆80211_≥î_mósuªmít_°©us
 {

7360 
	mNL80211_PMSR_STATUS_SUCCESS
,

7361 
	mNL80211_PMSR_STATUS_REFUSED
,

7362 
	mNL80211_PMSR_STATUS_TIMEOUT
,

7363 
	mNL80211_PMSR_STATUS_FAILURE
,

7379 
	e∆80211_≥î_mósuªmít_ªq
 {

7380 
	m__NL80211_PMSR_REQ_ATTR_INVALID
,

7382 
	mNL80211_PMSR_REQ_ATTR_DATA
,

7383 
	mNL80211_PMSR_REQ_ATTR_GET_AP_TSF
,

7386 
	mNUM_NL80211_PMSR_REQ_ATTRS
,

7387 
	mNL80211_PMSR_REQ_ATTR_MAX
 = 
NUM_NL80211_PMSR_REQ_ATTRS
 - 1

7415 
	e∆80211_≥î_mósuªmít_ª•
 {

7416 
	m__NL80211_PMSR_RESP_ATTR_INVALID
,

7418 
	mNL80211_PMSR_RESP_ATTR_DATA
,

7419 
	mNL80211_PMSR_RESP_ATTR_STATUS
,

7420 
	mNL80211_PMSR_RESP_ATTR_HOST_TIME
,

7421 
	mNL80211_PMSR_RESP_ATTR_AP_TSF
,

7422 
	mNL80211_PMSR_RESP_ATTR_FINAL
,

7423 
	mNL80211_PMSR_RESP_ATTR_PAD
,

7426 
	mNUM_NL80211_PMSR_RESP_ATTRS
,

7427 
	mNL80211_PMSR_RESP_ATTR_MAX
 = 
NUM_NL80211_PMSR_RESP_ATTRS
 - 1

7447 
	e∆80211_≥î_mósuªmít_≥î_©ås
 {

7448 
	m__NL80211_PMSR_PEER_ATTR_INVALID
,

7450 
	mNL80211_PMSR_PEER_ATTR_ADDR
,

7451 
	mNL80211_PMSR_PEER_ATTR_CHAN
,

7452 
	mNL80211_PMSR_PEER_ATTR_REQ
,

7453 
	mNL80211_PMSR_PEER_ATTR_RESP
,

7456 
	mNUM_NL80211_PMSR_PEER_ATTRS
,

7457 
	mNL80211_PMSR_PEER_ATTR_MAX
 = 
NUM_NL80211_PMSR_PEER_ATTRS
 - 1,

7484 
	e∆80211_≥î_mósuªmít_©ås
 {

7485 
	m__NL80211_PMSR_ATTR_INVALID
,

7487 
	mNL80211_PMSR_ATTR_MAX_PEERS
,

7488 
	mNL80211_PMSR_ATTR_REPORT_AP_TSF
,

7489 
	mNL80211_PMSR_ATTR_RANDOMIZE_MAC_ADDR
,

7490 
	mNL80211_PMSR_ATTR_TYPE_CAPA
,

7491 
	mNL80211_PMSR_ATTR_PEERS
,

7494 
	mNUM_NL80211_PMSR_ATTR
,

7495 
	mNL80211_PMSR_ATTR_MAX
 = 
NUM_NL80211_PMSR_ATTR
 - 1

7530 
	e∆80211_≥î_mósuªmít_·m_ˇ∑
 {

7531 
	m__NL80211_PMSR_FTM_CAPA_ATTR_INVALID
,

7533 
	mNL80211_PMSR_FTM_CAPA_ATTR_ASAP
,

7534 
	mNL80211_PMSR_FTM_CAPA_ATTR_NON_ASAP
,

7535 
	mNL80211_PMSR_FTM_CAPA_ATTR_REQ_LCI
,

7536 
	mNL80211_PMSR_FTM_CAPA_ATTR_REQ_CIVICLOC
,

7537 
	mNL80211_PMSR_FTM_CAPA_ATTR_PREAMBLES
,

7538 
	mNL80211_PMSR_FTM_CAPA_ATTR_BANDWIDTHS
,

7539 
	mNL80211_PMSR_FTM_CAPA_ATTR_MAX_BURSTS_EXPONENT
,

7540 
	mNL80211_PMSR_FTM_CAPA_ATTR_MAX_FTMS_PER_BURST
,

7541 
	mNL80211_PMSR_FTM_CAPA_ATTR_TRIGGER_BASED
,

7542 
	mNL80211_PMSR_FTM_CAPA_ATTR_NON_TRIGGER_BASED
,

7545 
	mNUM_NL80211_PMSR_FTM_CAPA_ATTR
,

7546 
	mNL80211_PMSR_FTM_CAPA_ATTR_MAX
 = 
NUM_NL80211_PMSR_FTM_CAPA_ATTR
 - 1

7596 
	e∆80211_≥î_mósuªmít_·m_ªq
 {

7597 
	m__NL80211_PMSR_FTM_REQ_ATTR_INVALID
,

7599 
	mNL80211_PMSR_FTM_REQ_ATTR_ASAP
,

7600 
	mNL80211_PMSR_FTM_REQ_ATTR_PREAMBLE
,

7601 
	mNL80211_PMSR_FTM_REQ_ATTR_NUM_BURSTS_EXP
,

7602 
	mNL80211_PMSR_FTM_REQ_ATTR_BURST_PERIOD
,

7603 
	mNL80211_PMSR_FTM_REQ_ATTR_BURST_DURATION
,

7604 
	mNL80211_PMSR_FTM_REQ_ATTR_FTMS_PER_BURST
,

7605 
	mNL80211_PMSR_FTM_REQ_ATTR_NUM_FTMR_RETRIES
,

7606 
	mNL80211_PMSR_FTM_REQ_ATTR_REQUEST_LCI
,

7607 
	mNL80211_PMSR_FTM_REQ_ATTR_REQUEST_CIVICLOC
,

7608 
	mNL80211_PMSR_FTM_REQ_ATTR_TRIGGER_BASED
,

7609 
	mNL80211_PMSR_FTM_REQ_ATTR_NON_TRIGGER_BASED
,

7610 
	mNL80211_PMSR_FTM_REQ_ATTR_LMR_FEEDBACK
,

7611 
	mNL80211_PMSR_FTM_REQ_ATTR_BSS_COLOR
,

7614 
	mNUM_NL80211_PMSR_FTM_REQ_ATTR
,

7615 
	mNL80211_PMSR_FTM_REQ_ATTR_MAX
 = 
NUM_NL80211_PMSR_FTM_REQ_ATTR
 - 1

7634 
	e∆80211_≥î_mósuªmít_·m_Áûuª_ªas⁄s
 {

7635 
	mNL80211_PMSR_FTM_FAILURE_UNSPECIFIED
,

7636 
	mNL80211_PMSR_FTM_FAILURE_NO_RESPONSE
,

7637 
	mNL80211_PMSR_FTM_FAILURE_REJECTED
,

7638 
	mNL80211_PMSR_FTM_FAILURE_WRONG_CHANNEL
,

7639 
	mNL80211_PMSR_FTM_FAILURE_PEER_NOT_CAPABLE
,

7640 
	mNL80211_PMSR_FTM_FAILURE_INVALID_TIMESTAMP
,

7641 
	mNL80211_PMSR_FTM_FAILURE_PEER_BUSY
,

7642 
	mNL80211_PMSR_FTM_FAILURE_BAD_CHANGED_PARAMS
,

7700 
	e∆80211_≥î_mósuªmít_·m_ª•
 {

7701 
	m__NL80211_PMSR_FTM_RESP_ATTR_INVALID
,

7703 
	mNL80211_PMSR_FTM_RESP_ATTR_FAIL_REASON
,

7704 
	mNL80211_PMSR_FTM_RESP_ATTR_BURST_INDEX
,

7705 
	mNL80211_PMSR_FTM_RESP_ATTR_NUM_FTMR_ATTEMPTS
,

7706 
	mNL80211_PMSR_FTM_RESP_ATTR_NUM_FTMR_SUCCESSES
,

7707 
	mNL80211_PMSR_FTM_RESP_ATTR_BUSY_RETRY_TIME
,

7708 
	mNL80211_PMSR_FTM_RESP_ATTR_NUM_BURSTS_EXP
,

7709 
	mNL80211_PMSR_FTM_RESP_ATTR_BURST_DURATION
,

7710 
	mNL80211_PMSR_FTM_RESP_ATTR_FTMS_PER_BURST
,

7711 
	mNL80211_PMSR_FTM_RESP_ATTR_RSSI_AVG
,

7712 
	mNL80211_PMSR_FTM_RESP_ATTR_RSSI_SPREAD
,

7713 
	mNL80211_PMSR_FTM_RESP_ATTR_TX_RATE
,

7714 
	mNL80211_PMSR_FTM_RESP_ATTR_RX_RATE
,

7715 
	mNL80211_PMSR_FTM_RESP_ATTR_RTT_AVG
,

7716 
	mNL80211_PMSR_FTM_RESP_ATTR_RTT_VARIANCE
,

7717 
	mNL80211_PMSR_FTM_RESP_ATTR_RTT_SPREAD
,

7718 
	mNL80211_PMSR_FTM_RESP_ATTR_DIST_AVG
,

7719 
	mNL80211_PMSR_FTM_RESP_ATTR_DIST_VARIANCE
,

7720 
	mNL80211_PMSR_FTM_RESP_ATTR_DIST_SPREAD
,

7721 
	mNL80211_PMSR_FTM_RESP_ATTR_LCI
,

7722 
	mNL80211_PMSR_FTM_RESP_ATTR_CIVICLOC
,

7723 
	mNL80211_PMSR_FTM_RESP_ATTR_PAD
,

7726 
	mNUM_NL80211_PMSR_FTM_RESP_ATTR
,

7727 
	mNL80211_PMSR_FTM_RESP_ATTR_MAX
 = 
NUM_NL80211_PMSR_FTM_RESP_ATTR
 - 1

7747 
	e∆80211_obss_pd_©åibuãs
 {

7748 
	m__NL80211_HE_OBSS_PD_ATTR_INVALID
,

7750 
	mNL80211_HE_OBSS_PD_ATTR_MIN_OFFSET
,

7751 
	mNL80211_HE_OBSS_PD_ATTR_MAX_OFFSET
,

7752 
	mNL80211_HE_OBSS_PD_ATTR_NON_SRG_MAX_OFFSET
,

7753 
	mNL80211_HE_OBSS_PD_ATTR_BSS_COLOR_BITMAP
,

7754 
	mNL80211_HE_OBSS_PD_ATTR_PARTIAL_BSSID_BITMAP
,

7755 
	mNL80211_HE_OBSS_PD_ATTR_SR_CTRL
,

7758 
	m__NL80211_HE_OBSS_PD_ATTR_LAST
,

7759 
	mNL80211_HE_OBSS_PD_ATTR_MAX
 = 
__NL80211_HE_OBSS_PD_ATTR_LAST
 - 1,

7773 
	e∆80211_bss_cﬁ‹_©åibuãs
 {

7774 
	m__NL80211_HE_BSS_COLOR_ATTR_INVALID
,

7776 
	mNL80211_HE_BSS_COLOR_ATTR_COLOR
,

7777 
	mNL80211_HE_BSS_COLOR_ATTR_DISABLED
,

7778 
	mNL80211_HE_BSS_COLOR_ATTR_PARTIAL
,

7781 
	m__NL80211_HE_BSS_COLOR_ATTR_LAST
,

7782 
	mNL80211_HE_BSS_COLOR_ATTR_MAX
 = 
__NL80211_HE_BSS_COLOR_ATTR_LAST
 - 1,

7798 
	e∆80211_i·y≥_akm_©åibuãs
 {

7799 
	m__NL80211_IFTYPE_AKM_ATTR_INVALID
,

7801 
	mNL80211_IFTYPE_AKM_ATTR_IFTYPES
,

7802 
	mNL80211_IFTYPE_AKM_ATTR_SUITES
,

7805 
	m__NL80211_IFTYPE_AKM_ATTR_LAST
,

7806 
	mNL80211_IFTYPE_AKM_ATTR_MAX
 = 
__NL80211_IFTYPE_AKM_ATTR_LAST
 - 1,

7825 
	e∆80211_fûs_discovîy_©åibuãs
 {

7826 
	m__NL80211_FILS_DISCOVERY_ATTR_INVALID
,

7828 
	mNL80211_FILS_DISCOVERY_ATTR_INT_MIN
,

7829 
	mNL80211_FILS_DISCOVERY_ATTR_INT_MAX
,

7830 
	mNL80211_FILS_DISCOVERY_ATTR_TMPL
,

7833 
	m__NL80211_FILS_DISCOVERY_ATTR_LAST
,

7834 
	mNL80211_FILS_DISCOVERY_ATTR_MAX
 = 
__NL80211_FILS_DISCOVERY_ATTR_LAST
 - 1

7841 
	#NL80211_FILS_DISCOVERY_TMPL_MIN_LEN
 42

	)

7859 
	e∆80211_unsﬁ_bˇ°_¥obe_ª•_©åibuãs
 {

7860 
	m__NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_INVALID
,

7862 
	mNL80211_UNSOL_BCAST_PROBE_RESP_ATTR_INT
,

7863 
	mNL80211_UNSOL_BCAST_PROBE_RESP_ATTR_TMPL
,

7866 
	m__NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_LAST
,

7867 
	mNL80211_UNSOL_BCAST_PROBE_RESP_ATTR_MAX
 =

7868 
__NL80211_UNSOL_BCAST_PROBE_RESP_ATTR_LAST
 - 1

7883 
	e∆80211_ße_pwe_mech™ism
 {

7884 
	mNL80211_SAE_PWE_UNSPECIFIED
,

7885 
	mNL80211_SAE_PWE_HUNT_AND_PECK
,

7886 
	mNL80211_SAE_PWE_HASH_TO_ELEMENT
,

7887 
	mNL80211_SAE_PWE_BOTH
,

7897 
	e∆80211_ßr_ty≥
 {

7898 
	mNL80211_SAR_TYPE_POWER
,

7903 
	mNUM_NL80211_SAR_TYPE
,

7929 
	e∆80211_ßr_©ås
 {

7930 
	m__NL80211_SAR_ATTR_INVALID
,

7932 
	mNL80211_SAR_ATTR_TYPE
,

7933 
	mNL80211_SAR_ATTR_SPECS
,

7935 
	m__NL80211_SAR_ATTR_LAST
,

7936 
	mNL80211_SAR_ATTR_MAX
 = 
__NL80211_SAR_ATTR_LAST
 - 1,

7974 
	e∆80211_ßr_•ecs_©ås
 {

7975 
	m__NL80211_SAR_ATTR_SPECS_INVALID
,

7977 
	mNL80211_SAR_ATTR_SPECS_POWER
,

7978 
	mNL80211_SAR_ATTR_SPECS_RANGE_INDEX
,

7979 
	mNL80211_SAR_ATTR_SPECS_START_FREQ
,

7980 
	mNL80211_SAR_ATTR_SPECS_END_FREQ
,

7982 
	m__NL80211_SAR_ATTR_SPECS_LAST
,

7983 
	mNL80211_SAR_ATTR_SPECS_MAX
 = 
__NL80211_SAR_ATTR_SPECS_LAST
 - 1,

8028 
	e∆80211_mbssid_c⁄fig_©åibuãs
 {

8029 
	m__NL80211_MBSSID_CONFIG_ATTR_INVALID
,

8031 
	mNL80211_MBSSID_CONFIG_ATTR_MAX_INTERFACES
,

8032 
	mNL80211_MBSSID_CONFIG_ATTR_MAX_EMA_PROFILE_PERIODICITY
,

8033 
	mNL80211_MBSSID_CONFIG_ATTR_INDEX
,

8034 
	mNL80211_MBSSID_CONFIG_ATTR_TX_IFINDEX
,

8035 
	mNL80211_MBSSID_CONFIG_ATTR_EMA
,

8038 
	m__NL80211_MBSSID_CONFIG_ATTR_LAST
,

8039 
	mNL80211_MBSSID_CONFIG_ATTR_MAX
 = 
__NL80211_MBSSID_CONFIG_ATTR_LAST
 - 1,

8053 
	e∆80211_≠_£âögs_Êags
 {

8054 
	mNL80211_AP_SETTINGS_EXTERNAL_AUTH_SUPPORT
 = 1 << 0,

8055 
	mNL80211_AP_SETTINGS_SA_QUERY_OFFLOAD_SUPPORT
 = 1 << 1,

8075 
	e∆80211_wùhy_ødio_©ås
 {

8076 
	m__NL80211_WIPHY_RADIO_ATTR_INVALID
,

8078 
	mNL80211_WIPHY_RADIO_ATTR_INDEX
,

8079 
	mNL80211_WIPHY_RADIO_ATTR_FREQ_RANGE
,

8080 
	mNL80211_WIPHY_RADIO_ATTR_INTERFACE_COMBINATION
,

8081 
	mNL80211_WIPHY_RADIO_ATTR_ANTENNA_MASK
,

8084 
	m__NL80211_WIPHY_RADIO_ATTR_LAST
,

8085 
	mNL80211_WIPHY_RADIO_ATTR_MAX
 = 
__NL80211_WIPHY_RADIO_ATTR_LAST
 - 1,

8101 
	e∆80211_wùhy_ødio_‰eq_ønge
 {

8102 
	m__NL80211_WIPHY_RADIO_FREQ_ATTR_INVALID
,

8104 
	mNL80211_WIPHY_RADIO_FREQ_ATTR_START
,

8105 
	mNL80211_WIPHY_RADIO_FREQ_ATTR_END
,

8107 
	m__NL80211_WIPHY_RADIO_FREQ_ATTR_LAST
,

8108 
	mNL80211_WIPHY_RADIO_FREQ_ATTR_MAX
 = 
__NL80211_WIPHY_RADIO_FREQ_ATTR_LAST
 - 1,

	@/usr/include/linux/param.h

2 #i‚de‡
_LINUX_PARAM_H


3 
	#_LINUX_PARAM_H


	)

5 
	~<asm/∑øm.h
>

	@/usr/include/linux/pkt_sched.h

2 #i‚de‡
__LINUX_PKT_SCHED_H


3 
	#__LINUX_PKT_SCHED_H


	)

5 
	~<löux/c⁄°.h
>

6 
	~<löux/ty≥s.h
>

21 
	#TC_PRIO_BESTEFFORT
 0

	)

22 
	#TC_PRIO_FILLER
 1

	)

23 
	#TC_PRIO_BULK
 2

	)

24 
	#TC_PRIO_INTERACTIVE_BULK
 4

	)

25 
	#TC_PRIO_INTERACTIVE
 6

	)

26 
	#TC_PRIO_CONTROL
 7

	)

28 
	#TC_PRIO_MAX
 15

	)

34 
	stc_°©s
 {

35 
__u64
 
	mbyãs
;

36 
__u32
 
	m∑ckës
;

37 
__u32
 
	mdr›s
;

38 
__u32
 
	movîlimôs
;

40 
__u32
 
	mbps
;

41 
__u32
 
	mµs
;

42 
__u32
 
	mqÀn
;

43 
__u32
 
	mbacklog
;

46 
	stc_e°im©‹
 {

47 sig√d 
	möãrvÆ
;

48 
	mewma_log
;

68 
	#TC_H_MAJ_MASK
 (0xFFFF0000U)

	)

69 
	#TC_H_MIN_MASK
 (0x0000FFFFU)

	)

70 
	#TC_H_MAJ
(
h
Ë((h)&
TC_H_MAJ_MASK
)

	)

71 
	#TC_H_MIN
(
h
Ë((h)&
TC_H_MIN_MASK
)

	)

72 
	#TC_H_MAKE
(
maj
,
mö
Ë(((maj)&
TC_H_MAJ_MASK
)|((mö)&
TC_H_MIN_MASK
))

	)

74 
	#TC_H_UNSPEC
 (0U)

	)

75 
	#TC_H_ROOT
 (0xFFFFFFFFU)

	)

76 
	#TC_H_INGRESS
 (0xFFFFFFF1U)

	)

77 
	#TC_H_CLSACT
 
TC_H_INGRESS


	)

79 
	#TC_H_MIN_PRIORITY
 0xFFE0U

	)

80 
	#TC_H_MIN_INGRESS
 0xFFF2U

	)

81 
	#TC_H_MIN_EGRESS
 0xFFF3U

	)

84 
	etc_lök_œyî
 {

85 
	mTC_LINKLAYER_UNAWARE
,

86 
	mTC_LINKLAYER_ETHERNET
,

87 
	mTC_LINKLAYER_ATM
,

89 
	#TC_LINKLAYER_MASK
 0x0F

	)

91 
	stc_øã•ec
 {

92 
	m˚Œ_log
;

93 
__u8
 
	mlökœyî
;

94 
	movîhód
;

95 
	m˚Œ_Æign
;

96 
	mmpu
;

97 
__u32
 
	møã
;

100 
	#TC_RTAB_SIZE
 1024

	)

102 
	stc_size•ec
 {

103 
	m˚Œ_log
;

104 
	msize_log
;

105 
	m˚Œ_Æign
;

106 
	movîhód
;

107 
	mlökœyî
;

108 
	mmpu
;

109 
	mmtu
;

110 
	mtsize
;

114 
	mTCA_STAB_UNSPEC
,

115 
	mTCA_STAB_BASE
,

116 
	mTCA_STAB_DATA
,

117 
	m__TCA_STAB_MAX


120 
	#TCA_STAB_MAX
 (
__TCA_STAB_MAX
 - 1)

	)

124 
	stc_fifo_q›t
 {

125 
__u32
 
	mlimô
;

137 
	#SKBPRIO_MAX_PRIORITY
 64

	)

139 
	stc_skb¥io_q›t
 {

140 
__u32
 
	mlimô
;

145 
	#TCQ_PRIO_BANDS
 16

	)

146 
	#TCQ_MIN_PRIO_BANDS
 2

	)

148 
	stc_¥io_q›t
 {

149 
	mb™ds
;

150 
__u8
 
	m¥iom≠
[
TC_PRIO_MAX
+1];

155 
	stc_mu…iq_q›t
 {

156 
__u16
 
	mb™ds
;

157 
__u16
 
	mmax_b™ds
;

162 
	#TCQ_PLUG_BUFFER
 0

	)

163 
	#TCQ_PLUG_RELEASE_ONE
 1

	)

164 
	#TCQ_PLUG_RELEASE_INDEFINITE
 2

	)

165 
	#TCQ_PLUG_LIMIT
 3

	)

167 
	stc_∂ug_q›t
 {

177 
	ma˘i⁄
;

178 
__u32
 
	mlimô
;

183 
	stc_tbf_q›t
 {

184 
tc_øã•ec
 
	møã
;

185 
tc_øã•ec
 
	m≥akøã
;

186 
__u32
 
	mlimô
;

187 
__u32
 
	mbuf„r
;

188 
__u32
 
	mmtu
;

192 
	mTCA_TBF_UNSPEC
,

193 
	mTCA_TBF_PARMS
,

194 
	mTCA_TBF_RTAB
,

195 
	mTCA_TBF_PTAB
,

196 
	mTCA_TBF_RATE64
,

197 
	mTCA_TBF_PRATE64
,

198 
	mTCA_TBF_BURST
,

199 
	mTCA_TBF_PBURST
,

200 
	mTCA_TBF_PAD
,

201 
	m__TCA_TBF_MAX
,

204 
	#TCA_TBF_MAX
 (
__TCA_TBF_MAX
 - 1)

	)

213 
	stc_sfq_q›t
 {

214 
	mqu™tum
;

215 
	m≥πurb_≥riod
;

216 
__u32
 
	mlimô
;

217 
	mdivis‹
;

218 
	mÊows
;

221 
	stc_sfqªd_°©s
 {

222 
__u32
 
	m¥ob_dr›
;

223 
__u32
 
	mf‹˚d_dr›
;

224 
__u32
 
	m¥ob_m¨k
;

225 
__u32
 
	mf‹˚d_m¨k
;

226 
__u32
 
	m¥ob_m¨k_hód
;

227 
__u32
 
	mf‹˚d_m¨k_hód
;

230 
	stc_sfq_q›t_v1
 {

231 
tc_sfq_q›t
 
	mv0
;

232 
	mdïth
;

233 
	mhóddr›
;

235 
__u32
 
	mlimô
;

236 
__u32
 
	mqth_mö
;

237 
__u32
 
	mqth_max
;

238 
	mWlog
;

239 
	mPlog
;

240 
	mS˚Œ_log
;

241 
	mÊags
;

242 
__u32
 
	mmax_P
;

244 
tc_sfqªd_°©s
 
	m°©s
;

248 
	stc_sfq_x°©s
 {

249 
__s32
 
	mÆlŸ
;

255 
	mTCA_RED_UNSPEC
,

256 
	mTCA_RED_PARMS
,

257 
	mTCA_RED_STAB
,

258 
	mTCA_RED_MAX_P
,

259 
	mTCA_RED_FLAGS
,

260 
	mTCA_RED_EARLY_DROP_BLOCK
,

261 
	mTCA_RED_MARK_BLOCK
,

262 
	m__TCA_RED_MAX
,

265 
	#TCA_RED_MAX
 (
__TCA_RED_MAX
 - 1)

	)

267 
	stc_ªd_q›t
 {

268 
__u32
 
	mlimô
;

269 
__u32
 
	mqth_mö
;

270 
__u32
 
	mqth_max
;

271 
	mWlog
;

272 
	mPlog
;

273 
	mS˚Œ_log
;

287 
	mÊags
;

288 
	#TC_RED_ECN
 1

	)

289 
	#TC_RED_HARDDROP
 2

	)

290 
	#TC_RED_ADAPTATIVE
 4

	)

291 
	#TC_RED_NODROP
 8

	)

294 
	#TC_RED_HISTORIC_FLAGS
 (
TC_RED_ECN
 | 
TC_RED_HARDDROP
 | 
TC_RED_ADAPTATIVE
)

	)

296 
	stc_ªd_x°©s
 {

297 
__u32
 
	móæy
;

298 
__u32
 
	mpdr›
;

299 
__u32
 
	mŸhî
;

300 
__u32
 
	mm¨ked
;

305 
	#MAX_DPs
 16

	)

308 
	mTCA_GRED_UNSPEC
,

309 
	mTCA_GRED_PARMS
,

310 
	mTCA_GRED_STAB
,

311 
	mTCA_GRED_DPS
,

312 
	mTCA_GRED_MAX_P
,

313 
	mTCA_GRED_LIMIT
,

314 
	mTCA_GRED_VQ_LIST
,

315 
	m__TCA_GRED_MAX
,

318 
	#TCA_GRED_MAX
 (
__TCA_GRED_MAX
 - 1)

	)

321 
	mTCA_GRED_VQ_ENTRY_UNSPEC
,

322 
	mTCA_GRED_VQ_ENTRY
,

323 
	m__TCA_GRED_VQ_ENTRY_MAX
,

325 
	#TCA_GRED_VQ_ENTRY_MAX
 (
__TCA_GRED_VQ_ENTRY_MAX
 - 1)

	)

328 
	mTCA_GRED_VQ_UNSPEC
,

329 
	mTCA_GRED_VQ_PAD
,

330 
	mTCA_GRED_VQ_DP
,

331 
	mTCA_GRED_VQ_STAT_BYTES
,

332 
	mTCA_GRED_VQ_STAT_PACKETS
,

333 
	mTCA_GRED_VQ_STAT_BACKLOG
,

334 
	mTCA_GRED_VQ_STAT_PROB_DROP
,

335 
	mTCA_GRED_VQ_STAT_PROB_MARK
,

336 
	mTCA_GRED_VQ_STAT_FORCED_DROP
,

337 
	mTCA_GRED_VQ_STAT_FORCED_MARK
,

338 
	mTCA_GRED_VQ_STAT_PDROP
,

339 
	mTCA_GRED_VQ_STAT_OTHER
,

340 
	mTCA_GRED_VQ_FLAGS
,

341 
	m__TCA_GRED_VQ_MAX


344 
	#TCA_GRED_VQ_MAX
 (
__TCA_GRED_VQ_MAX
 - 1)

	)

346 
	stc_gªd_q›t
 {

347 
__u32
 
	mlimô
;

348 
__u32
 
	mqth_mö
;

349 
__u32
 
	mqth_max
;

350 
__u32
 
	mDP
;

351 
__u32
 
	mbacklog
;

352 
__u32
 
	mqave
;

353 
__u32
 
	mf‹˚d
;

354 
__u32
 
	móæy
;

355 
__u32
 
	mŸhî
;

356 
__u32
 
	mpdr›
;

357 
__u8
 
	mWlog
;

358 
__u8
 
	mPlog
;

359 
__u8
 
	mS˚Œ_log
;

360 
__u8
 
	m¥io
;

361 
__u32
 
	m∑ckës
;

362 
__u32
 
	mbyãsö
;

366 
	stc_gªd_s›t
 {

367 
__u32
 
	mDPs
;

368 
__u32
 
	mdef_DP
;

369 
__u8
 
	mgrio
;

370 
__u8
 
	mÊags
;

371 
__u16
 
	m∑d1
;

377 
	mTCA_CHOKE_UNSPEC
,

378 
	mTCA_CHOKE_PARMS
,

379 
	mTCA_CHOKE_STAB
,

380 
	mTCA_CHOKE_MAX_P
,

381 
	m__TCA_CHOKE_MAX
,

384 
	#TCA_CHOKE_MAX
 (
__TCA_CHOKE_MAX
 - 1)

	)

386 
	stc_choke_q›t
 {

387 
__u32
 
	mlimô
;

388 
__u32
 
	mqth_mö
;

389 
__u32
 
	mqth_max
;

390 
	mWlog
;

391 
	mPlog
;

392 
	mS˚Œ_log
;

393 
	mÊags
;

396 
	stc_choke_x°©s
 {

397 
__u32
 
	móæy
;

398 
__u32
 
	mpdr›
;

399 
__u32
 
	mŸhî
;

400 
__u32
 
	mm¨ked
;

401 
__u32
 
	mm©ched
;

405 
	#TC_HTB_NUMPRIO
 8

	)

406 
	#TC_HTB_MAXDEPTH
 8

	)

407 
	#TC_HTB_PROTOVER
 3

	)

409 
	stc_htb_›t
 {

410 
tc_øã•ec
 
	møã
;

411 
tc_øã•ec
 
	m˚û
;

412 
__u32
 
	mbuf„r
;

413 
__u32
 
	mcbuf„r
;

414 
__u32
 
	mqu™tum
;

415 
__u32
 
	mÀvñ
;

416 
__u32
 
	m¥io
;

418 
	stc_htb_glob
 {

419 
__u32
 
	mvîsi⁄
;

420 
__u32
 
	møã2qu™tum
;

421 
__u32
 
	mdef˛s
;

422 
__u32
 
	mdebug
;

425 
__u32
 
	mdúe˘_pkts
;

428 
	mTCA_HTB_UNSPEC
,

429 
	mTCA_HTB_PARMS
,

430 
	mTCA_HTB_INIT
,

431 
	mTCA_HTB_CTAB
,

432 
	mTCA_HTB_RTAB
,

433 
	mTCA_HTB_DIRECT_QLEN
,

434 
	mTCA_HTB_RATE64
,

435 
	mTCA_HTB_CEIL64
,

436 
	mTCA_HTB_PAD
,

437 
	mTCA_HTB_OFFLOAD
,

438 
	m__TCA_HTB_MAX
,

441 
	#TCA_HTB_MAX
 (
__TCA_HTB_MAX
 - 1)

	)

443 
	stc_htb_x°©s
 {

444 
__u32
 
	mÀnds
;

445 
__u32
 
	mb‹rows
;

446 
__u32
 
	mgü¡s
;

447 
__s32
 
	mtokís
;

448 
__s32
 
	m˘okís
;

453 
	stc_hfsc_q›t
 {

454 
__u16
 
	mdef˛s
;

457 
	stc_£rvi˚_curve
 {

458 
__u32
 
	mm1
;

459 
__u32
 
	md
;

460 
__u32
 
	mm2
;

463 
	stc_hfsc_°©s
 {

464 
__u64
 
	mw‹k
;

465 
__u64
 
	mπw‹k
;

466 
__u32
 
	m≥riod
;

467 
__u32
 
	mÀvñ
;

471 
	mTCA_HFSC_UNSPEC
,

472 
	mTCA_HFSC_RSC
,

473 
	mTCA_HFSC_FSC
,

474 
	mTCA_HFSC_USC
,

475 
	m__TCA_HFSC_MAX
,

478 
	#TCA_HFSC_MAX
 (
__TCA_HFSC_MAX
 - 1)

	)

483 
	mTCA_NETEM_UNSPEC
,

484 
	mTCA_NETEM_CORR
,

485 
	mTCA_NETEM_DELAY_DIST
,

486 
	mTCA_NETEM_REORDER
,

487 
	mTCA_NETEM_CORRUPT
,

488 
	mTCA_NETEM_LOSS
,

489 
	mTCA_NETEM_RATE
,

490 
	mTCA_NETEM_ECN
,

491 
	mTCA_NETEM_RATE64
,

492 
	mTCA_NETEM_PAD
,

493 
	mTCA_NETEM_LATENCY64
,

494 
	mTCA_NETEM_JITTER64
,

495 
	mTCA_NETEM_SLOT
,

496 
	mTCA_NETEM_SLOT_DIST
,

497 
	mTCA_NETEM_PRNG_SEED
,

498 
	m__TCA_NETEM_MAX
,

501 
	#TCA_NETEM_MAX
 (
__TCA_NETEM_MAX
 - 1)

	)

503 
	stc_√ãm_q›t
 {

504 
__u32
 
	mœãncy
;

505 
__u32
 
	mlimô
;

506 
__u32
 
	mloss
;

507 
__u32
 
	mg≠
;

508 
__u32
 
	mdu∂iˇã
;

509 
__u32
 
	mjôãr
;

512 
	stc_√ãm_c‹r
 {

513 
__u32
 
	mdñay_c‹r
;

514 
__u32
 
	mloss_c‹r
;

515 
__u32
 
	mdup_c‹r
;

518 
	stc_√ãm_ª‹dî
 {

519 
__u32
 
	m¥obabûôy
;

520 
__u32
 
	mc‹ªœti⁄
;

523 
	stc_√ãm_c‹ru±
 {

524 
__u32
 
	m¥obabûôy
;

525 
__u32
 
	mc‹ªœti⁄
;

528 
	stc_√ãm_øã
 {

529 
__u32
 
	møã
;

530 
__s32
 
	m∑ckë_ovîhód
;

531 
__u32
 
	m˚Œ_size
;

532 
__s32
 
	m˚Œ_ovîhód
;

535 
	stc_√ãm_¶Ÿ
 {

536 
__s64
 
	mmö_dñay
;

537 
__s64
 
	mmax_dñay
;

538 
__s32
 
	mmax_∑ckës
;

539 
__s32
 
	mmax_byãs
;

540 
__s64
 
	mdi°_dñay
;

541 
__s64
 
	mdi°_jôãr
;

545 
	mNETEM_LOSS_UNSPEC
,

546 
	mNETEM_LOSS_GI
,

547 
	mNETEM_LOSS_GE
,

548 
	m__NETEM_LOSS_MAX


550 
	#NETEM_LOSS_MAX
 (
__NETEM_LOSS_MAX
 - 1)

	)

553 
	stc_√ãm_gimodñ
 {

554 
__u32
 
	mp13
;

555 
__u32
 
	mp31
;

556 
__u32
 
	mp32
;

557 
__u32
 
	mp14
;

558 
__u32
 
	mp23
;

562 
	stc_√ãm_gemodñ
 {

563 
__u32
 
	mp
;

564 
__u32
 
	mr
;

565 
__u32
 
	mh
;

566 
__u32
 
	mk1
;

569 
	#NETEM_DIST_SCALE
 8192

	)

570 
	#NETEM_DIST_MAX
 16384

	)

575 
	mTCA_DRR_UNSPEC
,

576 
	mTCA_DRR_QUANTUM
,

577 
	m__TCA_DRR_MAX


580 
	#TCA_DRR_MAX
 (
__TCA_DRR_MAX
 - 1)

	)

582 
	stc_dº_°©s
 {

583 
__u32
 
	mdeficô
;

587 
	#TC_QOPT_BITMASK
 15

	)

588 
	#TC_QOPT_MAX_QUEUE
 16

	)

591 
	mTC_MQPRIO_HW_OFFLOAD_NONE
,

592 
	mTC_MQPRIO_HW_OFFLOAD_TCS
,

593 
	m__TC_MQPRIO_HW_OFFLOAD_MAX


596 
	#TC_MQPRIO_HW_OFFLOAD_MAX
 (
__TC_MQPRIO_HW_OFFLOAD_MAX
 - 1)

	)

599 
	mTC_MQPRIO_MODE_DCB
,

600 
	mTC_MQPRIO_MODE_CHANNEL
,

601 
	m__TC_MQPRIO_MODE_MAX


604 
	#__TC_MQPRIO_MODE_MAX
 (
__TC_MQPRIO_MODE_MAX
 - 1)

	)

607 
	mTC_MQPRIO_SHAPER_DCB
,

608 
	mTC_MQPRIO_SHAPER_BW_RATE
,

609 
	m__TC_MQPRIO_SHAPER_MAX


612 
	#__TC_MQPRIO_SHAPER_MAX
 (
__TC_MQPRIO_SHAPER_MAX
 - 1)

	)

615 
	mTC_FP_EXPRESS
 = 1,

616 
	mTC_FP_PREEMPTIBLE
 = 2,

619 
	stc_mq¥io_q›t
 {

620 
__u8
 
	mnum_tc
;

621 
__u8
 
	m¥io_tc_m≠
[
TC_QOPT_BITMASK
 + 1];

622 
__u8
 
	mhw
;

623 
__u16
 
	mcou¡
[
TC_QOPT_MAX_QUEUE
];

624 
__u16
 
	moff£t
[
TC_QOPT_MAX_QUEUE
];

627 
	#TC_MQPRIO_F_MODE
 0x1

	)

628 
	#TC_MQPRIO_F_SHAPER
 0x2

	)

629 
	#TC_MQPRIO_F_MIN_RATE
 0x4

	)

630 
	#TC_MQPRIO_F_MAX_RATE
 0x8

	)

633 
	mTCA_MQPRIO_TC_ENTRY_UNSPEC
,

634 
	mTCA_MQPRIO_TC_ENTRY_INDEX
,

635 
	mTCA_MQPRIO_TC_ENTRY_FP
,

638 
	m__TCA_MQPRIO_TC_ENTRY_CNT
,

639 
	mTCA_MQPRIO_TC_ENTRY_MAX
 = (
__TCA_MQPRIO_TC_ENTRY_CNT
 - 1)

643 
	mTCA_MQPRIO_UNSPEC
,

644 
	mTCA_MQPRIO_MODE
,

645 
	mTCA_MQPRIO_SHAPER
,

646 
	mTCA_MQPRIO_MIN_RATE64
,

647 
	mTCA_MQPRIO_MAX_RATE64
,

648 
	mTCA_MQPRIO_TC_ENTRY
,

649 
	m__TCA_MQPRIO_MAX
,

652 
	#TCA_MQPRIO_MAX
 (
__TCA_MQPRIO_MAX
 - 1)

	)

657 
	mTCA_SFB_UNSPEC
,

658 
	mTCA_SFB_PARMS
,

659 
	m__TCA_SFB_MAX
,

662 
	#TCA_SFB_MAX
 (
__TCA_SFB_MAX
 - 1)

	)

667 
	stc_sfb_q›t
 {

668 
__u32
 
	mªhash_öãrvÆ
;

669 
__u32
 
	mw¨mup_time
;

670 
__u32
 
	mmax
;

671 
__u32
 
	mbö_size
;

672 
__u32
 
	mö¸emít
;

673 
__u32
 
	mde¸emít
;

674 
__u32
 
	mlimô
;

675 
__u32
 
	m≥«…y_øã
;

676 
__u32
 
	m≥«…y_bur°
;

679 
	stc_sfb_x°©s
 {

680 
__u32
 
	móæydr›
;

681 
__u32
 
	m≥«…ydr›
;

682 
__u32
 
	mbuckëdr›
;

683 
__u32
 
	mqueuedr›
;

684 
__u32
 
	mchûddr›
;

685 
__u32
 
	mm¨ked
;

686 
__u32
 
	mmaxqÀn
;

687 
__u32
 
	mmax¥ob
;

688 
__u32
 
	mavg¥ob
;

691 
	#SFB_MAX_PROB
 0xFFFF

	)

695 
	mTCA_QFQ_UNSPEC
,

696 
	mTCA_QFQ_WEIGHT
,

697 
	mTCA_QFQ_LMAX
,

698 
	m__TCA_QFQ_MAX


701 
	#TCA_QFQ_MAX
 (
__TCA_QFQ_MAX
 - 1)

	)

703 
	stc_qfq_°©s
 {

704 
__u32
 
	mweight
;

705 
__u32
 
	mlmax
;

711 
	mTCA_CODEL_UNSPEC
,

712 
	mTCA_CODEL_TARGET
,

713 
	mTCA_CODEL_LIMIT
,

714 
	mTCA_CODEL_INTERVAL
,

715 
	mTCA_CODEL_ECN
,

716 
	mTCA_CODEL_CE_THRESHOLD
,

717 
	m__TCA_CODEL_MAX


720 
	#TCA_CODEL_MAX
 (
__TCA_CODEL_MAX
 - 1)

	)

722 
	stc_codñ_x°©s
 {

723 
__u32
 
	mmax∑ckë
;

724 
__u32
 
	mcou¡
;

727 
__u32
 
	mœ°cou¡
;

728 
__u32
 
	mldñay
;

729 
__s32
 
	mdr›_√xt
;

730 
__u32
 
	mdr›_ovîlimô
;

731 
__u32
 
	me˙_m¨k
;

732 
__u32
 
	mdr›pög
;

733 
__u32
 
	m˚_m¨k
;

738 
	#FQ_CODEL_QUANTUM_MAX
 (1 << 20)

	)

741 
	mTCA_FQ_CODEL_UNSPEC
,

742 
	mTCA_FQ_CODEL_TARGET
,

743 
	mTCA_FQ_CODEL_LIMIT
,

744 
	mTCA_FQ_CODEL_INTERVAL
,

745 
	mTCA_FQ_CODEL_ECN
,

746 
	mTCA_FQ_CODEL_FLOWS
,

747 
	mTCA_FQ_CODEL_QUANTUM
,

748 
	mTCA_FQ_CODEL_CE_THRESHOLD
,

749 
	mTCA_FQ_CODEL_DROP_BATCH_SIZE
,

750 
	mTCA_FQ_CODEL_MEMORY_LIMIT
,

751 
	mTCA_FQ_CODEL_CE_THRESHOLD_SELECTOR
,

752 
	mTCA_FQ_CODEL_CE_THRESHOLD_MASK
,

753 
	m__TCA_FQ_CODEL_MAX


756 
	#TCA_FQ_CODEL_MAX
 (
__TCA_FQ_CODEL_MAX
 - 1)

	)

759 
	mTCA_FQ_CODEL_XSTATS_QDISC
,

760 
	mTCA_FQ_CODEL_XSTATS_CLASS
,

763 
	stc_fq_codñ_qd_°©s
 {

764 
__u32
 
	mmax∑ckë
;

765 
__u32
 
	mdr›_ovîlimô
;

768 
__u32
 
	me˙_m¨k
;

771 
__u32
 
	m√w_Êow_cou¡
;

774 
__u32
 
	m√w_Êows_Àn
;

775 
__u32
 
	mﬁd_Êows_Àn
;

776 
__u32
 
	m˚_m¨k
;

777 
__u32
 
	mmem‹y_ußge
;

778 
__u32
 
	mdr›_ovîmem‹y
;

781 
	stc_fq_codñ_˛_°©s
 {

782 
__s32
 
	mdeficô
;

783 
__u32
 
	mldñay
;

786 
__u32
 
	mcou¡
;

787 
__u32
 
	mœ°cou¡
;

788 
__u32
 
	mdr›pög
;

789 
__s32
 
	mdr›_√xt
;

792 
	stc_fq_codñ_x°©s
 {

793 
__u32
 
	mty≥
;

795 
tc_fq_codñ_qd_°©s
 
	mqdisc_°©s
;

796 
tc_fq_codñ_˛_°©s
 
	m˛ass_°©s
;

803 
	mTCA_FQ_UNSPEC
,

805 
	mTCA_FQ_PLIMIT
,

807 
	mTCA_FQ_FLOW_PLIMIT
,

809 
	mTCA_FQ_QUANTUM
,

811 
	mTCA_FQ_INITIAL_QUANTUM
,

813 
	mTCA_FQ_RATE_ENABLE
,

815 
	mTCA_FQ_FLOW_DEFAULT_RATE
,

817 
	mTCA_FQ_FLOW_MAX_RATE
,

819 
	mTCA_FQ_BUCKETS_LOG
,

821 
	mTCA_FQ_FLOW_REFILL_DELAY
,

823 
	mTCA_FQ_ORPHAN_MASK
,

825 
	mTCA_FQ_LOW_RATE_THRESHOLD
,

827 
	mTCA_FQ_CE_THRESHOLD
,

829 
	mTCA_FQ_TIMER_SLACK
,

831 
	mTCA_FQ_HORIZON
,

833 
	mTCA_FQ_HORIZON_DROP
,

835 
	mTCA_FQ_PRIOMAP
,

837 
	mTCA_FQ_WEIGHTS
,

839 
	mTCA_FQ_OFFLOAD_HORIZON
,

841 
	m__TCA_FQ_MAX


844 
	#TCA_FQ_MAX
 (
__TCA_FQ_MAX
 - 1)

	)

846 
	#FQ_BANDS
 3

	)

847 
	#FQ_MIN_WEIGHT
 16384

	)

849 
	stc_fq_qd_°©s
 {

850 
__u64
 
	mgc_Êows
;

851 
__u64
 
	mhigh¥io_∑ckës
;

852 
__u64
 
	mt˝_ªå™s
;

853 
__u64
 
	mthrŸéed
;

854 
__u64
 
	mÊows_∂imô
;

855 
__u64
 
	mpkts_too_l⁄g
;

856 
__u64
 
	mÆloˇti⁄_îr‹s
;

857 
__s64
 
	mtime_√xt_dñayed_Êow
;

858 
__u32
 
	mÊows
;

859 
__u32
 
	möa˘ive_Êows
;

860 
__u32
 
	mthrŸéed_Êows
;

861 
__u32
 
	mu¡hrŸée_œãncy_ns
;

862 
__u64
 
	m˚_m¨k
;

863 
__u64
 
	mh‹iz⁄_dr›s
;

864 
__u64
 
	mh‹iz⁄_ˇps
;

865 
__u64
 
	mÁ°∑th_∑ckës
;

866 
__u64
 
	mb™d_dr›s
[
FQ_BANDS
];

867 
__u32
 
	mb™d_pkt_cou¡
[
FQ_BANDS
];

868 
__u32
 
	m∑d
;

874 
	mTCA_HHF_UNSPEC
,

875 
	mTCA_HHF_BACKLOG_LIMIT
,

876 
	mTCA_HHF_QUANTUM
,

877 
	mTCA_HHF_HH_FLOWS_LIMIT
,

878 
	mTCA_HHF_RESET_TIMEOUT
,

879 
	mTCA_HHF_ADMIT_BYTES
,

880 
	mTCA_HHF_EVICT_TIMEOUT
,

881 
	mTCA_HHF_NON_HH_WEIGHT
,

882 
	m__TCA_HHF_MAX


885 
	#TCA_HHF_MAX
 (
__TCA_HHF_MAX
 - 1)

	)

887 
	stc_hhf_x°©s
 {

888 
__u32
 
	mdr›_ovîlimô
;

891 
__u32
 
	mhh_ovîlimô
;

892 
__u32
 
	mhh_tŸ_cou¡
;

893 
__u32
 
	mhh_cur_cou¡
;

898 
	mTCA_PIE_UNSPEC
,

899 
	mTCA_PIE_TARGET
,

900 
	mTCA_PIE_LIMIT
,

901 
	mTCA_PIE_TUPDATE
,

902 
	mTCA_PIE_ALPHA
,

903 
	mTCA_PIE_BETA
,

904 
	mTCA_PIE_ECN
,

905 
	mTCA_PIE_BYTEMODE
,

906 
	mTCA_PIE_DQ_RATE_ESTIMATOR
,

907 
	m__TCA_PIE_MAX


909 
	#TCA_PIE_MAX
 (
__TCA_PIE_MAX
 - 1)

	)

911 
	stc_põ_x°©s
 {

912 
__u64
 
	m¥ob
;

913 
__u32
 
	mdñay
;

914 
__u32
 
	mavg_dq_øã
;

917 
__u32
 
	mdq_øã_e°im©ög
;

918 
__u32
 
	m∑ckës_ö
;

919 
__u32
 
	mdr›≥d
;

920 
__u32
 
	movîlimô
;

923 
__u32
 
	mmaxq
;

924 
__u32
 
	me˙_m¨k
;

929 
	mTCA_FQ_PIE_UNSPEC
,

930 
	mTCA_FQ_PIE_LIMIT
,

931 
	mTCA_FQ_PIE_FLOWS
,

932 
	mTCA_FQ_PIE_TARGET
,

933 
	mTCA_FQ_PIE_TUPDATE
,

934 
	mTCA_FQ_PIE_ALPHA
,

935 
	mTCA_FQ_PIE_BETA
,

936 
	mTCA_FQ_PIE_QUANTUM
,

937 
	mTCA_FQ_PIE_MEMORY_LIMIT
,

938 
	mTCA_FQ_PIE_ECN_PROB
,

939 
	mTCA_FQ_PIE_ECN
,

940 
	mTCA_FQ_PIE_BYTEMODE
,

941 
	mTCA_FQ_PIE_DQ_RATE_ESTIMATOR
,

942 
	m__TCA_FQ_PIE_MAX


944 
	#TCA_FQ_PIE_MAX
 (
__TCA_FQ_PIE_MAX
 - 1)

	)

946 
	stc_fq_põ_x°©s
 {

947 
__u32
 
	m∑ckës_ö
;

948 
__u32
 
	mdr›≥d
;

949 
__u32
 
	movîlimô
;

950 
__u32
 
	movîmem‹y
;

951 
__u32
 
	me˙_m¨k
;

952 
__u32
 
	m√w_Êow_cou¡
;

953 
__u32
 
	m√w_Êows_Àn
;

954 
__u32
 
	mﬁd_Êows_Àn
;

955 
__u32
 
	mmem‹y_ußge
;

959 
	stc_cbs_q›t
 {

960 
__u8
 
	mofÊﬂd
;

961 
__u8
 
	m_∑d
[3];

962 
__s32
 
	mhi¸edô
;

963 
__s32
 
	mlo¸edô
;

964 
__s32
 
	midÀ¶›e
;

965 
__s32
 
	m£nd¶›e
;

969 
	mTCA_CBS_UNSPEC
,

970 
	mTCA_CBS_PARMS
,

971 
	m__TCA_CBS_MAX
,

974 
	#TCA_CBS_MAX
 (
__TCA_CBS_MAX
 - 1)

	)

978 
	stc_ëf_q›t
 {

979 
__s32
 
	mdñè
;

980 
__s32
 
	m˛ockid
;

981 
__u32
 
	mÊags
;

982 
	#TC_ETF_DEADLINE_MODE_ON
 
	`_BITUL
(0)

	)

983 
	#TC_ETF_OFFLOAD_ON
 
	`_BITUL
(1)

	)

984 
	#TC_ETF_SKIP_SOCK_CHECK
 
	`_BITUL
(2)

	)

988 
	mTCA_ETF_UNSPEC
,

989 
	mTCA_ETF_PARMS
,

990 
	m__TCA_ETF_MAX
,

993 
	#TCA_ETF_MAX
 (
__TCA_ETF_MAX
 - 1)

	)

998 
	mTCA_CAKE_UNSPEC
,

999 
	mTCA_CAKE_PAD
,

1000 
	mTCA_CAKE_BASE_RATE64
,

1001 
	mTCA_CAKE_DIFFSERV_MODE
,

1002 
	mTCA_CAKE_ATM
,

1003 
	mTCA_CAKE_FLOW_MODE
,

1004 
	mTCA_CAKE_OVERHEAD
,

1005 
	mTCA_CAKE_RTT
,

1006 
	mTCA_CAKE_TARGET
,

1007 
	mTCA_CAKE_AUTORATE
,

1008 
	mTCA_CAKE_MEMORY
,

1009 
	mTCA_CAKE_NAT
,

1010 
	mTCA_CAKE_RAW
,

1011 
	mTCA_CAKE_WASH
,

1012 
	mTCA_CAKE_MPU
,

1013 
	mTCA_CAKE_INGRESS
,

1014 
	mTCA_CAKE_ACK_FILTER
,

1015 
	mTCA_CAKE_SPLIT_GSO
,

1016 
	mTCA_CAKE_FWMARK
,

1017 
	m__TCA_CAKE_MAX


1019 
	#TCA_CAKE_MAX
 (
__TCA_CAKE_MAX
 - 1)

	)

1022 
	m__TCA_CAKE_STATS_INVALID
,

1023 
	mTCA_CAKE_STATS_PAD
,

1024 
	mTCA_CAKE_STATS_CAPACITY_ESTIMATE64
,

1025 
	mTCA_CAKE_STATS_MEMORY_LIMIT
,

1026 
	mTCA_CAKE_STATS_MEMORY_USED
,

1027 
	mTCA_CAKE_STATS_AVG_NETOFF
,

1028 
	mTCA_CAKE_STATS_MIN_NETLEN
,

1029 
	mTCA_CAKE_STATS_MAX_NETLEN
,

1030 
	mTCA_CAKE_STATS_MIN_ADJLEN
,

1031 
	mTCA_CAKE_STATS_MAX_ADJLEN
,

1032 
	mTCA_CAKE_STATS_TIN_STATS
,

1033 
	mTCA_CAKE_STATS_DEFICIT
,

1034 
	mTCA_CAKE_STATS_COBALT_COUNT
,

1035 
	mTCA_CAKE_STATS_DROPPING
,

1036 
	mTCA_CAKE_STATS_DROP_NEXT_US
,

1037 
	mTCA_CAKE_STATS_P_DROP
,

1038 
	mTCA_CAKE_STATS_BLUE_TIMER_US
,

1039 
	m__TCA_CAKE_STATS_MAX


1041 
	#TCA_CAKE_STATS_MAX
 (
__TCA_CAKE_STATS_MAX
 - 1)

	)

1044 
	m__TCA_CAKE_TIN_STATS_INVALID
,

1045 
	mTCA_CAKE_TIN_STATS_PAD
,

1046 
	mTCA_CAKE_TIN_STATS_SENT_PACKETS
,

1047 
	mTCA_CAKE_TIN_STATS_SENT_BYTES64
,

1048 
	mTCA_CAKE_TIN_STATS_DROPPED_PACKETS
,

1049 
	mTCA_CAKE_TIN_STATS_DROPPED_BYTES64
,

1050 
	mTCA_CAKE_TIN_STATS_ACKS_DROPPED_PACKETS
,

1051 
	mTCA_CAKE_TIN_STATS_ACKS_DROPPED_BYTES64
,

1052 
	mTCA_CAKE_TIN_STATS_ECN_MARKED_PACKETS
,

1053 
	mTCA_CAKE_TIN_STATS_ECN_MARKED_BYTES64
,

1054 
	mTCA_CAKE_TIN_STATS_BACKLOG_PACKETS
,

1055 
	mTCA_CAKE_TIN_STATS_BACKLOG_BYTES
,

1056 
	mTCA_CAKE_TIN_STATS_THRESHOLD_RATE64
,

1057 
	mTCA_CAKE_TIN_STATS_TARGET_US
,

1058 
	mTCA_CAKE_TIN_STATS_INTERVAL_US
,

1059 
	mTCA_CAKE_TIN_STATS_WAY_INDIRECT_HITS
,

1060 
	mTCA_CAKE_TIN_STATS_WAY_MISSES
,

1061 
	mTCA_CAKE_TIN_STATS_WAY_COLLISIONS
,

1062 
	mTCA_CAKE_TIN_STATS_PEAK_DELAY_US
,

1063 
	mTCA_CAKE_TIN_STATS_AVG_DELAY_US
,

1064 
	mTCA_CAKE_TIN_STATS_BASE_DELAY_US
,

1065 
	mTCA_CAKE_TIN_STATS_SPARSE_FLOWS
,

1066 
	mTCA_CAKE_TIN_STATS_BULK_FLOWS
,

1067 
	mTCA_CAKE_TIN_STATS_UNRESPONSIVE_FLOWS
,

1068 
	mTCA_CAKE_TIN_STATS_MAX_SKBLEN
,

1069 
	mTCA_CAKE_TIN_STATS_FLOW_QUANTUM
,

1070 
	m__TCA_CAKE_TIN_STATS_MAX


1072 
	#TCA_CAKE_TIN_STATS_MAX
 (
__TCA_CAKE_TIN_STATS_MAX
 - 1)

	)

1073 
	#TC_CAKE_MAX_TINS
 (8)

	)

1076 
	mCAKE_FLOW_NONE
 = 0,

1077 
	mCAKE_FLOW_SRC_IP
,

1078 
	mCAKE_FLOW_DST_IP
,

1079 
	mCAKE_FLOW_HOSTS
,

1080 
	mCAKE_FLOW_FLOWS
,

1081 
	mCAKE_FLOW_DUAL_SRC
,

1082 
	mCAKE_FLOW_DUAL_DST
,

1083 
	mCAKE_FLOW_TRIPLE
,

1084 
	mCAKE_FLOW_MAX
,

1088 
	mCAKE_DIFFSERV_DIFFSERV3
 = 0,

1089 
	mCAKE_DIFFSERV_DIFFSERV4
,

1090 
	mCAKE_DIFFSERV_DIFFSERV8
,

1091 
	mCAKE_DIFFSERV_BESTEFFORT
,

1092 
	mCAKE_DIFFSERV_PRECEDENCE
,

1093 
	mCAKE_DIFFSERV_MAX


1097 
	mCAKE_ACK_NONE
 = 0,

1098 
	mCAKE_ACK_FILTER
,

1099 
	mCAKE_ACK_AGGRESSIVE
,

1100 
	mCAKE_ACK_MAX


1104 
	mCAKE_ATM_NONE
 = 0,

1105 
	mCAKE_ATM_ATM
,

1106 
	mCAKE_ATM_PTM
,

1107 
	mCAKE_ATM_MAX


1113 
	mTC_TAPRIO_CMD_SET_GATES
 = 0x00,

1114 
	mTC_TAPRIO_CMD_SET_AND_HOLD
 = 0x01,

1115 
	mTC_TAPRIO_CMD_SET_AND_RELEASE
 = 0x02,

1119 
	mTCA_TAPRIO_SCHED_ENTRY_UNSPEC
,

1120 
	mTCA_TAPRIO_SCHED_ENTRY_INDEX
,

1121 
	mTCA_TAPRIO_SCHED_ENTRY_CMD
,

1122 
	mTCA_TAPRIO_SCHED_ENTRY_GATE_MASK
,

1123 
	mTCA_TAPRIO_SCHED_ENTRY_INTERVAL
,

1124 
	m__TCA_TAPRIO_SCHED_ENTRY_MAX
,

1126 
	#TCA_TAPRIO_SCHED_ENTRY_MAX
 (
__TCA_TAPRIO_SCHED_ENTRY_MAX
 - 1)

	)

1136 
	mTCA_TAPRIO_SCHED_UNSPEC
,

1137 
	mTCA_TAPRIO_SCHED_ENTRY
,

1138 
	m__TCA_TAPRIO_SCHED_MAX
,

1141 
	#TCA_TAPRIO_SCHED_MAX
 (
__TCA_TAPRIO_SCHED_MAX
 - 1)

	)

1153 
	#TCA_TAPRIO_ATTR_FLAG_TXTIME_ASSIST
 
	`_BITUL
(0)

	)

1154 
	#TCA_TAPRIO_ATTR_FLAG_FULL_OFFLOAD
 
	`_BITUL
(1)

	)

1157 
	mTCA_TAPRIO_TC_ENTRY_UNSPEC
,

1158 
	mTCA_TAPRIO_TC_ENTRY_INDEX
,

1159 
	mTCA_TAPRIO_TC_ENTRY_MAX_SDU
,

1160 
	mTCA_TAPRIO_TC_ENTRY_FP
,

1163 
	m__TCA_TAPRIO_TC_ENTRY_CNT
,

1164 
	mTCA_TAPRIO_TC_ENTRY_MAX
 = (
__TCA_TAPRIO_TC_ENTRY_CNT
 - 1)

1168 
	mTCA_TAPRIO_OFFLOAD_STATS_PAD
 = 1,

1169 
	mTCA_TAPRIO_OFFLOAD_STATS_WINDOW_DROPS
,

1170 
	mTCA_TAPRIO_OFFLOAD_STATS_TX_OVERRUNS
,

1173 
	m__TCA_TAPRIO_OFFLOAD_STATS_CNT
,

1174 
	mTCA_TAPRIO_OFFLOAD_STATS_MAX
 = (
__TCA_TAPRIO_OFFLOAD_STATS_CNT
 - 1)

1178 
	mTCA_TAPRIO_ATTR_UNSPEC
,

1179 
	mTCA_TAPRIO_ATTR_PRIOMAP
,

1180 
	mTCA_TAPRIO_ATTR_SCHED_ENTRY_LIST
,

1181 
	mTCA_TAPRIO_ATTR_SCHED_BASE_TIME
,

1182 
	mTCA_TAPRIO_ATTR_SCHED_SINGLE_ENTRY
,

1183 
	mTCA_TAPRIO_ATTR_SCHED_CLOCKID
,

1184 
	mTCA_TAPRIO_PAD
,

1185 
	mTCA_TAPRIO_ATTR_ADMIN_SCHED
,

1186 
	mTCA_TAPRIO_ATTR_SCHED_CYCLE_TIME
,

1187 
	mTCA_TAPRIO_ATTR_SCHED_CYCLE_TIME_EXTENSION
,

1188 
	mTCA_TAPRIO_ATTR_FLAGS
,

1189 
	mTCA_TAPRIO_ATTR_TXTIME_DELAY
,

1190 
	mTCA_TAPRIO_ATTR_TC_ENTRY
,

1191 
	m__TCA_TAPRIO_ATTR_MAX
,

1194 
	#TCA_TAPRIO_ATTR_MAX
 (
__TCA_TAPRIO_ATTR_MAX
 - 1)

	)

1198 
	#TCQ_ETS_MAX_BANDS
 16

	)

1201 
	mTCA_ETS_UNSPEC
,

1202 
	mTCA_ETS_NBANDS
,

1203 
	mTCA_ETS_NSTRICT
,

1204 
	mTCA_ETS_QUANTA
,

1205 
	mTCA_ETS_QUANTA_BAND
,

1206 
	mTCA_ETS_PRIOMAP
,

1207 
	mTCA_ETS_PRIOMAP_BAND
,

1208 
	m__TCA_ETS_MAX
,

1211 
	#TCA_ETS_MAX
 (
__TCA_ETS_MAX
 - 1)

	)

	@/usr/include/linux/random.h

8 #i‚de‡
_LINUX_RANDOM_H


9 
	#_LINUX_RANDOM_H


	)

11 
	~<löux/ty≥s.h
>

12 
	~<löux/io˘l.h
>

13 
	~<löux/úqƒ.h
>

18 
	#RNDGETENTCNT
 
	`_IOR
–'R', 0x00, )

	)

21 
	#RNDADDTOENTCNT
 
	`_IOW
–'R', 0x01, )

	)

24 
	#RNDGETPOOL
 
	`_IOR
–'R', 0x02, [2] )

	)

30 
	#RNDADDENTROPY
 
	`_IOW
–'R', 0x03, [2] )

	)

33 
	#RNDZAPENTCNT
 
	`_IO
–'R', 0x04 )

	)

36 
	#RNDCLEARPOOL
 
	`_IO
–'R', 0x06 )

	)

39 
	#RNDRESEEDCRNG
 
	`_IO
–'R', 0x07 )

	)

41 
	sønd_poﬁ_öfo
 {

42 
	míå›y_cou¡
;

43 
	mbuf_size
;

44 
__u32
 
	mbuf
[];

54 
	#GRND_NONBLOCK
 0x0001

	)

55 
	#GRND_RANDOM
 0x0002

	)

56 
	#GRND_INSECURE
 0x0004

	)

66 
	svgëøndom_›aque_∑øms
 {

67 
__u32
 
	msize_of_›aque_°©e
;

68 
__u32
 
	mmm≠_¥Ÿ
;

69 
__u32
 
	mmm≠_Êags
;

70 
__u32
 
	mª£rved
[13];

	@/usr/include/linux/rtnetlink.h

2 #i‚de‡
__LINUX_RTNETLINK_H


3 
	#__LINUX_RTNETLINK_H


	)

5 
	~<löux/ty≥s.h
>

6 
	~<löux/√éök.h
>

7 
	~<löux/if_lök.h
>

8 
	~<löux/if_addr.h
>

9 
	~<löux/√ighbour.h
>

14 
	#RTNL_FAMILY_IPMR
 128

	)

15 
	#RTNL_FAMILY_IP6MR
 129

	)

16 
	#RTNL_FAMILY_MAX
 129

	)

25 
	mRTM_BASE
 = 16,

26 
	#RTM_BASE
 
RTM_BASE


	)

28 
	mRTM_NEWLINK
 = 16,

29 
	#RTM_NEWLINK
 
RTM_NEWLINK


	)

30 
	mRTM_DELLINK
,

31 
	#RTM_DELLINK
 
RTM_DELLINK


	)

32 
	mRTM_GETLINK
,

33 
	#RTM_GETLINK
 
RTM_GETLINK


	)

34 
	mRTM_SETLINK
,

35 
	#RTM_SETLINK
 
RTM_SETLINK


	)

37 
	mRTM_NEWADDR
 = 20,

38 
	#RTM_NEWADDR
 
RTM_NEWADDR


	)

39 
	mRTM_DELADDR
,

40 
	#RTM_DELADDR
 
RTM_DELADDR


	)

41 
	mRTM_GETADDR
,

42 
	#RTM_GETADDR
 
RTM_GETADDR


	)

44 
	mRTM_NEWROUTE
 = 24,

45 
	#RTM_NEWROUTE
 
RTM_NEWROUTE


	)

46 
	mRTM_DELROUTE
,

47 
	#RTM_DELROUTE
 
RTM_DELROUTE


	)

48 
	mRTM_GETROUTE
,

49 
	#RTM_GETROUTE
 
RTM_GETROUTE


	)

51 
	mRTM_NEWNEIGH
 = 28,

52 
	#RTM_NEWNEIGH
 
RTM_NEWNEIGH


	)

53 
	mRTM_DELNEIGH
,

54 
	#RTM_DELNEIGH
 
RTM_DELNEIGH


	)

55 
	mRTM_GETNEIGH
,

56 
	#RTM_GETNEIGH
 
RTM_GETNEIGH


	)

58 
	mRTM_NEWRULE
 = 32,

59 
	#RTM_NEWRULE
 
RTM_NEWRULE


	)

60 
	mRTM_DELRULE
,

61 
	#RTM_DELRULE
 
RTM_DELRULE


	)

62 
	mRTM_GETRULE
,

63 
	#RTM_GETRULE
 
RTM_GETRULE


	)

65 
	mRTM_NEWQDISC
 = 36,

66 
	#RTM_NEWQDISC
 
RTM_NEWQDISC


	)

67 
	mRTM_DELQDISC
,

68 
	#RTM_DELQDISC
 
RTM_DELQDISC


	)

69 
	mRTM_GETQDISC
,

70 
	#RTM_GETQDISC
 
RTM_GETQDISC


	)

72 
	mRTM_NEWTCLASS
 = 40,

73 
	#RTM_NEWTCLASS
 
RTM_NEWTCLASS


	)

74 
	mRTM_DELTCLASS
,

75 
	#RTM_DELTCLASS
 
RTM_DELTCLASS


	)

76 
	mRTM_GETTCLASS
,

77 
	#RTM_GETTCLASS
 
RTM_GETTCLASS


	)

79 
	mRTM_NEWTFILTER
 = 44,

80 
	#RTM_NEWTFILTER
 
RTM_NEWTFILTER


	)

81 
	mRTM_DELTFILTER
,

82 
	#RTM_DELTFILTER
 
RTM_DELTFILTER


	)

83 
	mRTM_GETTFILTER
,

84 
	#RTM_GETTFILTER
 
RTM_GETTFILTER


	)

86 
	mRTM_NEWACTION
 = 48,

87 
	#RTM_NEWACTION
 
RTM_NEWACTION


	)

88 
	mRTM_DELACTION
,

89 
	#RTM_DELACTION
 
RTM_DELACTION


	)

90 
	mRTM_GETACTION
,

91 
	#RTM_GETACTION
 
RTM_GETACTION


	)

93 
	mRTM_NEWPREFIX
 = 52,

94 
	#RTM_NEWPREFIX
 
RTM_NEWPREFIX


	)

96 
	mRTM_NEWMULTICAST
 = 56,

97 
	#RTM_NEWMULTICAST
 
RTM_NEWMULTICAST


	)

98 
	mRTM_DELMULTICAST
,

99 
	#RTM_DELMULTICAST
 
RTM_DELMULTICAST


	)

100 
	mRTM_GETMULTICAST
,

101 
	#RTM_GETMULTICAST
 
RTM_GETMULTICAST


	)

103 
	mRTM_NEWANYCAST
 = 60,

104 
	#RTM_NEWANYCAST
 
RTM_NEWANYCAST


	)

105 
	mRTM_DELANYCAST
,

106 
	#RTM_DELANYCAST
 
RTM_DELANYCAST


	)

107 
	mRTM_GETANYCAST
,

108 
	#RTM_GETANYCAST
 
RTM_GETANYCAST


	)

110 
	mRTM_NEWNEIGHTBL
 = 64,

111 
	#RTM_NEWNEIGHTBL
 
RTM_NEWNEIGHTBL


	)

112 
	mRTM_GETNEIGHTBL
 = 66,

113 
	#RTM_GETNEIGHTBL
 
RTM_GETNEIGHTBL


	)

114 
	mRTM_SETNEIGHTBL
,

115 
	#RTM_SETNEIGHTBL
 
RTM_SETNEIGHTBL


	)

117 
	mRTM_NEWNDUSEROPT
 = 68,

118 
	#RTM_NEWNDUSEROPT
 
RTM_NEWNDUSEROPT


	)

120 
	mRTM_NEWADDRLABEL
 = 72,

121 
	#RTM_NEWADDRLABEL
 
RTM_NEWADDRLABEL


	)

122 
	mRTM_DELADDRLABEL
,

123 
	#RTM_DELADDRLABEL
 
RTM_DELADDRLABEL


	)

124 
	mRTM_GETADDRLABEL
,

125 
	#RTM_GETADDRLABEL
 
RTM_GETADDRLABEL


	)

127 
	mRTM_GETDCB
 = 78,

128 
	#RTM_GETDCB
 
RTM_GETDCB


	)

129 
	mRTM_SETDCB
,

130 
	#RTM_SETDCB
 
RTM_SETDCB


	)

132 
	mRTM_NEWNETCONF
 = 80,

133 
	#RTM_NEWNETCONF
 
RTM_NEWNETCONF


	)

134 
	mRTM_DELNETCONF
,

135 
	#RTM_DELNETCONF
 
RTM_DELNETCONF


	)

136 
	mRTM_GETNETCONF
 = 82,

137 
	#RTM_GETNETCONF
 
RTM_GETNETCONF


	)

139 
	mRTM_NEWMDB
 = 84,

140 
	#RTM_NEWMDB
 
RTM_NEWMDB


	)

141 
	mRTM_DELMDB
 = 85,

142 
	#RTM_DELMDB
 
RTM_DELMDB


	)

143 
	mRTM_GETMDB
 = 86,

144 
	#RTM_GETMDB
 
RTM_GETMDB


	)

146 
	mRTM_NEWNSID
 = 88,

147 
	#RTM_NEWNSID
 
RTM_NEWNSID


	)

148 
	mRTM_DELNSID
 = 89,

149 
	#RTM_DELNSID
 
RTM_DELNSID


	)

150 
	mRTM_GETNSID
 = 90,

151 
	#RTM_GETNSID
 
RTM_GETNSID


	)

153 
	mRTM_NEWSTATS
 = 92,

154 
	#RTM_NEWSTATS
 
RTM_NEWSTATS


	)

155 
	mRTM_GETSTATS
 = 94,

156 
	#RTM_GETSTATS
 
RTM_GETSTATS


	)

157 
	mRTM_SETSTATS
,

158 
	#RTM_SETSTATS
 
RTM_SETSTATS


	)

160 
	mRTM_NEWCACHEREPORT
 = 96,

161 
	#RTM_NEWCACHEREPORT
 
RTM_NEWCACHEREPORT


	)

163 
	mRTM_NEWCHAIN
 = 100,

164 
	#RTM_NEWCHAIN
 
RTM_NEWCHAIN


	)

165 
	mRTM_DELCHAIN
,

166 
	#RTM_DELCHAIN
 
RTM_DELCHAIN


	)

167 
	mRTM_GETCHAIN
,

168 
	#RTM_GETCHAIN
 
RTM_GETCHAIN


	)

170 
	mRTM_NEWNEXTHOP
 = 104,

171 
	#RTM_NEWNEXTHOP
 
RTM_NEWNEXTHOP


	)

172 
	mRTM_DELNEXTHOP
,

173 
	#RTM_DELNEXTHOP
 
RTM_DELNEXTHOP


	)

174 
	mRTM_GETNEXTHOP
,

175 
	#RTM_GETNEXTHOP
 
RTM_GETNEXTHOP


	)

177 
	mRTM_NEWLINKPROP
 = 108,

178 
	#RTM_NEWLINKPROP
 
RTM_NEWLINKPROP


	)

179 
	mRTM_DELLINKPROP
,

180 
	#RTM_DELLINKPROP
 
RTM_DELLINKPROP


	)

181 
	mRTM_GETLINKPROP
,

182 
	#RTM_GETLINKPROP
 
RTM_GETLINKPROP


	)

184 
	mRTM_NEWVLAN
 = 112,

185 
	#RTM_NEWVLAN
 
RTM_NEWVLAN


	)

186 
	mRTM_DELVLAN
,

187 
	#RTM_DELVLAN
 
RTM_DELVLAN


	)

188 
	mRTM_GETVLAN
,

189 
	#RTM_GETVLAN
 
RTM_GETVLAN


	)

191 
	mRTM_NEWNEXTHOPBUCKET
 = 116,

192 
	#RTM_NEWNEXTHOPBUCKET
 
RTM_NEWNEXTHOPBUCKET


	)

193 
	mRTM_DELNEXTHOPBUCKET
,

194 
	#RTM_DELNEXTHOPBUCKET
 
RTM_DELNEXTHOPBUCKET


	)

195 
	mRTM_GETNEXTHOPBUCKET
,

196 
	#RTM_GETNEXTHOPBUCKET
 
RTM_GETNEXTHOPBUCKET


	)

198 
	mRTM_NEWTUNNEL
 = 120,

199 
	#RTM_NEWTUNNEL
 
RTM_NEWTUNNEL


	)

200 
	mRTM_DELTUNNEL
,

201 
	#RTM_DELTUNNEL
 
RTM_DELTUNNEL


	)

202 
	mRTM_GETTUNNEL
,

203 
	#RTM_GETTUNNEL
 
RTM_GETTUNNEL


	)

205 
	m__RTM_MAX
,

206 
	#RTM_MAX
 (((
__RTM_MAX
 + 3Ë& ~3Ë- 1)

	)

209 
	#RTM_NR_MSGTYPES
 (
RTM_MAX
 + 1 - 
RTM_BASE
)

	)

210 
	#RTM_NR_FAMILIES
 (
RTM_NR_MSGTYPES
 >> 2)

	)

211 
	#RTM_FAM
(
cmd
Ë(((cmdË- 
RTM_BASE
Ë>> 2)

	)

219 
	sπ©å
 {

220 
	mπa_Àn
;

221 
	mπa_ty≥
;

226 
	#RTA_ALIGNTO
 4U

	)

227 
	#RTA_ALIGN
(
Àn
Ë–(÷í)+
RTA_ALIGNTO
-1Ë& ~(RTA_ALIGNTO-1Ë)

	)

228 
	#RTA_OK
(
πa
,
Àn
Ë(÷íË>()(
π©å
) && \

229 (
πa
)->
πa_Àn
 >(
π©å
) && \

230 (
πa
)->
πa_Àn
 <(
Àn
))

	)

231 
	#RTA_NEXT
(
πa
,
©åÀn
Ë(◊âæíË-
	`RTA_ALIGN
(‘è)->
πa_Àn
), \

232 (
π©å
*)(((*)(
πa
)Ë+ 
	`RTA_ALIGN
(‘è)->
πa_Àn
)))

	)

233 
	#RTA_LENGTH
(
Àn
Ë(
	`RTA_ALIGN
((
π©å
)Ë+ (Àn))

	)

234 
	#RTA_SPACE
(
Àn
Ë
	`RTA_ALIGN
(
	`RTA_LENGTH
÷í))

	)

235 
	#RTA_DATA
(
πa
Ë((*)(((*)‘è)Ë+ 
	`RTA_LENGTH
(0)))

	)

236 
	#RTA_PAYLOAD
(
πa
Ë(()(‘è)->
πa_Àn
Ë- 
	`RTA_LENGTH
(0))

	)

245 
	sπmsg
 {

246 
	mπm_Ámûy
;

247 
	mπm_d°_Àn
;

248 
	mπm_§c_Àn
;

249 
	mπm_tos
;

251 
	mπm_èbÀ
;

252 
	mπm_¥Ÿocﬁ
;

253 
	mπm_sc›e
;

254 
	mπm_ty≥
;

256 
	mπm_Êags
;

262 
	mRTN_UNSPEC
,

263 
	mRTN_UNICAST
,

264 
	mRTN_LOCAL
,

265 
	mRTN_BROADCAST
,

267 
	mRTN_ANYCAST
,

269 
	mRTN_MULTICAST
,

270 
	mRTN_BLACKHOLE
,

271 
	mRTN_UNREACHABLE
,

272 
	mRTN_PROHIBIT
,

273 
	mRTN_THROW
,

274 
	mRTN_NAT
,

275 
	mRTN_XRESOLVE
,

276 
	m__RTN_MAX


279 
	#RTN_MAX
 (
__RTN_MAX
 - 1)

	)

284 
	#RTPROT_UNSPEC
 0

	)

285 
	#RTPROT_REDIRECT
 1

	)

287 
	#RTPROT_KERNEL
 2

	)

288 
	#RTPROT_BOOT
 3

	)

289 
	#RTPROT_STATIC
 4

	)

298 
	#RTPROT_GATED
 8

	)

299 
	#RTPROT_RA
 9

	)

300 
	#RTPROT_MRT
 10

	)

301 
	#RTPROT_ZEBRA
 11

	)

302 
	#RTPROT_BIRD
 12

	)

303 
	#RTPROT_DNROUTED
 13

	)

304 
	#RTPROT_XORP
 14

	)

305 
	#RTPROT_NTK
 15

	)

306 
	#RTPROT_DHCP
 16

	)

307 
	#RTPROT_MROUTED
 17

	)

308 
	#RTPROT_KEEPALIVED
 18

	)

309 
	#RTPROT_BABEL
 42

	)

310 
	#RTPROT_OPENR
 99

	)

311 
	#RTPROT_BGP
 186

	)

312 
	#RTPROT_ISIS
 187

	)

313 
	#RTPROT_OSPF
 188

	)

314 
	#RTPROT_RIP
 189

	)

315 
	#RTPROT_EIGRP
 192

	)

328 
	eπ_sc›e_t
 {

329 
	mRT_SCOPE_UNIVERSE
=0,

331 
	mRT_SCOPE_SITE
=200,

332 
	mRT_SCOPE_LINK
=253,

333 
	mRT_SCOPE_HOST
=254,

334 
	mRT_SCOPE_NOWHERE
=255

339 
	#RTM_F_NOTIFY
 0x100

	)

340 
	#RTM_F_CLONED
 0x200

	)

341 
	#RTM_F_EQUALIZE
 0x400

	)

342 
	#RTM_F_PREFIX
 0x800

	)

343 
	#RTM_F_LOOKUP_TABLE
 0x1000

	)

344 
	#RTM_F_FIB_MATCH
 0x2000

	)

345 
	#RTM_F_OFFLOAD
 0x4000

	)

346 
	#RTM_F_TRAP
 0x8000

	)

347 
	#RTM_F_OFFLOAD_FAILED
 0x20000000

	)

355 
	eπ_˛ass_t
 {

356 
	mRT_TABLE_UNSPEC
=0,

358 
	mRT_TABLE_COMPAT
=252,

359 
	mRT_TABLE_DEFAULT
=253,

360 
	mRT_TABLE_MAIN
=254,

361 
	mRT_TABLE_LOCAL
=255,

362 
	mRT_TABLE_MAX
=0xFFFFFFFF

368 
	eπ©å_ty≥_t
 {

369 
	mRTA_UNSPEC
,

370 
	mRTA_DST
,

371 
	mRTA_SRC
,

372 
	mRTA_IIF
,

373 
	mRTA_OIF
,

374 
	mRTA_GATEWAY
,

375 
	mRTA_PRIORITY
,

376 
	mRTA_PREFSRC
,

377 
	mRTA_METRICS
,

378 
	mRTA_MULTIPATH
,

379 
	mRTA_PROTOINFO
,

380 
	mRTA_FLOW
,

381 
	mRTA_CACHEINFO
,

382 
	mRTA_SESSION
,

383 
	mRTA_MP_ALGO
,

384 
	mRTA_TABLE
,

385 
	mRTA_MARK
,

386 
	mRTA_MFC_STATS
,

387 
	mRTA_VIA
,

388 
	mRTA_NEWDST
,

389 
	mRTA_PREF
,

390 
	mRTA_ENCAP_TYPE
,

391 
	mRTA_ENCAP
,

392 
	mRTA_EXPIRES
,

393 
	mRTA_PAD
,

394 
	mRTA_UID
,

395 
	mRTA_TTL_PROPAGATE
,

396 
	mRTA_IP_PROTO
,

397 
	mRTA_SPORT
,

398 
	mRTA_DPORT
,

399 
	mRTA_NH_ID
,

400 
	mRTA_FLOWLABEL
,

401 
	m__RTA_MAX


404 
	#RTA_MAX
 (
__RTA_MAX
 - 1)

	)

406 
	#RTM_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
πmsg
))))

	)

407 
	#RTM_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
πmsg
))

	)

418 
	sπ√xth›
 {

419 
	mπnh_Àn
;

420 
	mπnh_Êags
;

421 
	mπnh_h›s
;

422 
	mπnh_ifödex
;

427 
	#RTNH_F_DEAD
 1

	)

428 
	#RTNH_F_PERVASIVE
 2

	)

429 
	#RTNH_F_ONLINK
 4

	)

430 
	#RTNH_F_OFFLOAD
 8

	)

431 
	#RTNH_F_LINKDOWN
 16

	)

432 
	#RTNH_F_UNRESOLVED
 32

	)

433 
	#RTNH_F_TRAP
 64

	)

435 
	#RTNH_COMPARE_MASK
 (
RTNH_F_DEAD
 | 
RTNH_F_LINKDOWN
 | \

436 
RTNH_F_OFFLOAD
 | 
RTNH_F_TRAP
)

	)

440 
	#RTNH_ALIGNTO
 4

	)

441 
	#RTNH_ALIGN
(
Àn
Ë–(÷í)+
RTNH_ALIGNTO
-1Ë& ~(RTNH_ALIGNTO-1Ë)

	)

442 
	#RTNH_OK
(
πnh
,
Àn
Ë(‘äh)->
πnh_Àn
 >(
π√xth›
) && \

443 (()(
πnh
)->
πnh_Àn
Ë<(
Àn
))

	)

444 
	#RTNH_NEXT
(
πnh
Ë((
π√xth›
*)(((*)‘äh)Ë+ 
	`RTNH_ALIGN
(‘äh)->
πnh_Àn
)))

	)

445 
	#RTNH_LENGTH
(
Àn
Ë(
	`RTNH_ALIGN
((
π√xth›
)Ë+ (Àn))

	)

446 
	#RTNH_SPACE
(
Àn
Ë
	`RTNH_ALIGN
(
	`RTNH_LENGTH
÷í))

	)

447 
	#RTNH_DATA
(
πnh
Ë((
π©å
*)(((*)‘äh)Ë+ 
	`RTNH_LENGTH
(0)))

	)

450 
	sπvü
 {

451 
__kî√l_ß_Ámûy_t
 
	mπvü_Ámûy
;

452 
__u8
 
	mπvü_addr
[];

457 
	sπa_ˇcheöfo
 {

458 
__u32
 
	mπa_˛¡ªf
;

459 
__u32
 
	mπa_œ°u£
;

460 
__s32
 
	mπa_expúes
;

461 
__u32
 
	mπa_îr‹
;

462 
__u32
 
	mπa_u£d
;

464 
	#RTNETLINK_HAVE_PEERINFO
 1

	)

465 
__u32
 
	mπa_id
;

466 
__u32
 
	mπa_ts
;

467 
__u32
 
	mπa_tßge
;

473 
	mRTAX_UNSPEC
,

474 
	#RTAX_UNSPEC
 
RTAX_UNSPEC


	)

475 
	mRTAX_LOCK
,

476 
	#RTAX_LOCK
 
RTAX_LOCK


	)

477 
	mRTAX_MTU
,

478 
	#RTAX_MTU
 
RTAX_MTU


	)

479 
	mRTAX_WINDOW
,

480 
	#RTAX_WINDOW
 
RTAX_WINDOW


	)

481 
	mRTAX_RTT
,

482 
	#RTAX_RTT
 
RTAX_RTT


	)

483 
	mRTAX_RTTVAR
,

484 
	#RTAX_RTTVAR
 
RTAX_RTTVAR


	)

485 
	mRTAX_SSTHRESH
,

486 
	#RTAX_SSTHRESH
 
RTAX_SSTHRESH


	)

487 
	mRTAX_CWND
,

488 
	#RTAX_CWND
 
RTAX_CWND


	)

489 
	mRTAX_ADVMSS
,

490 
	#RTAX_ADVMSS
 
RTAX_ADVMSS


	)

491 
	mRTAX_REORDERING
,

492 
	#RTAX_REORDERING
 
RTAX_REORDERING


	)

493 
	mRTAX_HOPLIMIT
,

494 
	#RTAX_HOPLIMIT
 
RTAX_HOPLIMIT


	)

495 
	mRTAX_INITCWND
,

496 
	#RTAX_INITCWND
 
RTAX_INITCWND


	)

497 
	mRTAX_FEATURES
,

498 
	#RTAX_FEATURES
 
RTAX_FEATURES


	)

499 
	mRTAX_RTO_MIN
,

500 
	#RTAX_RTO_MIN
 
RTAX_RTO_MIN


	)

501 
	mRTAX_INITRWND
,

502 
	#RTAX_INITRWND
 
RTAX_INITRWND


	)

503 
	mRTAX_QUICKACK
,

504 
	#RTAX_QUICKACK
 
RTAX_QUICKACK


	)

505 
	mRTAX_CC_ALGO
,

506 
	#RTAX_CC_ALGO
 
RTAX_CC_ALGO


	)

507 
	mRTAX_FASTOPEN_NO_COOKIE
,

508 
	#RTAX_FASTOPEN_NO_COOKIE
 
RTAX_FASTOPEN_NO_COOKIE


	)

509 
	m__RTAX_MAX


512 
	#RTAX_MAX
 (
__RTAX_MAX
 - 1)

	)

514 
	#RTAX_FEATURE_ECN
 (1 << 0)

	)

515 
	#RTAX_FEATURE_SACK
 (1 << 1Ë

	)

516 
	#RTAX_FEATURE_TIMESTAMP
 (1 << 2Ë

	)

517 
	#RTAX_FEATURE_ALLFRAG
 (1 << 3Ë

	)

518 
	#RTAX_FEATURE_TCP_USEC_TS
 (1 << 4)

	)

520 
	#RTAX_FEATURE_MASK
 (
RTAX_FEATURE_ECN
 | \

521 
RTAX_FEATURE_SACK
 | \

522 
RTAX_FEATURE_TIMESTAMP
 | \

523 
RTAX_FEATURE_ALLFRAG
 | \

524 
RTAX_FEATURE_TCP_USEC_TS
)

	)

526 
	sπa_£ssi⁄
 {

527 
__u8
 
	m¥Ÿo
;

528 
__u8
 
	m∑d1
;

529 
__u16
 
	m∑d2
;

533 
__u16
 
	m•‹t
;

534 
__u16
 
	mdp‹t
;

535 } 
	mp‹ts
;

538 
__u8
 
	mty≥
;

539 
__u8
 
	mcode
;

540 
__u16
 
	midít
;

541 } 
	micm±
;

543 
__u32
 
	m•i
;

544 } 
	mu
;

547 
	sπa_mfc_°©s
 {

548 
__u64
 
	mmfcs_∑ckës
;

549 
__u64
 
	mmfcs_byãs
;

550 
__u64
 
	mmfcs_wr⁄g_if
;

557 
	sπgímsg
 {

558 
	mπgí_Ámûy
;

570 
	siföfomsg
 {

571 
	mifi_Ámûy
;

572 
	m__ifi_∑d
;

573 
	mifi_ty≥
;

574 
	mifi_ödex
;

575 
	mifi_Êags
;

576 
	mifi_ch™ge
;

583 
	s¥efixmsg
 {

584 
	m¥efix_Ámûy
;

585 
	m¥efix_∑d1
;

586 
	m¥efix_∑d2
;

587 
	m¥efix_ifödex
;

588 
	m¥efix_ty≥
;

589 
	m¥efix_Àn
;

590 
	m¥efix_Êags
;

591 
	m¥efix_∑d3
;

596 
	mPREFIX_UNSPEC
,

597 
	mPREFIX_ADDRESS
,

598 
	mPREFIX_CACHEINFO
,

599 
	m__PREFIX_MAX


602 
	#PREFIX_MAX
 (
__PREFIX_MAX
 - 1)

	)

604 
	s¥efix_ˇcheöfo
 {

605 
__u32
 
	m¥e„ºed_time
;

606 
__u32
 
	mvÆid_time
;

614 
	stcmsg
 {

615 
	mtcm_Ámûy
;

616 
	mtcm__∑d1
;

617 
	mtcm__∑d2
;

618 
	mtcm_ifödex
;

619 
__u32
 
	mtcm_h™dÀ
;

620 
__u32
 
	mtcm_∑ª¡
;

624 
	#tcm_block_ödex
 
tcm_∑ª¡


	)

625 
__u32
 
	mtcm_öfo
;

632 
	#TCM_IFINDEX_MAGIC_BLOCK
 (0xFFFFFFFFU)

	)

635 
	mTCA_UNSPEC
,

636 
	mTCA_KIND
,

637 
	mTCA_OPTIONS
,

638 
	mTCA_STATS
,

639 
	mTCA_XSTATS
,

640 
	mTCA_RATE
,

641 
	mTCA_FCNT
,

642 
	mTCA_STATS2
,

643 
	mTCA_STAB
,

644 
	mTCA_PAD
,

645 
	mTCA_DUMP_INVISIBLE
,

646 
	mTCA_CHAIN
,

647 
	mTCA_HW_OFFLOAD
,

648 
	mTCA_INGRESS_BLOCK
,

649 
	mTCA_EGRESS_BLOCK
,

650 
	mTCA_DUMP_FLAGS
,

651 
	mTCA_EXT_WARN_MSG
,

652 
	m__TCA_MAX


655 
	#TCA_MAX
 (
__TCA_MAX
 - 1)

	)

657 
	#TCA_DUMP_FLAGS_TERSE
 (1 << 0Ë

	)

662 
	#TCA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
tcmsg
))))

	)

663 
	#TCA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
tcmsg
))

	)

669 
	sndu£r›tmsg
 {

670 
	mndu£r›t_Ámûy
;

671 
	mndu£r›t_∑d1
;

672 
	mndu£r›t_›ts_Àn
;

673 
	mndu£r›t_ifödex
;

674 
__u8
 
	mndu£r›t_icmp_ty≥
;

675 
__u8
 
	mndu£r›t_icmp_code
;

676 
	mndu£r›t_∑d2
;

677 
	mndu£r›t_∑d3
;

682 
	mNDUSEROPT_UNSPEC
,

683 
	mNDUSEROPT_SRCADDR
,

684 
	m__NDUSEROPT_MAX


687 
	#NDUSEROPT_MAX
 (
__NDUSEROPT_MAX
 - 1)

	)

690 
	#RTMGRP_LINK
 1

	)

691 
	#RTMGRP_NOTIFY
 2

	)

692 
	#RTMGRP_NEIGH
 4

	)

693 
	#RTMGRP_TC
 8

	)

695 
	#RTMGRP_IPV4_IFADDR
 0x10

	)

696 
	#RTMGRP_IPV4_MROUTE
 0x20

	)

697 
	#RTMGRP_IPV4_ROUTE
 0x40

	)

698 
	#RTMGRP_IPV4_RULE
 0x80

	)

700 
	#RTMGRP_IPV6_IFADDR
 0x100

	)

701 
	#RTMGRP_IPV6_MROUTE
 0x200

	)

702 
	#RTMGRP_IPV6_ROUTE
 0x400

	)

703 
	#RTMGRP_IPV6_IFINFO
 0x800

	)

705 
	#RTMGRP_DEC√t_IFADDR
 0x1000

	)

706 
	#RTMGRP_DEC√t_ROUTE
 0x4000

	)

708 
	#RTMGRP_IPV6_PREFIX
 0x20000

	)

711 
	eπ√éök_groups
 {

712 
	mRTNLGRP_NONE
,

713 
	#RTNLGRP_NONE
 
RTNLGRP_NONE


	)

714 
	mRTNLGRP_LINK
,

715 
	#RTNLGRP_LINK
 
RTNLGRP_LINK


	)

716 
	mRTNLGRP_NOTIFY
,

717 
	#RTNLGRP_NOTIFY
 
RTNLGRP_NOTIFY


	)

718 
	mRTNLGRP_NEIGH
,

719 
	#RTNLGRP_NEIGH
 
RTNLGRP_NEIGH


	)

720 
	mRTNLGRP_TC
,

721 
	#RTNLGRP_TC
 
RTNLGRP_TC


	)

722 
	mRTNLGRP_IPV4_IFADDR
,

723 
	#RTNLGRP_IPV4_IFADDR
 
RTNLGRP_IPV4_IFADDR


	)

724 
	mRTNLGRP_IPV4_MROUTE
,

725 
	#RTNLGRP_IPV4_MROUTE
 
RTNLGRP_IPV4_MROUTE


	)

726 
	mRTNLGRP_IPV4_ROUTE
,

727 
	#RTNLGRP_IPV4_ROUTE
 
RTNLGRP_IPV4_ROUTE


	)

728 
	mRTNLGRP_IPV4_RULE
,

729 
	#RTNLGRP_IPV4_RULE
 
RTNLGRP_IPV4_RULE


	)

730 
	mRTNLGRP_IPV6_IFADDR
,

731 
	#RTNLGRP_IPV6_IFADDR
 
RTNLGRP_IPV6_IFADDR


	)

732 
	mRTNLGRP_IPV6_MROUTE
,

733 
	#RTNLGRP_IPV6_MROUTE
 
RTNLGRP_IPV6_MROUTE


	)

734 
	mRTNLGRP_IPV6_ROUTE
,

735 
	#RTNLGRP_IPV6_ROUTE
 
RTNLGRP_IPV6_ROUTE


	)

736 
	mRTNLGRP_IPV6_IFINFO
,

737 
	#RTNLGRP_IPV6_IFINFO
 
RTNLGRP_IPV6_IFINFO


	)

738 
	mRTNLGRP_DEC√t_IFADDR
,

739 
	#RTNLGRP_DEC√t_IFADDR
 
RTNLGRP_DEC√t_IFADDR


	)

740 
	mRTNLGRP_NOP2
,

741 
	mRTNLGRP_DEC√t_ROUTE
,

742 
	#RTNLGRP_DEC√t_ROUTE
 
RTNLGRP_DEC√t_ROUTE


	)

743 
	mRTNLGRP_DEC√t_RULE
,

744 
	#RTNLGRP_DEC√t_RULE
 
RTNLGRP_DEC√t_RULE


	)

745 
	mRTNLGRP_NOP4
,

746 
	mRTNLGRP_IPV6_PREFIX
,

747 
	#RTNLGRP_IPV6_PREFIX
 
RTNLGRP_IPV6_PREFIX


	)

748 
	mRTNLGRP_IPV6_RULE
,

749 
	#RTNLGRP_IPV6_RULE
 
RTNLGRP_IPV6_RULE


	)

750 
	mRTNLGRP_ND_USEROPT
,

751 
	#RTNLGRP_ND_USEROPT
 
RTNLGRP_ND_USEROPT


	)

752 
	mRTNLGRP_PHONET_IFADDR
,

753 
	#RTNLGRP_PHONET_IFADDR
 
RTNLGRP_PHONET_IFADDR


	)

754 
	mRTNLGRP_PHONET_ROUTE
,

755 
	#RTNLGRP_PHONET_ROUTE
 
RTNLGRP_PHONET_ROUTE


	)

756 
	mRTNLGRP_DCB
,

757 
	#RTNLGRP_DCB
 
RTNLGRP_DCB


	)

758 
	mRTNLGRP_IPV4_NETCONF
,

759 
	#RTNLGRP_IPV4_NETCONF
 
RTNLGRP_IPV4_NETCONF


	)

760 
	mRTNLGRP_IPV6_NETCONF
,

761 
	#RTNLGRP_IPV6_NETCONF
 
RTNLGRP_IPV6_NETCONF


	)

762 
	mRTNLGRP_MDB
,

763 
	#RTNLGRP_MDB
 
RTNLGRP_MDB


	)

764 
	mRTNLGRP_MPLS_ROUTE
,

765 
	#RTNLGRP_MPLS_ROUTE
 
RTNLGRP_MPLS_ROUTE


	)

766 
	mRTNLGRP_NSID
,

767 
	#RTNLGRP_NSID
 
RTNLGRP_NSID


	)

768 
	mRTNLGRP_MPLS_NETCONF
,

769 
	#RTNLGRP_MPLS_NETCONF
 
RTNLGRP_MPLS_NETCONF


	)

770 
	mRTNLGRP_IPV4_MROUTE_R
,

771 
	#RTNLGRP_IPV4_MROUTE_R
 
RTNLGRP_IPV4_MROUTE_R


	)

772 
	mRTNLGRP_IPV6_MROUTE_R
,

773 
	#RTNLGRP_IPV6_MROUTE_R
 
RTNLGRP_IPV6_MROUTE_R


	)

774 
	mRTNLGRP_NEXTHOP
,

775 
	#RTNLGRP_NEXTHOP
 
RTNLGRP_NEXTHOP


	)

776 
	mRTNLGRP_BRVLAN
,

777 
	#RTNLGRP_BRVLAN
 
RTNLGRP_BRVLAN


	)

778 
	mRTNLGRP_MCTP_IFADDR
,

779 
	#RTNLGRP_MCTP_IFADDR
 
RTNLGRP_MCTP_IFADDR


	)

780 
	mRTNLGRP_TUNNEL
,

781 
	#RTNLGRP_TUNNEL
 
RTNLGRP_TUNNEL


	)

782 
	mRTNLGRP_STATS
,

783 
	#RTNLGRP_STATS
 
RTNLGRP_STATS


	)

784 
	mRTNLGRP_IPV4_MCADDR
,

785 
	#RTNLGRP_IPV4_MCADDR
 
RTNLGRP_IPV4_MCADDR


	)

786 
	mRTNLGRP_IPV6_MCADDR
,

787 
	#RTNLGRP_IPV6_MCADDR
 
RTNLGRP_IPV6_MCADDR


	)

788 
	mRTNLGRP_IPV6_ACADDR
,

789 
	#RTNLGRP_IPV6_ACADDR
 
RTNLGRP_IPV6_ACADDR


	)

790 
	m__RTNLGRP_MAX


792 
	#RTNLGRP_MAX
 (
__RTNLGRP_MAX
 - 1)

	)

795 
	stˇmsg
 {

796 
	mtˇ_Ámûy
;

797 
	mtˇ__∑d1
;

798 
	mtˇ__∑d2
;

802 
	mTCA_ROOT_UNSPEC
,

803 
	mTCA_ROOT_TAB
,

804 
	#TCA_ACT_TAB
 
TCA_ROOT_TAB


	)

805 
	#TCAA_MAX
 
TCA_ROOT_TAB


	)

806 
	mTCA_ROOT_FLAGS
,

807 
	mTCA_ROOT_COUNT
,

808 
	mTCA_ROOT_TIME_DELTA
,

809 
	mTCA_ROOT_EXT_WARN_MSG
,

810 
	m__TCA_ROOT_MAX
,

811 
	#TCA_ROOT_MAX
 (
__TCA_ROOT_MAX
 - 1)

	)

814 
	#TA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
tˇmsg
))))

	)

815 
	#TA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
tˇmsg
))

	)

827 
	#TCA_FLAG_LARGE_DUMP_ON
 (1 << 0)

	)

828 
	#TCA_ACT_FLAG_LARGE_DUMP_ON
 
TCA_FLAG_LARGE_DUMP_ON


	)

829 
	#TCA_ACT_FLAG_TERSE_DUMP
 (1 << 1)

	)

832 
	#RTEXT_FILTER_VF
 (1 << 0)

	)

833 
	#RTEXT_FILTER_BRVLAN
 (1 << 1)

	)

834 
	#RTEXT_FILTER_BRVLAN_COMPRESSED
 (1 << 2)

	)

835 
	#RTEXT_FILTER_SKIP_STATS
 (1 << 3)

	)

836 
	#RTEXT_FILTER_MRP
 (1 << 4)

	)

837 
	#RTEXT_FILTER_CFM_CONFIG
 (1 << 5)

	)

838 
	#RTEXT_FILTER_CFM_STATUS
 (1 << 6)

	)

839 
	#RTEXT_FILTER_MST
 (1 << 7)

	)

	@/usr/include/linux/sched.h

2 #i‚de‡
_LINUX_SCHED_H


3 
	#_LINUX_SCHED_H


	)

5 
	~<löux/ty≥s.h
>

10 
	#CSIGNAL
 0x000000f‡

	)

11 
	#CLONE_VM
 0x00000100

	)

12 
	#CLONE_FS
 0x00000200

	)

13 
	#CLONE_FILES
 0x00000400

	)

14 
	#CLONE_SIGHAND
 0x00000800

	)

15 
	#CLONE_PIDFD
 0x00001000

	)

16 
	#CLONE_PTRACE
 0x00002000

	)

17 
	#CLONE_VFORK
 0x00004000

	)

18 
	#CLONE_PARENT
 0x00008000

	)

19 
	#CLONE_THREAD
 0x00010000

	)

20 
	#CLONE_NEWNS
 0x00020000

	)

21 
	#CLONE_SYSVSEM
 0x00040000

	)

22 
	#CLONE_SETTLS
 0x00080000

	)

23 
	#CLONE_PARENT_SETTID
 0x00100000

	)

24 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

25 
	#CLONE_DETACHED
 0x00400000

	)

26 
	#CLONE_UNTRACED
 0x00800000

	)

27 
	#CLONE_CHILD_SETTID
 0x01000000

	)

28 
	#CLONE_NEWCGROUP
 0x02000000

	)

29 
	#CLONE_NEWUTS
 0x04000000

	)

30 
	#CLONE_NEWIPC
 0x08000000

	)

31 
	#CLONE_NEWUSER
 0x10000000

	)

32 
	#CLONE_NEWPID
 0x20000000

	)

33 
	#CLONE_NEWNET
 0x40000000

	)

34 
	#CLONE_IO
 0x80000000

	)

37 
	#CLONE_CLEAR_SIGHAND
 0x100000000ULL

	)

38 
	#CLONE_INTO_CGROUP
 0x200000000ULL

	)

44 
	#CLONE_NEWTIME
 0x00000080

	)

46 #i‚de‡
__ASSEMBLY__


92 
	s˛⁄e_¨gs
 {

93 
__Æig√d_u64
 
	mÊags
;

94 
__Æig√d_u64
 
	mpidfd
;

95 
__Æig√d_u64
 
	mchûd_tid
;

96 
__Æig√d_u64
 
	m∑ª¡_tid
;

97 
__Æig√d_u64
 
	mexô_sig«l
;

98 
__Æig√d_u64
 
	m°ack
;

99 
__Æig√d_u64
 
	m°ack_size
;

100 
__Æig√d_u64
 
	més
;

101 
__Æig√d_u64
 
	m£t_tid
;

102 
__Æig√d_u64
 
	m£t_tid_size
;

103 
__Æig√d_u64
 
	mcgroup
;

107 
	#CLONE_ARGS_SIZE_VER0
 64

	)

108 
	#CLONE_ARGS_SIZE_VER1
 80

	)

109 
	#CLONE_ARGS_SIZE_VER2
 88

	)

114 
	#SCHED_NORMAL
 0

	)

115 
	#SCHED_FIFO
 1

	)

116 
	#SCHED_RR
 2

	)

117 
	#SCHED_BATCH
 3

	)

119 
	#SCHED_IDLE
 5

	)

120 
	#SCHED_DEADLINE
 6

	)

121 
	#SCHED_EXT
 7

	)

124 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

129 
	#SCHED_FLAG_RESET_ON_FORK
 0x01

	)

130 
	#SCHED_FLAG_RECLAIM
 0x02

	)

131 
	#SCHED_FLAG_DL_OVERRUN
 0x04

	)

132 
	#SCHED_FLAG_KEEP_POLICY
 0x08

	)

133 
	#SCHED_FLAG_KEEP_PARAMS
 0x10

	)

134 
	#SCHED_FLAG_UTIL_CLAMP_MIN
 0x20

	)

135 
	#SCHED_FLAG_UTIL_CLAMP_MAX
 0x40

	)

137 
	#SCHED_FLAG_KEEP_ALL
 (
SCHED_FLAG_KEEP_POLICY
 | \

138 
SCHED_FLAG_KEEP_PARAMS
)

	)

140 
	#SCHED_FLAG_UTIL_CLAMP
 (
SCHED_FLAG_UTIL_CLAMP_MIN
 | \

141 
SCHED_FLAG_UTIL_CLAMP_MAX
)

	)

143 
	#SCHED_FLAG_ALL
 (
SCHED_FLAG_RESET_ON_FORK
 | \

144 
SCHED_FLAG_RECLAIM
 | \

145 
SCHED_FLAG_DL_OVERRUN
 | \

146 
SCHED_FLAG_KEEP_ALL
 | \

147 
SCHED_FLAG_UTIL_CLAMP
)

	)

	@/usr/include/linux/socket.h

2 #i‚de‡
_LINUX_SOCKET_H


3 
	#_LINUX_SOCKET_H


	)

8 
	#_K_SS_MAXSIZE
 128

	)

10 
	t__kî√l_ß_Ámûy_t
;

16 
	s__kî√l_sockaddr_°‹age
 {

19 
__kî√l_ß_Ámûy_t
 
	mss_Ámûy
;

21 
	m__d©a
[
_K_SS_MAXSIZE
 - ()];

25 *
	m__Æign
;

29 
	#SOCK_SNDBUF_LOCK
 1

	)

30 
	#SOCK_RCVBUF_LOCK
 2

	)

32 
	#SOCK_BUF_LOCK_MASK
 (
SOCK_SNDBUF_LOCK
 | 
SOCK_RCVBUF_LOCK
)

	)

34 
	#SOCK_TXREHASH_DEFAULT
 255

	)

35 
	#SOCK_TXREHASH_DISABLED
 0

	)

36 
	#SOCK_TXREHASH_ENABLED
 1

	)

	@/usr/include/linux/stddef.h

2 #i‚de‡
_LINUX_STDDEF_H


3 
	#_LINUX_STDDEF_H


	)

7 #i‚de‡
__Æways_ölöe


8 
	#__Æways_ölöe
 
__ölöe__


	)

12 #i‚de‡
__˝lu•lus


13 
	#__°ru˘_group_èg
(
TAG
Ë
	)
TAG

15 
	#__°ru˘_group_èg
(
TAG
)

	)

33 
	#__°ru˘_group
(
TAG
, 
NAME
, 
ATTRS
, 
MEMBERS
...) \

35 °ru˘ { 
MEMBERS
 } 
ATTRS
; \

36 
	`__°ru˘_group_èg
(
TAG
Ë{ 
MEMBERS
 } 
ATTRS
 
NAME
; \

37 } 
ATTRS


	)

39 #ifde‡
__˝lu•lus


41 
	#__DECLARE_FLEX_ARRAY
(
T
, 
membî
) \

42 
T
 
membî
[0]

	)

54 
	#__DECLARE_FLEX_ARRAY
(
TYPE
, 
NAME
) \

56 °ru˘ { } 
__em±y_
 ## 
NAME
; \

57 
TYPE
 
NAME
[]; \

58 }

	)

61 #i‚de‡
__cou¡ed_by


62 
	#__cou¡ed_by
(
m
)

	)

65 #i‚de‡
__cou¡ed_by_À


66 
	#__cou¡ed_by_À
(
m
)

	)

69 #i‚de‡
__cou¡ed_by_be


70 
	#__cou¡ed_by_be
(
m
)

	)

	@/usr/include/linux/string.h

2 #i‚de‡
_LINUX_STRING_H_


3 
	#_LINUX_STRING_H_


	)

7 
	~<°rög.h
>

	@/usr/include/linux/types.h

2 #i‚de‡
_LINUX_TYPES_H


3 
	#_LINUX_TYPES_H


	)

5 
	~<asm/ty≥s.h
>

7 #i‚de‡
__ASSEMBLY__


9 
	~<löux/posix_ty≥s.h
>

11 #ifde‡
__SIZEOF_INT128__


12 
__sig√d__
 
	t__öt128
 
	t__s128
 
	t__©åibuã__
((
	tÆig√d
(16)));

13 
	t__öt128
 
	t__u128
 
	t__©åibuã__
((
	tÆig√d
(16)));

22 #ifde‡
__CHECKER__


23 
	#__bôwi£
 
	`__©åibuã__
((
bôwi£
))

	)

25 
	#__bôwi£


	)

29 
	#__bôwi£__
 
__bôwi£


	)

31 
__u16
 
	t__bôwi£
 
	t__À16
;

32 
__u16
 
	t__bôwi£
 
	t__be16
;

33 
__u32
 
	t__bôwi£
 
	t__À32
;

34 
__u32
 
	t__bôwi£
 
	t__be32
;

35 
__u64
 
	t__bôwi£
 
	t__À64
;

36 
__u64
 
	t__bôwi£
 
	t__be64
;

38 
__u16
 
	t__bôwi£
 
	t__sum16
;

39 
__u32
 
	t__bôwi£
 
	t__wsum
;

50 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

51 
	#__Æig√d_s64
 
__s64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

52 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

53 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

55 
	t__bôwi£
 
	t__pﬁl_t
;

	@/usr/include/linux/udp.h

18 #i‚de‡
_LINUX_UDP_H


19 
	#_LINUX_UDP_H


	)

21 
	~<löux/ty≥s.h
>

23 
	sudphdr
 {

24 
__be16
 
	msour˚
;

25 
__be16
 
	mde°
;

26 
__be16
 
	mÀn
;

27 
__sum16
 
	mcheck
;

31 
	#UDP_CORK
 1

	)

32 
	#UDP_ENCAP
 100

	)

33 
	#UDP_NO_CHECK6_TX
 101

	)

34 
	#UDP_NO_CHECK6_RX
 102

	)

35 
	#UDP_SEGMENT
 103

	)

36 
	#UDP_GRO
 104

	)

39 
	#UDP_ENCAP_ESPINUDP_NON_IKE
 1

	)

40 
	#UDP_ENCAP_ESPINUDP
 2

	)

41 
	#UDP_ENCAP_L2TPINUDP
 3

	)

42 
	#UDP_ENCAP_GTP0
 4

	)

43 
	#UDP_ENCAP_GTP1U
 5

	)

44 
	#UDP_ENCAP_RXRPC
 6

	)

45 
	#TCP_ENCAP_ESPINTCP
 7

	)

	@/usr/include/linux/version.h

1 
	#LINUX_VERSION_CODE
 396800

	)

2 
	#KERNEL_VERSION
(
a
,
b
,
c
Ë((◊Ë<< 16Ë+ ((bË<< 8Ë+ ((cË> 255 ? 255 : (c)))

	)

3 
	#LINUX_VERSION_MAJOR
 6

	)

4 
	#LINUX_VERSION_PATCHLEVEL
 14

	)

5 
	#LINUX_VERSION_SUBLEVEL
 0

	)

	@/usr/include/linux/wait.h

2 #i‚de‡
_LINUX_WAIT_H


3 
	#_LINUX_WAIT_H


	)

5 
	#WNOHANG
 0x00000001

	)

6 
	#WUNTRACED
 0x00000002

	)

7 
	#WSTOPPED
 
WUNTRACED


	)

8 
	#WEXITED
 0x00000004

	)

9 
	#WCONTINUED
 0x00000008

	)

10 
	#WNOWAIT
 0x01000000

	)

12 
	#__WNOTHREAD
 0x20000000

	)

13 
	#__WALL
 0x40000000

	)

14 
	#__WCLONE
 0x80000000

	)

17 
	#P_ALL
 0

	)

18 
	#P_PID
 1

	)

19 
	#P_PGID
 2

	)

20 
	#P_PIDFD
 3

	)

	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

32 
	#MB_LEN_MAX
 16

	)

37 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

42 #i‚de‡
_LIMITS_H


43 
	#_LIMITS_H
 1

	)

45 
	~<bôs/w‹dsize.h
>

54 
	#CHAR_BIT
 8

	)

57 
	#SCHAR_MIN
 (-128)

	)

58 
	#SCHAR_MAX
 127

	)

61 
	#UCHAR_MAX
 255

	)

64 #ifde‡
__CHAR_UNSIGNED__


65 
	#CHAR_MIN
 0

	)

66 
	#CHAR_MAX
 
UCHAR_MAX


	)

68 
	#CHAR_MIN
 
SCHAR_MIN


	)

69 
	#CHAR_MAX
 
SCHAR_MAX


	)

73 
	#SHRT_MIN
 (-32768)

	)

74 
	#SHRT_MAX
 32767

	)

77 
	#USHRT_MAX
 65535

	)

80 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

81 
	#INT_MAX
 2147483647

	)

84 
	#UINT_MAX
 4294967295U

	)

87 #i‡
__WORDSIZE
 == 64

88 
	#LONG_MAX
 9223372036854775807L

	)

90 
	#LONG_MAX
 2147483647L

	)

92 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

95 #i‡
__WORDSIZE
 == 64

96 
	#ULONG_MAX
 18446744073709551615UL

	)

98 
	#ULONG_MAX
 4294967295UL

	)

101 #ifde‡
__USE_ISOC99


104 
	#LLONG_MAX
 9223372036854775807LL

	)

105 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

108 
	#ULLONG_MAX
 18446744073709551615ULL

	)

122 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


124 #ö˛ude_√xà<
limôs
.
h
>

130 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


131 #i‚de‡
LLONG_MIN


132 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

134 #i‚de‡
LLONG_MAX


135 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

137 #i‚de‡
ULLONG_MAX


138 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

145 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C23
)

146 #i‚de‡
CHAR_WIDTH


147 
	#CHAR_WIDTH
 8

	)

149 #i‚de‡
SCHAR_WIDTH


150 
	#SCHAR_WIDTH
 8

	)

152 #i‚de‡
UCHAR_WIDTH


153 
	#UCHAR_WIDTH
 8

	)

155 #i‚de‡
SHRT_WIDTH


156 
	#SHRT_WIDTH
 16

	)

158 #i‚de‡
USHRT_WIDTH


159 
	#USHRT_WIDTH
 16

	)

161 #i‚de‡
INT_WIDTH


162 
	#INT_WIDTH
 32

	)

164 #i‚de‡
UINT_WIDTH


165 
	#UINT_WIDTH
 32

	)

167 #i‚de‡
LONG_WIDTH


168 
	#LONG_WIDTH
 
__WORDSIZE


	)

170 #i‚de‡
ULONG_WIDTH


171 
	#ULONG_WIDTH
 
__WORDSIZE


	)

173 #i‚de‡
LLONG_WIDTH


174 
	#LLONG_WIDTH
 64

	)

176 #i‚de‡
ULLONG_WIDTH


177 
	#ULLONG_WIDTH
 64

	)

184 #i‡
__GLIBC_USE
 (
ISOC23
)

185 #i‚de‡
BOOL_MAX


186 
	#BOOL_MAX
 1

	)

188 #i‚de‡
BOOL_WIDTH


189 
	#BOOL_WIDTH
 1

	)

193 #ifdef 
__USE_POSIX


195 
	~<bôs/posix1_lim.h
>

198 #ifdef 
__USE_POSIX2


199 
	~<bôs/posix2_lim.h
>

202 #ifdef 
__USE_XOPEN


203 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/const.h

4 #i‚de‡
_LINUX_CONST_H


5 
	#_LINUX_CONST_H


	)

16 #ifde‡
__ASSEMBLY__


17 
	#_AC
(
X
,
Y
Ë
	)
X

18 
	#_AT
(
T
,
X
Ë
	)
X

20 
	#__AC
(
X
,
Y
Ë(X##Y)

	)

21 
	#_AC
(
X
,
Y
Ë
	`__AC
(X,Y)

	)

22 
	#_AT
(
T
,
X
Ë((T)(X))

	)

25 
	#_UL
(
x
Ë(
	`_AC
(x, 
UL
))

	)

26 
	#_ULL
(
x
Ë(
	`_AC
(x, 
ULL
))

	)

28 
	#_BITUL
(
x
Ë(
	`_UL
(1Ë<< (x))

	)

29 
	#_BITULL
(
x
Ë(
	`_ULL
(1Ë<< (x))

	)

31 #i‡!
deföed
(
__ASSEMBLY__
)

45 
	#_BIT128
(
x
Ë((
__öt128
)(1Ë<< (x))

	)

48 
	#__ALIGN_KERNEL
(
x
, 
a
Ë
	`__ALIGN_KERNEL_MASK
(x, (
	`__ty≥of__
(x))◊Ë- 1)

	)

49 
	#__ALIGN_KERNEL_MASK
(
x
, 
mask
Ë(((xË+ (mask)Ë& ~(mask))

	)

51 
	#__KERNEL_DIV_ROUND_UP
(
n
, 
d
Ë((“Ë+ (dË- 1Ë/ (d))

	)

	@/usr/include/linux/hdlc/ioctl.h

2 #i‚de‡
__HDLC_IOCTL_H__


3 
	#__HDLC_IOCTL_H__


	)

6 
	#GENERIC_HDLC_VERSION
 4

	)

8 
	#CLOCK_DEFAULT
 0

	)

9 
	#CLOCK_EXT
 1

	)

10 
	#CLOCK_INT
 2

	)

11 
	#CLOCK_TXINT
 3

	)

12 
	#CLOCK_TXFROMRX
 4

	)

15 
	#ENCODING_DEFAULT
 0

	)

16 
	#ENCODING_NRZ
 1

	)

17 
	#ENCODING_NRZI
 2

	)

18 
	#ENCODING_FM_MARK
 3

	)

19 
	#ENCODING_FM_SPACE
 4

	)

20 
	#ENCODING_MANCHESTER
 5

	)

23 
	#PARITY_DEFAULT
 0

	)

24 
	#PARITY_NONE
 1

	)

25 
	#PARITY_CRC16_PR0
 2

	)

26 
	#PARITY_CRC16_PR1
 3

	)

27 
	#PARITY_CRC16_PR0_CCITT
 4

	)

28 
	#PARITY_CRC16_PR1_CCITT
 5

	)

29 
	#PARITY_CRC32_PR0_CCITT
 6

	)

30 
	#PARITY_CRC32_PR1_CCITT
 7

	)

32 
	#LMI_DEFAULT
 0

	)

33 
	#LMI_NONE
 1

	)

34 
	#LMI_ANSI
 2

	)

35 
	#LMI_CCITT
 3

	)

36 
	#LMI_CISCO
 4

	)

38 #i‚de‡
__ASSEMBLY__


41 
	m˛ock_øã
;

42 
	m˛ock_ty≥
;

43 
	mlo›back
;

44 } 
	tsync_£rül_£âögs
;

47 
	m˛ock_øã
;

48 
	m˛ock_ty≥
;

49 
	mlo›back
;

50 
	m¶Ÿ_m≠
;

51 } 
	tã1_£âögs
;

54 
	mícodög
;

55 
	m∑rôy
;

56 } 
	tøw_hdlc_¥Ÿo
;

59 
	mt391
;

60 
	mt392
;

61 
	mn391
;

62 
	mn392
;

63 
	mn393
;

64 
	mlmi
;

65 
	md˚
;

66 } 
	t‰_¥Ÿo
;

69 
	mdlci
;

70 } 
	t‰_¥Ÿo_pvc
;

73 
	mdlci
;

74 
	mma°î
[
IFNAMSIZ
];

75 }
	t‰_¥Ÿo_pvc_öfo
;

78 
	möãrvÆ
;

79 
	mtimeout
;

80 } 
	tcisco_¥Ÿo
;

83 
	md˚
;

84 
	mmodulo
;

85 
	mwödow
;

86 
	mt1
;

87 
	mt2
;

88 
	mn2
;

89 } 
	tx25_hdlc_¥Ÿo
;

	@/usr/include/linux/if_addr.h

2 #i‚de‡
__LINUX_IF_ADDR_H


3 
	#__LINUX_IF_ADDR_H


	)

5 
	~<löux/ty≥s.h
>

6 
	~<löux/√éök.h
>

8 
	siÁddrmsg
 {

9 
__u8
 
	miÁ_Ámûy
;

10 
__u8
 
	miÁ_¥efixÀn
;

11 
__u8
 
	miÁ_Êags
;

12 
__u8
 
	miÁ_sc›e
;

13 
__u32
 
	miÁ_ödex
;

27 
	mIFA_UNSPEC
,

28 
	mIFA_ADDRESS
,

29 
	mIFA_LOCAL
,

30 
	mIFA_LABEL
,

31 
	mIFA_BROADCAST
,

32 
	mIFA_ANYCAST
,

33 
	mIFA_CACHEINFO
,

34 
	mIFA_MULTICAST
,

35 
	mIFA_FLAGS
,

36 
	mIFA_RT_PRIORITY
,

37 
	mIFA_TARGET_NETNSID
,

38 
	mIFA_PROTO
,

39 
	m__IFA_MAX
,

42 
	#IFA_MAX
 (
__IFA_MAX
 - 1)

	)

45 
	#IFA_F_SECONDARY
 0x01

	)

46 
	#IFA_F_TEMPORARY
 
IFA_F_SECONDARY


	)

48 
	#IFA_F_NODAD
 0x02

	)

49 
	#IFA_F_OPTIMISTIC
 0x04

	)

50 
	#IFA_F_DADFAILED
 0x08

	)

51 
	#IFA_F_HOMEADDRESS
 0x10

	)

52 
	#IFA_F_DEPRECATED
 0x20

	)

53 
	#IFA_F_TENTATIVE
 0x40

	)

54 
	#IFA_F_PERMANENT
 0x80

	)

55 
	#IFA_F_MANAGETEMPADDR
 0x100

	)

56 
	#IFA_F_NOPREFIXROUTE
 0x200

	)

57 
	#IFA_F_MCAUTOJOIN
 0x400

	)

58 
	#IFA_F_STABLE_PRIVACY
 0x800

	)

60 
	siÁ_ˇcheöfo
 {

61 
__u32
 
	miÁ_¥e„ªd
;

62 
__u32
 
	miÁ_vÆid
;

63 
__u32
 
	mc°amp
;

64 
__u32
 
	mt°amp
;

68 
	#IFA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
iÁddrmsg
))))

	)

69 
	#IFA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
iÁddrmsg
))

	)

72 
	#IFAPROT_UNSPEC
 0

	)

73 
	#IFAPROT_KERNEL_LO
 1

	)

74 
	#IFAPROT_KERNEL_RA
 2

	)

75 
	#IFAPROT_KERNEL_LL
 3

	)

	@/usr/include/linux/if_link.h

2 #i‚de‡
_LINUX_IF_LINK_H


3 
	#_LINUX_IF_LINK_H


	)

5 
	~<löux/ty≥s.h
>

6 
	~<löux/√éök.h
>

9 
	sπ∆_lök_°©s
 {

10 
__u32
 
	mrx_∑ckës
;

11 
__u32
 
	mtx_∑ckës
;

12 
__u32
 
	mrx_byãs
;

13 
__u32
 
	mtx_byãs
;

14 
__u32
 
	mrx_îr‹s
;

15 
__u32
 
	mtx_îr‹s
;

16 
__u32
 
	mrx_dr›≥d
;

17 
__u32
 
	mtx_dr›≥d
;

18 
__u32
 
	mmu…iˇ°
;

19 
__u32
 
	mcﬁlisi⁄s
;

21 
__u32
 
	mrx_Àngth_îr‹s
;

22 
__u32
 
	mrx_ovî_îr‹s
;

23 
__u32
 
	mrx_¸c_îr‹s
;

24 
__u32
 
	mrx_‰ame_îr‹s
;

25 
__u32
 
	mrx_fifo_îr‹s
;

26 
__u32
 
	mrx_mis£d_îr‹s
;

29 
__u32
 
	mtx_ab‹ãd_îr‹s
;

30 
__u32
 
	mtx_ˇºõr_îr‹s
;

31 
__u32
 
	mtx_fifo_îr‹s
;

32 
__u32
 
	mtx_hóπbót_îr‹s
;

33 
__u32
 
	mtx_wödow_îr‹s
;

36 
__u32
 
	mrx_com¥es£d
;

37 
__u32
 
	mtx_com¥es£d
;

39 
__u32
 
	mrx_noh™dÀr
;

218 
	sπ∆_lök_°©s64
 {

219 
__u64
 
	mrx_∑ckës
;

220 
__u64
 
	mtx_∑ckës
;

221 
__u64
 
	mrx_byãs
;

222 
__u64
 
	mtx_byãs
;

223 
__u64
 
	mrx_îr‹s
;

224 
__u64
 
	mtx_îr‹s
;

225 
__u64
 
	mrx_dr›≥d
;

226 
__u64
 
	mtx_dr›≥d
;

227 
__u64
 
	mmu…iˇ°
;

228 
__u64
 
	mcﬁlisi⁄s
;

231 
__u64
 
	mrx_Àngth_îr‹s
;

232 
__u64
 
	mrx_ovî_îr‹s
;

233 
__u64
 
	mrx_¸c_îr‹s
;

234 
__u64
 
	mrx_‰ame_îr‹s
;

235 
__u64
 
	mrx_fifo_îr‹s
;

236 
__u64
 
	mrx_mis£d_îr‹s
;

239 
__u64
 
	mtx_ab‹ãd_îr‹s
;

240 
__u64
 
	mtx_ˇºõr_îr‹s
;

241 
__u64
 
	mtx_fifo_îr‹s
;

242 
__u64
 
	mtx_hóπbót_îr‹s
;

243 
__u64
 
	mtx_wödow_îr‹s
;

246 
__u64
 
	mrx_com¥es£d
;

247 
__u64
 
	mtx_com¥es£d
;

248 
__u64
 
	mrx_noh™dÀr
;

250 
__u64
 
	mrx_Ÿhîho°_dr›≥d
;

256 
	sπ∆_hw_°©s64
 {

257 
__u64
 
	mrx_∑ckës
;

258 
__u64
 
	mtx_∑ckës
;

259 
__u64
 
	mrx_byãs
;

260 
__u64
 
	mtx_byãs
;

261 
__u64
 
	mrx_îr‹s
;

262 
__u64
 
	mtx_îr‹s
;

263 
__u64
 
	mrx_dr›≥d
;

264 
__u64
 
	mtx_dr›≥d
;

265 
__u64
 
	mmu…iˇ°
;

269 
	sπ∆_lök_ifm≠
 {

270 
__u64
 
	mmem_°¨t
;

271 
__u64
 
	mmem_íd
;

272 
__u64
 
	mba£_addr
;

273 
__u16
 
	múq
;

274 
__u8
 
	mdma
;

275 
__u8
 
	mp‹t
;

297 
	mIFLA_UNSPEC
,

298 
	mIFLA_ADDRESS
,

299 
	mIFLA_BROADCAST
,

300 
	mIFLA_IFNAME
,

301 
	mIFLA_MTU
,

302 
	mIFLA_LINK
,

303 
	mIFLA_QDISC
,

304 
	mIFLA_STATS
,

305 
	mIFLA_COST
,

306 
	#IFLA_COST
 
IFLA_COST


	)

307 
	mIFLA_PRIORITY
,

308 
	#IFLA_PRIORITY
 
IFLA_PRIORITY


	)

309 
	mIFLA_MASTER
,

310 
	#IFLA_MASTER
 
IFLA_MASTER


	)

311 
	mIFLA_WIRELESS
,

312 
	#IFLA_WIRELESS
 
IFLA_WIRELESS


	)

313 
	mIFLA_PROTINFO
,

314 
	#IFLA_PROTINFO
 
IFLA_PROTINFO


	)

315 
	mIFLA_TXQLEN
,

316 
	#IFLA_TXQLEN
 
IFLA_TXQLEN


	)

317 
	mIFLA_MAP
,

318 
	#IFLA_MAP
 
IFLA_MAP


	)

319 
	mIFLA_WEIGHT
,

320 
	#IFLA_WEIGHT
 
IFLA_WEIGHT


	)

321 
	mIFLA_OPERSTATE
,

322 
	mIFLA_LINKMODE
,

323 
	mIFLA_LINKINFO
,

324 
	#IFLA_LINKINFO
 
IFLA_LINKINFO


	)

325 
	mIFLA_NET_NS_PID
,

326 
	mIFLA_IFALIAS
,

327 
	mIFLA_NUM_VF
,

328 
	mIFLA_VFINFO_LIST
,

329 
	mIFLA_STATS64
,

330 
	mIFLA_VF_PORTS
,

331 
	mIFLA_PORT_SELF
,

332 
	mIFLA_AF_SPEC
,

333 
	mIFLA_GROUP
,

334 
	mIFLA_NET_NS_FD
,

335 
	mIFLA_EXT_MASK
,

336 
	mIFLA_PROMISCUITY
,

337 
	#IFLA_PROMISCUITY
 
IFLA_PROMISCUITY


	)

338 
	mIFLA_NUM_TX_QUEUES
,

339 
	mIFLA_NUM_RX_QUEUES
,

340 
	mIFLA_CARRIER
,

341 
	mIFLA_PHYS_PORT_ID
,

342 
	mIFLA_CARRIER_CHANGES
,

343 
	mIFLA_PHYS_SWITCH_ID
,

344 
	mIFLA_LINK_NETNSID
,

345 
	mIFLA_PHYS_PORT_NAME
,

346 
	mIFLA_PROTO_DOWN
,

347 
	mIFLA_GSO_MAX_SEGS
,

348 
	mIFLA_GSO_MAX_SIZE
,

349 
	mIFLA_PAD
,

350 
	mIFLA_XDP
,

351 
	mIFLA_EVENT
,

352 
	mIFLA_NEW_NETNSID
,

353 
	mIFLA_IF_NETNSID
,

354 
	mIFLA_TARGET_NETNSID
 = 
IFLA_IF_NETNSID
,

355 
	mIFLA_CARRIER_UP_COUNT
,

356 
	mIFLA_CARRIER_DOWN_COUNT
,

357 
	mIFLA_NEW_IFINDEX
,

358 
	mIFLA_MIN_MTU
,

359 
	mIFLA_MAX_MTU
,

360 
	mIFLA_PROP_LIST
,

361 
	mIFLA_ALT_IFNAME
,

362 
	mIFLA_PERM_ADDRESS
,

363 
	mIFLA_PROTO_DOWN_REASON
,

368 
	mIFLA_PARENT_DEV_NAME
,

369 
	mIFLA_PARENT_DEV_BUS_NAME
,

370 
	mIFLA_GRO_MAX_SIZE
,

371 
	mIFLA_TSO_MAX_SIZE
,

372 
	mIFLA_TSO_MAX_SEGS
,

373 
	mIFLA_ALLMULTI
,

375 
	mIFLA_DEVLINK_PORT
,

377 
	mIFLA_GSO_IPV4_MAX_SIZE
,

378 
	mIFLA_GRO_IPV4_MAX_SIZE
,

379 
	mIFLA_DPLL_PIN
,

380 
	mIFLA_MAX_PACING_OFFLOAD_HORIZON
,

381 
	m__IFLA_MAX


385 
	#IFLA_MAX
 (
__IFLA_MAX
 - 1)

	)

388 
	mIFLA_PROTO_DOWN_REASON_UNSPEC
,

389 
	mIFLA_PROTO_DOWN_REASON_MASK
,

390 
	mIFLA_PROTO_DOWN_REASON_VALUE
,

392 
	m__IFLA_PROTO_DOWN_REASON_CNT
,

393 
	mIFLA_PROTO_DOWN_REASON_MAX
 = 
__IFLA_PROTO_DOWN_REASON_CNT
 - 1

397 
	#IFLA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
iföfomsg
))))

	)

398 
	#IFLA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
iföfomsg
))

	)

401 
	mIFLA_INET_UNSPEC
,

402 
	mIFLA_INET_CONF
,

403 
	m__IFLA_INET_MAX
,

406 
	#IFLA_INET_MAX
 (
__IFLA_INET_MAX
 - 1)

	)

439 
	mIFLA_INET6_UNSPEC
,

440 
	mIFLA_INET6_FLAGS
,

441 
	mIFLA_INET6_CONF
,

442 
	mIFLA_INET6_STATS
,

443 
	mIFLA_INET6_MCAST
,

444 
	mIFLA_INET6_CACHEINFO
,

445 
	mIFLA_INET6_ICMP6STATS
,

446 
	mIFLA_INET6_TOKEN
,

447 
	mIFLA_INET6_ADDR_GEN_MODE
,

448 
	mIFLA_INET6_RA_MTU
,

449 
	m__IFLA_INET6_MAX


452 
	#IFLA_INET6_MAX
 (
__IFLA_INET6_MAX
 - 1)

	)

454 
	eö6_addr_gí_mode
 {

455 
	mIN6_ADDR_GEN_MODE_EUI64
,

456 
	mIN6_ADDR_GEN_MODE_NONE
,

457 
	mIN6_ADDR_GEN_MODE_STABLE_PRIVACY
,

458 
	mIN6_ADDR_GEN_MODE_RANDOM
,

744 
	mIFLA_BR_UNSPEC
,

745 
	mIFLA_BR_FORWARD_DELAY
,

746 
	mIFLA_BR_HELLO_TIME
,

747 
	mIFLA_BR_MAX_AGE
,

748 
	mIFLA_BR_AGEING_TIME
,

749 
	mIFLA_BR_STP_STATE
,

750 
	mIFLA_BR_PRIORITY
,

751 
	mIFLA_BR_VLAN_FILTERING
,

752 
	mIFLA_BR_VLAN_PROTOCOL
,

753 
	mIFLA_BR_GROUP_FWD_MASK
,

754 
	mIFLA_BR_ROOT_ID
,

755 
	mIFLA_BR_BRIDGE_ID
,

756 
	mIFLA_BR_ROOT_PORT
,

757 
	mIFLA_BR_ROOT_PATH_COST
,

758 
	mIFLA_BR_TOPOLOGY_CHANGE
,

759 
	mIFLA_BR_TOPOLOGY_CHANGE_DETECTED
,

760 
	mIFLA_BR_HELLO_TIMER
,

761 
	mIFLA_BR_TCN_TIMER
,

762 
	mIFLA_BR_TOPOLOGY_CHANGE_TIMER
,

763 
	mIFLA_BR_GC_TIMER
,

764 
	mIFLA_BR_GROUP_ADDR
,

765 
	mIFLA_BR_FDB_FLUSH
,

766 
	mIFLA_BR_MCAST_ROUTER
,

767 
	mIFLA_BR_MCAST_SNOOPING
,

768 
	mIFLA_BR_MCAST_QUERY_USE_IFADDR
,

769 
	mIFLA_BR_MCAST_QUERIER
,

770 
	mIFLA_BR_MCAST_HASH_ELASTICITY
,

771 
	mIFLA_BR_MCAST_HASH_MAX
,

772 
	mIFLA_BR_MCAST_LAST_MEMBER_CNT
,

773 
	mIFLA_BR_MCAST_STARTUP_QUERY_CNT
,

774 
	mIFLA_BR_MCAST_LAST_MEMBER_INTVL
,

775 
	mIFLA_BR_MCAST_MEMBERSHIP_INTVL
,

776 
	mIFLA_BR_MCAST_QUERIER_INTVL
,

777 
	mIFLA_BR_MCAST_QUERY_INTVL
,

778 
	mIFLA_BR_MCAST_QUERY_RESPONSE_INTVL
,

779 
	mIFLA_BR_MCAST_STARTUP_QUERY_INTVL
,

780 
	mIFLA_BR_NF_CALL_IPTABLES
,

781 
	mIFLA_BR_NF_CALL_IP6TABLES
,

782 
	mIFLA_BR_NF_CALL_ARPTABLES
,

783 
	mIFLA_BR_VLAN_DEFAULT_PVID
,

784 
	mIFLA_BR_PAD
,

785 
	mIFLA_BR_VLAN_STATS_ENABLED
,

786 
	mIFLA_BR_MCAST_STATS_ENABLED
,

787 
	mIFLA_BR_MCAST_IGMP_VERSION
,

788 
	mIFLA_BR_MCAST_MLD_VERSION
,

789 
	mIFLA_BR_VLAN_STATS_PER_PORT
,

790 
	mIFLA_BR_MULTI_BOOLOPT
,

791 
	mIFLA_BR_MCAST_QUERIER_STATE
,

792 
	mIFLA_BR_FDB_N_LEARNED
,

793 
	mIFLA_BR_FDB_MAX_LEARNED
,

794 
	m__IFLA_BR_MAX
,

797 
	#IFLA_BR_MAX
 (
__IFLA_BR_MAX
 - 1)

	)

799 
	siÊa_bridge_id
 {

800 
__u8
 
	m¥io
[2];

801 
__u8
 
	maddr
[6];

815 
	mBRIDGE_MODE_UNSPEC
,

816 
	mBRIDGE_MODE_HAIRPIN
,

1051 
	mIFLA_BRPORT_UNSPEC
,

1052 
	mIFLA_BRPORT_STATE
,

1053 
	mIFLA_BRPORT_PRIORITY
,

1054 
	mIFLA_BRPORT_COST
,

1055 
	mIFLA_BRPORT_MODE
,

1056 
	mIFLA_BRPORT_GUARD
,

1057 
	mIFLA_BRPORT_PROTECT
,

1058 
	mIFLA_BRPORT_FAST_LEAVE
,

1059 
	mIFLA_BRPORT_LEARNING
,

1060 
	mIFLA_BRPORT_UNICAST_FLOOD
,

1061 
	mIFLA_BRPORT_PROXYARP
,

1062 
	mIFLA_BRPORT_LEARNING_SYNC
,

1063 
	mIFLA_BRPORT_PROXYARP_WIFI
,

1064 
	mIFLA_BRPORT_ROOT_ID
,

1065 
	mIFLA_BRPORT_BRIDGE_ID
,

1066 
	mIFLA_BRPORT_DESIGNATED_PORT
,

1067 
	mIFLA_BRPORT_DESIGNATED_COST
,

1068 
	mIFLA_BRPORT_ID
,

1069 
	mIFLA_BRPORT_NO
,

1070 
	mIFLA_BRPORT_TOPOLOGY_CHANGE_ACK
,

1071 
	mIFLA_BRPORT_CONFIG_PENDING
,

1072 
	mIFLA_BRPORT_MESSAGE_AGE_TIMER
,

1073 
	mIFLA_BRPORT_FORWARD_DELAY_TIMER
,

1074 
	mIFLA_BRPORT_HOLD_TIMER
,

1075 
	mIFLA_BRPORT_FLUSH
,

1076 
	mIFLA_BRPORT_MULTICAST_ROUTER
,

1077 
	mIFLA_BRPORT_PAD
,

1078 
	mIFLA_BRPORT_MCAST_FLOOD
,

1079 
	mIFLA_BRPORT_MCAST_TO_UCAST
,

1080 
	mIFLA_BRPORT_VLAN_TUNNEL
,

1081 
	mIFLA_BRPORT_BCAST_FLOOD
,

1082 
	mIFLA_BRPORT_GROUP_FWD_MASK
,

1083 
	mIFLA_BRPORT_NEIGH_SUPPRESS
,

1084 
	mIFLA_BRPORT_ISOLATED
,

1085 
	mIFLA_BRPORT_BACKUP_PORT
,

1086 
	mIFLA_BRPORT_MRP_RING_OPEN
,

1087 
	mIFLA_BRPORT_MRP_IN_OPEN
,

1088 
	mIFLA_BRPORT_MCAST_EHT_HOSTS_LIMIT
,

1089 
	mIFLA_BRPORT_MCAST_EHT_HOSTS_CNT
,

1090 
	mIFLA_BRPORT_LOCKED
,

1091 
	mIFLA_BRPORT_MAB
,

1092 
	mIFLA_BRPORT_MCAST_N_GROUPS
,

1093 
	mIFLA_BRPORT_MCAST_MAX_GROUPS
,

1094 
	mIFLA_BRPORT_NEIGH_VLAN_SUPPRESS
,

1095 
	mIFLA_BRPORT_BACKUP_NHID
,

1096 
	m__IFLA_BRPORT_MAX


1098 
	#IFLA_BRPORT_MAX
 (
__IFLA_BRPORT_MAX
 - 1)

	)

1100 
	siÊa_ˇcheöfo
 {

1101 
__u32
 
	mmax_ªasm_Àn
;

1102 
__u32
 
	mt°amp
;

1103 
__u32
 
	mªachabÀ_time
;

1104 
__u32
 
	mªå™s_time
;

1108 
	mIFLA_INFO_UNSPEC
,

1109 
	mIFLA_INFO_KIND
,

1110 
	mIFLA_INFO_DATA
,

1111 
	mIFLA_INFO_XSTATS
,

1112 
	mIFLA_INFO_SLAVE_KIND
,

1113 
	mIFLA_INFO_SLAVE_DATA
,

1114 
	m__IFLA_INFO_MAX
,

1117 
	#IFLA_INFO_MAX
 (
__IFLA_INFO_MAX
 - 1)

	)

1122 
	mIFLA_VLAN_UNSPEC
,

1123 
	mIFLA_VLAN_ID
,

1124 
	mIFLA_VLAN_FLAGS
,

1125 
	mIFLA_VLAN_EGRESS_QOS
,

1126 
	mIFLA_VLAN_INGRESS_QOS
,

1127 
	mIFLA_VLAN_PROTOCOL
,

1128 
	m__IFLA_VLAN_MAX
,

1131 
	#IFLA_VLAN_MAX
 (
__IFLA_VLAN_MAX
 - 1)

	)

1133 
	siÊa_vœn_Êags
 {

1134 
__u32
 
	mÊags
;

1135 
__u32
 
	mmask
;

1139 
	mIFLA_VLAN_QOS_UNSPEC
,

1140 
	mIFLA_VLAN_QOS_MAPPING
,

1141 
	m__IFLA_VLAN_QOS_MAX


1144 
	#IFLA_VLAN_QOS_MAX
 (
__IFLA_VLAN_QOS_MAX
 - 1)

	)

1146 
	siÊa_vœn_qos_m≠pög
 {

1147 
__u32
 
	m‰om
;

1148 
__u32
 
	mto
;

1153 
	mIFLA_MACVLAN_UNSPEC
,

1154 
	mIFLA_MACVLAN_MODE
,

1155 
	mIFLA_MACVLAN_FLAGS
,

1156 
	mIFLA_MACVLAN_MACADDR_MODE
,

1157 
	mIFLA_MACVLAN_MACADDR
,

1158 
	mIFLA_MACVLAN_MACADDR_DATA
,

1159 
	mIFLA_MACVLAN_MACADDR_COUNT
,

1160 
	mIFLA_MACVLAN_BC_QUEUE_LEN
,

1161 
	mIFLA_MACVLAN_BC_QUEUE_LEN_USED
,

1162 
	mIFLA_MACVLAN_BC_CUTOFF
,

1163 
	m__IFLA_MACVLAN_MAX
,

1166 
	#IFLA_MACVLAN_MAX
 (
__IFLA_MACVLAN_MAX
 - 1)

	)

1168 
	emacvœn_mode
 {

1169 
	mMACVLAN_MODE_PRIVATE
 = 1,

1170 
	mMACVLAN_MODE_VEPA
 = 2,

1171 
	mMACVLAN_MODE_BRIDGE
 = 4,

1172 
	mMACVLAN_MODE_PASSTHRU
 = 8,

1173 
	mMACVLAN_MODE_SOURCE
 = 16,

1176 
	emacvœn_maˇddr_mode
 {

1177 
	mMACVLAN_MACADDR_ADD
,

1178 
	mMACVLAN_MACADDR_DEL
,

1179 
	mMACVLAN_MACADDR_FLUSH
,

1180 
	mMACVLAN_MACADDR_SET
,

1183 
	#MACVLAN_FLAG_NOPROMISC
 1

	)

1184 
	#MACVLAN_FLAG_NODST
 2

	)

1188 
	mIFLA_VRF_UNSPEC
,

1189 
	mIFLA_VRF_TABLE
,

1190 
	m__IFLA_VRF_MAX


1193 
	#IFLA_VRF_MAX
 (
__IFLA_VRF_MAX
 - 1)

	)

1196 
	mIFLA_VRF_PORT_UNSPEC
,

1197 
	mIFLA_VRF_PORT_TABLE
,

1198 
	m__IFLA_VRF_PORT_MAX


1201 
	#IFLA_VRF_PORT_MAX
 (
__IFLA_VRF_PORT_MAX
 - 1)

	)

1205 
	mIFLA_MACSEC_UNSPEC
,

1206 
	mIFLA_MACSEC_SCI
,

1207 
	mIFLA_MACSEC_PORT
,

1208 
	mIFLA_MACSEC_ICV_LEN
,

1209 
	mIFLA_MACSEC_CIPHER_SUITE
,

1210 
	mIFLA_MACSEC_WINDOW
,

1211 
	mIFLA_MACSEC_ENCODING_SA
,

1212 
	mIFLA_MACSEC_ENCRYPT
,

1213 
	mIFLA_MACSEC_PROTECT
,

1214 
	mIFLA_MACSEC_INC_SCI
,

1215 
	mIFLA_MACSEC_ES
,

1216 
	mIFLA_MACSEC_SCB
,

1217 
	mIFLA_MACSEC_REPLAY_PROTECT
,

1218 
	mIFLA_MACSEC_VALIDATION
,

1219 
	mIFLA_MACSEC_PAD
,

1220 
	mIFLA_MACSEC_OFFLOAD
,

1221 
	m__IFLA_MACSEC_MAX
,

1224 
	#IFLA_MACSEC_MAX
 (
__IFLA_MACSEC_MAX
 - 1)

	)

1228 
	mIFLA_XFRM_UNSPEC
,

1229 
	mIFLA_XFRM_LINK
,

1230 
	mIFLA_XFRM_IF_ID
,

1231 
	mIFLA_XFRM_COLLECT_METADATA
,

1232 
	m__IFLA_XFRM_MAX


1235 
	#IFLA_XFRM_MAX
 (
__IFLA_XFRM_MAX
 - 1)

	)

1237 
	emac£c_vÆid©i⁄_ty≥
 {

1238 
	mMACSEC_VALIDATE_DISABLED
 = 0,

1239 
	mMACSEC_VALIDATE_CHECK
 = 1,

1240 
	mMACSEC_VALIDATE_STRICT
 = 2,

1241 
	m__MACSEC_VALIDATE_END
,

1242 
	mMACSEC_VALIDATE_MAX
 = 
__MACSEC_VALIDATE_END
 - 1,

1245 
	emac£c_ofÊﬂd
 {

1246 
	mMACSEC_OFFLOAD_OFF
 = 0,

1247 
	mMACSEC_OFFLOAD_PHY
 = 1,

1248 
	mMACSEC_OFFLOAD_MAC
 = 2,

1249 
	m__MACSEC_OFFLOAD_END
,

1250 
	mMACSEC_OFFLOAD_MAX
 = 
__MACSEC_OFFLOAD_END
 - 1,

1255 
	mIFLA_IPVLAN_UNSPEC
,

1256 
	mIFLA_IPVLAN_MODE
,

1257 
	mIFLA_IPVLAN_FLAGS
,

1258 
	m__IFLA_IPVLAN_MAX


1261 
	#IFLA_IPVLAN_MAX
 (
__IFLA_IPVLAN_MAX
 - 1)

	)

1263 
	eùvœn_mode
 {

1264 
	mIPVLAN_MODE_L2
 = 0,

1265 
	mIPVLAN_MODE_L3
,

1266 
	mIPVLAN_MODE_L3S
,

1267 
	mIPVLAN_MODE_MAX


1270 
	#IPVLAN_F_PRIVATE
 0x01

	)

1271 
	#IPVLAN_F_VEPA
 0x02

	)

1274 
	stu¬ñ_msg
 {

1275 
__u8
 
	mÁmûy
;

1276 
__u8
 
	mÊags
;

1277 
__u16
 
	mª£rved2
;

1278 
__u32
 
	mifödex
;

1282 
	e√tkô_a˘i⁄
 {

1283 
	mNETKIT_NEXT
 = -1,

1284 
	mNETKIT_PASS
 = 0,

1285 
	mNETKIT_DROP
 = 2,

1286 
	mNETKIT_REDIRECT
 = 7,

1289 
	e√tkô_mode
 {

1290 
	mNETKIT_L2
,

1291 
	mNETKIT_L3
,

1302 
	e√tkô_s¸ub
 {

1303 
	mNETKIT_SCRUB_NONE
,

1304 
	mNETKIT_SCRUB_DEFAULT
,

1308 
	mIFLA_NETKIT_UNSPEC
,

1309 
	mIFLA_NETKIT_PEER_INFO
,

1310 
	mIFLA_NETKIT_PRIMARY
,

1311 
	mIFLA_NETKIT_POLICY
,

1312 
	mIFLA_NETKIT_PEER_POLICY
,

1313 
	mIFLA_NETKIT_MODE
,

1314 
	mIFLA_NETKIT_SCRUB
,

1315 
	mIFLA_NETKIT_PEER_SCRUB
,

1316 
	mIFLA_NETKIT_HEADROOM
,

1317 
	mIFLA_NETKIT_TAILROOM
,

1318 
	m__IFLA_NETKIT_MAX
,

1320 
	#IFLA_NETKIT_MAX
 (
__IFLA_NETKIT_MAX
 - 1)

	)

1325 
	#TUNNEL_MSG_FLAG_STATS
 0x01

	)

1327 
	#TUNNEL_MSG_VALID_USER_FLAGS
 
TUNNEL_MSG_FLAG_STATS


	)

1331 
	mVNIFILTER_ENTRY_STATS_UNSPEC
,

1332 
	mVNIFILTER_ENTRY_STATS_RX_BYTES
,

1333 
	mVNIFILTER_ENTRY_STATS_RX_PKTS
,

1334 
	mVNIFILTER_ENTRY_STATS_RX_DROPS
,

1335 
	mVNIFILTER_ENTRY_STATS_RX_ERRORS
,

1336 
	mVNIFILTER_ENTRY_STATS_TX_BYTES
,

1337 
	mVNIFILTER_ENTRY_STATS_TX_PKTS
,

1338 
	mVNIFILTER_ENTRY_STATS_TX_DROPS
,

1339 
	mVNIFILTER_ENTRY_STATS_TX_ERRORS
,

1340 
	mVNIFILTER_ENTRY_STATS_PAD
,

1341 
	m__VNIFILTER_ENTRY_STATS_MAX


1343 
	#VNIFILTER_ENTRY_STATS_MAX
 (
__VNIFILTER_ENTRY_STATS_MAX
 - 1)

	)

1346 
	mVXLAN_VNIFILTER_ENTRY_UNSPEC
,

1347 
	mVXLAN_VNIFILTER_ENTRY_START
,

1348 
	mVXLAN_VNIFILTER_ENTRY_END
,

1349 
	mVXLAN_VNIFILTER_ENTRY_GROUP
,

1350 
	mVXLAN_VNIFILTER_ENTRY_GROUP6
,

1351 
	mVXLAN_VNIFILTER_ENTRY_STATS
,

1352 
	m__VXLAN_VNIFILTER_ENTRY_MAX


1354 
	#VXLAN_VNIFILTER_ENTRY_MAX
 (
__VXLAN_VNIFILTER_ENTRY_MAX
 - 1)

	)

1357 
	mVXLAN_VNIFILTER_UNSPEC
,

1358 
	mVXLAN_VNIFILTER_ENTRY
,

1359 
	m__VXLAN_VNIFILTER_MAX


1361 
	#VXLAN_VNIFILTER_MAX
 (
__VXLAN_VNIFILTER_MAX
 - 1)

	)

1364 
	mIFLA_VXLAN_UNSPEC
,

1365 
	mIFLA_VXLAN_ID
,

1366 
	mIFLA_VXLAN_GROUP
,

1367 
	mIFLA_VXLAN_LINK
,

1368 
	mIFLA_VXLAN_LOCAL
,

1369 
	mIFLA_VXLAN_TTL
,

1370 
	mIFLA_VXLAN_TOS
,

1371 
	mIFLA_VXLAN_LEARNING
,

1372 
	mIFLA_VXLAN_AGEING
,

1373 
	mIFLA_VXLAN_LIMIT
,

1374 
	mIFLA_VXLAN_PORT_RANGE
,

1375 
	mIFLA_VXLAN_PROXY
,

1376 
	mIFLA_VXLAN_RSC
,

1377 
	mIFLA_VXLAN_L2MISS
,

1378 
	mIFLA_VXLAN_L3MISS
,

1379 
	mIFLA_VXLAN_PORT
,

1380 
	mIFLA_VXLAN_GROUP6
,

1381 
	mIFLA_VXLAN_LOCAL6
,

1382 
	mIFLA_VXLAN_UDP_CSUM
,

1383 
	mIFLA_VXLAN_UDP_ZERO_CSUM6_TX
,

1384 
	mIFLA_VXLAN_UDP_ZERO_CSUM6_RX
,

1385 
	mIFLA_VXLAN_REMCSUM_TX
,

1386 
	mIFLA_VXLAN_REMCSUM_RX
,

1387 
	mIFLA_VXLAN_GBP
,

1388 
	mIFLA_VXLAN_REMCSUM_NOPARTIAL
,

1389 
	mIFLA_VXLAN_COLLECT_METADATA
,

1390 
	mIFLA_VXLAN_LABEL
,

1391 
	mIFLA_VXLAN_GPE
,

1392 
	mIFLA_VXLAN_TTL_INHERIT
,

1393 
	mIFLA_VXLAN_DF
,

1394 
	mIFLA_VXLAN_VNIFILTER
,

1395 
	mIFLA_VXLAN_LOCALBYPASS
,

1396 
	mIFLA_VXLAN_LABEL_POLICY
,

1397 
	mIFLA_VXLAN_RESERVED_BITS
,

1398 
	mIFLA_VXLAN_FAN_MAP
 = 34,

1399 
	m__IFLA_VXLAN_MAX


1401 
	#IFLA_VXLAN_MAX
 (
__IFLA_VXLAN_MAX
 - 1)

	)

1403 
	siÊa_vxœn_p‹t_ønge
 {

1404 
__be16
 
	mlow
;

1405 
__be16
 
	mhigh
;

1408 
	eiÊa_vxœn_df
 {

1409 
	mVXLAN_DF_UNSET
 = 0,

1410 
	mVXLAN_DF_SET
,

1411 
	mVXLAN_DF_INHERIT
,

1412 
	m__VXLAN_DF_END
,

1413 
	mVXLAN_DF_MAX
 = 
__VXLAN_DF_END
 - 1,

1416 
	eiÊa_vxœn_œbñ_pﬁicy
 {

1417 
	mVXLAN_LABEL_FIXED
 = 0,

1418 
	mVXLAN_LABEL_INHERIT
 = 1,

1419 
	m__VXLAN_LABEL_END
,

1420 
	mVXLAN_LABEL_MAX
 = 
__VXLAN_LABEL_END
 - 1,

1425 
	mIFLA_GENEVE_UNSPEC
,

1426 
	mIFLA_GENEVE_ID
,

1427 
	mIFLA_GENEVE_REMOTE
,

1428 
	mIFLA_GENEVE_TTL
,

1429 
	mIFLA_GENEVE_TOS
,

1430 
	mIFLA_GENEVE_PORT
,

1431 
	mIFLA_GENEVE_COLLECT_METADATA
,

1432 
	mIFLA_GENEVE_REMOTE6
,

1433 
	mIFLA_GENEVE_UDP_CSUM
,

1434 
	mIFLA_GENEVE_UDP_ZERO_CSUM6_TX
,

1435 
	mIFLA_GENEVE_UDP_ZERO_CSUM6_RX
,

1436 
	mIFLA_GENEVE_LABEL
,

1437 
	mIFLA_GENEVE_TTL_INHERIT
,

1438 
	mIFLA_GENEVE_DF
,

1439 
	mIFLA_GENEVE_INNER_PROTO_INHERIT
,

1440 
	m__IFLA_GENEVE_MAX


1442 
	#IFLA_GENEVE_MAX
 (
__IFLA_GENEVE_MAX
 - 1)

	)

1444 
	eiÊa_gíeve_df
 {

1445 
	mGENEVE_DF_UNSET
 = 0,

1446 
	mGENEVE_DF_SET
,

1447 
	mGENEVE_DF_INHERIT
,

1448 
	m__GENEVE_DF_END
,

1449 
	mGENEVE_DF_MAX
 = 
__GENEVE_DF_END
 - 1,

1454 
	mIFLA_BAREUDP_UNSPEC
,

1455 
	mIFLA_BAREUDP_PORT
,

1456 
	mIFLA_BAREUDP_ETHERTYPE
,

1457 
	mIFLA_BAREUDP_SRCPORT_MIN
,

1458 
	mIFLA_BAREUDP_MULTIPROTO_MODE
,

1459 
	m__IFLA_BAREUDP_MAX


1462 
	#IFLA_BAREUDP_MAX
 (
__IFLA_BAREUDP_MAX
 - 1)

	)

1466 
	mIFLA_PPP_UNSPEC
,

1467 
	mIFLA_PPP_DEV_FD
,

1468 
	m__IFLA_PPP_MAX


1470 
	#IFLA_PPP_MAX
 (
__IFLA_PPP_MAX
 - 1)

	)

1474 
	eiÊa_gç_rﬁe
 {

1475 
	mGTP_ROLE_GGSN
 = 0,

1476 
	mGTP_ROLE_SGSN
,

1480 
	mIFLA_GTP_UNSPEC
,

1481 
	mIFLA_GTP_FD0
,

1482 
	mIFLA_GTP_FD1
,

1483 
	mIFLA_GTP_PDP_HASHSIZE
,

1484 
	mIFLA_GTP_ROLE
,

1485 
	mIFLA_GTP_CREATE_SOCKETS
,

1486 
	mIFLA_GTP_RESTART_COUNT
,

1487 
	mIFLA_GTP_LOCAL
,

1488 
	mIFLA_GTP_LOCAL6
,

1489 
	m__IFLA_GTP_MAX
,

1491 
	#IFLA_GTP_MAX
 (
__IFLA_GTP_MAX
 - 1)

	)

1496 
	mIFLA_BOND_UNSPEC
,

1497 
	mIFLA_BOND_MODE
,

1498 
	mIFLA_BOND_ACTIVE_SLAVE
,

1499 
	mIFLA_BOND_MIIMON
,

1500 
	mIFLA_BOND_UPDELAY
,

1501 
	mIFLA_BOND_DOWNDELAY
,

1502 
	mIFLA_BOND_USE_CARRIER
,

1503 
	mIFLA_BOND_ARP_INTERVAL
,

1504 
	mIFLA_BOND_ARP_IP_TARGET
,

1505 
	mIFLA_BOND_ARP_VALIDATE
,

1506 
	mIFLA_BOND_ARP_ALL_TARGETS
,

1507 
	mIFLA_BOND_PRIMARY
,

1508 
	mIFLA_BOND_PRIMARY_RESELECT
,

1509 
	mIFLA_BOND_FAIL_OVER_MAC
,

1510 
	mIFLA_BOND_XMIT_HASH_POLICY
,

1511 
	mIFLA_BOND_RESEND_IGMP
,

1512 
	mIFLA_BOND_NUM_PEER_NOTIF
,

1513 
	mIFLA_BOND_ALL_SLAVES_ACTIVE
,

1514 
	mIFLA_BOND_MIN_LINKS
,

1515 
	mIFLA_BOND_LP_INTERVAL
,

1516 
	mIFLA_BOND_PACKETS_PER_SLAVE
,

1517 
	mIFLA_BOND_AD_LACP_RATE
,

1518 
	mIFLA_BOND_AD_SELECT
,

1519 
	mIFLA_BOND_AD_INFO
,

1520 
	mIFLA_BOND_AD_ACTOR_SYS_PRIO
,

1521 
	mIFLA_BOND_AD_USER_PORT_KEY
,

1522 
	mIFLA_BOND_AD_ACTOR_SYSTEM
,

1523 
	mIFLA_BOND_TLB_DYNAMIC_LB
,

1524 
	mIFLA_BOND_PEER_NOTIF_DELAY
,

1525 
	mIFLA_BOND_AD_LACP_ACTIVE
,

1526 
	mIFLA_BOND_MISSED_MAX
,

1527 
	mIFLA_BOND_NS_IP6_TARGET
,

1528 
	mIFLA_BOND_COUPLED_CONTROL
,

1529 
	m__IFLA_BOND_MAX
,

1532 
	#IFLA_BOND_MAX
 (
__IFLA_BOND_MAX
 - 1)

	)

1535 
	mIFLA_BOND_AD_INFO_UNSPEC
,

1536 
	mIFLA_BOND_AD_INFO_AGGREGATOR
,

1537 
	mIFLA_BOND_AD_INFO_NUM_PORTS
,

1538 
	mIFLA_BOND_AD_INFO_ACTOR_KEY
,

1539 
	mIFLA_BOND_AD_INFO_PARTNER_KEY
,

1540 
	mIFLA_BOND_AD_INFO_PARTNER_MAC
,

1541 
	m__IFLA_BOND_AD_INFO_MAX
,

1544 
	#IFLA_BOND_AD_INFO_MAX
 (
__IFLA_BOND_AD_INFO_MAX
 - 1)

	)

1547 
	mIFLA_BOND_SLAVE_UNSPEC
,

1548 
	mIFLA_BOND_SLAVE_STATE
,

1549 
	mIFLA_BOND_SLAVE_MII_STATUS
,

1550 
	mIFLA_BOND_SLAVE_LINK_FAILURE_COUNT
,

1551 
	mIFLA_BOND_SLAVE_PERM_HWADDR
,

1552 
	mIFLA_BOND_SLAVE_QUEUE_ID
,

1553 
	mIFLA_BOND_SLAVE_AD_AGGREGATOR_ID
,

1554 
	mIFLA_BOND_SLAVE_AD_ACTOR_OPER_PORT_STATE
,

1555 
	mIFLA_BOND_SLAVE_AD_PARTNER_OPER_PORT_STATE
,

1556 
	mIFLA_BOND_SLAVE_PRIO
,

1557 
	m__IFLA_BOND_SLAVE_MAX
,

1560 
	#IFLA_BOND_SLAVE_MAX
 (
__IFLA_BOND_SLAVE_MAX
 - 1)

	)

1565 
	mIFLA_VF_INFO_UNSPEC
,

1566 
	mIFLA_VF_INFO
,

1567 
	m__IFLA_VF_INFO_MAX
,

1570 
	#IFLA_VF_INFO_MAX
 (
__IFLA_VF_INFO_MAX
 - 1)

	)

1573 
	mIFLA_VF_UNSPEC
,

1574 
	mIFLA_VF_MAC
,

1575 
	mIFLA_VF_VLAN
,

1576 
	mIFLA_VF_TX_RATE
,

1577 
	mIFLA_VF_SPOOFCHK
,

1578 
	mIFLA_VF_LINK_STATE
,

1579 
	mIFLA_VF_RATE
,

1580 
	mIFLA_VF_RSS_QUERY_EN
,

1583 
	mIFLA_VF_STATS
,

1584 
	mIFLA_VF_TRUST
,

1585 
	mIFLA_VF_IB_NODE_GUID
,

1586 
	mIFLA_VF_IB_PORT_GUID
,

1587 
	mIFLA_VF_VLAN_LIST
,

1588 
	mIFLA_VF_BROADCAST
,

1589 
	m__IFLA_VF_MAX
,

1592 
	#IFLA_VF_MAX
 (
__IFLA_VF_MAX
 - 1)

	)

1594 
	siÊa_vf_mac
 {

1595 
__u32
 
	mvf
;

1596 
__u8
 
	mmac
[32];

1599 
	siÊa_vf_brﬂdˇ°
 {

1600 
__u8
 
	mbrﬂdˇ°
[32];

1603 
	siÊa_vf_vœn
 {

1604 
__u32
 
	mvf
;

1605 
__u32
 
	mvœn
;

1606 
__u32
 
	mqos
;

1610 
	mIFLA_VF_VLAN_INFO_UNSPEC
,

1611 
	mIFLA_VF_VLAN_INFO
,

1612 
	m__IFLA_VF_VLAN_INFO_MAX
,

1615 
	#IFLA_VF_VLAN_INFO_MAX
 (
__IFLA_VF_VLAN_INFO_MAX
 - 1)

	)

1616 
	#MAX_VLAN_LIST_LEN
 1

	)

1618 
	siÊa_vf_vœn_öfo
 {

1619 
__u32
 
	mvf
;

1620 
__u32
 
	mvœn
;

1621 
__u32
 
	mqos
;

1622 
__be16
 
	mvœn_¥Ÿo
;

1625 
	siÊa_vf_tx_øã
 {

1626 
__u32
 
	mvf
;

1627 
__u32
 
	møã
;

1630 
	siÊa_vf_øã
 {

1631 
__u32
 
	mvf
;

1632 
__u32
 
	mmö_tx_øã
;

1633 
__u32
 
	mmax_tx_øã
;

1636 
	siÊa_vf_•oofchk
 {

1637 
__u32
 
	mvf
;

1638 
__u32
 
	m£âög
;

1641 
	siÊa_vf_guid
 {

1642 
__u32
 
	mvf
;

1643 
__u64
 
	mguid
;

1647 
	mIFLA_VF_LINK_STATE_AUTO
,

1648 
	mIFLA_VF_LINK_STATE_ENABLE
,

1649 
	mIFLA_VF_LINK_STATE_DISABLE
,

1650 
	m__IFLA_VF_LINK_STATE_MAX
,

1653 
	siÊa_vf_lök_°©e
 {

1654 
__u32
 
	mvf
;

1655 
__u32
 
	mlök_°©e
;

1658 
	siÊa_vf_rss_quîy_í
 {

1659 
__u32
 
	mvf
;

1660 
__u32
 
	m£âög
;

1664 
	mIFLA_VF_STATS_RX_PACKETS
,

1665 
	mIFLA_VF_STATS_TX_PACKETS
,

1666 
	mIFLA_VF_STATS_RX_BYTES
,

1667 
	mIFLA_VF_STATS_TX_BYTES
,

1668 
	mIFLA_VF_STATS_BROADCAST
,

1669 
	mIFLA_VF_STATS_MULTICAST
,

1670 
	mIFLA_VF_STATS_PAD
,

1671 
	mIFLA_VF_STATS_RX_DROPPED
,

1672 
	mIFLA_VF_STATS_TX_DROPPED
,

1673 
	m__IFLA_VF_STATS_MAX
,

1676 
	#IFLA_VF_STATS_MAX
 (
__IFLA_VF_STATS_MAX
 - 1)

	)

1678 
	siÊa_vf_åu°
 {

1679 
__u32
 
	mvf
;

1680 
__u32
 
	m£âög
;

1699 
	mIFLA_VF_PORT_UNSPEC
,

1700 
	mIFLA_VF_PORT
,

1701 
	m__IFLA_VF_PORT_MAX
,

1704 
	#IFLA_VF_PORT_MAX
 (
__IFLA_VF_PORT_MAX
 - 1)

	)

1707 
	mIFLA_PORT_UNSPEC
,

1708 
	mIFLA_PORT_VF
,

1709 
	mIFLA_PORT_PROFILE
,

1710 
	mIFLA_PORT_VSI_TYPE
,

1711 
	mIFLA_PORT_INSTANCE_UUID
,

1712 
	mIFLA_PORT_HOST_UUID
,

1713 
	mIFLA_PORT_REQUEST
,

1714 
	mIFLA_PORT_RESPONSE
,

1715 
	m__IFLA_PORT_MAX
,

1718 
	#IFLA_PORT_MAX
 (
__IFLA_PORT_MAX
 - 1)

	)

1720 
	#PORT_PROFILE_MAX
 40

	)

1721 
	#PORT_UUID_MAX
 16

	)

1722 
	#PORT_SELF_VF
 -1

	)

1725 
	mPORT_REQUEST_PREASSOCIATE
 = 0,

1726 
	mPORT_REQUEST_PREASSOCIATE_RR
,

1727 
	mPORT_REQUEST_ASSOCIATE
,

1728 
	mPORT_REQUEST_DISASSOCIATE
,

1732 
	mPORT_VDP_RESPONSE_SUCCESS
 = 0,

1733 
	mPORT_VDP_RESPONSE_INVALID_FORMAT
,

1734 
	mPORT_VDP_RESPONSE_INSUFFICIENT_RESOURCES
,

1735 
	mPORT_VDP_RESPONSE_UNUSED_VTID
,

1736 
	mPORT_VDP_RESPONSE_VTID_VIOLATION
,

1737 
	mPORT_VDP_RESPONSE_VTID_VERSION_VIOALTION
,

1738 
	mPORT_VDP_RESPONSE_OUT_OF_SYNC
,

1740 
	mPORT_PROFILE_RESPONSE_SUCCESS
 = 0x100,

1741 
	mPORT_PROFILE_RESPONSE_INPROGRESS
,

1742 
	mPORT_PROFILE_RESPONSE_INVALID
,

1743 
	mPORT_PROFILE_RESPONSE_BADSTATE
,

1744 
	mPORT_PROFILE_RESPONSE_INSUFFICIENT_RESOURCES
,

1745 
	mPORT_PROFILE_RESPONSE_ERROR
,

1748 
	siÊa_p‹t_vsi
 {

1749 
__u8
 
	mvsi_mgr_id
;

1750 
__u8
 
	mvsi_ty≥_id
[3];

1751 
__u8
 
	mvsi_ty≥_vîsi⁄
;

1752 
__u8
 
	m∑d
[3];

1759 
	mIFLA_IPOIB_UNSPEC
,

1760 
	mIFLA_IPOIB_PKEY
,

1761 
	mIFLA_IPOIB_MODE
,

1762 
	mIFLA_IPOIB_UMCAST
,

1763 
	m__IFLA_IPOIB_MAX


1767 
	mIPOIB_MODE_DATAGRAM
 = 0,

1768 
	mIPOIB_MODE_CONNECTED
 = 1,

1771 
	#IFLA_IPOIB_MAX
 (
__IFLA_IPOIB_MAX
 - 1)

	)

1778 
	mHSR_PROTOCOL_HSR
,

1779 
	mHSR_PROTOCOL_PRP
,

1780 
	mHSR_PROTOCOL_MAX
,

1784 
	mIFLA_HSR_UNSPEC
,

1785 
	mIFLA_HSR_SLAVE1
,

1786 
	mIFLA_HSR_SLAVE2
,

1787 
	mIFLA_HSR_MULTICAST_SPEC
,

1788 
	mIFLA_HSR_SUPERVISION_ADDR
,

1789 
	mIFLA_HSR_SEQ_NR
,

1790 
	mIFLA_HSR_VERSION
,

1791 
	mIFLA_HSR_PROTOCOL
,

1794 
	mIFLA_HSR_INTERLINK
,

1795 
	m__IFLA_HSR_MAX
,

1798 
	#IFLA_HSR_MAX
 (
__IFLA_HSR_MAX
 - 1)

	)

1802 
	sif_°©s_msg
 {

1803 
__u8
 
	mÁmûy
;

1804 
__u8
 
	m∑d1
;

1805 
__u16
 
	m∑d2
;

1806 
__u32
 
	mifödex
;

1807 
__u32
 
	mfûãr_mask
;

1814 
	mIFLA_STATS_UNSPEC
,

1815 
	mIFLA_STATS_LINK_64
,

1816 
	mIFLA_STATS_LINK_XSTATS
,

1817 
	mIFLA_STATS_LINK_XSTATS_SLAVE
,

1818 
	mIFLA_STATS_LINK_OFFLOAD_XSTATS
,

1819 
	mIFLA_STATS_AF_SPEC
,

1820 
	m__IFLA_STATS_MAX
,

1823 
	#IFLA_STATS_MAX
 (
__IFLA_STATS_MAX
 - 1)

	)

1825 
	#IFLA_STATS_FILTER_BIT
(
ATTR
Ë(1 << (ATTR - 1))

	)

1828 
	mIFLA_STATS_GETSET_UNSPEC
,

1829 
	mIFLA_STATS_GET_FILTERS
,

1832 
	mIFLA_STATS_SET_OFFLOAD_XSTATS_L3_STATS
,

1833 
	m__IFLA_STATS_GETSET_MAX
,

1836 
	#IFLA_STATS_GETSET_MAX
 (
__IFLA_STATS_GETSET_MAX
 - 1)

	)

1844 
	mLINK_XSTATS_TYPE_UNSPEC
,

1845 
	mLINK_XSTATS_TYPE_BRIDGE
,

1846 
	mLINK_XSTATS_TYPE_BOND
,

1847 
	m__LINK_XSTATS_TYPE_MAX


1849 
	#LINK_XSTATS_TYPE_MAX
 (
__LINK_XSTATS_TYPE_MAX
 - 1)

	)

1853 
	mIFLA_OFFLOAD_XSTATS_UNSPEC
,

1854 
	mIFLA_OFFLOAD_XSTATS_CPU_HIT
,

1855 
	mIFLA_OFFLOAD_XSTATS_HW_S_INFO
,

1856 
	mIFLA_OFFLOAD_XSTATS_L3_STATS
,

1857 
	m__IFLA_OFFLOAD_XSTATS_MAX


1859 
	#IFLA_OFFLOAD_XSTATS_MAX
 (
__IFLA_OFFLOAD_XSTATS_MAX
 - 1)

	)

1862 
	mIFLA_OFFLOAD_XSTATS_HW_S_INFO_UNSPEC
,

1863 
	mIFLA_OFFLOAD_XSTATS_HW_S_INFO_REQUEST
,

1864 
	mIFLA_OFFLOAD_XSTATS_HW_S_INFO_USED
,

1865 
	m__IFLA_OFFLOAD_XSTATS_HW_S_INFO_MAX
,

1867 
	#IFLA_OFFLOAD_XSTATS_HW_S_INFO_MAX
 \

1868 (
__IFLA_OFFLOAD_XSTATS_HW_S_INFO_MAX
 - 1)

	)

1872 
	#XDP_FLAGS_UPDATE_IF_NOEXIST
 (1U << 0)

	)

1873 
	#XDP_FLAGS_SKB_MODE
 (1U << 1)

	)

1874 
	#XDP_FLAGS_DRV_MODE
 (1U << 2)

	)

1875 
	#XDP_FLAGS_HW_MODE
 (1U << 3)

	)

1876 
	#XDP_FLAGS_REPLACE
 (1U << 4)

	)

1877 
	#XDP_FLAGS_MODES
 (
XDP_FLAGS_SKB_MODE
 | \

1878 
XDP_FLAGS_DRV_MODE
 | \

1879 
XDP_FLAGS_HW_MODE
)

	)

1880 
	#XDP_FLAGS_MASK
 (
XDP_FLAGS_UPDATE_IF_NOEXIST
 | \

1881 
XDP_FLAGS_MODES
 | 
XDP_FLAGS_REPLACE
)

	)

1885 
	mXDP_ATTACHED_NONE
 = 0,

1886 
	mXDP_ATTACHED_DRV
,

1887 
	mXDP_ATTACHED_SKB
,

1888 
	mXDP_ATTACHED_HW
,

1889 
	mXDP_ATTACHED_MULTI
,

1893 
	mIFLA_XDP_UNSPEC
,

1894 
	mIFLA_XDP_FD
,

1895 
	mIFLA_XDP_ATTACHED
,

1896 
	mIFLA_XDP_FLAGS
,

1897 
	mIFLA_XDP_PROG_ID
,

1898 
	mIFLA_XDP_DRV_PROG_ID
,

1899 
	mIFLA_XDP_SKB_PROG_ID
,

1900 
	mIFLA_XDP_HW_PROG_ID
,

1901 
	mIFLA_XDP_EXPECTED_FD
,

1902 
	m__IFLA_XDP_MAX
,

1905 
	#IFLA_XDP_MAX
 (
__IFLA_XDP_MAX
 - 1)

	)

1908 
	mIFLA_EVENT_NONE
,

1909 
	mIFLA_EVENT_REBOOT
,

1910 
	mIFLA_EVENT_FEATURES
,

1911 
	mIFLA_EVENT_BONDING_FAILOVER
,

1912 
	mIFLA_EVENT_NOTIFY_PEERS
,

1913 
	mIFLA_EVENT_IGMP_RESEND
,

1914 
	mIFLA_EVENT_BONDING_OPTIONS
,

1920 
	mIFLA_TUN_UNSPEC
,

1921 
	mIFLA_TUN_OWNER
,

1922 
	mIFLA_TUN_GROUP
,

1923 
	mIFLA_TUN_TYPE
,

1924 
	mIFLA_TUN_PI
,

1925 
	mIFLA_TUN_VNET_HDR
,

1926 
	mIFLA_TUN_PERSIST
,

1927 
	mIFLA_TUN_MULTI_QUEUE
,

1928 
	mIFLA_TUN_NUM_QUEUES
,

1929 
	mIFLA_TUN_NUM_DISABLED_QUEUES
,

1930 
	m__IFLA_TUN_MAX
,

1933 
	#IFLA_TUN_MAX
 (
__IFLA_TUN_MAX
 - 1)

	)

1937 
	#RMNET_FLAGS_INGRESS_DEAGGREGATION
 (1U << 0)

	)

1938 
	#RMNET_FLAGS_INGRESS_MAP_COMMANDS
 (1U << 1)

	)

1939 
	#RMNET_FLAGS_INGRESS_MAP_CKSUMV4
 (1U << 2)

	)

1940 
	#RMNET_FLAGS_EGRESS_MAP_CKSUMV4
 (1U << 3)

	)

1941 
	#RMNET_FLAGS_INGRESS_MAP_CKSUMV5
 (1U << 4)

	)

1942 
	#RMNET_FLAGS_EGRESS_MAP_CKSUMV5
 (1U << 5)

	)

1945 
	mIFLA_RMNET_UNSPEC
,

1946 
	mIFLA_RMNET_MUX_ID
,

1947 
	mIFLA_RMNET_FLAGS
,

1948 
	m__IFLA_RMNET_MAX
,

1951 
	#IFLA_RMNET_MAX
 (
__IFLA_RMNET_MAX
 - 1)

	)

1953 
	siÊa_rm√t_Êags
 {

1954 
__u32
 
	mÊags
;

1955 
__u32
 
	mmask
;

1961 
	mIFLA_MCTP_UNSPEC
,

1962 
	mIFLA_MCTP_NET
,

1963 
	mIFLA_MCTP_PHYS_BINDING
,

1964 
	m__IFLA_MCTP_MAX
,

1967 
	#IFLA_MCTP_MAX
 (
__IFLA_MCTP_MAX
 - 1)

	)

1972 
	mIFLA_DSA_UNSPEC
,

1973 
	mIFLA_DSA_CONDUIT
,

1975 
	mIFLA_DSA_MASTER
 = 
IFLA_DSA_CONDUIT
,

1976 
	m__IFLA_DSA_MAX
,

1979 
	#IFLA_DSA_MAX
 (
__IFLA_DSA_MAX
 - 1)

	)

	@/usr/include/linux/ioctl.h

2 #i‚de‡
_LINUX_IOCTL_H


3 
	#_LINUX_IOCTL_H


	)

5 
	~<asm/io˘l.h
>

	@/usr/include/linux/irqnr.h

	@/usr/include/linux/libc-compat.h

49 #i‚de‡
_LIBC_COMPAT_H


50 
	#_LIBC_COMPAT_H


	)

53 #i‡
deföed
(
__GLIBC__
)

56 #i‡
deföed
(
_NET_IF_H
Ë&& deföed(
__USE_MISC
)

61 
	#__UAPI_DEF_IF_IFCONF
 0

	)

62 
	#__UAPI_DEF_IF_IFMAP
 0

	)

63 
	#__UAPI_DEF_IF_IFNAMSIZ
 0

	)

64 
	#__UAPI_DEF_IF_IFREQ
 0

	)

66 
	#__UAPI_DEF_IF_NET_DEVICE_FLAGS
 0

	)

68 #i‚de‡
__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO


69 
	#__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO
 1

	)

78 
	#__UAPI_DEF_IF_IFCONF
 1

	)

79 
	#__UAPI_DEF_IF_IFMAP
 1

	)

80 
	#__UAPI_DEF_IF_IFNAMSIZ
 1

	)

81 
	#__UAPI_DEF_IF_IFREQ
 1

	)

83 
	#__UAPI_DEF_IF_NET_DEVICE_FLAGS
 1

	)

85 
	#__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO
 1

	)

90 #i‡
deföed
(
_NETINET_IN_H
)

94 
	#__UAPI_DEF_IN_ADDR
 0

	)

95 
	#__UAPI_DEF_IN_IPPROTO
 0

	)

96 
	#__UAPI_DEF_IN_PKTINFO
 0

	)

97 
	#__UAPI_DEF_IP_MREQ
 0

	)

98 
	#__UAPI_DEF_SOCKADDR_IN
 0

	)

99 
	#__UAPI_DEF_IN_CLASS
 0

	)

101 
	#__UAPI_DEF_IN6_ADDR
 0

	)

106 #i‡
deföed
(
__USE_MISC
Ë|| deföed (
__USE_GNU
)

107 
	#__UAPI_DEF_IN6_ADDR_ALT
 0

	)

109 
	#__UAPI_DEF_IN6_ADDR_ALT
 1

	)

111 
	#__UAPI_DEF_SOCKADDR_IN6
 0

	)

112 
	#__UAPI_DEF_IPV6_MREQ
 0

	)

113 
	#__UAPI_DEF_IPPROTO_V6
 0

	)

114 
	#__UAPI_DEF_IPV6_OPTIONS
 0

	)

115 
	#__UAPI_DEF_IN6_PKTINFO
 0

	)

116 
	#__UAPI_DEF_IP6_MTUINFO
 0

	)

123 
	#__UAPI_DEF_IN_ADDR
 1

	)

124 
	#__UAPI_DEF_IN_IPPROTO
 1

	)

125 
	#__UAPI_DEF_IN_PKTINFO
 1

	)

126 
	#__UAPI_DEF_IP_MREQ
 1

	)

127 
	#__UAPI_DEF_SOCKADDR_IN
 1

	)

128 
	#__UAPI_DEF_IN_CLASS
 1

	)

130 
	#__UAPI_DEF_IN6_ADDR
 1

	)

133 
	#__UAPI_DEF_IN6_ADDR_ALT
 1

	)

134 
	#__UAPI_DEF_SOCKADDR_IN6
 1

	)

135 
	#__UAPI_DEF_IPV6_MREQ
 1

	)

136 
	#__UAPI_DEF_IPPROTO_V6
 1

	)

137 
	#__UAPI_DEF_IPV6_OPTIONS
 1

	)

138 
	#__UAPI_DEF_IN6_PKTINFO
 1

	)

139 
	#__UAPI_DEF_IP6_MTUINFO
 1

	)

144 #i‡
deföed
(
_SYS_XATTR_H
)

145 
	#__UAPI_DEF_XATTR
 0

	)

147 
	#__UAPI_DEF_XATTR
 1

	)

157 #i‚de‡
__UAPI_DEF_IF_IFCONF


158 
	#__UAPI_DEF_IF_IFCONF
 1

	)

160 #i‚de‡
__UAPI_DEF_IF_IFMAP


161 
	#__UAPI_DEF_IF_IFMAP
 1

	)

163 #i‚de‡
__UAPI_DEF_IF_IFNAMSIZ


164 
	#__UAPI_DEF_IF_IFNAMSIZ
 1

	)

166 #i‚de‡
__UAPI_DEF_IF_IFREQ


167 
	#__UAPI_DEF_IF_IFREQ
 1

	)

170 #i‚de‡
__UAPI_DEF_IF_NET_DEVICE_FLAGS


171 
	#__UAPI_DEF_IF_NET_DEVICE_FLAGS
 1

	)

174 #i‚de‡
__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO


175 
	#__UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO
 1

	)

179 #i‚de‡
__UAPI_DEF_IN_ADDR


180 
	#__UAPI_DEF_IN_ADDR
 1

	)

182 #i‚de‡
__UAPI_DEF_IN_IPPROTO


183 
	#__UAPI_DEF_IN_IPPROTO
 1

	)

185 #i‚de‡
__UAPI_DEF_IN_PKTINFO


186 
	#__UAPI_DEF_IN_PKTINFO
 1

	)

188 #i‚de‡
__UAPI_DEF_IP_MREQ


189 
	#__UAPI_DEF_IP_MREQ
 1

	)

191 #i‚de‡
__UAPI_DEF_SOCKADDR_IN


192 
	#__UAPI_DEF_SOCKADDR_IN
 1

	)

194 #i‚de‡
__UAPI_DEF_IN_CLASS


195 
	#__UAPI_DEF_IN_CLASS
 1

	)

199 #i‚de‡
__UAPI_DEF_IN6_ADDR


200 
	#__UAPI_DEF_IN6_ADDR
 1

	)

202 #i‚de‡
__UAPI_DEF_IN6_ADDR_ALT


203 
	#__UAPI_DEF_IN6_ADDR_ALT
 1

	)

205 #i‚de‡
__UAPI_DEF_SOCKADDR_IN6


206 
	#__UAPI_DEF_SOCKADDR_IN6
 1

	)

208 #i‚de‡
__UAPI_DEF_IPV6_MREQ


209 
	#__UAPI_DEF_IPV6_MREQ
 1

	)

211 #i‚de‡
__UAPI_DEF_IPPROTO_V6


212 
	#__UAPI_DEF_IPPROTO_V6
 1

	)

214 #i‚de‡
__UAPI_DEF_IPV6_OPTIONS


215 
	#__UAPI_DEF_IPV6_OPTIONS
 1

	)

217 #i‚de‡
__UAPI_DEF_IN6_PKTINFO


218 
	#__UAPI_DEF_IN6_PKTINFO
 1

	)

220 #i‚de‡
__UAPI_DEF_IP6_MTUINFO


221 
	#__UAPI_DEF_IP6_MTUINFO
 1

	)

225 #i‚de‡
__UAPI_DEF_XATTR


226 
	#__UAPI_DEF_XATTR
 1

	)

	@/usr/include/linux/neighbour.h

2 #i‚de‡
__LINUX_NEIGHBOUR_H


3 
	#__LINUX_NEIGHBOUR_H


	)

5 
	~<löux/ty≥s.h
>

6 
	~<löux/√éök.h
>

8 
	sndmsg
 {

9 
__u8
 
	mndm_Ámûy
;

10 
__u8
 
	mndm_∑d1
;

11 
__u16
 
	mndm_∑d2
;

12 
__s32
 
	mndm_ifödex
;

13 
__u16
 
	mndm_°©e
;

14 
__u8
 
	mndm_Êags
;

15 
__u8
 
	mndm_ty≥
;

19 
	mNDA_UNSPEC
,

20 
	mNDA_DST
,

21 
	mNDA_LLADDR
,

22 
	mNDA_CACHEINFO
,

23 
	mNDA_PROBES
,

24 
	mNDA_VLAN
,

25 
	mNDA_PORT
,

26 
	mNDA_VNI
,

27 
	mNDA_IFINDEX
,

28 
	mNDA_MASTER
,

29 
	mNDA_LINK_NETNSID
,

30 
	mNDA_SRC_VNI
,

31 
	mNDA_PROTOCOL
,

32 
	mNDA_NH_ID
,

33 
	mNDA_FDB_EXT_ATTRS
,

34 
	mNDA_FLAGS_EXT
,

35 
	mNDA_NDM_STATE_MASK
,

36 
	mNDA_NDM_FLAGS_MASK
,

37 
	m__NDA_MAX


40 
	#NDA_MAX
 (
__NDA_MAX
 - 1)

	)

46 
	#NTF_USE
 (1 << 0)

	)

47 
	#NTF_SELF
 (1 << 1)

	)

48 
	#NTF_MASTER
 (1 << 2)

	)

49 
	#NTF_PROXY
 (1 << 3Ë

	)

50 
	#NTF_EXT_LEARNED
 (1 << 4)

	)

51 
	#NTF_OFFLOADED
 (1 << 5)

	)

52 
	#NTF_STICKY
 (1 << 6)

	)

53 
	#NTF_ROUTER
 (1 << 7)

	)

55 
	#NTF_EXT_MANAGED
 (1 << 0)

	)

56 
	#NTF_EXT_LOCKED
 (1 << 1)

	)

62 
	#NUD_INCOMPLETE
 0x01

	)

63 
	#NUD_REACHABLE
 0x02

	)

64 
	#NUD_STALE
 0x04

	)

65 
	#NUD_DELAY
 0x08

	)

66 
	#NUD_PROBE
 0x10

	)

67 
	#NUD_FAILED
 0x20

	)

70 
	#NUD_NOARP
 0x40

	)

71 
	#NUD_PERMANENT
 0x80

	)

72 
	#NUD_NONE
 0x00

	)

97 
	snda_ˇcheöfo
 {

98 
__u32
 
	mndm_c⁄fúmed
;

99 
__u32
 
	mndm_u£d
;

100 
__u32
 
	mndm_upd©ed
;

101 
__u32
 
	mndm_ªf˙t
;

129 
	sndt_°©s
 {

130 
__u64
 
	mndts_Ælocs
;

131 
__u64
 
	mndts_de°roys
;

132 
__u64
 
	mndts_hash_grows
;

133 
__u64
 
	mndts_ªs_Áûed
;

134 
__u64
 
	mndts_lookups
;

135 
__u64
 
	mndts_hôs
;

136 
__u64
 
	mndts_rcv_¥obes_mˇ°
;

137 
__u64
 
	mndts_rcv_¥obes_uˇ°
;

138 
__u64
 
	mndts_≥riodic_gc_runs
;

139 
__u64
 
	mndts_f‹˚d_gc_runs
;

140 
__u64
 
	mndts_èbÀ_fuŒs
;

144 
	mNDTPA_UNSPEC
,

145 
	mNDTPA_IFINDEX
,

146 
	mNDTPA_REFCNT
,

147 
	mNDTPA_REACHABLE_TIME
,

148 
	mNDTPA_BASE_REACHABLE_TIME
,

149 
	mNDTPA_RETRANS_TIME
,

150 
	mNDTPA_GC_STALETIME
,

151 
	mNDTPA_DELAY_PROBE_TIME
,

152 
	mNDTPA_QUEUE_LEN
,

153 
	mNDTPA_APP_PROBES
,

154 
	mNDTPA_UCAST_PROBES
,

155 
	mNDTPA_MCAST_PROBES
,

156 
	mNDTPA_ANYCAST_DELAY
,

157 
	mNDTPA_PROXY_DELAY
,

158 
	mNDTPA_PROXY_QLEN
,

159 
	mNDTPA_LOCKTIME
,

160 
	mNDTPA_QUEUE_LENBYTES
,

161 
	mNDTPA_MCAST_REPROBES
,

162 
	mNDTPA_PAD
,

163 
	mNDTPA_INTERVAL_PROBE_TIME_MS
,

164 
	m__NDTPA_MAX


166 
	#NDTPA_MAX
 (
__NDTPA_MAX
 - 1)

	)

168 
	sndtmsg
 {

169 
__u8
 
	mndtm_Ámûy
;

170 
__u8
 
	mndtm_∑d1
;

171 
__u16
 
	mndtm_∑d2
;

174 
	sndt_c⁄fig
 {

175 
__u16
 
	mndtc_key_Àn
;

176 
__u16
 
	mndtc_íåy_size
;

177 
__u32
 
	mndtc_íåõs
;

178 
__u32
 
	mndtc_œ°_Êush
;

179 
__u32
 
	mndtc_œ°_ønd
;

180 
__u32
 
	mndtc_hash_∫d
;

181 
__u32
 
	mndtc_hash_mask
;

182 
__u32
 
	mndtc_hash_chaö_gc
;

183 
__u32
 
	mndtc_¥oxy_qÀn
;

187 
	mNDTA_UNSPEC
,

188 
	mNDTA_NAME
,

189 
	mNDTA_THRESH1
,

190 
	mNDTA_THRESH2
,

191 
	mNDTA_THRESH3
,

192 
	mNDTA_CONFIG
,

193 
	mNDTA_PARMS
,

194 
	mNDTA_STATS
,

195 
	mNDTA_GC_INTERVAL
,

196 
	mNDTA_PAD
,

197 
	m__NDTA_MAX


199 
	#NDTA_MAX
 (
__NDTA_MAX
 - 1)

	)

206 
	mFDB_NOTIFY_BIT
 = (1 << 0),

207 
	mFDB_NOTIFY_INACTIVE_BIT
 = (1 << 1)

217 
	mNFEA_UNSPEC
,

218 
	mNFEA_ACTIVITY_NOTIFY
,

219 
	mNFEA_DONT_REFRESH
,

220 
	m__NFEA_MAX


222 
	#NFEA_MAX
 (
__NFEA_MAX
 - 1)

	)

	@/usr/include/linux/posix_types.h

2 #i‚de‡
_LINUX_POSIX_TYPES_H


3 
	#_LINUX_POSIX_TYPES_H


	)

5 
	~<löux/°ddef.h
>

22 #unde‡
__FD_SETSIZE


23 
	#__FD_SETSIZE
 1024

	)

26 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

27 } 
	t__kî√l_fd_£t
;

30 (*
	t__kî√l_sigh™dÀr_t
)();

33 
	t__kî√l_key_t
;

34 
	t__kî√l_mqd_t
;

36 
	~<asm/posix_ty≥s.h
>

	@/usr/include/linux/sysinfo.h

2 #i‚de‡
_LINUX_SYSINFO_H


3 
	#_LINUX_SYSINFO_H


	)

5 
	~<löux/ty≥s.h
>

7 
	#SI_LOAD_SHIFT
 16

	)

8 
	ssysöfo
 {

9 
__kî√l_l⁄g_t
 
	mu±ime
;

10 
__kî√l_ul⁄g_t
 
	mlﬂds
[3];

11 
__kî√l_ul⁄g_t
 
	mtŸÆøm
;

12 
__kî√l_ul⁄g_t
 
	m‰ìøm
;

13 
__kî√l_ul⁄g_t
 
	msh¨edøm
;

14 
__kî√l_ul⁄g_t
 
	mbuf„ºam
;

15 
__kî√l_ul⁄g_t
 
	mtŸÆsw≠
;

16 
__kî√l_ul⁄g_t
 
	m‰ìsw≠
;

17 
__u16
 
	m¥ocs
;

18 
__u16
 
	m∑d
;

19 
__kî√l_ul⁄g_t
 
	mtŸÆhigh
;

20 
__kî√l_ul⁄g_t
 
	m‰ìhigh
;

21 
__u32
 
	mmem_unô
;

22 
	m_f
[20-2*(
__kî√l_ul⁄g_t
)-(
__u32
)];

	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #i‡
deföed
 
__˝lu•lus
 && (
__GNUC_PREREQ
 (4, 4) \

37 || 
	$__glibc_˛™g_¥îeq
 (3, 5))

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

43 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

44 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

47 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

48 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || 
	`__GLIBC_USE
 (
ISOC23
)

54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 4));

61 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

64 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

65 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

80 
	$__memcm≥q
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

81 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

84 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


87 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

88 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

89 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

90 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

92 #ifde‡
__OPTIMIZE__


93 
__exã∫_Æways_ölöe
 *

94 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


96  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

99 
__exã∫_Æways_ölöe
 const *

100 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


102  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

105 
	}
}

107 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

108 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__USE_GNU


114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

116 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

118 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

125 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


126 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

127 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1))

128 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 3));

129 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

130 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1))

131 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 3));

133 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

134 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1))

135 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 3));

141 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

142 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

144 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

145 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

146 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

149 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

150 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

152 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

153 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

156 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

157 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

159 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

160 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

163 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

164 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

166 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

167 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

168 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3));

170 #ifde‡
__USE_XOPEN2K8


172 
	~<bôs/ty≥s/loˇÀ_t.h
>

175 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__l
)

176 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

179 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

180 
loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4))

181 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3));

184 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8
 \

185 || 
	`__GLIBC_USE
 (
LIB_EXT2
Ë|| 
	$__GLIBC_USE
 (
ISOC23
))

187 *
	$°rdup
 (c⁄° *
__s
)

188 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

194 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
Ë|| __GLIBC_USE (
ISOC23
)

195 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

196 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

199 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


201 
	#°rdu∑
(
s
) \

202 (
__exãnsi⁄__
 \

204 c⁄° *
__ﬁd
 = (
s
); \

205 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

206 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

207 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

208 
	}
}))

	)

211 
	#°∫du∑
(
s
, 
n
) \

212 (
__exãnsi⁄__
 \

214 c⁄° *
__ﬁd
 = (
s
); \

215 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

216 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

217 
__√w
[
__Àn
] = '\0'; \

218 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

219 }))

	)

223 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


226 *
°rchr
 (*
__s
, 
__c
)

227 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

228 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

229 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

231 #ifde‡
__OPTIMIZE__


232 
__exã∫_Æways_ölöe
 *

233 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


235  
__buûtö_°rchr
 (
__s
, 
__c
);

238 
__exã∫_Æways_ölöe
 const *

239 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


241  
__buûtö_°rchr
 (
__s
, 
__c
);

246 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

247 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

250 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


253 *
	`°ºchr
 (*
__s
, 
__c
)

254 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

255 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

256 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

258 #ifde‡
__OPTIMIZE__


259 
__exã∫_Æways_ölöe
 *

260 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


262  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

265 
__exã∫_Æways_ölöe
 const *

266 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


268  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

271 
	}
}

273 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

274 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 #ifde‡
__USE_MISC


280 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


281 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

282 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

283 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

284 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

286 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

287 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

293 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

294 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

297 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

298 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

300 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


303 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

304 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

305 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

306 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

308 #ifde‡
__OPTIMIZE__


309 
__exã∫_Æways_ölöe
 *

310 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


312  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

315 
__exã∫_Æways_ölöe
 const *

316 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


318  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

321 
	}
}

323 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

324 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


330 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

331 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

332 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

333 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

335 #ifde‡
__OPTIMIZE__


336 
__exã∫_Æways_ölöe
 *

337 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


339  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

342 
__exã∫_Æways_ölöe
 const *

343 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


345  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

348 
	}
}

350 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

351 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

356 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2));

361 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

362 c⁄° *
__ª°ri˘
 
__dñim
,

363 **
__ª°ri˘
 
__ßve_±r
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

365 #ifde‡
__USE_POSIX


366 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

367 **
__ª°ri˘
 
__ßve_±r
)

368 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

371 #ifde‡
__USE_MISC


373 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


374 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

375 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

376 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

377 c⁄° *
__√edÀ
)

378 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

380 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

381 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

385 #ifde‡
__USE_MISC


389 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

390 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

391 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3))

392 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 2))

393 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 3, 4));

397 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

398 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

400 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

401 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

402 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

407 
size_t
 
	$°æí
 (c⁄° *
__s
)

408 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

410 #ifdef 
__USE_XOPEN2K8


413 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

414 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

419 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

420 #ifde‡
__USE_XOPEN2K


428 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


431 #ifde‡
__REDIRECT_NTH


432 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

433 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

434 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2))

435 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

437 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

438 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

439 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

444 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

445 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

448 #ifde‡
__USE_GNU


450 c⁄° *
	$°ªº‹desc_≈
 (
__îr
Ë
__THROW
;

452 c⁄° *
	$°ªº‹«me_≈
 (
__îr
Ë
__THROW
;

456 #ifde‡
__USE_XOPEN2K8


458 *
	$°ªº‹_l
 (
__î∫um
, 
loˇÀ_t
 
__l
Ë
__THROW
;

461 #ifde‡
__USE_MISC


462 
	~<°rögs.h
>

466 
	$ex∂icô_bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1))

467 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

471 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

472 c⁄° *
__ª°ri˘
 
__dñim
)

473 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

476 #ifdef 
__USE_XOPEN2K8


478 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

480 #ifde‡
__USE_GNU


482 c⁄° *
	$sigabbªv_≈
 (
__sig
Ë
__THROW
;

485 c⁄° *
	$sigdes¸_≈
 (
__sig
Ë
__THROW
;

489 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

490 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

491 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

492 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

496 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

497 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

498 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

499 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

500 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

501 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

504 #ifde‡
__USE_MISC


506 
size_t
 
	$°æ˝y
 (*
__ª°ri˘
 
__de°
,

507 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

508 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3));

512 
size_t
 
	$°æˇt
 (*
__ª°ri˘
 
__de°
,

513 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

514 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
	`__©å_ac˚ss
 ((
__ªad_wrôe__
, 1, 3));

517 #ifdef 
__USE_GNU


519 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

520 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

523 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

526 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1))

527 
	`__©å_ac˚ss
 ((
__ªad_wrôe__
, 1, 2));

529 #i‚de‡
ba£«me


534 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


535 "C++" *
	$ba£«me
 (*
__fûíame
)

536 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

537 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

538 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

540 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

545 #i‡
	`__GNUC_PREREQ
 (3,4)

546 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


548 
	~<bôs/°rög_f‹tifõd.h
>

552 
__END_DECLS


	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

21 
	~<„©uªs.h
>

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

26 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

27 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

30 
	g__BEGIN_DECLS


32 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


34 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

35 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

38 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

39 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

42 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

45 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


48 *
	`ödex
 (*
__s
, 
__c
)

49 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

50 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

51 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

53 #i‡
deföed
 
__OPTIMIZE__


54 
__exã∫_Æways_ölöe
 *

55 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


57  
	`__buûtö_ödex
 (
__s
, 
__c
);

60 
__exã∫_Æways_ölöe
 const *

61 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


63  
	`__buûtö_ödex
 (
__s
, 
__c
);

66 
	}
}

68 *
	$ödex
 (c⁄° *
__s
, 
__c
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

73 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


76 *
	`rödex
 (*
__s
, 
__c
)

77 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

79 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #i‡
deföed
 
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


85  
	`__buûtö_rödex
 (
__s
, 
__c
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


91  
	`__buûtö_rödex
 (
__s
, 
__c
);

94 
	}
}

96 *
	$rödex
 (c⁄° *
__s
, 
__c
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

101 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


104 
	$ffs
 (
__i
Ë
__THROW
 
__©åibuã_c⁄°__
;

109 #ifdef 
__USE_MISC


110 
	$ff¶
 (
__l
Ë
__THROW
 
__©åibuã_c⁄°__
;

111 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

112 
__THROW
 
__©åibuã_c⁄°__
;

116 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

117 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

120 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

123 #ifdef 
__USE_XOPEN2K8


125 
	~<bôs/ty≥s/loˇÀ_t.h
>

128 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__loc
)

129 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

133 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

134 
size_t
 
__n
, 
loˇÀ_t
 
__loc
)

135 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

138 
__END_DECLS


140 #i‡
	`__GNUC_PREREQ
 (3,4Ë&& 
__USE_FORTIFY_LEVEL
 > 0 \

141 && 
deföed
 
__f‹tify_fun˘i⁄


143 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


144 
	~<bôs/°rögs_f‹tifõd.h
>

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

129 #unde‡
__USE_ISOC11


130 #unde‡
__USE_ISOC99


131 #unde‡
__USE_ISOC95


132 #unde‡
__USE_ISOCXX11


133 #unde‡
__USE_POSIX


134 #unde‡
__USE_POSIX2


135 #unde‡
__USE_POSIX199309


136 #unde‡
__USE_POSIX199506


137 #unde‡
__USE_XOPEN


138 #unde‡
__USE_XOPEN_EXTENDED


139 #unde‡
__USE_UNIX98


140 #unde‡
__USE_XOPEN2K


141 #unde‡
__USE_XOPEN2KXSI


142 #unde‡
__USE_XOPEN2K8


143 #unde‡
__USE_XOPEN2K8XSI


144 #unde‡
__USE_LARGEFILE


145 #unde‡
__USE_LARGEFILE64


146 #unde‡
__USE_FILE_OFFSET64


147 #unde‡
__USE_MISC


148 #unde‡
__USE_ATFILE


149 #unde‡
__USE_DYNAMIC_STACK_SIZE


150 #unde‡
__USE_GNU


151 #unde‡
__USE_FORTIFY_LEVEL


152 #unde‡
__KERNEL_STRICT_NAMES


153 #unde‡
__GLIBC_USE_ISOC23


154 #unde‡
__GLIBC_USE_ISOC2Y


155 #unde‡
__GLIBC_USE_DEPRECATED_GETS


156 #unde‡
__GLIBC_USE_DEPRECATED_SCANF


157 #unde‡
__GLIBC_USE_C23_STRTOL


161 #i‚de‡
_LOOSE_KERNEL_NAMES


162 
	#__KERNEL_STRICT_NAMES


	)

172 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


173 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

174 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

176 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

183 #i‡
deföed
 
__˛™g_maj‹__
 && deföed 
__˛™g_mö‹__


184 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
) \

185 ((
__˛™g_maj‹__
 << 16Ë+ 
__˛™g_mö‹__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

187 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
Ë0

	)

191 
	#__GLIBC_USE
(
F
Ë
__GLIBC_USE_
 ## 
	)
F

197 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

198 && !
deföed
 
	g_DEFAULT_SOURCE


200 #unde‡
_DEFAULT_SOURCE


201 
	#_DEFAULT_SOURCE
 1

	)

205 #ifde‡
_ISOC2X_SOURCE


206 #unde‡
_ISOC2X_SOURCE


207 #unde‡
_ISOC23_SOURCE


208 
	#_ISOC23_SOURCE
 1

	)

212 #ifde‡
_GNU_SOURCE


213 #unde‡
_ISOC95_SOURCE


214 
	#_ISOC95_SOURCE
 1

	)

215 #unde‡
_ISOC99_SOURCE


216 
	#_ISOC99_SOURCE
 1

	)

217 #unde‡
_ISOC11_SOURCE


218 
	#_ISOC11_SOURCE
 1

	)

219 #unde‡
_ISOC23_SOURCE


220 
	#_ISOC23_SOURCE
 1

	)

221 #unde‡
_ISOC2Y_SOURCE


222 
	#_ISOC2Y_SOURCE
 1

	)

223 #unde‡
_POSIX_SOURCE


224 
	#_POSIX_SOURCE
 1

	)

225 #unde‡
_POSIX_C_SOURCE


226 
	#_POSIX_C_SOURCE
 200809L

	)

227 #unde‡
_XOPEN_SOURCE


228 
	#_XOPEN_SOURCE
 700

	)

229 #unde‡
_XOPEN_SOURCE_EXTENDED


230 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

231 #unde‡
_LARGEFILE64_SOURCE


232 
	#_LARGEFILE64_SOURCE
 1

	)

233 #unde‡
_DEFAULT_SOURCE


234 
	#_DEFAULT_SOURCE
 1

	)

235 #unde‡
_ATFILE_SOURCE


236 
	#_ATFILE_SOURCE
 1

	)

237 #unde‡
_DYNAMIC_STACK_SIZE_SOURCE


238 
	#_DYNAMIC_STACK_SIZE_SOURCE
 1

	)

243 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

244 || (!
deföed
 
	g__STRICT_ANSI__
 \

245 && !
deföed
 
	g_ISOC99_SOURCE
 && !deföed 
	g_ISOC11_SOURCE
 \

246 && !
deföed
 
	g_ISOC23_SOURCE
 && !deföed 
	g_ISOC2Y_SOURCE
 \

247 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

248 && !
deföed
 
	g_XOPEN_SOURCE
))

249 #unde‡
_DEFAULT_SOURCE


250 
	#_DEFAULT_SOURCE
 1

	)

254 #i‡(
deföed
 
_ISOC2Y_SOURCE
 \

255 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ > 202311L))

256 
	#__GLIBC_USE_ISOC2Y
 1

	)

258 
	#__GLIBC_USE_ISOC2Y
 0

	)

262 #i‡(
deföed
 
_ISOC23_SOURCE
 || deföed 
_ISOC2Y_SOURCE
 \

263 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ > 201710L))

264 
	#__GLIBC_USE_ISOC23
 1

	)

266 
	#__GLIBC_USE_ISOC23
 0

	)

270 #i‡(
deföed
 
_ISOC11_SOURCE
 || deföed 
_ISOC23_SOURCE
 \

271 || 
deföed
 
	g_ISOC2Y_SOURCE
 \

272 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

273 
	#__USE_ISOC11
 1

	)

277 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

278 || 
deföed
 
_ISOC23_SOURCE
 || deföed 
_ISOC2Y_SOURCE
 \

279 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

280 
	#__USE_ISOC99
 1

	)

284 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

285 || 
deföed
 
_ISOC23_SOURCE
 || deföed 
_ISOC2Y_SOURCE
 \

286 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

287 
	#__USE_ISOC95
 1

	)

290 #ifde‡
__˝lu•lus


292 #i‡
__˝lu•lus
 >= 201703L

293 
	#__USE_ISOC11
 1

	)

297 #i‡
__˝lu•lus
 >201103L || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__


298 
	#__USE_ISOCXX11
 1

	)

299 
	#__USE_ISOC99
 1

	)

306 #ifde‡
_DEFAULT_SOURCE


307 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


308 
	#__USE_POSIX_IMPLICITLY
 1

	)

310 #unde‡
_POSIX_SOURCE


311 
	#_POSIX_SOURCE
 1

	)

312 #unde‡
_POSIX_C_SOURCE


313 
	#_POSIX_C_SOURCE
 200809L

	)

316 #i‡((!
deföed
 
__STRICT_ANSI__
 \

317 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

318 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

319 
	#_POSIX_SOURCE
 1

	)

320 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

321 
	#_POSIX_C_SOURCE
 2

	)

322 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

323 
	#_POSIX_C_SOURCE
 199506L

	)

324 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

325 
	#_POSIX_C_SOURCE
 200112L

	)

327 
	#_POSIX_C_SOURCE
 200809L

	)

329 
	#__USE_POSIX_IMPLICITLY
 1

	)

338 #i‡((!
deföed
 
_POSIX_C_SOURCE
 || (_POSIX_C_SOURCE - 0) < 199506L) \

339 && (
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE
))

340 
	#_POSIX_SOURCE
 1

	)

341 #unde‡
_POSIX_C_SOURCE


342 
	#_POSIX_C_SOURCE
 199506L

	)

345 #i‡(
deföed
 
_POSIX_SOURCE
 \

346 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

347 || 
deföed
 
_XOPEN_SOURCE
)

348 
	#__USE_POSIX
 1

	)

351 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


352 
	#__USE_POSIX2
 1

	)

355 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

356 
	#__USE_POSIX199309
 1

	)

359 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

360 
	#__USE_POSIX199506
 1

	)

363 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

364 
	#__USE_XOPEN2K
 1

	)

365 #unde‡
__USE_ISOC95


366 
	#__USE_ISOC95
 1

	)

367 #unde‡
__USE_ISOC99


368 
	#__USE_ISOC99
 1

	)

371 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

372 
	#__USE_XOPEN2K8
 1

	)

373 #unde‡
_ATFILE_SOURCE


374 
	#_ATFILE_SOURCE
 1

	)

377 #ifdef 
_XOPEN_SOURCE


378 
	#__USE_XOPEN
 1

	)

379 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

380 
	#__USE_XOPEN_EXTENDED
 1

	)

381 
	#__USE_UNIX98
 1

	)

382 #unde‡
_LARGEFILE_SOURCE


383 
	#_LARGEFILE_SOURCE
 1

	)

384 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

385 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

386 
	#__USE_XOPEN2K8
 1

	)

387 
	#__USE_XOPEN2K8XSI
 1

	)

389 
	#__USE_XOPEN2K
 1

	)

390 
	#__USE_XOPEN2KXSI
 1

	)

391 #unde‡
__USE_ISOC95


392 
	#__USE_ISOC95
 1

	)

393 #unde‡
__USE_ISOC99


394 
	#__USE_ISOC99
 1

	)

397 #ifde‡
_XOPEN_SOURCE_EXTENDED


398 
	#__USE_XOPEN_EXTENDED
 1

	)

403 #ifde‡
_LARGEFILE_SOURCE


404 
	#__USE_LARGEFILE
 1

	)

407 #ifde‡
_LARGEFILE64_SOURCE


408 
	#__USE_LARGEFILE64
 1

	)

411 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

412 
	#__USE_FILE_OFFSET64
 1

	)

415 
	~<„©uªs-time64.h
>

417 #i‡
deföed
 
_DEFAULT_SOURCE


418 
	#__USE_MISC
 1

	)

421 #ifdef 
_ATFILE_SOURCE


422 
	#__USE_ATFILE
 1

	)

425 #ifdef 
_DYNAMIC_STACK_SIZE_SOURCE


426 
	#__USE_DYNAMIC_STACK_SIZE
 1

	)

429 #ifdef 
_GNU_SOURCE


430 
	#__USE_GNU
 1

	)

433 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

434 && 
deföed
 
__OPTIMIZE__
 && __OPTIMIZE__ > 0

435 #i‡!
__GNUC_PREREQ
 (4, 1)

436 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
GCC
 4.1 
‹
 
œãr


437 #ñi‡
_FORTIFY_SOURCE
 > 2 && (
__glibc_˛™g_¥îeq
 (9, 0) \

438 || 
	$__GNUC_PREREQ
 (12, 0))

440 #i‡
_FORTIFY_SOURCE
 > 3

441 #w¨nög 
_FORTIFY_SOURCE
 > 3 
is
 
åóãd
 
like
 3 
⁄
 
this
 
∂©f‹m


443 
	#__USE_FORTIFY_LEVEL
 3

	)

444 #ñi‡
_FORTIFY_SOURCE
 > 1

445 #i‡
_FORTIFY_SOURCE
 > 2

446 #w¨nög 
_FORTIFY_SOURCE
 > 2 
is
 
åóãd
 
like
 2 
⁄
 
this
 
∂©f‹m


448 
	#__USE_FORTIFY_LEVEL
 2

	)

450 
	#__USE_FORTIFY_LEVEL
 1

	)

453 #i‚de‡
__USE_FORTIFY_LEVEL


454 
	#__USE_FORTIFY_LEVEL
 0

	)

461 #i‡
deföed
 
__˝lu•lus
 ? __˝lu•lu†>201402L : deföed 
__USE_ISOC11


462 
	#__GLIBC_USE_DEPRECATED_GETS
 0

	)

464 
	#__GLIBC_USE_DEPRECATED_GETS
 1

	)

479 #i‡(
deföed
 
__USE_GNU
 \

480 && (
deföed
 
__˝lu•lus
 \

481 ? (
__˝lu•lus
 < 201103L && !
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
) \

482 : (!
deföed
 
__STDC_VERSION__
 || __STDC_VERSION__ < 199901L)))

483 
	#__GLIBC_USE_DEPRECATED_SCANF
 1

	)

485 
	#__GLIBC_USE_DEPRECATED_SCANF
 0

	)

493 #i‡
	`__GLIBC_USE
 (
ISOC23
)

494 
	#__GLIBC_USE_C23_STRTOL
 1

	)

496 
	#__GLIBC_USE_C23_STRTOL
 0

	)

501 
	~<°dc-¥edef.h
>

509 #unde‡
__GNU_LIBRARY__


510 
	#__GNU_LIBRARY__
 6

	)

514 
	#__GLIBC__
 2

	)

515 
	#__GLIBC_MINOR__
 41

	)

517 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

518 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

521 #i‚de‡
__ASSEMBLER__


522 #i‚de‡
_SYS_CDEFS_H


523 
	~<sys/cdefs.h
>

528 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


529 
	#__USE_LARGEFILE
 1

	)

530 
	#__USE_LARGEFILE64
 1

	)

536 #i‡
	`__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

537 && !
deföed
 
__OPTIMIZE_SIZE__
 && !deföed 
__NO_INLINE__
 \

538 && 
deföed
 
__exã∫_ölöe


539 
	#__USE_EXTERN_INLINES
 1

	)

547 
	~<gnu/°ubs.h
>

	@/usr/include/features-time64.h

20 
	~<bôs/w‹dsize.h
>

21 
	~<bôs/timesize.h
>

23 #i‡
deföed
 
_TIME_BITS


24 #i‡
_TIME_BITS
 == 64

25 #i‡! 
deföed
 (
_FILE_OFFSET_BITS
) || _FILE_OFFSET_BITS != 64

28 
	#__USE_TIME_BITS64
 1

	)

29 #ñi‡
_TIME_BITS
 == 32

30 #i‡
__TIMESIZE
 > 32

34 #îr‹ 
InvÆid
 
_TIME_BITS
 
vÆue
 (
ˇn
 
⁄ly
 
be
 32 
‹
 64-
bô
)

36 #ñi‡
__TIMESIZE
 == 64

37 
	#__USE_TIME_BITS64
 1

	)

40 #i‡
deföed
 
__USE_TIME_BITS64
 && 
__TIMESIZE
 == 32

41 
	#__USE_TIME64_REDIRECTS
 1

	)

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

39 
	#__STDC_IEC_60559_BFP__
 201404L

	)

42 
	#__STDC_IEC_559__
 1

	)

43 
	#__STDC_IEC_60559_BFP__
 201404L

	)

46 #ifde‡
__GCC_IEC_559_COMPLEX


47 #i‡
__GCC_IEC_559_COMPLEX
 > 0

48 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_60559_COMPLEX__
 201404L

	)

52 
	#__STDC_IEC_559_COMPLEX__
 1

	)

53 
	#__STDC_IEC_60559_COMPLEX__
 201404L

	)

62 
	#__STDC_ISO_10646__
 201706L

	)

	@
1
.
1
/usr/include
130
3703
compat-autoconf.h
compat-include/linux/array_size.h
compat-include/linux/average.h
compat-include/linux/compiler_types.h
compat-include/linux/container_of.h
compat-include/linux/etherdevice.h
compat-include/linux/if_bridge.h
compat-include/linux/if_vlan.h
compat-include/linux/kstrtox.h
compat-include/linux/minmax.h
compat-include/linux/netdevice.h
compat-include/linux/overflow.h
compat-include/linux/random.h
compat-include/linux/rcupdate.h
compat-include/linux/sprintf.h
compat-include/linux/stdarg.h
compat-include/linux/string_choices.h
compat-include/linux/timer.h
compat-include/linux/tracepoint.h
compat-include/linux/unaligned.h
compat-include/linux/version.h
compat-include/net/addrconf.h
compat-include/net/genetlink.h
compat.h
include/uapi/linux/batadv_packet.h
include/uapi/linux/batman_adv.h
net/batman-adv/bat_algo.c
net/batman-adv/bat_algo.h
net/batman-adv/bat_iv_ogm.c
net/batman-adv/bat_iv_ogm.h
net/batman-adv/bat_v.c
net/batman-adv/bat_v.h
net/batman-adv/bat_v_elp.c
net/batman-adv/bat_v_elp.h
net/batman-adv/bat_v_ogm.c
net/batman-adv/bat_v_ogm.h
net/batman-adv/batman-adv.mod.c
net/batman-adv/bitarray.c
net/batman-adv/bitarray.h
net/batman-adv/bridge_loop_avoidance.c
net/batman-adv/bridge_loop_avoidance.h
net/batman-adv/distributed-arp-table.c
net/batman-adv/distributed-arp-table.h
net/batman-adv/fragmentation.c
net/batman-adv/fragmentation.h
net/batman-adv/gateway_client.c
net/batman-adv/gateway_client.h
net/batman-adv/gateway_common.c
net/batman-adv/gateway_common.h
net/batman-adv/hard-interface.c
net/batman-adv/hard-interface.h
net/batman-adv/hash.c
net/batman-adv/hash.h
net/batman-adv/log.c
net/batman-adv/log.h
net/batman-adv/main.c
net/batman-adv/main.h
net/batman-adv/mesh-interface.c
net/batman-adv/mesh-interface.h
net/batman-adv/multicast.c
net/batman-adv/multicast.h
net/batman-adv/multicast_forw.c
net/batman-adv/netlink.c
net/batman-adv/netlink.h
net/batman-adv/network-coding.c
net/batman-adv/network-coding.h
net/batman-adv/originator.c
net/batman-adv/originator.h
net/batman-adv/routing.c
net/batman-adv/routing.h
net/batman-adv/send.c
net/batman-adv/send.h
net/batman-adv/tp_meter.c
net/batman-adv/tp_meter.h
net/batman-adv/trace.c
net/batman-adv/trace.h
net/batman-adv/translation-table.c
net/batman-adv/translation-table.h
net/batman-adv/tvlv.c
net/batman-adv/tvlv.h
net/batman-adv/types.h
/usr/include/linux/errno.h
/usr/include/linux/ethtool.h
/usr/include/linux/icmpv6.h
/usr/include/linux/if.h
/usr/include/linux/if_arp.h
/usr/include/linux/if_bridge.h
/usr/include/linux/if_ether.h
/usr/include/linux/if_packet.h
/usr/include/linux/if_vlan.h
/usr/include/linux/igmp.h
/usr/include/linux/in.h
/usr/include/linux/in6.h
/usr/include/linux/ip.h
/usr/include/linux/ipv6.h
/usr/include/linux/kernel.h
/usr/include/linux/limits.h
/usr/include/linux/module.h
/usr/include/linux/net.h
/usr/include/linux/netdevice.h
/usr/include/linux/netlink.h
/usr/include/linux/nl80211.h
/usr/include/linux/param.h
/usr/include/linux/pkt_sched.h
/usr/include/linux/random.h
/usr/include/linux/rtnetlink.h
/usr/include/linux/sched.h
/usr/include/linux/socket.h
/usr/include/linux/stddef.h
/usr/include/linux/string.h
/usr/include/linux/types.h
/usr/include/linux/udp.h
/usr/include/linux/version.h
/usr/include/linux/wait.h
/usr/include/limits.h
/usr/include/linux/const.h
/usr/include/linux/hdlc/ioctl.h
/usr/include/linux/if_addr.h
/usr/include/linux/if_link.h
/usr/include/linux/ioctl.h
/usr/include/linux/irqnr.h
/usr/include/linux/libc-compat.h
/usr/include/linux/neighbour.h
/usr/include/linux/posix_types.h
/usr/include/linux/sysinfo.h
/usr/include/string.h
/usr/include/strings.h
/usr/include/features.h
/usr/include/features-time64.h
/usr/include/stdc-predef.h
